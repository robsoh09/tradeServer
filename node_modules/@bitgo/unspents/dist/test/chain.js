"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/ban-ts-comment */
const should_1 = __importDefault(require("should"));
const src_1 = require("../src");
describe('chain codes', function () {
    const externalList = [src_1.Codes.external.p2sh, src_1.Codes.external.p2shP2wsh, src_1.Codes.external.p2wsh, src_1.Codes.external.p2tr];
    const internalList = [src_1.Codes.internal.p2sh, src_1.Codes.internal.p2shP2wsh, src_1.Codes.internal.p2wsh, src_1.Codes.internal.p2tr];
    const purposeByScriptTypeList = [src_1.Codes.p2sh, src_1.Codes.p2shP2wsh, src_1.Codes.p2wsh, src_1.Codes.p2tr];
    const supportedUnspentTypeList = [
        src_1.CodesTypes.UnspentType.p2sh,
        src_1.CodesTypes.UnspentType.p2shP2wsh,
        src_1.CodesTypes.UnspentType.p2wsh,
        src_1.CodesTypes.UnspentType.p2tr,
    ];
    const unsupportedUnspentTypeList = [src_1.CodesTypes.UnspentType.p2pkh, src_1.CodesTypes.UnspentType.p2wpkh];
    it(`is immutable`, function () {
        const p2sh = src_1.Codes.internal.p2sh;
        should_1.default.throws(() => {
            // @ts-ignore
            src_1.Codes.internal.p2sh = -1;
        }, TypeError);
        src_1.Codes.internal.p2sh.should.eql(p2sh);
        should_1.default.throws(() => {
            // @ts-ignore
            src_1.Codes.internal.values.push(-1);
        }, TypeError);
        should_1.default.throws(() => {
            // @ts-ignore
            src_1.Codes.internal.values = [];
        }, TypeError);
        src_1.Codes.internal.values.should.eql([1, 11, 21, 31]);
        should_1.default.throws(() => {
            // @ts-ignore
            src_1.Codes.all = [];
        });
        src_1.Codes.all.should.not.be.empty();
    });
    it('matches expected values', function () {
        externalList.should.eql([src_1.Codes.p2sh.external, src_1.Codes.p2shP2wsh.external, src_1.Codes.p2wsh.external, src_1.Codes.p2tr.external]);
        externalList.should.eql([0, 10, 20, 30]);
        externalList.should.eql([...src_1.Codes.external.values]);
        src_1.Codes.all.should.eql([...externalList, ...internalList]);
        internalList.should.eql([src_1.Codes.p2sh.internal, src_1.Codes.p2shP2wsh.internal, src_1.Codes.p2wsh.internal, src_1.Codes.p2tr.internal]);
        internalList.should.eql([1, 11, 21, 31]);
        internalList.should.eql([...src_1.Codes.internal.values]);
    });
    it('are grouped correctly', function () {
        internalList.should.matchEach(src_1.Codes.isInternal);
        externalList.should.matchEach(src_1.Codes.isExternal);
        // all are either internal or external, never none or both
        src_1.Codes.all.should.matchEach((code) => !!(src_1.Codes.isExternal(code) !== src_1.Codes.isInternal(code)));
        src_1.Codes.p2sh.values.should.matchEach(src_1.Codes.isP2sh);
        src_1.Codes.p2shP2wsh.values.should.matchEach(src_1.Codes.isP2shP2wsh);
        src_1.Codes.p2wsh.values.should.matchEach(src_1.Codes.isP2wsh);
        src_1.Codes.p2tr.values.should.matchEach(src_1.Codes.isP2tr);
        // every code has exactly one address type
        src_1.Codes.all.should.matchEach((code) => 1 ===
            [src_1.Codes.isP2sh(code), src_1.Codes.isP2wsh(code), src_1.Codes.isP2shP2wsh(code), src_1.Codes.isP2tr(code)].reduce((sum, v) => sum + Number(v), 0));
        src_1.Codes.all.should.matchEach(src_1.Codes.isValid);
    });
    const invalidInputs = [undefined, null, 'lol', -1, 42];
    it('throws correct error for invalid input', function () {
        [
            src_1.Codes.isInternal,
            src_1.Codes.isExternal,
            src_1.Codes.isP2sh,
            src_1.Codes.isP2shP2wsh,
            src_1.Codes.isP2wsh,
            src_1.Codes.isP2tr,
            src_1.Codes.typeForCode,
        ].forEach((func) => 
        // @ts-ignore
        invalidInputs.forEach((input) => should_1.default.throws(() => func(input), src_1.Codes.ErrorInvalidCode)));
        invalidInputs.should.matchEach((input) => !src_1.Codes.isValid(input));
    });
    it('map to unspent types', function () {
        [...externalList, ...internalList].forEach((code, index) => src_1.Codes.typeForCode(code).should.equal([...supportedUnspentTypeList, ...supportedUnspentTypeList][index]));
    });
    it('map from unspent types', function () {
        supportedUnspentTypeList.forEach((type, index) => src_1.Codes.forType(type).should.eql(purposeByScriptTypeList[index]));
        unsupportedUnspentTypeList.forEach((type) => should_1.default.throws(() => src_1.Codes.forType(type)));
    });
    it(`has chain type`, function () {
        src_1.Codes.all.should.matchEach((code) => src_1.Codes.ChainCodeTcomb(code) === code && src_1.Codes.ChainCodeTcomb.is(code));
        invalidInputs.forEach((code) => should_1.default.throws(() => src_1.Codes.ChainCodeTcomb(code)));
    });
});
//# sourceMappingURL=data:application/json;base64,