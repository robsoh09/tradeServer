"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/ban-ts-comment */
const should = __importStar(require("should"));
const utxo_lib_1 = require("@bitgo/utxo-lib");
const { chainCodes, chainCodesP2sh, chainCodesP2shP2wsh, chainCodesP2tr, chainCodesP2trMusig2, chainCodesP2wsh } = utxo_lib_1.bitgo;
const src_1 = require("../src");
const testutils_1 = require("./testutils");
describe('Dimensions Attributes', function () {
    it('has read-only nInputs and nOutputs', function () {
        should.throws(() => (src_1.Dimensions.ZERO.nInputs = 1), /read-only/);
        should.throws(() => (src_1.Dimensions.ZERO.nOutputs = 1), /read-only/);
    });
});
describe('Output Dimensions', function () {
    it('instantiates', function () {
        const dims = new src_1.OutputDimensions({ size: 0, count: 0 });
        should.throws(() => (dims.count += 1));
    });
});
describe('Dimensions Arithmetic', function () {
    it('sums correctly', function () {
        src_1.Dimensions.zero()
            .plus({ nP2shInputs: 1 })
            .should.eql(new src_1.Dimensions({
            nP2shInputs: 1,
            nP2shP2wshInputs: 0,
            nP2wshInputs: 0,
            nP2trKeypathInputs: 0,
            nP2trScriptPathLevel1Inputs: 0,
            nP2trScriptPathLevel2Inputs: 0,
            nP2shP2pkInputs: 0,
            outputs: { size: 0, count: 0 },
        }));
        const components = [
            { nP2shInputs: 1 },
            { nP2shP2wshInputs: 2 },
            { nP2wshInputs: 3 },
            { nP2trKeypathInputs: 4 },
            { nP2trScriptPathLevel1Inputs: 5 },
            { nP2trScriptPathLevel2Inputs: 6 },
            { outputs: { size: 23, count: 1 } },
            { outputs: { size: 44, count: 2 } },
            { outputs: { size: 0, count: 0 } },
        ];
        components.forEach((component) => should.doesNotThrow(() => src_1.Dimensions.sum(component)));
        const sum = components.reduce((a, b) => a.plus(b), src_1.Dimensions.zero());
        sum.should.eql(src_1.Dimensions.sum(...components));
        sum.should.eql(new src_1.Dimensions({
            nP2shInputs: 1,
            nP2shP2wshInputs: 2,
            nP2wshInputs: 3,
            nP2trKeypathInputs: 4,
            nP2trScriptPathLevel1Inputs: 5,
            nP2trScriptPathLevel2Inputs: 6,
            nP2shP2pkInputs: 0,
            outputs: { size: 67, count: 3 },
        }));
        sum.nOutputs.should.eql(sum.outputs.count);
    });
    it('provides some typical output sizes', function () {
        [
            [src_1.Dimensions.SingleOutput.p2sh, src_1.VirtualSizes.txP2shOutputSize],
            [src_1.Dimensions.SingleOutput.p2shP2wsh, src_1.VirtualSizes.txP2shP2wshOutputSize],
            [src_1.Dimensions.SingleOutput.p2wsh, src_1.VirtualSizes.txP2wshOutputSize],
            [src_1.Dimensions.SingleOutput.p2pkh, src_1.VirtualSizes.txP2pkhOutputSize],
            [src_1.Dimensions.SingleOutput.p2wpkh, src_1.VirtualSizes.txP2wpkhOutputSize],
            [src_1.Dimensions.SingleOutput.p2tr, src_1.VirtualSizes.txP2trOutputSize],
        ].forEach(([dims, size]) => {
            dims.getOutputsVSize().should.eql(size);
        });
    });
    it('prevents sum of invalid data', function () {
        should.doesNotThrow(() => src_1.Dimensions.sum({ outputs: { count: 0, size: 0 } }));
        should.doesNotThrow(() => src_1.Dimensions.sum({ outputs: { count: 1, size: 1 } }));
        should.throws(() => src_1.Dimensions.sum({ nOutputs: 1 }));
        should.throws(() => src_1.Dimensions.sum({ nOutputs: 1, outputs: { count: 2, size: 1 } }));
        // @ts-ignore
        should.throws(() => src_1.Dimensions.sum({ nP2shInputs: 1 }, { nP2shInputs: 'foo' }));
        should.throws(() => src_1.Dimensions.sum({ outputs: { count: 1, size: 0 } }));
        should.throws(() => src_1.Dimensions.sum({ outputs: { count: 0, size: 1 } }));
        should.throws(() => src_1.Dimensions.sum({ outputs: { count: 1, size: 1 } }, { outputs: { count: 1, size: 0 } }));
    });
    it('counts inputs correctly', function () {
        Object.entries(src_1.Dimensions.SingleInput).forEach(([key, value]) => {
            value.nInputs.should.eql(1, key);
        });
    });
    it('multiplies correctly', function () {
        const d = new src_1.Dimensions({
            nP2shInputs: 1,
            nP2shP2wshInputs: 2,
            nP2wshInputs: 3,
            nP2trKeypathInputs: 4,
            nP2trScriptPathLevel1Inputs: 5,
            nP2trScriptPathLevel2Inputs: 6,
            nP2shP2pkInputs: 7,
            outputs: { count: 1, size: 22 },
        }).times(3);
        d.should.eql(new src_1.Dimensions({
            nP2shInputs: 3,
            nP2shP2wshInputs: 6,
            nP2wshInputs: 9,
            nP2trKeypathInputs: 12,
            nP2trScriptPathLevel1Inputs: 15,
            nP2trScriptPathLevel2Inputs: 18,
            nP2shP2pkInputs: 21,
            outputs: { count: 3, size: 66 },
        }));
        d.getNInputs().should.eql(84);
        d.nInputs.should.eql(84);
    });
});
describe('Dimensions from unspent types', function () {
    it('determines unspent size according to chain', function () {
        chainCodesP2sh.forEach((chain) => src_1.Dimensions.fromUnspent({ chain }).should.eql(src_1.Dimensions.sum({ nP2shInputs: 1 })));
        chainCodesP2shP2wsh.forEach((chain) => src_1.Dimensions.fromUnspent({ chain }).should.eql(src_1.Dimensions.sum({ nP2shP2wshInputs: 1 })));
        chainCodesP2wsh.forEach((chain) => src_1.Dimensions.fromUnspent({ chain }).should.eql(src_1.Dimensions.sum({ nP2wshInputs: 1 })));
        chainCodesP2tr.forEach((chain) => {
            src_1.Dimensions.fromUnspent({ chain }).should.eql(src_1.Dimensions.sum({ nP2trScriptPathLevel2Inputs: 1 }));
            src_1.Dimensions.fromUnspent({ chain }, { p2tr: { scriptPathLevel: 1 }, p2trMusig2: { scriptPathLevel: undefined } }).should.eql(src_1.Dimensions.sum({ nP2trScriptPathLevel1Inputs: 1 }));
        });
        chainCodesP2trMusig2.forEach((chain) => {
            src_1.Dimensions.fromUnspent({ chain }).should.eql(src_1.Dimensions.sum({ nP2trScriptPathLevel1Inputs: 1 }));
            src_1.Dimensions.fromUnspent({ chain }, { p2tr: { scriptPathLevel: undefined }, p2trMusig2: { scriptPathLevel: undefined } }).should.eql(src_1.Dimensions.sum({ nP2trKeypathInputs: 1 }));
        });
        src_1.Dimensions.fromUnspents(chainCodes.map((chain) => ({ chain }))).should.eql(new src_1.Dimensions({
            nP2shP2wshInputs: 2,
            nP2shInputs: 2,
            nP2wshInputs: 2,
            nP2trKeypathInputs: 0,
            nP2trScriptPathLevel1Inputs: 2,
            nP2trScriptPathLevel2Inputs: 2,
            nP2shP2pkInputs: 0,
            outputs: { count: 0, size: 0 },
        }));
        src_1.Dimensions.fromUnspents(chainCodes.map((chain) => ({ chain })), { p2tr: { scriptPathLevel: 1 }, p2trMusig2: { scriptPathLevel: undefined } }).should.eql(new src_1.Dimensions({
            nP2shP2wshInputs: 2,
            nP2shInputs: 2,
            nP2wshInputs: 2,
            nP2trKeypathInputs: 2,
            nP2trScriptPathLevel1Inputs: 2,
            nP2trScriptPathLevel2Inputs: 0,
            nP2shP2pkInputs: 0,
            outputs: { count: 0, size: 0 },
        }));
    });
    it('calculates output dimensions dynamically', function () {
        const expectedSizes = new Map([
            [testutils_1.UnspentTypeScript2of3.p2sh, src_1.VirtualSizes.txP2shOutputSize],
            [testutils_1.UnspentTypeScript2of3.p2shP2wsh, src_1.VirtualSizes.txP2shP2wshOutputSize],
            [testutils_1.UnspentTypeScript2of3.p2wsh, src_1.VirtualSizes.txP2wshOutputSize],
            [testutils_1.UnspentTypeScript2of3.p2tr, src_1.VirtualSizes.txP2trOutputSize],
            [testutils_1.UnspentTypeScript2of3.p2trMusig2, src_1.VirtualSizes.txP2trOutputSize],
            [testutils_1.UnspentTypeScript2of3.taprootKeyPathSpend, src_1.VirtualSizes.txP2trOutputSize],
            [testutils_1.UnspentTypePubKeyHash.p2pkh, src_1.VirtualSizes.txP2pkhOutputSize],
            [testutils_1.UnspentTypePubKeyHash.p2wpkh, src_1.VirtualSizes.txP2wpkhOutputSize],
        ]);
        [...Object.keys(testutils_1.UnspentTypeScript2of3), ...Object.keys(testutils_1.UnspentTypePubKeyHash)].forEach((type) => (0, testutils_1.getOutputDimensionsForUnspentType)(type).outputs.size.should.eql(expectedSizes.get(type)));
    });
});
describe('Dimensions estimates', function () {
    it('calculates vsizes', function () {
        function dim(nP2shInputs, nP2shP2wshInputs, nP2wshInputs, nOutputs) {
            return src_1.Dimensions.sum({
                nP2shInputs,
                nP2shP2wshInputs,
                nP2wshInputs,
            }, (0, testutils_1.getOutputDimensionsForUnspentType)(testutils_1.UnspentTypePubKeyHash.p2pkh).times(nOutputs));
        }
        function dimP2tr(nP2trKeypathInputs, nP2trScriptPathLevel1Inputs, nP2trScriptPathLevel2Inputs, nOutputs) {
            return src_1.Dimensions.sum({
                nP2trKeypathInputs,
                nP2trScriptPathLevel1Inputs,
                nP2trScriptPathLevel2Inputs,
            }, (0, testutils_1.getOutputDimensionsForUnspentType)(testutils_1.UnspentTypePubKeyHash.p2pkh).times(nOutputs));
        }
        const vectors = [
            [dim(1, 0, 0, 1), [false, 10, 298, 34, 342]],
            [dim(0, 1, 0, 1), [true, 11, 140, 34, 185]],
            [dim(0, 0, 1, 1), [true, 11, 105, 34, 150]],
            [dim(2, 0, 0, 1), [false, 10, 596, 34, 640]],
            [dim(0, 2, 0, 1), [true, 11, 280, 34, 325]],
            [dim(0, 0, 2, 1), [true, 11, 210, 34, 255]],
            [dim(1, 1, 1, 1), [true, 11, 543, 34, 588]],
            [dim(1, 1, 1, 2), [true, 11, 543, 68, 622]],
            [dimP2tr(1, 0, 0, 1), [true, 11, 58, 34, 103]],
            [dimP2tr(0, 1, 0, 1), [true, 11, 108, 34, 153]],
            [dimP2tr(0, 0, 1, 1), [true, 11, 116, 34, 161]],
        ];
        vectors.forEach(([dimensions, props]) => {
            [
                dimensions.isSegwit(),
                dimensions.getOverheadVSize(),
                dimensions.getInputsVSize(),
                dimensions.getOutputsVSize(),
                dimensions.getVSize(),
            ].should.eql(props);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,