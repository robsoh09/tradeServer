"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const should_1 = __importDefault(require("should"));
const src_1 = require("../../src");
const testutils_1 = require("../testutils");
const txGen_1 = require("./txGen");
const utxolib = __importStar(require("@bitgo/utxo-lib"));
const keys = [1, 2, 3].map((v) => utxolib.bip32.fromSeed(Buffer.alloc(16, `test/2/${v}`), utxolib.networks.bitcoin));
const rootWalletKeys = new utxolib.bitgo.RootWalletKeys([keys[0], keys[1], keys[2]]);
const testDimensionsFromTx = (txCombo) => {
    const { inputTypes, outputTypes, expectedDims } = txCombo;
    describe(`Combination inputs=${inputTypes}; outputs=${outputTypes}`, function () {
        const nInputs = inputTypes.length;
        const outputDims = src_1.Dimensions.sum(...outputTypes.map(testutils_1.getOutputDimensionsForUnspentType));
        it(`calculates dimensions from unsigned transaction`, function () {
            const unsignedTx = txCombo.getUnsignedTx();
            // does not work for unsigned transactions
            should_1.default.throws(() => src_1.Dimensions.fromTransaction(unsignedTx));
            // unless explicitly allowed
            src_1.Dimensions.fromTransaction(unsignedTx, { assumeUnsigned: src_1.Dimensions.ASSUME_P2SH }).should.eql(src_1.Dimensions.sum({ nP2shInputs: nInputs }, outputDims));
            src_1.Dimensions.fromTransaction(unsignedTx, { assumeUnsigned: src_1.Dimensions.ASSUME_P2SH_P2WSH }).should.eql(src_1.Dimensions.sum({ nP2shP2wshInputs: nInputs }, outputDims));
            src_1.Dimensions.fromTransaction(unsignedTx, { assumeUnsigned: src_1.Dimensions.ASSUME_P2WSH }).should.eql(src_1.Dimensions.sum({ nP2wshInputs: nInputs }, outputDims));
        });
        it(`calculates dimensions for signed transaction`, function () {
            const dimensions = src_1.Dimensions.fromTransaction(txCombo.getSignedTx());
            dimensions.should.eql(expectedDims);
        });
        it(`calculates dimensions for signed input of transaction`, function () {
            const signedTx = txCombo.getSignedTx();
            // test Dimensions.fromInput()
            inputTypes.forEach((input, i) => src_1.Dimensions.fromInput(signedTx.ins[i]).should.eql(src_1.Dimensions.sum((0, testutils_1.getInputDimensionsForUnspentType)(input))));
        });
    });
};
const testDimensionsFromPsbt = (keys, inputTypes, outputTypes, expectedDims) => {
    describe(`Psbt Combination inputs=${inputTypes}; outputs=${outputTypes}`, function () {
        ['unsigned', 'halfsigned', 'fullysigned'].forEach((s) => {
            it(`calculates dimensions from ${s} psbt`, function () {
                const dimensions = src_1.Dimensions.fromPsbt((0, testutils_1.constructPsbt)(keys, inputTypes, outputTypes, s));
                dimensions.should.eql(expectedDims);
            });
        });
        it(`calculates dimensions for signed input of psbt`, function () {
            const signedPsbt = (0, testutils_1.constructPsbt)(keys, inputTypes, outputTypes, 'fullysigned');
            inputTypes.forEach((input, i) => src_1.Dimensions.fromPsbtInput(signedPsbt.data.inputs[i]).should.eql(src_1.Dimensions.sum((0, testutils_1.getInputDimensionsForUnspentType)(input))));
        });
    });
};
describe(`Dimensions for transaction combinations`, function () {
    // p2trMusig2 is supported only with PSBT
    const scriptTypes = utxolib.bitgo.outputScripts.scriptTypes2Of3.filter((t) => t !== 'p2trMusig2');
    const params = {
        inputTypes: [...scriptTypes, testutils_1.UnspentTypeP2shP2pk],
        maxNInputs: 2,
        outputTypes: [...scriptTypes, ...Object.keys(testutils_1.UnspentTypePubKeyHash)],
        maxNOutputs: 2,
    };
    (0, txGen_1.runCombinations)(params, (inputTypeCombo, outputTypeCombo) => {
        const expectedInputDims = src_1.Dimensions.sum(...inputTypeCombo.map(testutils_1.getInputDimensionsForUnspentType));
        const expectedOutputDims = src_1.Dimensions.sum(...outputTypeCombo.map(testutils_1.getOutputDimensionsForUnspentType));
        testDimensionsFromTx(new txGen_1.TxCombo(keys, inputTypeCombo, outputTypeCombo, expectedInputDims.plus(expectedOutputDims)));
        // Doubling the inputs should yield twice the input dims
        testDimensionsFromTx(new txGen_1.TxCombo(keys, [...inputTypeCombo, ...inputTypeCombo], outputTypeCombo, expectedInputDims.plus(expectedInputDims).plus(expectedOutputDims)));
        // Same for outputs
        testDimensionsFromTx(new txGen_1.TxCombo(keys, inputTypeCombo, [...outputTypeCombo, ...outputTypeCombo], expectedInputDims.plus(expectedOutputDims).plus(expectedOutputDims)));
    });
});
describe(`Dimensions for PSBT combinations`, function () {
    const params = {
        inputTypes: [
            ...utxolib.bitgo.outputScripts.scriptTypes2Of3,
            utxolib.bitgo.outputScripts.scriptTypeP2shP2pk,
            'taprootKeyPathSpend',
        ],
        maxNInputs: 1,
        outputTypes: [...Object.keys(testutils_1.UnspentTypeScript2of3), ...Object.keys(testutils_1.UnspentTypePubKeyHash)],
        maxNOutputs: 1,
    };
    it(`does not work for unknown psbt input`, function () {
        const psbt = utxolib.bitgo.createPsbtForNetwork({ network: utxolib.networks.bitcoin });
        psbt.addInput({ hash: Buffer.alloc(32), index: 0 });
        should_1.default.throws(() => src_1.Dimensions.fromPsbt(psbt));
    });
    (0, txGen_1.runCombinations)(params, (inputTypeCombo, outputTypeCombo) => {
        const expectedInputDims = src_1.Dimensions.sum(...inputTypeCombo.map(testutils_1.getInputDimensionsForUnspentType));
        const expectedOutputDims = src_1.Dimensions.sum(...outputTypeCombo.map(testutils_1.getOutputDimensionsForUnspentType));
        testDimensionsFromPsbt(rootWalletKeys, inputTypeCombo, outputTypeCombo, expectedInputDims.plus(expectedOutputDims));
        // Doubling the inputs should yield twice the input dims
        testDimensionsFromPsbt(rootWalletKeys, [...inputTypeCombo, ...inputTypeCombo], outputTypeCombo, expectedInputDims.plus(expectedInputDims).plus(expectedOutputDims));
        // Same for outputs
        testDimensionsFromPsbt(rootWalletKeys, inputTypeCombo, [...outputTypeCombo, ...outputTypeCombo], expectedInputDims.plus(expectedOutputDims).plus(expectedOutputDims));
    });
});
//# sourceMappingURL=data:application/json;base64,