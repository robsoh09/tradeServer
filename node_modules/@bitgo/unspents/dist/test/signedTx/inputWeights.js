"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = __importStar(require("assert"));
const utxolib = __importStar(require("@bitgo/utxo-lib"));
const utxo_lib_1 = require("@bitgo/utxo-lib");
const inputWeights_1 = require("../../src/inputWeights");
const scriptSizes_1 = require("../../src/scriptSizes");
const testutils_1 = require("../testutils");
describe('Input Script Sizes (Worst-Case)', function () {
    const keys = [1, 2, 3].map((v) => utxo_lib_1.bip32.fromSeed(Buffer.alloc(16, `test/${v}`)));
    const rootWalletKeys = new utxolib.bitgo.RootWalletKeys([keys[0], keys[1], keys[2]]);
    function getLargestInputWithType(inputType, signKeys, inputCount = 100) {
        const signerName = signKeys[0];
        const cosignerName = signKeys.length > 1 ? signKeys[1] : signerName;
        const inputScriptTypes = Array.from({ length: inputCount }).fill(inputType);
        const outputScriptTypes = [testutils_1.UnspentTypeScript2of3.p2sh];
        return (0, testutils_1.getSignedTransaction)(rootWalletKeys, signerName, cosignerName, inputScriptTypes, outputScriptTypes).ins.reduce((a, b) => ((0, inputWeights_1.getInputWeight)(a) > (0, inputWeights_1.getInputWeight)(b) ? a : b));
    }
    function getInputComponents(input) {
        const decompiled = utxolib.script.decompile(input.script);
        if (!decompiled) {
            throw new Error();
        }
        const script = decompiled.map((v) => {
            if (!Buffer.isBuffer(v)) {
                return { length: 1 };
            }
            return { length: v.length + (0, scriptSizes_1.pushdataEncodingLength)(v.length) };
        });
        const witness = (input.witness || []).map((v) => ({ length: v.length }));
        const scriptSize = script.reduce((a, b) => a + b.length, 0);
        assert.strictEqual(scriptSize, input.script.length, utxolib.script.toASM(decompiled));
        return {
            script: script.map((v) => v.length),
            witness: witness.map((v) => v.length),
        };
    }
    function runTestComponentSizes(inputType, signKeys) {
        const signKeysStr = signKeys.join(',');
        describe(`inputType=${inputType} signKeys=${signKeysStr}`, function () {
            it(`component sizes`, function () {
                this.timeout(10000);
                let expectedComponents;
                switch (inputType) {
                    case 'p2sh':
                        expectedComponents = inputWeights_1.inputComponentsP2sh;
                        break;
                    case 'p2shP2wsh':
                        expectedComponents = inputWeights_1.inputComponentsP2shP2wsh;
                        break;
                    case 'p2wsh':
                        expectedComponents = inputWeights_1.inputComponentsP2wsh;
                        break;
                    case 'p2shP2pk':
                        expectedComponents = inputWeights_1.inputComponentsP2shP2pk;
                        break;
                    case 'p2tr':
                        if (signKeys[1] === 'bitgo') {
                            expectedComponents = inputWeights_1.inputComponentsP2trScriptSpendLevel1;
                        }
                        else if (signKeys[1] === 'backup') {
                            expectedComponents = inputWeights_1.inputComponentsP2trScriptSpendLevel2;
                        }
                        else {
                            throw new Error(`unexpected cosigner`);
                        }
                        break;
                    case 'p2trMusig2':
                        // assumes only script path
                        expectedComponents = inputWeights_1.inputComponentsP2trScriptSpendLevel1;
                        break;
                    case 'taprootKeyPathSpend':
                        expectedComponents = inputWeights_1.inputComponentsP2trKeySpend;
                        break;
                    default:
                        throw new Error(`invalid inputType ${inputType}`);
                }
                const input = getLargestInputWithType(inputType, signKeys, inputType === 'p2tr' || inputType === 'p2trMusig2' || inputType === 'taprootKeyPathSpend' ? 10 : 100);
                const components = getInputComponents(input);
                assert.deepStrictEqual(components, expectedComponents);
                assert.strictEqual((0, inputWeights_1.getInputComponentsWeight)(components), (0, inputWeights_1.getInputWeight)(input));
            });
        });
    }
    (0, testutils_1.getInputScriptTypes)().forEach((inputType) => {
        if (inputType !== 'p2trMusig2') {
            runTestComponentSizes(inputType, inputType === 'p2shP2pk' ? ['user'] : ['user', 'bitgo']);
        }
        if (inputType !== 'p2shP2pk' && inputType !== 'taprootKeyPathSpend') {
            runTestComponentSizes(inputType, ['user', 'backup']);
        }
    });
});
//# sourceMappingURL=data:application/json;base64,