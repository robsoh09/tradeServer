import * as unspents from '../src';
import * as utxolib from '@bitgo/utxo-lib';
export declare const UnspentTypeP2shP2pk = "p2shP2pk";
export declare const UnspentTypeScript2of3: {
    p2sh: string;
    p2shP2wsh: string;
    p2wsh: string;
    p2tr: string;
    p2trMusig2: string;
    taprootKeyPathSpend: string;
};
export declare const UnspentTypePubKeyHash: {
    p2pkh: 'p2pkh';
    p2wpkh: 'p2wpkh';
};
export declare type TestUnspentType = string | UnspentTypeOpReturn;
export declare class UnspentTypeOpReturn {
    size: number;
    constructor(size: number);
    toString(): string;
}
export declare type InputScriptType = utxolib.bitgo.outputScripts.ScriptType | 'taprootKeyPathSpend';
export declare function getInputScriptTypes(): InputScriptType[];
/**
 * Return the input dimensions based on unspent type
 * @param unspentType - one of UnspentTypeScript2of3
 * @return Dimensions
 */
export declare const getInputDimensionsForUnspentType: (unspentType: TestUnspentType) => unspents.Dimensions;
export declare const getOutputDimensionsForUnspentType: (unspentType: TestUnspentType) => unspents.Dimensions;
export declare function constructPsbt(keys: utxolib.bitgo.RootWalletKeys, inputTypes: InputScriptType[], outputTypes: TestUnspentType[], signatureStatus: 'unsigned' | 'halfsigned' | 'fullysigned', signers?: {
    signerName: utxolib.bitgo.KeyName;
    cosignerName: utxolib.bitgo.KeyName;
}): utxolib.bitgo.UtxoPsbt<utxolib.bitgo.UtxoTransaction<bigint>>;
export declare function getSignedTransaction(keys: utxolib.bitgo.RootWalletKeys, signerName: utxolib.bitgo.KeyName, cosignerName: utxolib.bitgo.KeyName, inputTypes: InputScriptType[], outputTypes: TestUnspentType[]): utxolib.bitgo.UtxoTransaction;
//# sourceMappingURL=testutils.d.ts.map