"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSignedTransaction = exports.constructPsbt = exports.getOutputDimensionsForUnspentType = exports.getInputDimensionsForUnspentType = exports.getInputScriptTypes = exports.UnspentTypeOpReturn = exports.UnspentTypePubKeyHash = exports.UnspentTypeScript2of3 = exports.UnspentTypeP2shP2pk = void 0;
const unspents = __importStar(require("../src"));
const utxolib = __importStar(require("@bitgo/utxo-lib"));
const assert_1 = __importDefault(require("assert"));
const txGen_1 = require("./signedTx/txGen");
/**
 * makeEnum('a', 'b') returns `{ a: 'a', b: 'b' }`
 *
 * @param args
 * @return map with string keys and symbol values
 */
const makeEnum = (...args) => args.reduce((obj, key) => Object.assign(obj, { [key]: key }), {});
exports.UnspentTypeP2shP2pk = 'p2shP2pk';
// p2trMusig2 is assumed to be script path only. taprootKeyPathSpend is for p2trMusig2 key path
exports.UnspentTypeScript2of3 = makeEnum('p2sh', 'p2shP2wsh', 'p2wsh', 'p2tr', 'p2trMusig2', 'taprootKeyPathSpend');
exports.UnspentTypePubKeyHash = makeEnum('p2pkh', 'p2wpkh');
class UnspentTypeOpReturn {
    constructor(size) {
        this.size = size;
    }
    toString() {
        return `opReturn(${this.size})`;
    }
}
exports.UnspentTypeOpReturn = UnspentTypeOpReturn;
function getInputScriptTypes() {
    return [...utxolib.bitgo.outputScripts.scriptTypes2Of3, 'p2shP2pk', 'taprootKeyPathSpend'];
}
exports.getInputScriptTypes = getInputScriptTypes;
/**
 * Return the input dimensions based on unspent type
 * @param unspentType - one of UnspentTypeScript2of3
 * @return Dimensions
 */
const getInputDimensionsForUnspentType = (unspentType) => {
    switch (unspentType) {
        case exports.UnspentTypeScript2of3.p2sh:
            return unspents.Dimensions.sum({ nP2shInputs: 1 });
        case exports.UnspentTypeScript2of3.p2shP2wsh:
            return unspents.Dimensions.sum({ nP2shP2wshInputs: 1 });
        case exports.UnspentTypeScript2of3.p2wsh:
            return unspents.Dimensions.sum({ nP2wshInputs: 1 });
        case exports.UnspentTypeScript2of3.p2tr:
        case exports.UnspentTypeScript2of3.p2trMusig2:
            return unspents.Dimensions.sum({ nP2trScriptPathLevel1Inputs: 1 });
        case exports.UnspentTypeScript2of3.taprootKeyPathSpend:
            return unspents.Dimensions.sum({ nP2trKeypathInputs: 1 });
        case exports.UnspentTypeP2shP2pk:
            return unspents.Dimensions.sum({ nP2shP2pkInputs: 1 });
    }
    throw new Error(`no input dimensions for ${unspentType}`);
};
exports.getInputDimensionsForUnspentType = getInputDimensionsForUnspentType;
const getOutputDimensionsForUnspentType = (unspentType) => {
    /* The values here are validated in the test 'calculates output dimensions dynamically' */
    switch (unspentType) {
        case exports.UnspentTypeScript2of3.p2sh:
        case exports.UnspentTypeScript2of3.p2shP2wsh:
        case exports.UnspentTypeP2shP2pk:
            return unspents.Dimensions.fromOutputScriptLength(23);
        case exports.UnspentTypeScript2of3.p2wsh:
            return unspents.Dimensions.fromOutputScriptLength(34);
        case exports.UnspentTypeScript2of3.p2tr:
        case exports.UnspentTypeScript2of3.p2trMusig2:
        case exports.UnspentTypeScript2of3.taprootKeyPathSpend:
            return unspents.Dimensions.fromOutputScriptLength(34);
        case exports.UnspentTypePubKeyHash.p2pkh:
            return unspents.Dimensions.fromOutputScriptLength(25);
        case exports.UnspentTypePubKeyHash.p2wpkh:
            return unspents.Dimensions.fromOutputScriptLength(22);
        default:
            if (unspentType instanceof UnspentTypeOpReturn) {
                return unspents.Dimensions.fromOutputScriptLength(1 + unspentType.size);
            }
            throw new TypeError(`unknown unspentType ${unspentType}`);
    }
};
exports.getOutputDimensionsForUnspentType = getOutputDimensionsForUnspentType;
function getDefaultSignerNames(inputType, signers) {
    if (signers) {
        return [signers.signerName, signers.cosignerName];
    }
    if (inputType === 'p2shP2pk') {
        return ['user'];
    }
    if (inputType === 'p2trMusig2') {
        return ['user', 'backup'];
    }
    return ['user', 'bitgo'];
}
function constructPsbt(keys, inputTypes, outputTypes, signatureStatus, signers) {
    const psbt = utxolib.bitgo.createPsbtForNetwork({ network: utxolib.networks.bitcoin });
    inputTypes.forEach((t, i) => {
        if (t === 'p2shP2pk') {
            const signer = keys[getDefaultSignerNames(t, signers)[0]];
            const unspent = utxolib.testutil.mockReplayProtectionUnspent(utxolib.networks.bitcoin, BigInt(10), {
                key: signer,
                vout: i,
            });
            const { redeemScript } = utxolib.bitgo.outputScripts.createOutputScriptP2shP2pk(signer.publicKey);
            assert_1.default.ok(redeemScript);
            utxolib.bitgo.addReplayProtectionUnspentToPsbt(psbt, unspent, redeemScript);
        }
        else {
            const unspent = utxolib.testutil.mockWalletUnspent(utxolib.networks.bitcoin, BigInt(10), {
                keys,
                chain: utxolib.bitgo.getExternalChainCode(t === 'taprootKeyPathSpend' ? 'p2trMusig2' : t),
                vout: i,
                index: i,
            });
            const signerNames = getDefaultSignerNames(t, signers);
            utxolib.bitgo.addWalletUnspentToPsbt(psbt, unspent, keys, signerNames[0], signerNames[1]);
        }
    });
    outputTypes.forEach((t, index) => {
        psbt.addOutput({
            script: (0, txGen_1.createScriptPubKey)(keys.triple, t),
            value: BigInt(10),
        });
    });
    if (signatureStatus === 'unsigned') {
        return psbt;
    }
    psbt.setAllInputsMusig2NonceHD(keys['user']);
    psbt.setAllInputsMusig2NonceHD(keys['bitgo']);
    inputTypes.forEach((t, i) => {
        const signerNames = getDefaultSignerNames(t, signers);
        if (t === 'p2shP2pk') {
            if (signatureStatus === 'fullysigned') {
                psbt.signInput(i, keys[signerNames[0]]);
            }
        }
        else {
            psbt.signInputHD(i, keys[signerNames[0]]);
            if (signatureStatus === 'fullysigned') {
                psbt.signInputHD(i, keys[signerNames[1]]);
            }
        }
    });
    if (signatureStatus === 'fullysigned') {
        assert_1.default.ok(psbt.validateSignaturesOfAllInputs());
    }
    return psbt;
}
exports.constructPsbt = constructPsbt;
function getSignedTransaction(keys, signerName, cosignerName, inputTypes, outputTypes) {
    const psbt = constructPsbt(keys, inputTypes, outputTypes, 'fullysigned', { signerName, cosignerName });
    psbt.finalizeAllInputs();
    return psbt.extractTransaction().clone('number');
}
exports.getSignedTransaction = getSignedTransaction;
//# sourceMappingURL=data:application/json;base64,