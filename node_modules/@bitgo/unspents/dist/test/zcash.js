"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("should");
const src_1 = require("../src");
const zcash_1 = require("../src/zcash");
describe('ZCash', function () {
    function getDims(nP2shInputs, nOutputs) {
        return new src_1.Dimensions()
            .plus(src_1.Dimensions.SingleInput.p2sh.times(nP2shInputs))
            .plus(src_1.Dimensions.SingleOutput.p2sh.times(nOutputs));
    }
    it('implements ZIP-0317', function () {
        (0, zcash_1.getConventionalFeeForDimensions)(getDims(1, 1)).should.equal(10000);
        (0, zcash_1.getConventionalFeeForDimensions)(getDims(1, 2)).should.equal(10000);
        (0, zcash_1.getConventionalFeeForDimensions)(getDims(2, 1)).should.equal(20000);
        (0, zcash_1.getConventionalFeeForDimensions)(getDims(2, 2)).should.equal(20000);
        (0, zcash_1.getConventionalFeeForDimensions)(getDims(10, 1)).should.equal(100000);
    });
    function getFeeForZatPerKB(d, zatPerKB) {
        return Math.ceil((d.getVSize() * zatPerKB) / 1000);
    }
    function testFeeDifference(zatPerKilobyte, zatPerAction, expectedDiffs, expectedEffectiveFeePerAction) {
        it(`difference between feePerByte and feePerAction (zatPerKb=${zatPerKilobyte}, zatPerAction=${zatPerAction})`, function () {
            const dims = [
                getDims(1, 1),
                getDims(2, 1),
                getDims(2, 2),
                getDims(10, 1),
                getDims(10, 10),
                getDims(100, 1),
                getDims(100, 100),
                getDims(1, 100),
                getDims(1, 200),
                getDims(1, 1000),
            ];
            const diffs = dims.map((d) => {
                const feePerSize = getFeeForZatPerKB(d, zatPerKilobyte);
                const feePerAction = (0, zcash_1.getConventionalFeeForDimensions)(d, {
                    marginalFeeZatPerAction: zatPerAction,
                });
                return feePerSize - feePerAction;
            });
            diffs.should.eql(expectedDiffs);
            if (expectedEffectiveFeePerAction) {
                const effectiveFeePerAction = dims.map((d) => Math.ceil(getFeeForZatPerKB(d, zatPerKilobyte) / (0, zcash_1.getLogicalActions)(d)));
                effectiveFeePerAction.should.eql(expectedEffectiveFeePerAction);
            }
        });
    }
    // with a feeRate of 40_000 zat/kB, we are underpaying for fanouts larger than 1:100
    testFeeDifference(40000, 5000, [3600, 5520, 6800, 20880, 32400, 198680, 325400, -334680, -676680, -3417680]);
    // with a fee of 140_000 zat/kB, we are still not paying for fanouts larger than 1:200
    testFeeDifference(140000, 5000, [37600, 69320, 73800, 323080, 363400, 3182880, 3626400, 16120, -5880, -186880]);
    // with a fee of 150_000 zat/kB, we are paying for a 1:200 fanout
    testFeeDifference(150000, 5000, [41000, 75700, 80500, 353300, 396500, 3481300, 3956500, 51200, 61200, 136200], 
    // the effective per-action fee-rate is 25_000 zat/action for smaller transactions and
    // for fanouts we asymptotically approach 5_000 zat/action
    [25500, 23925, 25125, 22665, 24825, 22494, 24882, 5539, 5324, 5145]);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiemNhc2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi90ZXN0L3pjYXNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsa0JBQWdCO0FBQ2hCLGdDQUFvQztBQUNwQyx3Q0FBa0Y7QUFFbEYsUUFBUSxDQUFDLE9BQU8sRUFBRTtJQUNoQixTQUFTLE9BQU8sQ0FBQyxXQUFtQixFQUFFLFFBQWdCO1FBQ3BELE9BQU8sSUFBSSxnQkFBVSxFQUFFO2FBQ3BCLElBQUksQ0FBQyxnQkFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ3BELElBQUksQ0FBQyxnQkFBVSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVELEVBQUUsQ0FBQyxxQkFBcUIsRUFBRTtRQUN4QixJQUFBLHVDQUErQixFQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQU0sQ0FBQyxDQUFDO1FBQ3BFLElBQUEsdUNBQStCLEVBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBTSxDQUFDLENBQUM7UUFDcEUsSUFBQSx1Q0FBK0IsRUFBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFNLENBQUMsQ0FBQztRQUNwRSxJQUFBLHVDQUErQixFQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQU0sQ0FBQyxDQUFDO1FBQ3BFLElBQUEsdUNBQStCLEVBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFB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RjtJQUN0RiwwREFBMEQ7SUFDMUQsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FDcEUsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdzaG91bGQnO1xuaW1wb3J0IHsgRGltZW5zaW9ucyB9IGZyb20gJy4uL3NyYyc7XG5pbXBvcnQgeyBnZXRDb252ZW50aW9uYWxGZWVGb3JEaW1lbnNpb25zLCBnZXRMb2dpY2FsQWN0aW9ucyB9IGZyb20gJy4uL3NyYy96Y2FzaCc7XG5cbmRlc2NyaWJlKCdaQ2FzaCcsIGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZ2V0RGltcyhuUDJzaElucHV0czogbnVtYmVyLCBuT3V0cHV0czogbnVtYmVyKTogRGltZW5zaW9ucyB7XG4gICAgcmV0dXJuIG5ldyBEaW1lbnNpb25zKClcbiAgICAgIC5wbHVzKERpbWVuc2lvbnMuU2luZ2xlSW5wdXQucDJzaC50aW1lcyhuUDJzaElucHV0cykpXG4gICAgICAucGx1cyhEaW1lbnNpb25zLlNpbmdsZU91dHB1dC5wMnNoLnRpbWVzKG5PdXRwdXRzKSk7XG4gIH1cblxuICBpdCgnaW1wbGVtZW50cyBaSVAtMDMxNycsIGZ1bmN0aW9uICgpIHtcbiAgICBnZXRDb252ZW50aW9uYWxGZWVGb3JEaW1lbnNpb25zKGdldERpbXMoMSwgMSkpLnNob3VsZC5lcXVhbCgxMF8wMDApO1xuICAgIGdldENvbnZlbnRpb25hbEZlZUZvckRpbWVuc2lvbnMoZ2V0RGltcygxLCAyKSkuc2hvdWxkLmVxdWFsKDEwXzAwMCk7XG4gICAgZ2V0Q29udmVudGlvbmFsRmVlRm9yRGltZW5zaW9ucyhnZXREaW1zKDIsIDEpKS5zaG91bGQuZXF1YWwoMjBfMDAwKTtcbiAgICBnZXRDb252ZW50aW9uYWxGZWVGb3JEaW1lbnNpb25zKGdldERpbXMoMiwgMikpLnNob3VsZC5lcXVhbCgyMF8wMDApO1xuICAgIGdldENvbnZlbnRpb25hbEZlZUZvckRpbWVuc2lvbnMoZ2V0RGltcygxMCwgMSkpLnNob3VsZC5lcXVhbCgxMDBfMDAwKTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gZ2V0RmVlRm9yWmF0UGVyS0IoZDogRGltZW5zaW9ucywgemF0UGVyS0I6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGguY2VpbCgoZC5nZXRWU2l6ZSgpICogemF0UGVyS0IpIC8gMTAwMCk7XG4gIH1cblxuICBmdW5jdGlvbiB0ZXN0RmVlRGlmZmVyZW5jZShcbiAgICB6YXRQZXJLaWxvYnl0ZTogbnVtYmVyLFxuICAgIHphdFBlckFjdGlvbjogbnVtYmVyLFxuICAgIGV4cGVjdGVkRGlmZnM6IG51bWJlcltdLFxuICAgIGV4cGVjdGVkRWZmZWN0aXZlRmVlUGVyQWN0aW9uPzogbnVtYmVyW11cbiAgKSB7XG4gICAgaXQoYGRpZmZlcmVuY2UgYmV0d2VlbiBmZWVQZXJCeXRlIGFuZCBmZWVQZXJBY3Rpb24gKHphdFBlcktiPSR7emF0UGVyS2lsb2J5dGV9LCB6YXRQZXJBY3Rpb249JHt6YXRQZXJBY3Rpb259KWAsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGRpbXMgPSBbXG4gICAgICAgIGdldERpbXMoMSwgMSksXG4gICAgICAgIGdldERpbXMoMiwgMSksXG4gICAgICAgIGdldERpbXMoMiwgMiksXG4gICAgICAgIGdldERpbXMoMTAsIDEpLFxuICAgICAgICBnZXREaW1zKDEwLCAxMCksXG4gICAgICAgIGdldERpbXMoMTAwLCAxKSxcbiAgICAgICAgZ2V0RGltcygxMDAsIDEwMCksXG4gICAgICAgIGdldERpbXMoMSwgMTAwKSxcbiAgICAgICAgZ2V0RGltcygxLCAyMDApLFxuICAgICAgICBnZXREaW1zKDEsIDEwMDApLFxuICAgICAgXTtcbiAgICAgIGNvbnN0IGRpZmZzID0gZGltcy5tYXAoKGQpID0+IHtcbiAgICAgICAgY29uc3QgZmVlUGVyU2l6ZSA9IGdldEZlZUZvclphdFBlcktCKGQsIHphdFBlcktpbG9ieXRlKTtcbiAgICAgICAgY29uc3QgZmVlUGVyQWN0aW9uID0gZ2V0Q29udmVudGlvbmFsRmVlRm9yRGltZW5zaW9ucyhkLCB7XG4gICAgICAgICAgbWFyZ2luYWxGZWVaYXRQZXJBY3Rpb246IHphdFBlckFjdGlvbixcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmZWVQZXJTaXplIC0gZmVlUGVyQWN0aW9uO1xuICAgICAgfSk7XG5cbiAgICAgIGRpZmZzLnNob3VsZC5lcWwoZXhwZWN0ZWREaWZmcyk7XG4gICAgICBpZiAoZXhwZWN0ZWRFZmZlY3RpdmVGZWVQZXJBY3Rpb24pIHtcbiAgICAgICAgY29uc3QgZWZmZWN0aXZlRmVlUGVyQWN0aW9uID0gZGltcy5tYXAoKGQpID0+XG4gICAgICAgICAgTWF0aC5jZWlsKGdldEZlZUZvclphdFBlcktCKGQsIHphdFBlcktpbG9ieXRlKSAvIGdldExvZ2ljYWxBY3Rpb25zKGQpKVxuICAgICAgICApO1xuICAgICAgICBlZmZlY3RpdmVGZWVQZXJBY3Rpb24uc2hvdWxkLmVxbChleHBlY3RlZEVmZmVjdGl2ZUZlZVBlckFjdGlvbik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgLy8gd2l0aCBhIGZlZVJhdGUgb2YgNDBfMDAwIHphdC9rQiwgd2UgYXJlIHVuZGVycGF5aW5nIGZvciBmYW5vdXRzIGxhcmdlciB0aGFuIDE6MTAwXG4gIHRlc3RGZWVEaWZmZXJlbmNlKDQwXzAwMCwgNV8wMDAsIFszNjAwLCA1NTIwLCA2ODAwLCAyMDg4MCwgMzI0MDAsIDE5ODY4MCwgMzI1NDAwLCAtMzM0NjgwLCAtNjc2NjgwLCAtMzQxNzY4MF0pO1xuXG4gIC8vIHdpdGggYSBmZWUgb2YgMTQwXzAwMCB6YXQva0IsIHdlIGFyZSBzdGlsbCBub3QgcGF5aW5nIGZvciBmYW5vdXRzIGxhcmdlciB0aGFuIDE6MjAwXG4gIHRlc3RGZWVEaWZmZXJlbmNlKDE0MF8wMDAsIDVfMDAwLCBbMzc2MDAsIDY5MzIwLCA3MzgwMCwgMzIzMDgwLCAzNjM0MDAsIDMxODI4ODAsIDM2MjY0MDAsIDE2MTIwLCAtNTg4MCwgLTE4Njg4MF0pO1xuXG4gIC8vIHdpdGggYSBmZWUgb2YgMTUwXzAwMCB6YXQva0IsIHdlIGFyZSBwYXlpbmcgZm9yIGEgMToyMDAgZmFub3V0XG4gIHRlc3RGZWVEaWZmZXJlbmNlKFxuICAgIDE1MF8wMDAsXG4gICAgNV8wMDAsXG4gICAgWzQxMDAwLCA3NTcwMCwgODA1MDAsIDM1MzMwMCwgMzk2NTAwLCAzNDgxMzAwLCAzOTU2NTAwLCA1MTIwMCwgNjEyMDAsIDEzNjIwMF0sXG4gICAgLy8gdGhlIGVmZmVjdGl2ZSBwZXItYWN0aW9uIGZlZS1yYXRlIGlzIDI1XzAwMCB6YXQvYWN0aW9uIGZvciBzbWFsbGVyIHRyYW5zYWN0aW9ucyBhbmRcbiAgICAvLyBmb3IgZmFub3V0cyB3ZSBhc3ltcHRvdGljYWxseSBhcHByb2FjaCA1XzAwMCB6YXQvYWN0aW9uXG4gICAgWzI1NTAwLCAyMzkyNSwgMjUxMjUsIDIyNjY1LCAyNDgyNSwgMjI0OTQsIDI0ODgyLCA1NTM5LCA1MzI0LCA1MTQ1XVxuICApO1xufSk7XG4iXX0=