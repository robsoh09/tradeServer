"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs/promises"));
const utxolib = __importStar(require("@bitgo/utxo-lib"));
const src_1 = require("../src");
const headers = [
    'Script Type',
    'Chain Codes',
    'Spend Type',
    'Input Size (Virtual Bytes)',
    'Relative Size (p2trMusig2 = 1.00)',
];
const relativeCostRef = src_1.Dimensions.fromScriptType('taprootKeyPathSpend').getInputsVSize();
function formatMarkdownTable(headers, rows) {
    return [headers, headers.map(() => '---'), ...rows].map((row) => `| ${row.join(' | ')} |`).join('\n');
}
function generateRowsForScriptType(headers, t, params) {
    var _a;
    const chainCode = utxolib.bitgo.toChainPair(t);
    if (!params) {
        if (t === 'p2tr') {
            return [
                ...generateRowsForScriptType(headers, t, {
                    spendTypeName: 'Script Path, Level 2 (Backup/User, Backup/BitGo)',
                    scriptTypeParams: { scriptPathLevel: 2 },
                }),
                ...generateRowsForScriptType(headers, t, {
                    spendTypeName: 'Script Path, Level 1 (User/BitGo)',
                    scriptTypeParams: { scriptPathLevel: 1 },
                }),
            ];
        }
        if (t === 'p2trMusig2') {
            return [
                ...generateRowsForScriptType(headers, t, {
                    spendTypeName: 'Script Path (Backup/User, Backup/BitGo)',
                    scriptTypeParams: { scriptPathLevel: 1 },
                }),
                ...generateRowsForScriptType(headers, t, {
                    spendTypeName: 'Key Path (User/BitGo)',
                    scriptTypeParams: { scriptPathLevel: undefined },
                }),
            ];
        }
    }
    const inputVSize = src_1.Dimensions.fromScriptType(t, params === null || params === void 0 ? void 0 : params.scriptTypeParams).getInputsVSize();
    const row = [
        t,
        chainCode.join(`/`),
        (_a = params === null || params === void 0 ? void 0 : params.spendTypeName) !== null && _a !== void 0 ? _a : 'all',
        inputVSize.toString(),
        (inputVSize / relativeCostRef).toFixed(2),
    ];
    return [row];
}
function generateTables() {
    const scriptTypes = [...utxolib.bitgo.outputScripts.scriptTypes2Of3];
    return formatMarkdownTable(headers, scriptTypes.flatMap((s) => generateRowsForScriptType(headers, s)));
}
function generateDocument() {
    return [
        '# Input Costs',
        'This document contains the worst-case input costs for various script types and spend types.',
        'The input costs are calculated using the `Dimensions` class from `@bitgo/unspents`.',
        '',
        generateTables(),
    ].join('\n');
}
if (require.main === module) {
    const outfile = 'docs/input-costs.md';
    fs.writeFile(outfile, generateDocument())
        .then(() => console.log('wrote to', outfile))
        .catch((e) => console.error(e));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVfdGFibGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vYmluL2dlbmVyYXRlX3RhYmxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsZ0RBQWtDO0FBQ2xDLHlEQUEyQztBQUUzQyxnQ0FBb0M7QUFFcEMsTUFBTSxPQUFPLEdBQUc7SUFDZCxhQUFhO0lBQ2IsYUFBYTtJQUNiLFlBQVk7SUFDWiw0QkFBNEI7SUFDNUIsbUNBQW1DO0NBQ3BDLENBQUM7QUFFRixNQUFNLGVBQWUsR0FBRyxnQkFBVSxDQUFDLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBSTFGLFNBQVMsbUJBQW1CLENBQUMsT0FBaUIsRUFBRSxJQUFnQjtJQUM5RCxPQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3hHLENBQUM7QUFFRCxTQUFTLHlCQUF5QixDQUNoQyxPQUFpQixFQUNqQixDQUE2QyxFQUM3QyxNQUdDOztJQUVELE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRS9DLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDWCxJQUFJLENBQUMsS0FBSyxNQUFNLEVBQUU7WUFDaEIsT0FBTztnQkFDTCxHQUFHLHlCQUF5QixDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUU7b0JBQ3ZDLGFBQWEsRUFBRSxrREFBa0Q7b0JBQ2pFLGdCQUFnQixFQUFFLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFBRTtpQkFDekMsQ0FBQztnQkFDRixHQUFHLHlCQUF5QixDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUU7b0JBQ3ZDLGFBQWEsRUFBRSxtQ0FBbUM7b0JBQ2xELGdCQUFnQixFQUFFLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFBRTtpQkFDekMsQ0FBQzthQUNILENBQUM7U0FDSDtRQUVELElBQUksQ0FBQyxLQUFLLFlBQVksRUFBRTtZQUN0QixPQUFPO2dCQUNMLEdBQUcseUJBQXlCLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRTtvQkFDdkMsYUFBYSxFQUFFLHlDQUF5QztvQkFDeEQsZ0JBQWdCLEVBQUUsRUFBRSxlQUFlLEVBQUUsQ0FBQyxFQUFFO2lCQUN6QyxDQUFDO2dCQUNGLEdBQUcseUJBQXlCLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRTtvQkFDdkMsYUFBYSxFQUFFLHVCQUF1QjtvQkFDdEMsZ0JBQWdCLEVBQUUsRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFFO2lCQUNqRCxDQUFDO2FBQ0gsQ0FBQztTQUNIO0tBQ0Y7SUFFRCxNQUFNLFVBQVUsR0FBRyxnQkFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLGdCQUFnQixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDM0YsTUFBTSxHQUFHLEdBQVE7UUFDZixDQUFDO1FBQ0QsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDbkIsTUFBQSxNQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUUsYUFBYSxtQ0FBSSxLQUFLO1FBQzlCLFVBQVUsQ0FBQyxRQUFRLEVBQUU7UUFDckIsQ0FBQyxVQUFVLEdBQUcsZUFBZSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztLQUMxQyxDQUFDO0lBQ0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2YsQ0FBQztBQUVELFNBQVMsY0FBYztJQUNyQixNQUFNLFdBQVcsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDckUsT0FBTyxtQkFBbUIsQ0FDeEIsT0FBTyxFQUNQLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUNsRSxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsZ0JBQWdCO0lBQ3ZCLE9BQU87UUFDTCxlQUFlO1FBQ2YsNkZBQTZGO1FBQzdGLHFGQUFxRjtRQUNyRixFQUFFO1FBQ0YsY0FBYyxFQUFFO0tBQ2pCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2YsQ0FBQztBQUVELElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxNQUFNLEVBQUU7SUFDM0IsTUFBTSxPQUFPLEdBQUcscUJBQXFCLENBQUM7SUFDdEMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQztTQUN0QyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDNUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDbkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcyBmcm9tICdmcy9wcm9taXNlcyc7XG5pbXBvcnQgKiBhcyB1dHhvbGliIGZyb20gJ0BiaXRnby91dHhvLWxpYic7XG5cbmltcG9ydCB7IERpbWVuc2lvbnMgfSBmcm9tICcuLi9zcmMnO1xuXG5jb25zdCBoZWFkZXJzID0gW1xuICAnU2NyaXB0IFR5cGUnLFxuICAnQ2hhaW4gQ29kZXMnLFxuICAnU3BlbmQgVHlwZScsXG4gICdJbnB1dCBTaXplIChWaXJ0dWFsIEJ5dGVzKScsXG4gICdSZWxhdGl2ZSBTaXplIChwMnRyTXVzaWcyID0gMS4wMCknLFxuXTtcblxuY29uc3QgcmVsYXRpdmVDb3N0UmVmID0gRGltZW5zaW9ucy5mcm9tU2NyaXB0VHlwZSgndGFwcm9vdEtleVBhdGhTcGVuZCcpLmdldElucHV0c1ZTaXplKCk7XG5cbnR5cGUgUm93ID0gW3N0cmluZywgc3RyaW5nLCBzdHJpbmcsIHN0cmluZywgc3RyaW5nXTtcblxuZnVuY3Rpb24gZm9ybWF0TWFya2Rvd25UYWJsZShoZWFkZXJzOiBzdHJpbmdbXSwgcm93czogc3RyaW5nW11bXSk6IHN0cmluZyB7XG4gIHJldHVybiBbaGVhZGVycywgaGVhZGVycy5tYXAoKCkgPT4gJy0tLScpLCAuLi5yb3dzXS5tYXAoKHJvdykgPT4gYHwgJHtyb3cuam9pbignIHwgJyl9IHxgKS5qb2luKCdcXG4nKTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVSb3dzRm9yU2NyaXB0VHlwZShcbiAgaGVhZGVyczogc3RyaW5nW10sXG4gIHQ6IHV0eG9saWIuYml0Z28ub3V0cHV0U2NyaXB0cy5TY3JpcHRUeXBlMk9mMyxcbiAgcGFyYW1zPzoge1xuICAgIHNwZW5kVHlwZU5hbWU6IHN0cmluZztcbiAgICBzY3JpcHRUeXBlUGFyYW1zOiB7IHNjcmlwdFBhdGhMZXZlbD86IG51bWJlciB9O1xuICB9XG4pOiBSb3dbXSB7XG4gIGNvbnN0IGNoYWluQ29kZSA9IHV0eG9saWIuYml0Z28udG9DaGFpblBhaXIodCk7XG5cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICBpZiAodCA9PT0gJ3AydHInKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICAuLi5nZW5lcmF0ZVJvd3NGb3JTY3JpcHRUeXBlKGhlYWRlcnMsIHQsIHtcbiAgICAgICAgICBzcGVuZFR5cGVOYW1lOiAnU2NyaXB0IFBhdGgsIExldmVsIDIgKEJhY2t1cC9Vc2VyLCBCYWNrdXAvQml0R28pJyxcbiAgICAgICAgICBzY3JpcHRUeXBlUGFyYW1zOiB7IHNjcmlwdFBhdGhMZXZlbDogMiB9LFxuICAgICAgICB9KSxcbiAgICAgICAgLi4uZ2VuZXJhdGVSb3dzRm9yU2NyaXB0VHlwZShoZWFkZXJzLCB0LCB7XG4gICAgICAgICAgc3BlbmRUeXBlTmFtZTogJ1NjcmlwdCBQYXRoLCBMZXZlbCAxIChVc2VyL0JpdEdvKScsXG4gICAgICAgICAgc2NyaXB0VHlwZVBhcmFtczogeyBzY3JpcHRQYXRoTGV2ZWw6IDEgfSxcbiAgICAgICAgfSksXG4gICAgICBdO1xuICAgIH1cblxuICAgIGlmICh0ID09PSAncDJ0ck11c2lnMicpIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIC4uLmdlbmVyYXRlUm93c0ZvclNjcmlwdFR5cGUoaGVhZGVycywgdCwge1xuICAgICAgICAgIHNwZW5kVHlwZU5hbWU6ICdTY3JpcHQgUGF0aCAoQmFja3VwL1VzZXIsIEJhY2t1cC9CaXRHbyknLFxuICAgICAgICAgIHNjcmlwdFR5cGVQYXJhbXM6IHsgc2NyaXB0UGF0aExldmVsOiAxIH0sXG4gICAgICAgIH0pLFxuICAgICAgICAuLi5nZW5lcmF0ZVJvd3NGb3JTY3JpcHRUeXBlKGhlYWRlcnMsIHQsIHtcbiAgICAgICAgICBzcGVuZFR5cGVOYW1lOiAnS2V5IFBhdGggKFVzZXIvQml0R28pJyxcbiAgICAgICAgICBzY3JpcHRUeXBlUGFyYW1zOiB7IHNjcmlwdFBhdGhMZXZlbDogdW5kZWZpbmVkIH0sXG4gICAgICAgIH0pLFxuICAgICAgXTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBpbnB1dFZTaXplID0gRGltZW5zaW9ucy5mcm9tU2NyaXB0VHlwZSh0LCBwYXJhbXM/LnNjcmlwdFR5cGVQYXJhbXMpLmdldElucHV0c1ZTaXplKCk7XG4gIGNvbnN0IHJvdzogUm93ID0gW1xuICAgIHQsXG4gICAgY2hhaW5Db2RlLmpvaW4oYC9gKSxcbiAgICBwYXJhbXM/LnNwZW5kVHlwZU5hbWUgPz8gJ2FsbCcsXG4gICAgaW5wdXRWU2l6ZS50b1N0cmluZygpLFxuICAgIChpbnB1dFZTaXplIC8gcmVsYXRpdmVDb3N0UmVmKS50b0ZpeGVkKDIpLFxuICBdO1xuICByZXR1cm4gW3Jvd107XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlVGFibGVzKCkge1xuICBjb25zdCBzY3JpcHRUeXBlcyA9IFsuLi51dHhvbGliLmJpdGdvLm91dHB1dFNjcmlwdHMuc2NyaXB0VHlwZXMyT2YzXTtcbiAgcmV0dXJuIGZvcm1hdE1hcmtkb3duVGFibGUoXG4gICAgaGVhZGVycyxcbiAgICBzY3JpcHRUeXBlcy5mbGF0TWFwKChzKSA9PiBnZW5lcmF0ZVJvd3NGb3JTY3JpcHRUeXBlKGhlYWRlcnMsIHMpKVxuICApO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZURvY3VtZW50KCkge1xuICByZXR1cm4gW1xuICAgICcjIElucHV0IENvc3RzJyxcbiAgICAnVGhpcyBkb2N1bWVudCBjb250YWlucyB0aGUgd29yc3QtY2FzZSBpbnB1dCBjb3N0cyBmb3IgdmFyaW91cyBzY3JpcHQgdHlwZXMgYW5kIHNwZW5kIHR5cGVzLicsXG4gICAgJ1RoZSBpbnB1dCBjb3N0cyBhcmUgY2FsY3VsYXRlZCB1c2luZyB0aGUgYERpbWVuc2lvbnNgIGNsYXNzIGZyb20gYEBiaXRnby91bnNwZW50c2AuJyxcbiAgICAnJyxcbiAgICBnZW5lcmF0ZVRhYmxlcygpLFxuICBdLmpvaW4oJ1xcbicpO1xufVxuXG5pZiAocmVxdWlyZS5tYWluID09PSBtb2R1bGUpIHtcbiAgY29uc3Qgb3V0ZmlsZSA9ICdkb2NzL2lucHV0LWNvc3RzLm1kJztcbiAgZnMud3JpdGVGaWxlKG91dGZpbGUsIGdlbmVyYXRlRG9jdW1lbnQoKSlcbiAgICAudGhlbigoKSA9PiBjb25zb2xlLmxvZygnd3JvdGUgdG8nLCBvdXRmaWxlKSlcbiAgICAuY2F0Y2goKGUpID0+IGNvbnNvbGUuZXJyb3IoZSkpO1xufVxuIl19