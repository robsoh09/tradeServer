/// <reference types="node" />
import { BaseCoin, BitGoBase, KeyPair, MPCAlgorithm, ParsedTransaction, ParseTransactionOptions as BaseParseTransactionOptions, SignedTransaction, SignTransactionOptions, TransactionExplanation, TssVerifyAddressOptions, VerifyTransactionOptions } from '@bitgo/sdk-core';
import { BaseCoin as StaticsBaseCoin } from '@bitgo/statics';
export interface ExplainTransactionOptions {
    txHex: string;
}
export interface SuiParseTransactionOptions extends BaseParseTransactionOptions {
    txHex: string;
}
interface TransactionOutput {
    address: string;
    amount: string;
}
declare type TransactionInput = TransactionOutput;
export interface SuiParsedTransaction extends ParsedTransaction {
    inputs: TransactionInput[];
    outputs: TransactionOutput[];
}
export declare type SuiTransactionExplanation = TransactionExplanation;
export declare class Sui extends BaseCoin {
    protected readonly _staticsCoin: Readonly<StaticsBaseCoin>;
    protected constructor(bitgo: BitGoBase, staticsCoin?: Readonly<StaticsBaseCoin>);
    static createInstance(bitgo: BitGoBase, staticsCoin?: Readonly<StaticsBaseCoin>): BaseCoin;
    /**
     * Factor between the coin's base unit and its smallest subdivison
     */
    getBaseFactor(): number;
    getChain(): string;
    getFamily(): string;
    getFullName(): string;
    /** @inheritDoc */
    supportsTss(): boolean;
    getMPCAlgorithm(): MPCAlgorithm;
    allowsAccountConsolidations(): boolean;
    verifyTransaction(params: VerifyTransactionOptions): Promise<boolean>;
    isWalletAddress(params: TssVerifyAddressOptions): Promise<boolean>;
    parseTransaction(params: SuiParseTransactionOptions): Promise<SuiParsedTransaction>;
    generateKeyPair(seed?: Buffer): KeyPair;
    isValidPub(pub: string): boolean;
    isValidPrv(prv: string): boolean;
    isValidAddress(address: string): boolean;
    signTransaction(params: SignTransactionOptions): Promise<SignedTransaction>;
    /**
     * Explain a Sui transaction
     * @param params
     */
    explainTransaction(params: ExplainTransactionOptions): Promise<SuiTransactionExplanation>;
    private getBuilder;
    private getAddressFromPublicKey;
    /** @inheritDoc */
    getSignablePayload(serializedTx: string): Promise<Buffer>;
}
export {};
//# sourceMappingURL=sui.d.ts.map