import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { BaseKey, TransactionType } from '@bitgo/sdk-core';
import { SuiTransaction, RequestWithdrawStakedSui, UnstakingProgrammableTransaction } from './iface';
import { TransactionBuilder } from './transactionBuilder';
import { Transaction } from './transaction';
import { TransferTransaction } from './transferTransaction';
import { SuiObjectRef } from './mystenlab/types';
import { SerializedTransactionDataBuilder } from './mystenlab/builder/TransactionDataBlock';
export declare class UnstakingBuilder extends TransactionBuilder<UnstakingProgrammableTransaction> {
    protected _withdrawDelegation: RequestWithdrawStakedSui;
    constructor(_coinConfig: Readonly<CoinConfig>);
    /**
     * Build a MoveCall transaction ready to be signed and executed.
     *
     * @returns {BitGoSuiTransaction} an unsigned Sui transaction
     */
    protected buildUnstakeTransaction(): SuiTransaction<UnstakingProgrammableTransaction>;
    /**
     * Get staking transaction type
     *
     * @return {TransactionType}
     * @protected
     */
    protected get transactionType(): TransactionType;
    /** @inheritdoc */
    validateTransaction(transaction: TransferTransaction): void;
    /** @inheritdoc */
    sign(key: BaseKey): void;
    /**
     * Create a new transaction for withdrawing coins ready to be signed
     *
     * @param {RequestWithdrawStakedSui} request
     */
    unstake(request: RequestWithdrawStakedSui): this;
    /** @inheritdoc */
    protected fromImplementation(rawTransaction: string): Transaction<UnstakingProgrammableTransaction>;
    /** @inheritdoc */
    protected buildImplementation(): Promise<Transaction<UnstakingProgrammableTransaction>>;
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     *
     * @param {StakingTransaction} tx the transaction data
     */
    initBuilder(tx: Transaction<UnstakingProgrammableTransaction>): void;
    /**
     * Validates all fields are defined
     */
    private validateTransactionFields;
    static getTransactionBlockData(objectRef: SuiObjectRef, amount?: bigint): SerializedTransactionDataBuilder;
    static getTransactionBlockDataReserialized(objectRef: SuiObjectRef, amount: bigint): {
        inputs: unknown[];
        transactions: unknown[];
    };
    /**
     * Build SuiTransaction
     *
     * @return {SuiTransaction<UnstakingProgrammableTransaction>}
     * @protected
     */
    protected buildSuiTransaction(): SuiTransaction<UnstakingProgrammableTransaction>;
}
//# sourceMappingURL=unstakingBuilder.d.ts.map