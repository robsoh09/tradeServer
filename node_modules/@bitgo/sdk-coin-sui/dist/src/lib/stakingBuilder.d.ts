import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { BaseKey, TransactionType } from '@bitgo/sdk-core';
import { SuiTransaction, RequestAddStake, RequestWithdrawStakedSui, StakingProgrammableTransaction } from './iface';
import { TransactionBuilder } from './transactionBuilder';
import { Transaction } from './transaction';
import { TransferTransaction } from './transferTransaction';
export declare class StakingBuilder extends TransactionBuilder<StakingProgrammableTransaction> {
    protected _addStakeTx: RequestAddStake[];
    protected _withdrawDelegation: RequestWithdrawStakedSui;
    constructor(_coinConfig: Readonly<CoinConfig>);
    /**
     * Build a MoveCall transaction ready to be signed and executed.
     *
     * @returns {BitGoSuiTransaction} an unsigned Sui transaction
     */
    protected buildStakeTransaction(): SuiTransaction<StakingProgrammableTransaction>;
    /**
     * Get staking transaction type
     *
     * @return {TransactionType}
     * @protected
     */
    protected get transactionType(): TransactionType;
    /** @inheritdoc */
    validateTransaction(transaction: TransferTransaction): void;
    /** @inheritdoc */
    sign(key: BaseKey): void;
    /**
     * Create a new transaction for staking coins ready to be signed and executed.
     *
     * @param {RequestAddStake[]} request: a list of staking request
     */
    stake(request: RequestAddStake[]): this;
    /**
     * Create a new transaction for withdrawing coins ready to be signed
     *
     * @param {RequestWithdrawStakedSui} request
     */
    unstake(request: RequestWithdrawStakedSui): this;
    /** @inheritdoc */
    protected fromImplementation(rawTransaction: string): Transaction<StakingProgrammableTransaction>;
    /** @inheritdoc */
    protected buildImplementation(): Promise<Transaction<StakingProgrammableTransaction>>;
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     *
     * @param {StakingTransaction} tx the transaction data
     */
    initBuilder(tx: Transaction<StakingProgrammableTransaction>): void;
    /**
     * Validates all fields are defined
     */
    private validateTransactionFields;
    /**
     * Build SuiTransaction
     *
     * @return {BitGoSuiTransaction<MoveCallTx>}
     * @protected
     */
    protected buildSuiTransaction(): SuiTransaction<StakingProgrammableTransaction>;
}
//# sourceMappingURL=stakingBuilder.d.ts.map