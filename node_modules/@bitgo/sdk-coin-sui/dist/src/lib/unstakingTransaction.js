"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnstakingTransaction = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const utils_1 = __importStar(require("./utils"));
const buffer_1 = require("buffer");
const transaction_1 = require("./transaction");
const builder_1 = require("./mystenlab/builder");
const types_1 = require("./mystenlab/types");
const bcs_1 = require("@mysten/bcs");
const constants_1 = require("./constants");
const unstakingBuilder_1 = require("./unstakingBuilder");
const compareTransactionBlocks_1 = require("./compareTransactionBlocks");
class UnstakingTransaction extends transaction_1.Transaction {
    constructor(_coinConfig) {
        super(_coinConfig);
    }
    get suiTransaction() {
        return this._suiTransaction;
    }
    setSuiTransaction(tx) {
        this._suiTransaction = tx;
    }
    addSignature(publicKey, signature) {
        this._signatures.push(signature.toString('hex'));
        this._signature = { publicKey, signature };
        this.serialize();
    }
    get suiSignature() {
        return this._signature;
    }
    /** @inheritdoc */
    canSign(key) {
        return true;
    }
    /** @inheritdoc */
    toBroadcastFormat() {
        if (!this._suiTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction');
        }
        return this.serialize();
    }
    /** @inheritdoc */
    toJson() {
        if (!this._suiTransaction) {
            throw new sdk_core_1.ParseTransactionError('Empty transaction');
        }
        const tx = this._suiTransaction;
        return {
            id: this._id,
            sender: tx.sender,
            kind: { ProgrammableTransaction: tx.tx },
            gasData: tx.gasData,
            expiration: { None: null },
        };
    }
    /** @inheritDoc */
    explainTransaction() {
        const result = this.toJson();
        const displayOrder = [
            'id',
            'outputs',
            'outputAmount',
            'changeOutputs',
            'changeAmount',
            'fee',
            'type',
            'module',
            'function',
            'validatorAddress',
        ];
        const outputs = [];
        const explanationResult = {
            displayOrder,
            id: this.id,
            outputs,
            outputAmount: '0',
            changeOutputs: [],
            changeAmount: '0',
            fee: { fee: this.suiTransaction.gasData.budget.toString() },
            type: this.type,
        };
        switch (this.type) {
            case sdk_core_1.TransactionType.StakingClaim:
                return this.explainWithdrawStakedSuiTransaction(result, explanationResult);
            default:
                throw new sdk_core_1.InvalidTransactionError('Transaction type not supported');
        }
    }
    /**
     * Set the transaction type.
     *
     * @param {TransactionType} transactionType The transaction type to be set.
     */
    transactionType(transactionType) {
        this._type = transactionType;
    }
    getEntriesForStakedSuiInput(stakedSuiInput, amount) {
        return {
            inputs: [
                {
                    address: (0, types_1.normalizeSuiAddress)(stakedSuiInput.objectId),
                    value: amount === undefined ? constants_1.AMOUNT_UNKNOWN_TEXT : amount.toString(),
                    coin: this._coinConfig.name,
                },
            ],
            outputs: [
                {
                    address: this.suiTransaction.sender,
                    value: amount === undefined ? constants_1.AMOUNT_UNKNOWN_TEXT : amount.toString(),
                    coin: this._coinConfig.name,
                },
            ],
        };
    }
    /**
     * @param inputs
     * @param transactions
     */
    static parseTransactionPairReserialized(inputs, transactions) {
        const [inputStakedSui, inputAmount, inputSharedObj] = inputs;
        if (!builder_1.ObjectCallArg.is(inputStakedSui)) {
            throw new Error('Invalid input staked sui');
        }
        if (!builder_1.PureCallArg.is(inputAmount)) {
            throw new Error('Invalid input amount');
        }
        if (!builder_1.ObjectCallArg.is(inputSharedObj)) {
            throw new Error('Invalid input shared object');
        }
        const amount = BigInt(types_1.bcs.de(bcs_1.BCS.U64, Uint8Array.from(inputAmount.Pure)));
        if (!(0, utils_1.isImmOrOwnedObj)(inputStakedSui.Object)) {
            throw new Error('Invalid input shared object');
        }
        // make sure we parsed the transaction correctly by rebuilding it and comparing the transaction blocks
        (0, compareTransactionBlocks_1.assertEqualTransactionBlocks)({ inputs, transactions }, unstakingBuilder_1.UnstakingBuilder.getTransactionBlockDataReserialized(inputStakedSui.Object.ImmOrOwned, amount));
        return {
            stakedObjectRef: inputStakedSui.Object.ImmOrOwned,
            amount,
        };
    }
    static parseTransactionPair(inputs, transactions) {
        if (transactions.length !== 2) {
            throw new Error('Invalid transaction pair');
        }
        if (!builder_1.MoveCallTransaction.is(transactions[0]) || !builder_1.MoveCallTransaction.is(transactions[1])) {
            throw new Error('Invalid transaction pair');
        }
        if (!Array.isArray(inputs) || inputs.length !== 3) {
            throw new Error('Invalid inputs');
        }
        const [inputStakedSui, inputAmount, inputSharedObj] = inputs;
        if (!builder_1.TransactionBlockInput.is(inputStakedSui) ||
            !builder_1.TransactionBlockInput.is(inputAmount) ||
            !builder_1.TransactionBlockInput.is(inputSharedObj)) {
            // for unclear reasons there seem to be two different serialization formats that we are dealing with
            // try the other one here
            return this.parseTransactionPairReserialized(
            // we have length checked these earlier
            inputs, transactions);
        }
        if (inputStakedSui.type !== 'object' ||
            inputAmount.type !== 'pure' ||
            typeof inputAmount.value !== 'string' ||
            inputSharedObj.type !== 'object' ||
            !builder_1.ObjectCallArg.is(inputStakedSui.value) ||
            !(0, utils_1.isImmOrOwnedObj)(inputStakedSui.value.Object)) {
            throw new Error('Invalid inputs');
        }
        const amount = BigInt(inputAmount.value);
        // make sure we parsed the transaction correctly by rebuilding it and comparing the transaction blocks
        (0, compareTransactionBlocks_1.assertEqualTransactionBlocks)({ inputs, transactions }, unstakingBuilder_1.UnstakingBuilder.getTransactionBlockData(inputStakedSui.value.Object.ImmOrOwned, amount));
        return {
            stakedObjectRef: inputStakedSui.value.Object.ImmOrOwned,
            amount,
        };
    }
    static parseTransactionSingle(inputs, tx) {
        if (!builder_1.MoveCallTransaction.is(tx) || !builder_1.TransactionBlockInput.is(tx.arguments[1])) {
            throw new Error('Invalid transaction');
        }
        const stakedSuiInputIdx = tx.arguments[1].index;
        let stakedSuiInput = inputs[stakedSuiInputIdx];
        if (!builder_1.TransactionBlockInput.is(stakedSuiInput)) {
            // for unclear reasons, in tests the stakedSuiInput is not a TransactionBlockInput sometimes
            if (!builder_1.ObjectCallArg.is(stakedSuiInput)) {
                throw new Error('Invalid transaction');
            }
        }
        if ('Object' in stakedSuiInput && (0, utils_1.isImmOrOwnedObj)(stakedSuiInput.Object)) {
            stakedSuiInput = stakedSuiInput.Object.ImmOrOwned;
        }
        else if ('value' in stakedSuiInput && (0, utils_1.isImmOrOwnedObj)(stakedSuiInput.value.Object)) {
            stakedSuiInput = stakedSuiInput.value.Object.ImmOrOwned;
        }
        else {
            throw new Error('Invalid transaction');
        }
        if (!types_1.SuiObjectRef.is(stakedSuiInput)) {
            throw new Error('Invalid transaction');
        }
        return {
            stakedObjectRef: stakedSuiInput,
        };
    }
    static parseTransaction(tx) {
        const { inputs, transactions } = tx;
        if (transactions.length === 1) {
            return UnstakingTransaction.parseTransactionSingle(inputs, transactions[0]);
        }
        else if (transactions.length === 2) {
            return UnstakingTransaction.parseTransactionPair(inputs, transactions);
        }
        else {
            throw new sdk_core_1.InvalidTransactionError('Invalid transaction');
        }
    }
    /**
     * Load the input and output data on this transaction.
     */
    loadInputsAndOutputs() {
        if (!this.suiTransaction) {
            return;
        }
        const parsed = UnstakingTransaction.parseTransaction(this.suiTransaction.tx);
        const { inputs, outputs } = this.getEntriesForStakedSuiInput(parsed.stakedObjectRef, parsed.amount);
        this._inputs = inputs;
        this._outputs = outputs;
    }
    /**
     * Sets this transaction payload
     *
     * @param {string} rawTransaction
     */
    fromRawTransaction(rawTransaction) {
        try {
            utils_1.default.isValidRawTransaction(rawTransaction);
            this._suiTransaction = transaction_1.Transaction.deserializeSuiTransaction(rawTransaction);
            this._type = utils_1.default.getTransactionType(this._suiTransaction.type);
            this._id = this._suiTransaction.id;
            this.loadInputsAndOutputs();
        }
        catch (e) {
            throw e;
        }
    }
    /**
     * Helper function for serialize() to get the correct txData with transaction type
     *
     * @return {TxData}
     */
    getTxData() {
        if (!this._suiTransaction) {
            throw new sdk_core_1.InvalidTransactionError('empty transaction');
        }
        const inputs = this._suiTransaction.tx.inputs.map((input, index) => {
            if (input.hasOwnProperty('Object')) {
                return input;
            }
            if (input.hasOwnProperty('Pure')) {
                if (input.Pure.length === constants_1.SUI_ADDRESS_LENGTH) {
                    const address = (0, types_1.normalizeSuiAddress)(builder_1.builder.de(bcs_1.BCS.ADDRESS, buffer_1.Buffer.from(input.Pure).toString('base64'), 'base64'));
                    return builder_1.Inputs.Pure(address, bcs_1.BCS.ADDRESS);
                }
                else {
                    const amount = builder_1.builder.de(bcs_1.BCS.U64, buffer_1.Buffer.from(input.Pure).toString('base64'), 'base64');
                    return builder_1.Inputs.Pure(amount, bcs_1.BCS.U64);
                }
            }
            if (input.kind === 'Input' && (input.value.hasOwnProperty('Object') || input.value.hasOwnProperty('Pure'))) {
                return input.value;
            }
            // what's left is the pure number or address string
            return builder_1.Inputs.Pure(input.value, input.type === 'pure' ? bcs_1.BCS.U64 : bcs_1.BCS.ADDRESS);
        });
        const programmableTx = {
            inputs: inputs,
            transactions: this._suiTransaction.tx.transactions,
        };
        return {
            sender: this._suiTransaction.sender,
            expiration: { None: null },
            gasData: this._suiTransaction.gasData,
            kind: {
                ProgrammableTransaction: programmableTx,
            },
        };
    }
    /**
     * Returns a complete explanation for a unstaking transaction
     *
     * @param {TxData} json The transaction data in json format
     * @param {TransactionExplanation} explanationResult The transaction explanation to be completed
     * @returns {TransactionExplanation}
     */
    explainWithdrawStakedSuiTransaction(json, explanationResult) {
        const outputs = [
            {
                address: this.suiTransaction.sender,
                amount: constants_1.AMOUNT_UNKNOWN_TEXT,
            },
        ];
        const outputAmount = constants_1.AMOUNT_UNKNOWN_TEXT;
        return {
            ...explanationResult,
            outputAmount,
            outputs,
        };
    }
}
exports.UnstakingTransaction = UnstakingTransaction;
//# sourceMappingURL=data:application/json;base64,