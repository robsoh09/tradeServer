"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnstakingBuilder = void 0;
const bcs_1 = require("@mysten/bcs");
const sdk_core_1 = require("@bitgo/sdk-core");
const iface_1 = require("./iface");
const transactionBuilder_1 = require("./transactionBuilder");
const assert_1 = __importDefault(require("assert"));
const builder_1 = require("./mystenlab/builder");
const framework_1 = require("./mystenlab/framework");
const unstakingTransaction_1 = require("./unstakingTransaction");
const utils_1 = __importDefault(require("./utils"));
const types_1 = require("./mystenlab/types");
class UnstakingBuilder extends transactionBuilder_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._transaction = new unstakingTransaction_1.UnstakingTransaction(_coinConfig);
    }
    /**
     * Build a MoveCall transaction ready to be signed and executed.
     *
     * @returns {BitGoSuiTransaction} an unsigned Sui transaction
     */
    buildUnstakeTransaction() {
        return {
            type: iface_1.SuiTransactionType.WithdrawStake,
            sender: this._sender,
            tx: {
                inputs: [],
                transactions: [],
            },
            gasData: this._gasData,
        };
    }
    /**
     * Get staking transaction type
     *
     * @return {TransactionType}
     * @protected
     */
    get transactionType() {
        return sdk_core_1.TransactionType.StakingClaim;
    }
    /** @inheritdoc */
    validateTransaction(transaction) {
        if (!transaction.suiTransaction) {
            return;
        }
        this.validateTransactionFields();
    }
    /** @inheritdoc */
    sign(key) {
        this.transaction.setSuiTransaction(this.buildSuiTransaction());
        super.sign(key);
    }
    /**
     * Create a new transaction for withdrawing coins ready to be signed
     *
     * @param {RequestWithdrawStakedSui} request
     */
    unstake(request) {
        this.validateSuiObjectRef(request.stakedSui, 'stakedSui');
        if (request.amount !== undefined) {
            if (!utils_1.default.isValidAmount(request.amount)) {
                throw new Error(`invalid amount: ${request.amount}`);
            }
        }
        this._withdrawDelegation = request;
        return this;
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        const tx = new unstakingTransaction_1.UnstakingTransaction(this._coinConfig);
        this.validateRawTransaction(rawTransaction);
        tx.fromRawTransaction(rawTransaction);
        this.initBuilder(tx);
        return this.transaction;
    }
    /** @inheritdoc */
    async buildImplementation() {
        this.transaction.setSuiTransaction(this.buildSuiTransaction());
        this.transaction.transactionType(this.transactionType);
        if (this._signer) {
            this.transaction.sign(this._signer);
        }
        this._signatures.forEach((signature) => {
            this.transaction.addSignature(signature.publicKey, signature.signature);
        });
        this.transaction.loadInputsAndOutputs();
        return this.transaction;
    }
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     *
     * @param {StakingTransaction} tx the transaction data
     */
    initBuilder(tx) {
        this._transaction = tx;
        if (tx.signature && tx.signature.length > 0) {
            this._signatures = [tx.suiSignature];
        }
        const txData = tx.toJson();
        this.type(iface_1.SuiTransactionType.WithdrawStake);
        this.sender(txData.sender);
        this.gasData(txData.gasData);
        const parsed = unstakingTransaction_1.UnstakingTransaction.parseTransaction(tx.suiTransaction.tx);
        this.unstake({
            stakedSui: {
                // it is a bit unclear why we have to normalize this way
                ...parsed.stakedObjectRef,
                objectId: (0, types_1.normalizeSuiObjectId)(parsed.stakedObjectRef.objectId),
                version: Number(parsed.stakedObjectRef.version),
            },
            amount: parsed.amount === undefined ? undefined : Number(parsed.amount),
        });
    }
    /**
     * Validates all fields are defined
     */
    validateTransactionFields() {
        (0, assert_1.default)(this._type, new sdk_core_1.BuildTransactionError('type is required before building'));
        (0, assert_1.default)(this._sender, new sdk_core_1.BuildTransactionError('sender is required before building'));
        (0, assert_1.default)(this._withdrawDelegation.stakedSui, new sdk_core_1.BuildTransactionError('stakedSui object is required before building'));
        (0, assert_1.default)(this._gasData, new sdk_core_1.BuildTransactionError('gasData is required before building'));
        this.validateGasData(this._gasData);
    }
    static getTransactionBlockData(objectRef, amount) {
        const txb = new builder_1.TransactionBlock();
        const targetSplit = `${framework_1.SUI_SYSTEM_ADDRESS}::${framework_1.SUI_STAKING_POOL_MODULE_NAME}::${framework_1.SUI_STAKING_POOL_SPLIT_FUN_NAME}`;
        const targetWithdrawStake = `${framework_1.SUI_SYSTEM_ADDRESS}::${framework_1.SUI_SYSTEM_MODULE_NAME}::${framework_1.WITHDRAW_STAKE_FUN_NAME}`;
        if (amount === undefined) {
            txb.moveCall({
                target: targetWithdrawStake,
                arguments: [txb.object(builder_1.Inputs.SharedObjectRef(framework_1.SUI_SYSTEM_STATE_OBJECT)), txb.pure(builder_1.Inputs.ObjectRef(objectRef))],
            });
        }
        else {
            txb.moveCall({
                target: targetSplit,
                arguments: [txb.object(builder_1.Inputs.ObjectRef(objectRef)), txb.pure(amount)],
            });
            txb.moveCall({
                target: targetWithdrawStake,
                arguments: [
                    txb.object(builder_1.Inputs.SharedObjectRef(framework_1.SUI_SYSTEM_STATE_OBJECT)),
                    { kind: 'NestedResult', index: 0, resultIndex: 0 },
                ],
            });
        }
        return txb.blockData;
    }
    static getTransactionBlockDataReserialized(objectRef, amount) {
        const inputs = [
            { Object: { ImmOrOwned: objectRef } },
            builder_1.Inputs.Pure(amount, bcs_1.BCS.U64),
            {
                Object: {
                    Shared: {
                        objectId: '0000000000000000000000000000000000000000000000000000000000000005',
                        initialSharedVersion: '1',
                        mutable: true,
                    },
                },
            },
        ];
        const transactions = [
            {
                kind: 'MoveCall',
                target: '0000000000000000000000000000000000000000000000000000000000000003::staking_pool::split',
                arguments: [
                    {
                        kind: 'Input',
                        index: 0,
                    },
                    {
                        kind: 'Input',
                        index: 1,
                    },
                ],
                typeArguments: [],
            },
            {
                kind: 'MoveCall',
                target: '0000000000000000000000000000000000000000000000000000000000000003::sui_system::request_withdraw_stake',
                arguments: [
                    {
                        kind: 'Input',
                        index: 2,
                    },
                    {
                        kind: 'NestedResult',
                        index: 0,
                        resultIndex: 0,
                    },
                ],
                typeArguments: [],
            },
        ];
        return { inputs, transactions };
    }
    /**
     * Build SuiTransaction
     *
     * @return {SuiTransaction<UnstakingProgrammableTransaction>}
     * @protected
     */
    buildSuiTransaction() {
        this.validateTransactionFields();
        const txData = UnstakingBuilder.getTransactionBlockData(this._withdrawDelegation.stakedSui, this._withdrawDelegation.amount === undefined ? undefined : BigInt(this._withdrawDelegation.amount));
        return {
            type: this._type,
            sender: this._sender,
            tx: {
                inputs: [...txData.inputs],
                transactions: [...txData.transactions],
            },
            gasData: {
                ...this._gasData,
            },
        };
    }
}
exports.UnstakingBuilder = UnstakingBuilder;
//# sourceMappingURL=data:application/json;base64,