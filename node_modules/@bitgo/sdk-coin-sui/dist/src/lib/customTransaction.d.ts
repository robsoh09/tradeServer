import { CustomProgrammableTransaction, TransactionExplanation, TxData } from './iface';
import { Transaction } from './transaction';
import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { BaseKey, Recipient } from '@bitgo/sdk-core';
export declare class CustomTransaction extends Transaction<CustomProgrammableTransaction> {
    private _rawTransaction;
    private _recipients;
    constructor(_coinConfig: Readonly<CoinConfig>);
    /**
     * @inheritdoc
     * @param rawTransaction
     */
    fromRawTransaction(rawTransaction: string): void;
    /**
     * @inheritdoc
     */
    get id(): string;
    /**
     * @inheritdoc
     */
    canSign(key: BaseKey): boolean;
    /**
     * @inheritdoc
     */
    toBroadcastFormat(): string;
    /**
     * @inheritdoc
     */
    loadInputsAndOutputs(): void;
    /**
     * Get the raw transaction base64 string
     */
    get rawTransaction(): string;
    /**
     * Get the recipients of the transaction if there is any transfers.
     */
    get recipients(): Recipient[];
    /**
     * @inheritdoc
     */
    getTxData(): TxData;
    /**
     * @inheritdoc
     */
    toJson(): TxData;
    /**
     * @inheritdoc
     */
    explainTransaction(): TransactionExplanation;
    /**
     * Returns a complete explanation of the custom transaction
     * @param json
     * @param explanationResult
     */
    private explainCustomTransaction;
}
//# sourceMappingURL=customTransaction.d.ts.map