/// <reference types="node" />
import { BaseKey, Entry, PublicKey as BasePublicKey, Signature, TransactionType } from '@bitgo/sdk-core';
import { UnstakingProgrammableTransaction, SuiTransaction, TransactionExplanation, TxData } from './iface';
import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { Buffer } from 'buffer';
import { Transaction } from './transaction';
import { SuiObjectRef } from './mystenlab/types';
export declare class UnstakingTransaction extends Transaction<UnstakingProgrammableTransaction> {
    constructor(_coinConfig: Readonly<CoinConfig>);
    get suiTransaction(): SuiTransaction<UnstakingProgrammableTransaction>;
    setSuiTransaction(tx: SuiTransaction<UnstakingProgrammableTransaction>): void;
    addSignature(publicKey: BasePublicKey, signature: Buffer): void;
    get suiSignature(): Signature;
    /** @inheritdoc */
    canSign(key: BaseKey): boolean;
    /** @inheritdoc */
    toBroadcastFormat(): string;
    /** @inheritdoc */
    toJson(): TxData;
    /** @inheritDoc */
    explainTransaction(): TransactionExplanation;
    /**
     * Set the transaction type.
     *
     * @param {TransactionType} transactionType The transaction type to be set.
     */
    transactionType(transactionType: TransactionType): void;
    getEntriesForStakedSuiInput(stakedSuiInput: SuiObjectRef, amount?: bigint): {
        inputs: Entry[];
        outputs: Entry[];
    };
    /**
     * @param inputs
     * @param transactions
     */
    static parseTransactionPairReserialized(inputs: [unknown, unknown, unknown], transactions: [unknown, unknown]): {
        stakedObjectRef: SuiObjectRef;
        amount: bigint;
    };
    static parseTransactionPair(inputs: SuiTransaction['tx']['inputs'], transactions: unknown[]): {
        stakedObjectRef: SuiObjectRef;
        amount: bigint;
    };
    static parseTransactionSingle(inputs: SuiTransaction['tx']['inputs'], tx: unknown): {
        stakedObjectRef: SuiObjectRef;
    };
    static parseTransaction(tx: UnstakingProgrammableTransaction): {
        stakedObjectRef: SuiObjectRef;
        amount?: bigint;
    };
    /**
     * Load the input and output data on this transaction.
     */
    loadInputsAndOutputs(): void;
    /**
     * Sets this transaction payload
     *
     * @param {string} rawTransaction
     */
    fromRawTransaction(rawTransaction: string): void;
    /**
     * Helper function for serialize() to get the correct txData with transaction type
     *
     * @return {TxData}
     */
    getTxData(): TxData;
    /**
     * Returns a complete explanation for a unstaking transaction
     *
     * @param {TxData} json The transaction data in json format
     * @param {TransactionExplanation} explanationResult The transaction explanation to be completed
     * @returns {TransactionExplanation}
     */
    explainWithdrawStakedSuiTransaction(json: TxData, explanationResult: TransactionExplanation): TransactionExplanation;
}
//# sourceMappingURL=unstakingTransaction.d.ts.map