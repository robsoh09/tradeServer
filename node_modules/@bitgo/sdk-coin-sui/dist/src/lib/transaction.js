"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const iface_1 = require("./iface");
const utils_1 = __importStar(require("./utils"));
const types_1 = require("./mystenlab/types");
const constants_1 = require("./constants");
const buffer_1 = require("buffer");
const bcs_1 = require("@mysten/bcs");
const bs58_1 = __importDefault(require("bs58"));
const TransactionDataBlock_1 = require("./mystenlab/builder/TransactionDataBlock");
const builder_1 = require("./mystenlab/builder");
const blake2b_1 = __importDefault(require("@bitgo/blake2b"));
const hash_1 = require("./mystenlab/cryptography/hash");
class Transaction extends sdk_core_1.BaseTransaction {
    constructor(_coinConfig) {
        super(_coinConfig);
    }
    get suiTransaction() {
        return this._suiTransaction;
    }
    setSuiTransaction(tx) {
        this._suiTransaction = tx;
    }
    /** @inheritDoc **/
    get id() {
        const dataBytes = this.getDataBytes();
        const hash = (0, hash_1.hashTypedData)('TransactionData', dataBytes);
        this._id = bs58_1.default.encode(hash);
        return this._id;
    }
    addSignature(publicKey, signature) {
        this._signatures.push(signature.toString('hex'));
        this._signature = { publicKey, signature };
        this.serialize();
    }
    get suiSignature() {
        return this._signature;
    }
    get serializedSig() {
        return this._serializedSig;
    }
    setSerializedSig(publicKey, signature) {
        const pubKey = buffer_1.Buffer.from(publicKey.pub, 'hex');
        const serialized_sig = new Uint8Array(1 + signature.length + pubKey.length);
        serialized_sig.set(constants_1.SIGNATURE_SCHEME_BYTES);
        serialized_sig.set(signature, 1);
        serialized_sig.set(pubKey, 1 + signature.length);
        this._serializedSig = serialized_sig;
    }
    /** @inheritdoc */
    canSign(key) {
        return true;
    }
    /**
     * Sign this transaction
     *
     * @param {KeyPair} signer key
     */
    sign(signer) {
        if (!this._suiTransaction) {
            throw new sdk_core_1.InvalidTransactionError('empty transaction to sign');
        }
        const intentMessage = this.signablePayload;
        const signature = signer.signMessageinUint8Array(intentMessage);
        this.setSerializedSig({ pub: signer.getKeys().pub }, buffer_1.Buffer.from(signature));
        this.addSignature({ pub: signer.getKeys().pub }, buffer_1.Buffer.from(signature));
    }
    /** @inheritdoc */
    toBroadcastFormat() {
        if (!this._suiTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction');
        }
        return this.serialize();
    }
    /**
     * Set the transaction type.
     *
     * @param {TransactionType} transactionType The transaction type to be set.
     */
    transactionType(transactionType) {
        this._type = transactionType;
    }
    getDataBytes() {
        const txData = this.getTxData();
        const txSer = builder_1.builder.ser('TransactionData', { V1: txData }, { maxSize: TransactionDataBlock_1.TRANSACTION_DATA_MAX_SIZE });
        return txSer.toBytes();
    }
    /** @inheritDoc */
    get signablePayload() {
        const dataBytes = this.getDataBytes();
        const intentMessage = this.messageWithIntent(utils_1.IntentScope.TransactionData, dataBytes);
        return buffer_1.Buffer.from((0, blake2b_1.default)(32).update(intentMessage).digest('binary'));
    }
    messageWithIntent(scope, message) {
        const intent = this.intentWithScope(scope);
        const intentMessage = new Uint8Array(intent.length + message.length);
        intentMessage.set(intent);
        intentMessage.set(message, intent.length);
        return intentMessage;
    }
    intentWithScope(scope) {
        return [scope, utils_1.IntentVersion.V0, utils_1.AppId.Sui];
    }
    serialize() {
        const dataBytes = this.getDataBytes();
        this._id = bs58_1.default.encode((0, hash_1.hashTypedData)('TransactionData', dataBytes));
        return (0, bcs_1.toB64)(dataBytes);
    }
    static deserializeSuiTransaction(serializedTx) {
        const data = (0, bcs_1.fromB64)(serializedTx);
        const transactionBlock = TransactionDataBlock_1.TransactionBlockDataBuilder.fromBytes(data);
        const inputs = transactionBlock.inputs.map((txInput) => txInput.value);
        const transactions = transactionBlock.transactions;
        const txType = this.getSuiTransactionType(transactions);
        return {
            id: transactionBlock.getDigest(),
            type: txType,
            sender: (0, types_1.normalizeSuiAddress)(transactionBlock.sender),
            tx: {
                inputs: inputs,
                transactions: transactions,
            },
            gasData: {
                payment: this.normalizeCoins(transactionBlock.gasConfig.payment),
                owner: (0, types_1.normalizeSuiAddress)(transactionBlock.gasConfig.owner),
                price: Number(transactionBlock.gasConfig.price),
                budget: Number(transactionBlock.gasConfig.budget),
            },
        };
    }
    static getSuiTransactionType(transactions) {
        // tricky to determine custom tx purely from a serialized tx, we can rely on following logic
        if (transactions.length == 1) {
            return utils_1.default.getSuiTransactionType(transactions[0]);
        }
        if (transactions.some((tx) => utils_1.default.getSuiTransactionType(tx) === iface_1.SuiTransactionType.AddStake)) {
            return iface_1.SuiTransactionType.AddStake;
        }
        if (transactions.some((tx) => utils_1.default.getSuiTransactionType(tx) === iface_1.SuiTransactionType.WithdrawStake)) {
            return iface_1.SuiTransactionType.WithdrawStake;
        }
        if (transactions.every((tx) => utils_1.default.getSuiTransactionType(tx) === iface_1.SuiTransactionType.Transfer)) {
            return iface_1.SuiTransactionType.Transfer;
        }
        return iface_1.SuiTransactionType.CustomTx;
    }
    static getProperGasData(k) {
        return {
            payment: [this.normalizeSuiObjectRef(k.gasData.payment)],
            owner: utils_1.default.normalizeHexId(k.gasData.owner),
            price: Number(k.gasData.price),
            budget: Number(k.gasData.budget),
        };
    }
    static normalizeCoins(coins) {
        return coins.map((coin) => {
            return this.normalizeSuiObjectRef(coin);
        });
    }
    static normalizeSuiObjectRef(obj) {
        return {
            objectId: (0, types_1.normalizeSuiObjectId)(obj.objectId),
            version: Number(obj.version),
            digest: obj.digest,
        };
    }
}
exports.Transaction = Transaction;
//# sourceMappingURL=data:application/json;base64,