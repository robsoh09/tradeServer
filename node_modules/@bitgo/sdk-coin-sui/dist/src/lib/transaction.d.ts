/// <reference types="node" />
import { BaseKey, BaseTransaction, PublicKey as BasePublicKey, Signature, TransactionType as BitGoTransactionType } from '@bitgo/sdk-core';
import { StakingProgrammableTransaction, SuiTransaction, TransferProgrammableTransaction, TxData } from './iface';
import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { GasData } from './mystenlab/types';
import { Buffer } from 'buffer';
import { KeyPair } from './keyPair';
export declare abstract class Transaction<T> extends BaseTransaction {
    protected _suiTransaction: SuiTransaction<T>;
    protected _signature: Signature;
    private _serializedSig;
    protected constructor(_coinConfig: Readonly<CoinConfig>);
    get suiTransaction(): SuiTransaction<T>;
    setSuiTransaction(tx: SuiTransaction<T>): void;
    /** @inheritDoc **/
    get id(): string;
    addSignature(publicKey: BasePublicKey, signature: Buffer): void;
    get suiSignature(): Signature;
    get serializedSig(): Uint8Array;
    setSerializedSig(publicKey: BasePublicKey, signature: Buffer): void;
    /** @inheritdoc */
    canSign(key: BaseKey): boolean;
    /**
     * Sign this transaction
     *
     * @param {KeyPair} signer key
     */
    sign(signer: KeyPair): void;
    /** @inheritdoc */
    toBroadcastFormat(): string;
    /** @inheritdoc */
    abstract toJson(): TxData;
    /**
     * Set the transaction type.
     *
     * @param {TransactionType} transactionType The transaction type to be set.
     */
    transactionType(transactionType: BitGoTransactionType): void;
    /**
     *  get the correct txData with transaction type
     */
    abstract getTxData(): TxData;
    /**
     * Load the input and output data on this transaction.
     */
    abstract loadInputsAndOutputs(): void;
    /**
     * Sets this transaction payload
     *
     * @param rawTransaction
     */
    abstract fromRawTransaction(rawTransaction: string): void;
    getDataBytes(): Uint8Array;
    /** @inheritDoc */
    get signablePayload(): Buffer;
    private messageWithIntent;
    private intentWithScope;
    serialize(): string;
    static deserializeSuiTransaction(serializedTx: string): SuiTransaction<TransferProgrammableTransaction | StakingProgrammableTransaction>;
    private static getSuiTransactionType;
    static getProperGasData(k: any): GasData;
    private static normalizeCoins;
    private static normalizeSuiObjectRef;
}
//# sourceMappingURL=transaction.d.ts.map