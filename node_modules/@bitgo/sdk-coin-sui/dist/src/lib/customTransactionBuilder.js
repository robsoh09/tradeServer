"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomTransactionBuilder = void 0;
const transactionBuilder_1 = require("./transactionBuilder");
const iface_1 = require("./iface");
const customTransaction_1 = require("./customTransaction");
const sdk_core_1 = require("@bitgo/sdk-core");
const transaction_1 = require("./transaction");
const assert_1 = __importDefault(require("assert"));
const utils_1 = __importDefault(require("./utils"));
class CustomTransactionBuilder extends transactionBuilder_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._transaction = new customTransaction_1.CustomTransaction(_coinConfig);
    }
    get transactionType() {
        return sdk_core_1.TransactionType.CustomTx;
    }
    /**
     * set the raw transaction base64 string
     * @param rawTransaction
     */
    rawTransaction(rawTransaction) {
        this.validateRawTransaction(rawTransaction);
        this._rawTransaction = rawTransaction;
        return this;
    }
    /**
     * @inheritdoc
     */
    fromImplementation(rawTransaction) {
        const tx = new customTransaction_1.CustomTransaction(this._coinConfig);
        this.validateRawTransaction(rawTransaction);
        tx.fromRawTransaction(rawTransaction);
        this.initBuilder(tx);
        this.validateTransaction(tx);
        return this.transaction;
    }
    /**
     * @inheritdoc
     */
    async buildImplementation() {
        this.transaction.setSuiTransaction(this.buildSuiTransaction());
        this.transaction.transactionType(this.transactionType);
        if (this._signer) {
            this.transaction.sign(this._signer);
        }
        if (this.transaction.signature.length === 0) {
            this._signatures.forEach((signature) => {
                this.transaction.addSignature(signature.publicKey, signature.signature);
            });
        }
        this.transaction.loadInputsAndOutputs();
        return this.transaction;
    }
    /**
     * Currently custom tx only allows a combination of 3 types of SUI transactions:
     * 1. SplitCoins
     * 2. TransferObjects
     * 3. MoveCall
     * @inheritdoc
     */
    validateTransaction(transaction) {
        if (!transaction.suiTransaction) {
            return;
        }
        this.validateTransactionFields();
        try {
            this.transaction.suiTransaction.tx.transactions.forEach((tx) => {
                utils_1.default.getSuiTransactionType(tx);
            });
        }
        catch (e) {
            if (e instanceof sdk_core_1.InvalidTransactionError) {
                throw new sdk_core_1.BuildTransactionError(e.message);
            }
            throw e;
        }
    }
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     * @param tx
     */
    initBuilder(tx) {
        this._transaction = tx;
        if (tx.signature && tx.signature.length > 0) {
            this._signatures = [tx.suiSignature];
        }
        this.type(iface_1.SuiTransactionType.CustomTx);
        const txData = tx.toJson();
        this.sender(txData.sender);
        this.rawTransaction(tx.rawTransaction);
        this.gasData(txData.gasData);
    }
    /**
     * Validates all fields are defined
     */
    validateTransactionFields() {
        (0, assert_1.default)(this._type, new sdk_core_1.BuildTransactionError('type is required before building'));
        (0, assert_1.default)(this._sender, new sdk_core_1.BuildTransactionError('sender is required before building'));
        (0, assert_1.default)(this._gasData, new sdk_core_1.BuildTransactionError('gasData is required before building'));
        (0, assert_1.default)(this._rawTransaction, new sdk_core_1.BuildTransactionError('rawTransaction is required before building'));
        this.validateGasData(this._gasData);
    }
    /**
     * Build the SuiTransaction object
     */
    buildSuiTransaction() {
        this.validateTransactionFields();
        return transaction_1.Transaction.deserializeSuiTransaction(this._rawTransaction);
    }
}
exports.CustomTransactionBuilder = CustomTransactionBuilder;
//# sourceMappingURL=data:application/json;base64,