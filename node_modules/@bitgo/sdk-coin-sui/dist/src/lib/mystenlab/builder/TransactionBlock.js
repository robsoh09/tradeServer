"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _TransactionBlock_blockData;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBlock = void 0;
const bcs_1 = require("@mysten/bcs");
const superstruct_1 = require("superstruct");
const types_1 = require("../types");
const Transactions_1 = require("./Transactions");
const Inputs_1 = require("./Inputs");
const TransactionDataBlock_1 = require("./TransactionDataBlock");
const utils_1 = require("./utils");
function createTransactionResult(index) {
    const baseResult = { kind: 'Result', index };
    const nestedResults = [];
    const nestedResultFor = (resultIndex) => {
        var _a;
        return ((_a = nestedResults[resultIndex]) !== null && _a !== void 0 ? _a : (nestedResults[resultIndex] = {
            kind: 'NestedResult',
            index,
            resultIndex,
        }));
    };
    return new Proxy(baseResult, {
        set() {
            throw new Error('The transaction result is a proxy, and does not support setting properties directly');
        },
        // TODO: Instead of making this return a concrete argument, we should ideally
        // make it reference-based (so that this gets resolved at build-time), which
        // allows re-ordering transactions.
        get(target, property) {
            // This allows this transaction argument to be used in the singular form:
            if (property in target) {
                return Reflect.get(target, property);
            }
            // Support destructuring:
            if (property === Symbol.iterator) {
                return function* () {
                    let i = 0;
                    while (true) {
                        yield nestedResultFor(i);
                        i++;
                    }
                };
            }
            if (typeof property === 'symbol')
                return;
            const resultIndex = parseInt(property, 10);
            if (Number.isNaN(resultIndex) || resultIndex < 0)
                return;
            return nestedResultFor(resultIndex);
        },
    });
}
const TRANSACTION_BRAND = Symbol.for('@mysten/transaction');
// The maximum number of gas objects that can be selected for one transaction.
const MAX_GAS_OBJECTS = 256;
// The maximum gas that is allowed.
const MAX_GAS = 1000000000;
// A guess about how much overhead each coin provides for gas calculations.
// @ts-ignore
const GAS_OVERHEAD_PER_COIN = 10n;
/**
 * Transaction Builder
 */
class TransactionBlock {
    constructor(transaction) {
        _TransactionBlock_blockData.set(this, void 0);
        __classPrivateFieldSet(this, _TransactionBlock_blockData, new TransactionDataBlock_1.TransactionBlockDataBuilder(transaction ? __classPrivateFieldGet(transaction, _TransactionBlock_blockData, "f") : undefined), "f");
    }
    /** Returns `true` if the object is an instance of the Transaction builder class. */
    static is(obj) {
        return !!obj && typeof obj === 'object' && obj[TRANSACTION_BRAND] === true;
    }
    /**
     * Converts from a serialize transaction kind (built with `build({ onlyTransactionKind: true })`) to a `Transaction` class.
     * Supports either a byte array, or base64-encoded bytes.
     */
    static fromKind(serialized) {
        const tx = new TransactionBlock();
        __classPrivateFieldSet(tx, _TransactionBlock_blockData, TransactionDataBlock_1.TransactionBlockDataBuilder.fromKindBytes(typeof serialized === 'string' ? (0, bcs_1.fromB64)(serialized) : serialized), "f");
        return tx;
    }
    /**
     * Converts from a serialized transaction format to a `Transaction` class.
     * There are two supported serialized formats:
     * - A string returned from `Transaction#serialize`. The serialized format must be compatible, or it will throw an error.
     * - A byte array (or base64-encoded bytes) containing BCS transaction data.
     */
    static from(serialized) {
        const tx = new TransactionBlock();
        // Check for bytes:
        if (typeof serialized !== 'string' || !serialized.startsWith('{')) {
            __classPrivateFieldSet(tx, _TransactionBlock_blockData, TransactionDataBlock_1.TransactionBlockDataBuilder.fromBytes(typeof serialized === 'string' ? (0, bcs_1.fromB64)(serialized) : serialized), "f");
        }
        else {
            __classPrivateFieldSet(tx, _TransactionBlock_blockData, TransactionDataBlock_1.TransactionBlockDataBuilder.restore(JSON.parse(serialized)), "f");
        }
        return tx;
    }
    /** A helper to retrieve the Transaction builder `Transactions` */
    static get Transactions() {
        return Transactions_1.Transactions;
    }
    /** A helper to retrieve the Transaction builder `Inputs` */
    static get Inputs() {
        return Inputs_1.Inputs;
    }
    setSender(sender) {
        __classPrivateFieldGet(this, _TransactionBlock_blockData, "f").sender = sender;
    }
    /**
     * Sets the sender only if it has not already been set.
     * This is useful for sponsored transaction flows where the sender may not be the same as the signer address.
     */
    setSenderIfNotSet(sender) {
        if (!__classPrivateFieldGet(this, _TransactionBlock_blockData, "f").sender) {
            __classPrivateFieldGet(this, _TransactionBlock_blockData, "f").sender = sender;
        }
    }
    setExpiration(expiration) {
        __classPrivateFieldGet(this, _TransactionBlock_blockData, "f").expiration = expiration;
    }
    setGasPrice(price) {
        __classPrivateFieldGet(this, _TransactionBlock_blockData, "f").gasConfig.price = String(price);
    }
    setGasBudget(budget) {
        __classPrivateFieldGet(this, _TransactionBlock_blockData, "f").gasConfig.budget = String(budget);
    }
    setGasOwner(owner) {
        __classPrivateFieldGet(this, _TransactionBlock_blockData, "f").gasConfig.owner = owner;
    }
    setGasPayment(payments) {
        if (payments.length >= MAX_GAS_OBJECTS) {
            throw new Error(`Payment objects exceed maximum amount ${MAX_GAS_OBJECTS}`);
        }
        __classPrivateFieldGet(this, _TransactionBlock_blockData, "f").gasConfig.payment = payments.map((payment) => (0, superstruct_1.mask)(payment, types_1.SuiObjectRef));
    }
    /** Get a snapshot of the transaction data, in JSON form: */
    get blockData() {
        return __classPrivateFieldGet(this, _TransactionBlock_blockData, "f").snapshot();
    }
    // Used to brand transaction classes so that they can be identified, even between multiple copies
    // of the builder.
    get [(_TransactionBlock_blockData = new WeakMap(), TRANSACTION_BRAND)]() {
        return true;
    }
    /** Returns an argument for the gas coin, to be used in a transaction. */
    get gas() {
        return { kind: 'GasCoin' };
    }
    /**
     * Dynamically create a new input, which is separate from the `input`. This is important
     * for generated clients to be able to define unique inputs that are non-overlapping with the
     * defined inputs.
     *
     * For `Uint8Array` type automatically convert the input into a `Pure` CallArg, since this
     * is the format required for custom serialization.
     *
     */
    input(type, value) {
        const index = __classPrivateFieldGet(this, _TransactionBlock_blockData, "f").inputs.length;
        const input = (0, utils_1.create)({
            kind: 'Input',
            // bigints can't be serialized to JSON, so just string-convert them here:
            value: typeof value === 'bigint' ? String(value) : value,
            index,
            type,
        }, Transactions_1.TransactionBlockInput);
        __classPrivateFieldGet(this, _TransactionBlock_blockData, "f").inputs.push(input);
        return input;
    }
    /**
     * Add a new object input to the transaction.
     */
    object(value) {
        const id = (0, Inputs_1.getIdFromCallArg)(value);
        // deduplicate
        const inserted = __classPrivateFieldGet(this, _TransactionBlock_blockData, "f").inputs.find((i) => i.type === 'object' && id === (0, Inputs_1.getIdFromCallArg)(i.value));
        return inserted !== null && inserted !== void 0 ? inserted : this.input('object', value);
    }
    /**
     * Add a new non-object input to the transaction.
     */
    pure(
    /**
     * The pure value that will be used as the input value. If this is a Uint8Array, then the value
     * is assumed to be raw bytes, and will be used directly.
     */
    value, 
    /**
     * The BCS type to serialize the value into. If not provided, the type will automatically be determined
     * based on how the input is used.
     */
    type) {
        // TODO: we can also do some deduplication here
        return this.input('pure', value instanceof Uint8Array ? Inputs_1.Inputs.Pure(value) : type ? Inputs_1.Inputs.Pure(value, type) : value);
    }
    /** Add a transaction to the transaction block. */
    add(transaction) {
        const index = __classPrivateFieldGet(this, _TransactionBlock_blockData, "f").transactions.push(transaction);
        return createTransactionResult(index - 1);
    }
    // Method shorthands:
    splitCoins(...args) {
        return this.add(Transactions_1.Transactions.SplitCoins(...args));
    }
    mergeCoins(...args) {
        return this.add(Transactions_1.Transactions.MergeCoins(...args));
    }
    publish(...args) {
        return this.add(Transactions_1.Transactions.Publish(...args));
    }
    moveCall(...args) {
        return this.add(Transactions_1.Transactions.MoveCall(...args));
    }
    transferObjects(...args) {
        return this.add(Transactions_1.Transactions.TransferObjects(...args));
    }
    makeMoveVec(...args) {
        return this.add(Transactions_1.Transactions.MakeMoveVec(...args));
    }
    /**
     * Serialize the transaction to a string so that it can be sent to a separate context.
     * This is different from `build` in that it does not serialize to BCS bytes, and instead
     * uses a separate format that is unique to the transaction builder. This allows
     * us to serialize partially-complete transactions, that can then be completed and
     * built in a separate context.
     *
     * For example, a dapp can construct a transaction, but not provide gas objects
     * or a gas budget. The transaction then can be sent to the wallet, where this
     * information is automatically filled in (e.g. by querying for coin objects
     * and performing a dry run).
     */
    serialize() {
        return JSON.stringify(__classPrivateFieldGet(this, _TransactionBlock_blockData, "f").snapshot());
    }
    /** Build the transaction to BCS bytes. */
    async build({ onlyTransactionKind } = {}) {
        return __classPrivateFieldGet(this, _TransactionBlock_blockData, "f").build({ onlyTransactionKind });
    }
    /** Derive transaction digest */
    async getDigest() {
        return __classPrivateFieldGet(this, _TransactionBlock_blockData, "f").getDigest();
    }
}
exports.TransactionBlock = TransactionBlock;
//# sourceMappingURL=data:application/json;base64,