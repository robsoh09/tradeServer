"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeSuiObjectId = exports.normalizeSuiAddress = exports.isValidSuiObjectId = exports.isValidSuiAddress = exports.SUI_ADDRESS_LENGTH = exports.isValidTransactionDigest = exports.SuiJsonValue = exports.ObjectOwner = exports.SequenceNumber = exports.SuiAddress = exports.ObjectId = exports.TransactionEventDigest = exports.TransactionEffectsDigest = exports.TransactionDigest = void 0;
const superstruct_1 = require("superstruct");
const bcs_1 = require("@mysten/bcs");
exports.TransactionDigest = (0, superstruct_1.string)();
exports.TransactionEffectsDigest = (0, superstruct_1.string)();
exports.TransactionEventDigest = (0, superstruct_1.string)();
exports.ObjectId = (0, superstruct_1.string)();
exports.SuiAddress = (0, superstruct_1.string)();
exports.SequenceNumber = (0, superstruct_1.number)();
exports.ObjectOwner = (0, superstruct_1.union)([
    (0, superstruct_1.object)({
        AddressOwner: exports.SuiAddress,
    }),
    (0, superstruct_1.object)({
        ObjectOwner: exports.SuiAddress,
    }),
    (0, superstruct_1.object)({
        Shared: (0, superstruct_1.object)({
            initial_shared_version: (0, superstruct_1.number)(),
        }),
    }),
    (0, superstruct_1.literal)('Immutable'),
]);
exports.SuiJsonValue = (0, superstruct_1.define)('SuiJsonValue', () => true);
// source of truth is
// https://github.com/MystenLabs/sui/blob/acb2b97ae21f47600e05b0d28127d88d0725561d/crates/sui-types/src/base_types.rs#L171
const TX_DIGEST_LENGTH = 32;
/** Returns whether the tx digest is valid based on the serialization format */
function isValidTransactionDigest(value) {
    try {
        const buffer = (0, bcs_1.fromB58)(value);
        return buffer.length === TX_DIGEST_LENGTH;
    }
    catch (e) {
        return false;
    }
}
exports.isValidTransactionDigest = isValidTransactionDigest;
// TODO - can we automatically sync this with rust length definition?
// Source of truth is
// https://github.com/MystenLabs/sui/blob/acb2b97ae21f47600e05b0d28127d88d0725561d/crates/sui-types/src/base_types.rs#L67
// which uses the Move account address length
// https://github.com/move-language/move/blob/67ec40dc50c66c34fd73512fcc412f3b68d67235/language/move-core/types/src/account_address.rs#L23 .
exports.SUI_ADDRESS_LENGTH = 32;
function isValidSuiAddress(value) {
    return isHex(value) && getHexByteLength(value) === exports.SUI_ADDRESS_LENGTH;
}
exports.isValidSuiAddress = isValidSuiAddress;
function isValidSuiObjectId(value) {
    return isValidSuiAddress(value);
}
exports.isValidSuiObjectId = isValidSuiObjectId;
/**
 * Perform the following operations:
 * 1. Make the address lower case
 * 2. Prepend `0x` if the string does not start with `0x`.
 * 3. Add more zeros if the length of the address(excluding `0x`) is less than `SUI_ADDRESS_LENGTH`
 *
 * WARNING: if the address value itself starts with `0x`, e.g., `0x0x`, the default behavior
 * is to treat the first `0x` not as part of the address. The default behavior can be overridden by
 * setting `forceAdd0x` to true
 *
 */
function normalizeSuiAddress(value, forceAdd0x = false) {
    let address = value.toLowerCase();
    if (!forceAdd0x && address.startsWith('0x')) {
        address = address.slice(2);
    }
    return `0x${address.padStart(exports.SUI_ADDRESS_LENGTH * 2, '0')}`;
}
exports.normalizeSuiAddress = normalizeSuiAddress;
function normalizeSuiObjectId(value, forceAdd0x = false) {
    return normalizeSuiAddress(value, forceAdd0x);
}
exports.normalizeSuiObjectId = normalizeSuiObjectId;
function isHex(value) {
    return /^(0x|0X)?[a-fA-F0-9]+$/.test(value) && value.length % 2 === 0;
}
function getHexByteLength(value) {
    return /^(0x|0X)/.test(value) ? (value.length - 2) / 2 : value.length / 2;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9teXN0ZW5sYWIvdHlwZXMvY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZDQUFvRjtBQUVwRixxQ0FBc0M7QUFFekIsUUFBQSxpQkFBaUIsR0FBRyxJQUFBLG9CQUFNLEdBQUUsQ0FBQztBQUc3QixRQUFBLHdCQUF3QixHQUFHLElBQUEsb0JBQU0sR0FBRSxDQUFDO0FBR3BDLFFBQUEsc0JBQXNCLEdBQUcsSUFBQSxvQkFBTSxHQUFFLENBQUM7QUFHbEMsUUFBQSxRQUFRLEdBQUcsSUFBQSxvQkFBTSxHQUFFLENBQUM7QUFHcEIsUUFBQSxVQUFVLEdBQUcsSUFBQSxvQkFBTSxHQUFFLENBQUM7QUFHdEIsUUFBQSxjQUFjLEdBQUcsSUFBQSxvQkFBTSxHQUFFLENBQUM7QUFHMUIsUUFBQSxXQUFXLEdBQUcsSUFBQSxtQkFBSyxFQUFDO0lBQy9CLElBQUEsb0JBQU0sRUFBQztRQUNMLFlBQVksRUFBRSxrQkFBVTtLQUN6QixDQUFDO0lBQ0YsSUFBQSxvQkFBTSxFQUFDO1FBQ0wsV0FBVyxFQUFFLGtCQUFVO0tBQ3hCLENBQUM7SUFDRixJQUFBLG9CQUFNLEVBQUM7UUFDTCxNQUFNLEVBQUUsSUFBQSxvQkFBTSxFQUFDO1lBQ2Isc0JBQXNCLEVBQUUsSUFBQSxvQkFBTSxHQUFFO1NBQ2pDLENBQUM7S0FDSCxDQUFDO0lBQ0YsSUFBQSxxQkFBTyxFQUFDLFdBQVcsQ0FBQztDQUNyQixDQUFDLENBQUM7QUFJVSxRQUFBLFlBQVksR0FBRyxJQUFBLG9CQUFNLEVBQWUsY0FBYyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRTdFLHFCQUFxQjtBQUNyQiwwSEFBMEg7QUFDMUgsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7QUFFNUIsK0VBQStFO0FBQy9FLFNBQWdCLHdCQUF3QixDQUFDLEtBQWE7SUFDcEQsSUFBSTtRQUNGLE1BQU0sTUFBTSxHQUFHLElBQUEsYUFBTyxFQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLE9BQU8sTUFBTSxDQUFDLE1BQU0sS0FBSyxnQkFBZ0IsQ0FBQztLQUMzQztJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsT0FBTyxLQUFLLENBQUM7S0FDZDtBQUNILENBQUM7QUFQRCw0REFPQztBQUVELHFFQUFxRTtBQUNyRSxxQkFBcUI7QUFDckIseUhBQXlIO0FBQ3pILDZDQUE2QztBQUM3Qyw0SUFBNEk7QUFFL0gsUUFBQSxrQkFBa0IsR0FBRyxFQUFFLENBQUM7QUFDckMsU0FBZ0IsaUJBQWlCLENBQUMsS0FBYTtJQUM3QyxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsS0FBSywwQkFBa0IsQ0FBQztBQUN4RSxDQUFDO0FBRkQsOENBRUM7QUFFRCxTQUFnQixrQkFBa0IsQ0FBQyxLQUFhO0lBQzlDLE9BQU8saUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbEMsQ0FBQztBQUZELGdEQUVDO0FBRUQ7Ozs7Ozs7Ozs7R0FVRztBQUNILFNBQWdCLG1CQUFtQixDQUFDLEtBQWEsRUFBRSxhQUFzQixLQUFLO0lBQzVFLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxJQUFJLENBQUMsVUFBVSxJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDM0MsT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDNUI7SUFDRCxPQUFPLEtBQUssT0FBTyxDQUFDLFFBQVEsQ0FBQywwQkFBa0IsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQztBQUM5RCxDQUFDO0FBTkQsa0RBTUM7QUFFRCxTQUFnQixvQkFBb0IsQ0FBQyxLQUFhLEVBQUUsYUFBc0IsS0FBSztJQUM3RSxPQUFPLG1CQUFtQixDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBRkQsb0RBRUM7QUFFRCxTQUFTLEtBQUssQ0FBQyxLQUFhO0lBQzFCLE9BQU8sd0JBQXdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN4RSxDQUFDO0FBRUQsU0FBUyxnQkFBZ0IsQ0FBQyxLQUFhO0lBQ3JDLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFDNUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmluZSwgSW5mZXIsIGxpdGVyYWwsIG51bWJlciwgb2JqZWN0LCBzdHJpbmcsIHVuaW9uIH0gZnJvbSAnc3VwZXJzdHJ1Y3QnO1xuaW1wb3J0IHsgQ2FsbEFyZyB9IGZyb20gJy4vc3VpLWJjcyc7XG5pbXBvcnQgeyBmcm9tQjU4IH0gZnJvbSAnQG15c3Rlbi9iY3MnO1xuXG5leHBvcnQgY29uc3QgVHJhbnNhY3Rpb25EaWdlc3QgPSBzdHJpbmcoKTtcbmV4cG9ydCB0eXBlIFRyYW5zYWN0aW9uRGlnZXN0ID0gSW5mZXI8dHlwZW9mIFRyYW5zYWN0aW9uRGlnZXN0PjtcblxuZXhwb3J0IGNvbnN0IFRyYW5zYWN0aW9uRWZmZWN0c0RpZ2VzdCA9IHN0cmluZygpO1xuZXhwb3J0IHR5cGUgVHJhbnNhY3Rpb25FZmZlY3RzRGlnZXN0ID0gSW5mZXI8dHlwZW9mIFRyYW5zYWN0aW9uRWZmZWN0c0RpZ2VzdD47XG5cbmV4cG9ydCBjb25zdCBUcmFuc2FjdGlvbkV2ZW50RGlnZXN0ID0gc3RyaW5nKCk7XG5leHBvcnQgdHlwZSBUcmFuc2FjdGlvbkV2ZW50RGlnZXN0ID0gSW5mZXI8dHlwZW9mIFRyYW5zYWN0aW9uRXZlbnREaWdlc3Q+O1xuXG5leHBvcnQgY29uc3QgT2JqZWN0SWQgPSBzdHJpbmcoKTtcbmV4cG9ydCB0eXBlIE9iamVjdElkID0gSW5mZXI8dHlwZW9mIE9iamVjdElkPjtcblxuZXhwb3J0IGNvbnN0IFN1aUFkZHJlc3MgPSBzdHJpbmcoKTtcbmV4cG9ydCB0eXBlIFN1aUFkZHJlc3MgPSBJbmZlcjx0eXBlb2YgU3VpQWRkcmVzcz47XG5cbmV4cG9ydCBjb25zdCBTZXF1ZW5jZU51bWJlciA9IG51bWJlcigpO1xuZXhwb3J0IHR5cGUgU2VxdWVuY2VOdW1iZXIgPSBJbmZlcjx0eXBlb2YgU2VxdWVuY2VOdW1iZXI+O1xuXG5leHBvcnQgY29uc3QgT2JqZWN0T3duZXIgPSB1bmlvbihbXG4gIG9iamVjdCh7XG4gICAgQWRkcmVzc093bmVyOiBTdWlBZGRyZXNzLFxuICB9KSxcbiAgb2JqZWN0KHtcbiAgICBPYmplY3RPd25lcjogU3VpQWRkcmVzcyxcbiAgfSksXG4gIG9iamVjdCh7XG4gICAgU2hhcmVkOiBvYmplY3Qoe1xuICAgICAgaW5pdGlhbF9zaGFyZWRfdmVyc2lvbjogbnVtYmVyKCksXG4gICAgfSksXG4gIH0pLFxuICBsaXRlcmFsKCdJbW11dGFibGUnKSxcbl0pO1xuZXhwb3J0IHR5cGUgT2JqZWN0T3duZXIgPSBJbmZlcjx0eXBlb2YgT2JqZWN0T3duZXI+O1xuXG5leHBvcnQgdHlwZSBTdWlKc29uVmFsdWUgPSBib29sZWFuIHwgbnVtYmVyIHwgc3RyaW5nIHwgQ2FsbEFyZyB8IEFycmF5PFN1aUpzb25WYWx1ZT47XG5leHBvcnQgY29uc3QgU3VpSnNvblZhbHVlID0gZGVmaW5lPFN1aUpzb25WYWx1ZT4oJ1N1aUpzb25WYWx1ZScsICgpID0+IHRydWUpO1xuXG4vLyBzb3VyY2Ugb2YgdHJ1dGggaXNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NeXN0ZW5MYWJzL3N1aS9ibG9iL2FjYjJiOTdhZTIxZjQ3NjAwZTA1YjBkMjgxMjdkODhkMDcyNTU2MWQvY3JhdGVzL3N1aS10eXBlcy9zcmMvYmFzZV90eXBlcy5ycyNMMTcxXG5jb25zdCBUWF9ESUdFU1RfTEVOR1RIID0gMzI7XG5cbi8qKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHR4IGRpZ2VzdCBpcyB2YWxpZCBiYXNlZCBvbiB0aGUgc2VyaWFsaXphdGlvbiBmb3JtYXQgKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkVHJhbnNhY3Rpb25EaWdlc3QodmFsdWU6IHN0cmluZyk6IHZhbHVlIGlzIFRyYW5zYWN0aW9uRGlnZXN0IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBidWZmZXIgPSBmcm9tQjU4KHZhbHVlKTtcbiAgICByZXR1cm4gYnVmZmVyLmxlbmd0aCA9PT0gVFhfRElHRVNUX0xFTkdUSDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vLyBUT0RPIC0gY2FuIHdlIGF1dG9tYXRpY2FsbHkgc3luYyB0aGlzIHdpdGggcnVzdCBsZW5ndGggZGVmaW5pdGlvbj9cbi8vIFNvdXJjZSBvZiB0cnV0aCBpc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL015c3RlbkxhYnMvc3VpL2Jsb2IvYWNiMmI5N2FlMjFmNDc2MDBlMDViMGQyODEyN2Q4OGQwNzI1NTYxZC9jcmF0ZXMvc3VpLXR5cGVzL3NyYy9iYXNlX3R5cGVzLnJzI0w2N1xuLy8gd2hpY2ggdXNlcyB0aGUgTW92ZSBhY2NvdW50IGFkZHJlc3MgbGVuZ3RoXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbW92ZS1sYW5ndWFnZS9tb3ZlL2Jsb2IvNjdlYzQwZGM1MGM2NmMzNGZkNzM1MTJmY2M0MTJmM2I2OGQ2NzIzNS9sYW5ndWFnZS9tb3ZlLWNvcmUvdHlwZXMvc3JjL2FjY291bnRfYWRkcmVzcy5ycyNMMjMgLlxuXG5leHBvcnQgY29uc3QgU1VJX0FERFJFU1NfTEVOR1RIID0gMzI7XG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZFN1aUFkZHJlc3ModmFsdWU6IHN0cmluZyk6IHZhbHVlIGlzIFN1aUFkZHJlc3Mge1xuICByZXR1cm4gaXNIZXgodmFsdWUpICYmIGdldEhleEJ5dGVMZW5ndGgodmFsdWUpID09PSBTVUlfQUREUkVTU19MRU5HVEg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkU3VpT2JqZWN0SWQodmFsdWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gaXNWYWxpZFN1aUFkZHJlc3ModmFsdWUpO1xufVxuXG4vKipcbiAqIFBlcmZvcm0gdGhlIGZvbGxvd2luZyBvcGVyYXRpb25zOlxuICogMS4gTWFrZSB0aGUgYWRkcmVzcyBsb3dlciBjYXNlXG4gKiAyLiBQcmVwZW5kIGAweGAgaWYgdGhlIHN0cmluZyBkb2VzIG5vdCBzdGFydCB3aXRoIGAweGAuXG4gKiAzLiBBZGQgbW9yZSB6ZXJvcyBpZiB0aGUgbGVuZ3RoIG9mIHRoZSBhZGRyZXNzKGV4Y2x1ZGluZyBgMHhgKSBpcyBsZXNzIHRoYW4gYFNVSV9BRERSRVNTX0xFTkdUSGBcbiAqXG4gKiBXQVJOSU5HOiBpZiB0aGUgYWRkcmVzcyB2YWx1ZSBpdHNlbGYgc3RhcnRzIHdpdGggYDB4YCwgZS5nLiwgYDB4MHhgLCB0aGUgZGVmYXVsdCBiZWhhdmlvclxuICogaXMgdG8gdHJlYXQgdGhlIGZpcnN0IGAweGAgbm90IGFzIHBhcnQgb2YgdGhlIGFkZHJlc3MuIFRoZSBkZWZhdWx0IGJlaGF2aW9yIGNhbiBiZSBvdmVycmlkZGVuIGJ5XG4gKiBzZXR0aW5nIGBmb3JjZUFkZDB4YCB0byB0cnVlXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplU3VpQWRkcmVzcyh2YWx1ZTogc3RyaW5nLCBmb3JjZUFkZDB4OiBib29sZWFuID0gZmFsc2UpOiBTdWlBZGRyZXNzIHtcbiAgbGV0IGFkZHJlc3MgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICBpZiAoIWZvcmNlQWRkMHggJiYgYWRkcmVzcy5zdGFydHNXaXRoKCcweCcpKSB7XG4gICAgYWRkcmVzcyA9IGFkZHJlc3Muc2xpY2UoMik7XG4gIH1cbiAgcmV0dXJuIGAweCR7YWRkcmVzcy5wYWRTdGFydChTVUlfQUREUkVTU19MRU5HVEggKiAyLCAnMCcpfWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVTdWlPYmplY3RJZCh2YWx1ZTogc3RyaW5nLCBmb3JjZUFkZDB4OiBib29sZWFuID0gZmFsc2UpOiBPYmplY3RJZCB7XG4gIHJldHVybiBub3JtYWxpemVTdWlBZGRyZXNzKHZhbHVlLCBmb3JjZUFkZDB4KTtcbn1cblxuZnVuY3Rpb24gaXNIZXgodmFsdWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gL14oMHh8MFgpP1thLWZBLUYwLTldKyQvLnRlc3QodmFsdWUpICYmIHZhbHVlLmxlbmd0aCAlIDIgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGdldEhleEJ5dGVMZW5ndGgodmFsdWU6IHN0cmluZyk6IG51bWJlciB7XG4gIHJldHVybiAvXigweHwwWCkvLnRlc3QodmFsdWUpID8gKHZhbHVlLmxlbmd0aCAtIDIpIC8gMiA6IHZhbHVlLmxlbmd0aCAvIDI7XG59XG4iXX0=