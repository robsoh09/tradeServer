"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SuiSystemStateSummary = exports.SuiValidatorSummary = exports.CommitteeInfo = exports.DelegationStakingPool = exports.DelegationStakingPoolFields = exports.Contents = exports.ContentsFieldsWithdraw = exports.ContentsFields = exports.SuiSupplyFields = exports.StakeSubsidy = exports.StakeSubsidyFields = exports.DelegatedStake = exports.StakeObject = exports.Balance = void 0;
const superstruct_1 = require("superstruct");
const common_1 = require("./common");
const transactions_1 = require("./transactions");
// Staking
exports.Balance = (0, superstruct_1.object)({
    value: (0, superstruct_1.number)(),
});
exports.StakeObject = (0, superstruct_1.object)({
    stakedSuiId: common_1.ObjectId,
    stakeRequestEpoch: transactions_1.EpochId,
    stakeActiveEpoch: transactions_1.EpochId,
    principal: (0, superstruct_1.number)(),
    status: (0, superstruct_1.union)([(0, superstruct_1.literal)('Active'), (0, superstruct_1.literal)('Pending'), (0, superstruct_1.literal)('Unstaked')]),
    estimatedReward: (0, superstruct_1.optional)((0, superstruct_1.number)()),
});
exports.DelegatedStake = (0, superstruct_1.object)({
    validatorAddress: common_1.SuiAddress,
    stakingPool: common_1.ObjectId,
    stakes: (0, superstruct_1.array)(exports.StakeObject),
});
exports.StakeSubsidyFields = (0, superstruct_1.object)({
    balance: (0, superstruct_1.object)({ value: (0, superstruct_1.number)() }),
    distribution_counter: (0, superstruct_1.number)(),
    current_distribution_amount: (0, superstruct_1.number)(),
    stake_subsidy_period_length: (0, superstruct_1.number)(),
    stake_subsidy_decrease_rate: (0, superstruct_1.number)(),
});
exports.StakeSubsidy = (0, superstruct_1.object)({
    type: (0, superstruct_1.string)(),
    fields: exports.StakeSubsidyFields,
});
exports.SuiSupplyFields = (0, superstruct_1.object)({
    value: (0, superstruct_1.number)(),
});
exports.ContentsFields = (0, superstruct_1.object)({
    id: (0, superstruct_1.string)(),
    size: (0, superstruct_1.number)(),
    head: (0, superstruct_1.object)({ vec: (0, superstruct_1.array)() }),
    tail: (0, superstruct_1.object)({ vec: (0, superstruct_1.array)() }),
});
exports.ContentsFieldsWithdraw = (0, superstruct_1.object)({
    id: (0, superstruct_1.string)(),
    size: (0, superstruct_1.number)(),
});
exports.Contents = (0, superstruct_1.object)({
    type: (0, superstruct_1.string)(),
    fields: exports.ContentsFields,
});
exports.DelegationStakingPoolFields = (0, superstruct_1.object)({
    exchangeRates: (0, superstruct_1.object)({
        id: (0, superstruct_1.string)(),
        size: (0, superstruct_1.number)(),
    }),
    id: (0, superstruct_1.string)(),
    pendingStake: (0, superstruct_1.number)(),
    pendingPoolTokenWithdraw: (0, superstruct_1.number)(),
    pendingTotalSuiWithdraw: (0, superstruct_1.number)(),
    poolTokenBalance: (0, superstruct_1.number)(),
    rewardsPool: (0, superstruct_1.object)({ value: (0, superstruct_1.number)() }),
    activationEpoch: (0, superstruct_1.object)({ vec: (0, superstruct_1.array)() }),
    deactivationEpoch: (0, superstruct_1.object)({ vec: (0, superstruct_1.array)() }),
    suiBalance: (0, superstruct_1.number)(),
});
exports.DelegationStakingPool = (0, superstruct_1.object)({
    type: (0, superstruct_1.string)(),
    fields: exports.DelegationStakingPoolFields,
});
exports.CommitteeInfo = (0, superstruct_1.object)({
    epoch: (0, superstruct_1.number)(),
    /** Array of (validator public key, stake unit) tuple */
    validators: (0, superstruct_1.optional)((0, superstruct_1.array)((0, superstruct_1.tuple)([transactions_1.AuthorityName, (0, superstruct_1.number)()]))),
});
exports.SuiValidatorSummary = (0, superstruct_1.object)({
    suiAddress: common_1.SuiAddress,
    protocolPubkeyBytes: (0, superstruct_1.string)(),
    networkPubkeyBytes: (0, superstruct_1.string)(),
    workerPubkeyBytes: (0, superstruct_1.string)(),
    proofOfPossessionBytes: (0, superstruct_1.string)(),
    operationCapId: (0, superstruct_1.string)(),
    name: (0, superstruct_1.string)(),
    description: (0, superstruct_1.string)(),
    imageUrl: (0, superstruct_1.string)(),
    projectUrl: (0, superstruct_1.string)(),
    p2pAddress: (0, superstruct_1.string)(),
    netAddress: (0, superstruct_1.string)(),
    primaryAddress: (0, superstruct_1.string)(),
    workerAddress: (0, superstruct_1.string)(),
    nextEpochProtocolPubkeyBytes: (0, superstruct_1.nullable)((0, superstruct_1.string)()),
    nextEpochProofOfPossession: (0, superstruct_1.nullable)((0, superstruct_1.string)()),
    nextEpochNetworkPubkeyBytes: (0, superstruct_1.nullable)((0, superstruct_1.string)()),
    nextEpochWorkerPubkeyBytes: (0, superstruct_1.nullable)((0, superstruct_1.string)()),
    nextEpochNetAddress: (0, superstruct_1.nullable)((0, superstruct_1.string)()),
    nextEpochP2pAddress: (0, superstruct_1.nullable)((0, superstruct_1.string)()),
    nextEpochPrimaryAddress: (0, superstruct_1.nullable)((0, superstruct_1.string)()),
    nextEpochWorkerAddress: (0, superstruct_1.nullable)((0, superstruct_1.string)()),
    votingPower: (0, superstruct_1.number)(),
    gasPrice: (0, superstruct_1.number)(),
    commissionRate: (0, superstruct_1.number)(),
    nextEpochStake: (0, superstruct_1.number)(),
    nextEpochGasPrice: (0, superstruct_1.number)(),
    nextEpochCommissionRate: (0, superstruct_1.number)(),
    stakingPoolId: (0, superstruct_1.string)(),
    stakingPoolActivationEpoch: (0, superstruct_1.nullable)((0, superstruct_1.number)()),
    stakingPoolDeactivationEpoch: (0, superstruct_1.nullable)((0, superstruct_1.number)()),
    stakingPoolSuiBalance: (0, superstruct_1.number)(),
    rewardsPool: (0, superstruct_1.number)(),
    poolTokenBalance: (0, superstruct_1.number)(),
    pendingStake: (0, superstruct_1.number)(),
    pendingPoolTokenWithdraw: (0, superstruct_1.number)(),
    pendingTotalSuiWithdraw: (0, superstruct_1.number)(),
    exchangeRatesId: (0, superstruct_1.string)(),
    exchangeRatesSize: (0, superstruct_1.number)(),
});
exports.SuiSystemStateSummary = (0, superstruct_1.object)({
    epoch: (0, superstruct_1.number)(),
    protocolVersion: (0, superstruct_1.number)(),
    systemStateVersion: (0, superstruct_1.number)(),
    storageFundTotalObjectStorageRebates: (0, superstruct_1.number)(),
    storageFundNonRefundableBalance: (0, superstruct_1.number)(),
    referenceGasPrice: (0, superstruct_1.number)(),
    safeMode: (0, superstruct_1.boolean)(),
    safeModeStorageRewards: (0, superstruct_1.number)(),
    safeModeComputationRewards: (0, superstruct_1.number)(),
    safeModeStorageRebates: (0, superstruct_1.number)(),
    safeModeNonRefundableStorageFee: (0, superstruct_1.number)(),
    epochStartTimestampMs: (0, superstruct_1.number)(),
    epochDurationMs: (0, superstruct_1.number)(),
    stakeSubsidyStartEpoch: (0, superstruct_1.number)(),
    maxValidatorCount: (0, superstruct_1.number)(),
    minValidatorJoiningStake: (0, superstruct_1.number)(),
    validatorLowStakeThreshold: (0, superstruct_1.number)(),
    validatorVeryLowStakeThreshold: (0, superstruct_1.number)(),
    validatorLowStakeGracePeriod: (0, superstruct_1.number)(),
    stakeSubsidyBalance: (0, superstruct_1.number)(),
    stakeSubsidyDistributionCounter: (0, superstruct_1.number)(),
    stakeSubsidyCurrentDistributionAmount: (0, superstruct_1.number)(),
    stakeSubsidyPeriodLength: (0, superstruct_1.number)(),
    stakeSubsidyDecreaseRate: (0, superstruct_1.number)(),
    totalStake: (0, superstruct_1.number)(),
    activeValidators: (0, superstruct_1.array)(exports.SuiValidatorSummary),
    pendingActiveValidatorsId: (0, superstruct_1.string)(),
    pendingActiveValidatorsSize: (0, superstruct_1.number)(),
    pendingRemovals: (0, superstruct_1.array)((0, superstruct_1.number)()),
    stakingPoolMappingsId: (0, superstruct_1.string)(),
    stakingPoolMappingsSize: (0, superstruct_1.number)(),
    inactivePoolsId: (0, superstruct_1.string)(),
    inactivePoolsSize: (0, superstruct_1.number)(),
    validatorCandidatesId: (0, superstruct_1.string)(),
    validatorCandidatesSize: (0, superstruct_1.number)(),
    atRiskValidators: (0, superstruct_1.array)((0, superstruct_1.tuple)([common_1.SuiAddress, (0, superstruct_1.number)()])),
    validatorReportRecords: (0, superstruct_1.array)((0, superstruct_1.tuple)([common_1.SuiAddress, (0, superstruct_1.array)(common_1.SuiAddress)])),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9teXN0ZW5sYWIvdHlwZXMvdmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZDQUF1SDtBQUN2SCxxQ0FBZ0Q7QUFDaEQsaURBQXdEO0FBUXhELFVBQVU7QUFFRyxRQUFBLE9BQU8sR0FBRyxJQUFBLG9CQUFNLEVBQUM7SUFDNUIsS0FBSyxFQUFFLElBQUEsb0JBQU0sR0FBRTtDQUNoQixDQUFDLENBQUM7QUFFVSxRQUFBLFdBQVcsR0FBRyxJQUFBLG9CQUFNLEVBQUM7SUFDaEMsV0FBVyxFQUFFLGlCQUFRO0lBQ3JCLGlCQUFpQixFQUFFLHNCQUFPO0lBQzFCLGdCQUFnQixFQUFFLHNCQUFPO0lBQ3pCLFNBQVMsRUFBRSxJQUFBLG9CQUFNLEdBQUU7SUFDbkIsTUFBTSxFQUFFLElBQUEsbUJBQUssRUFBQyxDQUFDLElBQUEscUJBQU8sRUFBQyxRQUFRLENBQUMsRUFBRSxJQUFBLHFCQUFPLEVBQUMsU0FBUyxDQUFDLEVBQUUsSUFBQSxxQkFBTyxFQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDM0UsZUFBZSxFQUFFLElBQUEsc0JBQVEsRUFBQyxJQUFBLG9CQUFNLEdBQUUsQ0FBQztDQUNwQyxDQUFDLENBQUM7QUFFVSxRQUFBLGNBQWMsR0FBRyxJQUFBLG9CQUFNLEVBQUM7SUFDbkMsZ0JBQWdCLEVBQUUsbUJBQVU7SUFDNUIsV0FBVyxFQUFFLGlCQUFRO0lBQ3JCLE1BQU0sRUFBRSxJQUFBLG1CQUFLLEVBQUMsbUJBQVcsQ0FBQztDQUMzQixDQUFDLENBQUM7QUFFVSxRQUFBLGtCQUFrQixHQUFHLElBQUEsb0JBQU0sRUFBQztJQUN2QyxPQUFPLEVBQUUsSUFBQSxvQkFBTSxFQUFDLEVBQUUsS0FBSyxFQUFFLElBQUEsb0JBQU0sR0FBRSxFQUFFLENBQUM7SUFDcEMsb0JBQW9CLEVBQUUsSUFBQSxvQkFBTSxH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LG1CQUFLLEVBQUMsSUFBQSxtQkFBSyxFQUFDLENBQUMsbUJBQVUsRUFBRSxJQUFBLG9CQUFNLEdBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEQsc0JBQXNCLEVBQUUsSUFBQSxtQkFBSyxFQUFDLElBQUEsbUJBQUssRUFBQyxDQUFDLG1CQUFVLEVBQUUsSUFBQSxtQkFBSyxFQUFDLG1CQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDdEUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXJyYXksIGJvb2xlYW4sIGxpdGVyYWwsIG51bWJlciwgb2JqZWN0LCBzdHJpbmcsIHVuaW9uLCBJbmZlciwgbnVsbGFibGUsIHR1cGxlLCBvcHRpb25hbCB9IGZyb20gJ3N1cGVyc3RydWN0JztcbmltcG9ydCB7IE9iamVjdElkLCBTdWlBZGRyZXNzIH0gZnJvbSAnLi9jb21tb24nO1xuaW1wb3J0IHsgQXV0aG9yaXR5TmFtZSwgRXBvY2hJZCB9IGZyb20gJy4vdHJhbnNhY3Rpb25zJztcblxuLyogLS0tLS0tLS0tLS0tLS0gVHlwZXMgZm9yIHRoZSBTdWlTeXN0ZW1TdGF0ZSBSdXN0IGRlZmluaXRpb24gLS0tLS0tLS0tLS0tLS0gKi9cblxuZXhwb3J0IHR5cGUgRGVsZWdhdGVkU3Rha2UgPSBJbmZlcjx0eXBlb2YgRGVsZWdhdGVkU3Rha2U+O1xuZXhwb3J0IHR5cGUgQ29tbWl0dGVlSW5mbyA9IEluZmVyPHR5cGVvZiBDb21taXR0ZWVJbmZvPjtcbmV4cG9ydCB0eXBlIFN0YWtlT2JqZWN0ID0gSW5mZXI8dHlwZW9mIFN0YWtlT2JqZWN0PjtcblxuLy8gU3Rha2luZ1xuXG5leHBvcnQgY29uc3QgQmFsYW5jZSA9IG9iamVjdCh7XG4gIHZhbHVlOiBudW1iZXIoKSxcbn0pO1xuXG5leHBvcnQgY29uc3QgU3Rha2VPYmplY3QgPSBvYmplY3Qoe1xuICBzdGFrZWRTdWlJZDogT2JqZWN0SWQsXG4gIHN0YWtlUmVxdWVzdEVwb2NoOiBFcG9jaElkLFxuICBzdGFrZUFjdGl2ZUVwb2NoOiBFcG9jaElkLFxuICBwcmluY2lwYWw6IG51bWJlcigpLFxuICBzdGF0dXM6IHVuaW9uKFtsaXRlcmFsKCdBY3RpdmUnKSwgbGl0ZXJhbCgnUGVuZGluZycpLCBsaXRlcmFsKCdVbnN0YWtlZCcpXSksXG4gIGVzdGltYXRlZFJld2FyZDogb3B0aW9uYWwobnVtYmVyKCkpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBEZWxlZ2F0ZWRTdGFrZSA9IG9iamVjdCh7XG4gIHZhbGlkYXRvckFkZHJlc3M6IFN1aUFkZHJlc3MsXG4gIHN0YWtpbmdQb29sOiBPYmplY3RJZCxcbiAgc3Rha2VzOiBhcnJheShTdGFrZU9iamVjdCksXG59KTtcblxuZXhwb3J0IGNvbnN0IFN0YWtlU3Vic2lkeUZpZWxkcyA9IG9iamVjdCh7XG4gIGJhbGFuY2U6IG9iamVjdCh7IHZhbHVlOiBudW1iZXIoKSB9KSxcbiAgZGlzdHJpYnV0aW9uX2NvdW50ZXI6IG51bWJlcigpLFxuICBjdXJyZW50X2Rpc3RyaWJ1dGlvbl9hbW91bnQ6IG51bWJlcigpLFxuICBzdGFrZV9zdWJzaWR5X3BlcmlvZF9sZW5ndGg6IG51bWJlcigpLFxuICBzdGFrZV9zdWJzaWR5X2RlY3JlYXNlX3JhdGU6IG51bWJlcigpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBTdGFrZVN1YnNpZHkgPSBvYmplY3Qoe1xuICB0eXBlOiBzdHJpbmcoKSxcbiAgZmllbGRzOiBTdGFrZVN1YnNpZHlGaWVsZHMsXG59KTtcblxuZXhwb3J0IGNvbnN0IFN1aVN1cHBseUZpZWxkcyA9IG9iamVjdCh7XG4gIHZhbHVlOiBudW1iZXIoKSxcbn0pO1xuXG5leHBvcnQgY29uc3QgQ29udGVudHNGaWVsZHMgPSBvYmplY3Qoe1xuICBpZDogc3RyaW5nKCksXG4gIHNpemU6IG51bWJlcigpLFxuICBoZWFkOiBvYmplY3QoeyB2ZWM6IGFycmF5KCkgfSksXG4gIHRhaWw6IG9iamVjdCh7IHZlYzogYXJyYXkoKSB9KSxcbn0pO1xuXG5leHBvcnQgY29uc3QgQ29udGVudHNGaWVsZHNXaXRoZHJhdyA9IG9iamVjdCh7XG4gIGlkOiBzdHJpbmcoKSxcbiAgc2l6ZTogbnVtYmVyKCksXG59KTtcblxuZXhwb3J0IGNvbnN0IENvbnRlbnRzID0gb2JqZWN0KHtcbiAgdHlwZTogc3RyaW5nKCksXG4gIGZpZWxkczogQ29udGVudHNGaWVsZHMsXG59KTtcblxuZXhwb3J0IGNvbnN0IERlbGVnYXRpb25TdGFraW5nUG9vbEZpZWxkcyA9IG9iamVjdCh7XG4gIGV4Y2hhbmdlUmF0ZXM6IG9iamVjdCh7XG4gICAgaWQ6IHN0cmluZygpLFxuICAgIHNpemU6IG51bWJlcigpLFxuICB9KSxcbiAgaWQ6IHN0cmluZygpLFxuICBwZW5kaW5nU3Rha2U6IG51bWJlcigpLFxuICBwZW5kaW5nUG9vbFRva2VuV2l0aGRyYXc6IG51bWJlcigpLFxuICBwZW5kaW5nVG90YWxTdWlXaXRoZHJhdzogbnVtYmVyKCksXG4gIHBvb2xUb2tlbkJhbGFuY2U6IG51bWJlcigpLFxuICByZXdhcmRzUG9vbDogb2JqZWN0KHsgdmFsdWU6IG51bWJlcigpIH0pLFxuICBhY3RpdmF0aW9uRXBvY2g6IG9iamVjdCh7IHZlYzogYXJyYXkoKSB9KSxcbiAgZGVhY3RpdmF0aW9uRXBvY2g6IG9iamVjdCh7IHZlYzogYXJyYXkoKSB9KSxcbiAgc3VpQmFsYW5jZTogbnVtYmVyKCksXG59KTtcblxuZXhwb3J0IGNvbnN0IERlbGVnYXRpb25TdGFraW5nUG9vbCA9IG9iamVjdCh7XG4gIHR5cGU6IHN0cmluZygpLFxuICBmaWVsZHM6IERlbGVnYXRpb25TdGFraW5nUG9vbEZpZWxkcyxcbn0pO1xuXG5leHBvcnQgY29uc3QgQ29tbWl0dGVlSW5mbyA9IG9iamVjdCh7XG4gIGVwb2NoOiBudW1iZXIoKSxcbiAgLyoqIEFycmF5IG9mICh2YWxpZGF0b3IgcHVibGljIGtleSwgc3Rha2UgdW5pdCkgdHVwbGUgKi9cbiAgdmFsaWRhdG9yczogb3B0aW9uYWwoYXJyYXkodHVwbGUoW0F1dGhvcml0eU5hbWUsIG51bWJlcigpXSkpKSxcbn0pO1xuXG5leHBvcnQgY29uc3QgU3VpVmFsaWRhdG9yU3VtbWFyeSA9IG9iamVjdCh7XG4gIHN1aUFkZHJlc3M6IFN1aUFkZHJlc3MsXG4gIHByb3RvY29sUHVia2V5Qnl0ZXM6IHN0cmluZygpLFxuICBuZXR3b3JrUHVia2V5Qnl0ZXM6IHN0cmluZygpLFxuICB3b3JrZXJQdWJrZXlCeXRlczogc3RyaW5nKCksXG4gIHByb29mT2ZQb3NzZXNzaW9uQnl0ZXM6IHN0cmluZygpLFxuICBvcGVyYXRpb25DYXBJZDogc3RyaW5nKCksXG4gIG5hbWU6IHN0cmluZygpLFxuICBkZXNjcmlwdGlvbjogc3RyaW5nKCksXG4gIGltYWdlVXJsOiBzdHJpbmcoKSxcbiAgcHJvamVjdFVybDogc3RyaW5nKCksXG4gIHAycEFkZHJlc3M6IHN0cmluZygpLFxuICBuZXRBZGRyZXNzOiBzdHJpbmcoKSxcbiAgcHJpbWFyeUFkZHJlc3M6IHN0cmluZygpLFxuICB3b3JrZXJBZGRyZXNzOiBzdHJpbmcoKSxcbiAgbmV4dEVwb2NoUHJvdG9jb2xQdWJrZXlCeXRlczogbnVsbGFibGUoc3RyaW5nKCkpLFxuICBuZXh0RXBvY2hQcm9vZk9mUG9zc2Vzc2lvbjogbnVsbGFibGUoc3RyaW5nKCkpLFxuICBuZXh0RXBvY2hOZXR3b3JrUHVia2V5Qnl0ZXM6IG51bGxhYmxlKHN0cmluZygpKSxcbiAgbmV4dEVwb2NoV29ya2VyUHVia2V5Qnl0ZXM6IG51bGxhYmxlKHN0cmluZygpKSxcbiAgbmV4dEVwb2NoTmV0QWRkcmVzczogbnVsbGFibGUoc3RyaW5nKCkpLFxuICBuZXh0RXBvY2hQMnBBZGRyZXNzOiBudWxsYWJsZShzdHJpbmcoKSksXG4gIG5leHRFcG9jaFByaW1hcnlBZGRyZXNzOiBudWxsYWJsZShzdHJpbmcoKSksXG4gIG5leHRFcG9jaFdvcmtlckFkZHJlc3M6IG51bGxhYmxlKHN0cmluZygpKSxcbiAgdm90aW5nUG93ZXI6IG51bWJlcigpLFxuICBnYXNQcmljZTogbnVtYmVyKCksXG4gIGNvbW1pc3Npb25SYXRlOiBudW1iZXIoKSxcbiAgbmV4dEVwb2NoU3Rha2U6IG51bWJlcigpLFxuICBuZXh0RXBvY2hHYXNQcmljZTogbnVtYmVyKCksXG4gIG5leHRFcG9jaENvbW1pc3Npb25SYXRlOiBudW1iZXIoKSxcbiAgc3Rha2luZ1Bvb2xJZDogc3RyaW5nKCksXG4gIHN0YWtpbmdQb29sQWN0aXZhdGlvbkVwb2NoOiBudWxsYWJsZShudW1iZXIoKSksXG4gIHN0YWtpbmdQb29sRGVhY3RpdmF0aW9uRXBvY2g6IG51bGxhYmxlKG51bWJlcigpKSxcbiAgc3Rha2luZ1Bvb2xTdWlCYWxhbmNlOiBudW1iZXIoKSxcbiAgcmV3YXJkc1Bvb2w6IG51bWJlcigpLFxuICBwb29sVG9rZW5CYWxhbmNlOiBudW1iZXIoKSxcbiAgcGVuZGluZ1N0YWtlOiBudW1iZXIoKSxcbiAgcGVuZGluZ1Bvb2xUb2tlbldpdGhkcmF3OiBudW1iZXIoKSxcbiAgcGVuZGluZ1RvdGFsU3VpV2l0aGRyYXc6IG51bWJlcigpLFxuICBleGNoYW5nZVJhdGVzSWQ6IHN0cmluZygpLFxuICBleGNoYW5nZVJhdGVzU2l6ZTogbnVtYmVyKCksXG59KTtcblxuZXhwb3J0IHR5cGUgU3VpVmFsaWRhdG9yU3VtbWFyeSA9IEluZmVyPHR5cGVvZiBTdWlWYWxpZGF0b3JTdW1tYXJ5PjtcblxuZXhwb3J0IGNvbnN0IFN1aVN5c3RlbVN0YXRlU3VtbWFyeSA9IG9iamVjdCh7XG4gIGVwb2NoOiBudW1iZXIoKSxcbiAgcHJvdG9jb2xWZXJzaW9uOiBudW1iZXIoKSxcbiAgc3lzdGVtU3RhdGVWZXJzaW9uOiBudW1iZXIoKSxcbiAgc3RvcmFnZUZ1bmRUb3RhbE9iamVjdFN0b3JhZ2VSZWJhdGVzOiBudW1iZXIoKSxcbiAgc3RvcmFnZUZ1bmROb25SZWZ1bmRhYmxlQmFsYW5jZTogbnVtYmVyKCksXG4gIHJlZmVyZW5jZUdhc1ByaWNlOiBudW1iZXIoKSxcbiAgc2FmZU1vZGU6IGJvb2xlYW4oKSxcbiAgc2FmZU1vZGVTdG9yYWdlUmV3YXJkczogbnVtYmVyKCksXG4gIHNhZmVNb2RlQ29tcHV0YXRpb25SZXdhcmRzOiBudW1iZXIoKSxcbiAgc2FmZU1vZGVTdG9yYWdlUmViYXRlczogbnVtYmVyKCksXG4gIHNhZmVNb2RlTm9uUmVmdW5kYWJsZVN0b3JhZ2VGZWU6IG51bWJlcigpLFxuICBlcG9jaFN0YXJ0VGltZXN0YW1wTXM6IG51bWJlcigpLFxuICBlcG9jaER1cmF0aW9uTXM6IG51bWJlcigpLFxuICBzdGFrZVN1YnNpZHlTdGFydEVwb2NoOiBudW1iZXIoKSxcbiAgbWF4VmFsaWRhdG9yQ291bnQ6IG51bWJlcigpLFxuICBtaW5WYWxpZGF0b3JKb2luaW5nU3Rha2U6IG51bWJlcigpLFxuICB2YWxpZGF0b3JMb3dTdGFrZVRocmVzaG9sZDogbnVtYmVyKCksXG4gIHZhbGlkYXRvclZlcnlMb3dTdGFrZVRocmVzaG9sZDogbnVtYmVyKCksXG4gIHZhbGlkYXRvckxvd1N0YWtlR3JhY2VQZXJpb2Q6IG51bWJlcigpLFxuICBzdGFrZVN1YnNpZHlCYWxhbmNlOiBudW1iZXIoKSxcbiAgc3Rha2VTdWJzaWR5RGlzdHJpYnV0aW9uQ291bnRlcjogbnVtYmVyKCksXG4gIHN0YWtlU3Vic2lkeUN1cnJlbnREaXN0cmlidXRpb25BbW91bnQ6IG51bWJlcigpLFxuICBzdGFrZVN1YnNpZHlQZXJpb2RMZW5ndGg6IG51bWJlcigpLFxuICBzdGFrZVN1YnNpZHlEZWNyZWFzZVJhdGU6IG51bWJlcigpLFxuICB0b3RhbFN0YWtlOiBudW1iZXIoKSxcbiAgYWN0aXZlVmFsaWRhdG9yczogYXJyYXkoU3VpVmFsaWRhdG9yU3VtbWFyeSksXG4gIHBlbmRpbmdBY3RpdmVWYWxpZGF0b3JzSWQ6IHN0cmluZygpLFxuICBwZW5kaW5nQWN0aXZlVmFsaWRhdG9yc1NpemU6IG51bWJlcigpLFxuICBwZW5kaW5nUmVtb3ZhbHM6IGFycmF5KG51bWJlcigpKSxcbiAgc3Rha2luZ1Bvb2xNYXBwaW5nc0lkOiBzdHJpbmcoKSxcbiAgc3Rha2luZ1Bvb2xNYXBwaW5nc1NpemU6IG51bWJlcigpLFxuICBpbmFjdGl2ZVBvb2xzSWQ6IHN0cmluZygpLFxuICBpbmFjdGl2ZVBvb2xzU2l6ZTogbnVtYmVyKCksXG4gIHZhbGlkYXRvckNhbmRpZGF0ZXNJZDogc3RyaW5nKCksXG4gIHZhbGlkYXRvckNhbmRpZGF0ZXNTaXplOiBudW1iZXIoKSxcbiAgYXRSaXNrVmFsaWRhdG9yczogYXJyYXkodHVwbGUoW1N1aUFkZHJlc3MsIG51bWJlcigpXSkpLFxuICB2YWxpZGF0b3JSZXBvcnRSZWNvcmRzOiBhcnJheSh0dXBsZShbU3VpQWRkcmVzcywgYXJyYXkoU3VpQWRkcmVzcyldKSksXG59KTtcblxuZXhwb3J0IHR5cGUgU3VpU3lzdGVtU3RhdGVTdW1tYXJ5ID0gSW5mZXI8dHlwZW9mIFN1aVN5c3RlbVN0YXRlU3VtbWFyeT47XG4iXX0=