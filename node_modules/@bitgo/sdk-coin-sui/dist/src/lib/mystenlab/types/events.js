"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEventPackage = exports.getEventSender = exports.SubscriptionEvent = exports.SubscriptionId = exports.PaginatedEvents = exports.SuiEvent = exports.EventId = void 0;
const superstruct_1 = require("superstruct");
const common_1 = require("./common");
exports.EventId = (0, superstruct_1.object)({
    txDigest: common_1.TransactionDigest,
    eventSeq: common_1.SequenceNumber,
});
// event types mirror those in "sui-json-rpc-types/src/sui_event.rs"
exports.SuiEvent = (0, superstruct_1.object)({
    id: exports.EventId,
    // Move package where this event was emitted.
    packageId: common_1.ObjectId,
    // Move module where this event was emitted.
    transactionModule: (0, superstruct_1.string)(),
    // Sender's Sui address.
    sender: common_1.SuiAddress,
    // Move event type.
    type: (0, superstruct_1.string)(),
    // Parsed json value of the event
    parsedJson: (0, superstruct_1.optional)((0, superstruct_1.record)((0, superstruct_1.string)(), (0, superstruct_1.any)())),
    // Base 58 encoded bcs bytes of the move event
    bcs: (0, superstruct_1.optional)((0, superstruct_1.string)()),
    timestampMs: (0, superstruct_1.optional)((0, superstruct_1.integer)()),
});
exports.PaginatedEvents = (0, superstruct_1.object)({
    data: (0, superstruct_1.array)(exports.SuiEvent),
    nextCursor: (0, superstruct_1.union)([exports.EventId, (0, superstruct_1.literal)(null)]),
    hasNextPage: (0, superstruct_1.boolean)(),
});
exports.SubscriptionId = (0, superstruct_1.number)();
exports.SubscriptionEvent = (0, superstruct_1.object)({
    subscription: exports.SubscriptionId,
    result: exports.SuiEvent,
});
/* ------------------------------- EventData ------------------------------ */
function getEventSender(event) {
    return event.sender;
}
exports.getEventSender = getEventSender;
function getEventPackage(event) {
    return event.packageId;
}
exports.getEventPackage = getEventPackage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9teXN0ZW5sYWIvdHlwZXMvZXZlbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZDQWFxQjtBQUNyQixxQ0FBaUc7QUFFcEYsUUFBQSxPQUFPLEdBQUcsSUFBQSxvQkFBTSxFQUFDO0lBQzVCLFFBQVEsRUFBRSwwQkFBaUI7SUFDM0IsUUFBUSxFQUFFLHVCQUFjO0NBQ3pCLENBQUMsQ0FBQztBQUVILG9FQUFvRTtBQUV2RCxRQUFBLFFBQVEsR0FBRyxJQUFBLG9CQUFNLEVBQUM7SUFDN0IsRUFBRSxFQUFFLGVBQU87SUFDWCw2Q0FBNkM7SUFDN0MsU0FBUyxFQUFFLGlCQUFRO0lBQ25CLDRDQUE0QztJQUM1QyxpQkFBaUIsRUFBRSxJQUFBLG9CQUFNLEdBQUU7SUFDM0Isd0JBQXdCO0lBQ3hCLE1BQU0sRUFBRSxtQkFBVTtJQUNsQixtQkFBbUI7SUFDbkIsSUFBSSxFQUFFLElBQUEsb0JBQU0sR0FBRTtJQUNkLGlDQUFpQztJQUNqQyxVQUFVLEVBQUUsSUFBQSxzQkFBUSxFQUFDLElBQUEsb0JBQU0sRUFBQyxJQUFBLG9CQUFNLEdBQUUsRUFBRSxJQUFBLGlCQUFHLEdBQUUsQ0FBQyxDQUFDO0lBQzdDLDhDQUE4QztJQUM5QyxHQUFHLEVBQUUsSUFBQSxzQkFBUSxFQUFDLElBQUEsb0JBQU0sR0FBRSxDQUFDO0lBQ3ZCLFdBQVcsRUFBRSxJQUFBLHNCQUFRLEVBQUMsSUFBQSxxQkFBTyxHQUFFLENBQUM7Q0FDakMsQ0FBQyxDQUFDO0FBdUNVLFFBQUEsZUFBZSxHQUFHLElBQUEsb0JBQU0sRUFBQztJQUNwQyxJQUFJLEVBQUUsSUFBQSxtQkFBSyxFQUFDLGdCQUFRLENBQUM7SUFDckIsVUFBVSxFQUFFLElBQUEsbUJBQUssRUFBQyxDQUFDLGVBQU8sRUFBRSxJQUFBLHFCQUFPLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMzQyxXQUFXLEVBQUUsSUFBQSxxQkFBTyxHQUFFO0NBQ3ZCLENBQUMsQ0FBQztBQUdVLFFBQUEsY0FBYyxHQUFHLElBQUEsb0JBQU0sR0FBRSxDQUFDO0FBSTFCLFFBQUEsaUJBQWlCLEdBQUcsSUFBQSxvQkFBTSxFQUFDO0lBQ3RDLFlBQVksRUFBRSxzQkFBYztJQUM1QixNQUFNLEVBQUUsZ0JBQVE7Q0FDakIsQ0FBQyxDQUFDO0FBSUgsOEVBQThFO0FBRTlFLFNBQWdCLGNBQWMsQ0FBQyxLQUFlO0lBQzVDLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQztBQUN0QixDQUFDO0FBRkQsd0NBRUM7QUFFRCxTQUFnQixlQUFlLENBQUMsS0FBZTtJQUM3QyxPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUM7QUFDekIsQ0FBQztBQUZELDBDQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgb2JqZWN0LFxuICBudW1iZXIsXG4gIHN0cmluZyxcbiAgdW5pb24sXG4gIGxpdGVyYWwsXG4gIEluZmVyLFxuICBhcnJheSxcbiAgcmVjb3JkLFxuICBhbnksXG4gIG9wdGlvbmFsLFxuICBib29sZWFuLFxuICBpbnRlZ2VyLFxufSBmcm9tICdzdXBlcnN0cnVjdCc7XG5pbXBvcnQgeyBPYmplY3RJZCwgU3VpQWRkcmVzcywgVHJhbnNhY3Rpb25EaWdlc3QsIFN1aUpzb25WYWx1ZSwgU2VxdWVuY2VOdW1iZXIgfSBmcm9tICcuL2NvbW1vbic7XG5cbmV4cG9ydCBjb25zdCBFdmVudElkID0gb2JqZWN0KHtcbiAgdHhEaWdlc3Q6IFRyYW5zYWN0aW9uRGlnZXN0LFxuICBldmVudFNlcTogU2VxdWVuY2VOdW1iZXIsXG59KTtcblxuLy8gZXZlbnQgdHlwZXMgbWlycm9yIHRob3NlIGluIFwic3VpLWpzb24tcnBjLXR5cGVzL3NyYy9zdWlfZXZlbnQucnNcIlxuXG5leHBvcnQgY29uc3QgU3VpRXZlbnQgPSBvYmplY3Qoe1xuICBpZDogRXZlbnRJZCxcbiAgLy8gTW92ZSBwYWNrYWdlIHdoZXJlIHRoaXMgZXZlbnQgd2FzIGVtaXR0ZWQuXG4gIHBhY2thZ2VJZDogT2JqZWN0SWQsXG4gIC8vIE1vdmUgbW9kdWxlIHdoZXJlIHRoaXMgZXZlbnQgd2FzIGVtaXR0ZWQuXG4gIHRyYW5zYWN0aW9uTW9kdWxlOiBzdHJpbmcoKSxcbiAgLy8gU2VuZGVyJ3MgU3VpIGFkZHJlc3MuXG4gIHNlbmRlcjogU3VpQWRkcmVzcyxcbiAgLy8gTW92ZSBldmVudCB0eXBlLlxuICB0eXBlOiBzdHJpbmcoKSxcbiAgLy8gUGFyc2VkIGpzb24gdmFsdWUgb2YgdGhlIGV2ZW50XG4gIHBhcnNlZEpzb246IG9wdGlvbmFsKHJlY29yZChzdHJpbmcoKSwgYW55KCkpKSxcbiAgLy8gQmFzZSA1OCBlbmNvZGVkIGJjcyBieXRlcyBvZiB0aGUgbW92ZSBldmVudFxuICBiY3M6IG9wdGlvbmFsKHN0cmluZygpKSxcbiAgdGltZXN0YW1wTXM6IG9wdGlvbmFsKGludGVnZXIoKSksXG59KTtcblxuZXhwb3J0IHR5cGUgU3VpRXZlbnQgPSBJbmZlcjx0eXBlb2YgU3VpRXZlbnQ+O1xuXG5leHBvcnQgdHlwZSBNb3ZlRXZlbnRGaWVsZCA9IHtcbiAgcGF0aDogc3RyaW5nO1xuICB2YWx1ZTogU3VpSnNvblZhbHVlO1xufTtcblxuLyoqXG4gKiBTZXF1ZW50aWFsIGV2ZW50IElELCBpZSAodHJhbnNhY3Rpb24gc2VxIG51bWJlciwgZXZlbnQgc2VxIG51bWJlcikuXG4gKiAxKSBTZXJ2ZXMgYXMgYSB1bmlxdWUgZXZlbnQgSUQgZm9yIGVhY2ggZnVsbG5vZGVcbiAqIDIpIEFsc28gc2VydmVzIHRvIHNlcXVlbmNlIGV2ZW50cyBmb3IgdGhlIHB1cnBvc2VzIG9mIHBhZ2luYXRpb24gYW5kIHF1ZXJ5aW5nLlxuICogICAgQSBoaWdoZXIgaWQgaXMgYW4gZXZlbnQgc2VlbiBsYXRlciBieSB0aGF0IGZ1bGxub2RlLlxuICogVGhpcyBJRCBpcyB0aGUgXCJjdXJzb3JcIiBmb3IgZXZlbnQgcXVlcnlpbmcuXG4gKi9cbmV4cG9ydCB0eXBlIEV2ZW50SWQgPSBJbmZlcjx0eXBlb2YgRXZlbnRJZD47XG5cbi8vIG1pcnJvcnMgc3VpX2pzb25fcnBjX3R5cGVzOjpTdWlFdmVudEZpbHRlclxuZXhwb3J0IHR5cGUgU3VpRXZlbnRGaWx0ZXIgPVxuICB8IHsgUGFja2FnZTogT2JqZWN0SWQgfVxuICB8IHsgTW92ZU1vZHVsZTogeyBwYWNrYWdlOiBPYmplY3RJZDsgbW9kdWxlOiBzdHJpbmcgfSB9XG4gIHwgeyBNb3ZlRXZlbnRUeXBlOiBzdHJpbmcgfVxuICB8IHsgTW92ZUV2ZW50RmllbGQ6IE1vdmVFdmVudEZpZWxkIH1cbiAgfCB7IFRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbkRpZ2VzdCB9XG4gIHwge1xuICAgICAgVGltZVJhbmdlOiB7XG4gICAgICAgIC8vIGxlZnQgZW5kcG9pbnQgb2YgdGltZSBpbnRlcnZhbCwgbWlsbGlzZWNvbmRzIHNpbmNlIGVwb2NoLCBpbmNsdXNpdmVcbiAgICAgICAgc3RhcnRfdGltZTogbnVtYmVyO1xuICAgICAgICAvLyByaWdodCBlbmRwb2ludCBvZiB0aW1lIGludGVydmFsLCBtaWxsaXNlY29uZHMgc2luY2UgZXBvY2gsIGV4Y2x1c2l2ZVxuICAgICAgICBlbmRfdGltZTogbnVtYmVyO1xuICAgICAgfTtcbiAgICB9XG4gIHwgeyBTZW5kZXI6IFN1aUFkZHJlc3MgfVxuICB8IHsgQWxsOiBTdWlFdmVudEZpbHRlcltdIH1cbiAgfCB7IEFueTogU3VpRXZlbnRGaWx0ZXJbXSB9XG4gIHwgeyBBbmQ6IFtTdWlFdmVudEZpbHRlciwgU3VpRXZlbnRGaWx0ZXJdIH1cbiAgfCB7IE9yOiBbU3VpRXZlbnRGaWx0ZXIsIFN1aUV2ZW50RmlsdGVyXSB9O1xuXG5leHBvcnQgY29uc3QgUGFnaW5hdGVkRXZlbnRzID0gb2JqZWN0KHtcbiAgZGF0YTogYXJyYXkoU3VpRXZlbnQpLFxuICBuZXh0Q3Vyc29yOiB1bmlvbihbRXZlbnRJZCwgbGl0ZXJhbChudWxsKV0pLFxuICBoYXNOZXh0UGFnZTogYm9vbGVhbigpLFxufSk7XG5leHBvcnQgdHlwZSBQYWdpbmF0ZWRFdmVudHMgPSBJbmZlcjx0eXBlb2YgUGFnaW5hdGVkRXZlbnRzPjtcblxuZXhwb3J0IGNvbnN0IFN1YnNjcmlwdGlvbklkID0gbnVtYmVyKCk7XG5cbmV4cG9ydCB0eXBlIFN1YnNjcmlwdGlvbklkID0gSW5mZXI8dHlwZW9mIFN1YnNjcmlwdGlvbklkPjtcblxuZXhwb3J0IGNvbnN0IFN1YnNjcmlwdGlvbkV2ZW50ID0gb2JqZWN0KHtcbiAgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb25JZCxcbiAgcmVzdWx0OiBTdWlFdmVudCxcbn0pO1xuXG5leHBvcnQgdHlwZSBTdWJzY3JpcHRpb25FdmVudCA9IEluZmVyPHR5cGVvZiBTdWJzY3JpcHRpb25FdmVudD47XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRXZlbnREYXRhIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXZlbnRTZW5kZXIoZXZlbnQ6IFN1aUV2ZW50KTogU3VpQWRkcmVzcyB7XG4gIHJldHVybiBldmVudC5zZW5kZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFdmVudFBhY2thZ2UoZXZlbnQ6IFN1aUV2ZW50KTogT2JqZWN0SWQge1xuICByZXR1cm4gZXZlbnQucGFja2FnZUlkO1xufVxuIl19