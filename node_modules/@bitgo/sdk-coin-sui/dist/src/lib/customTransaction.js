"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomTransaction = void 0;
const iface_1 = require("./iface");
const transaction_1 = require("./transaction");
const utils_1 = __importDefault(require("./utils"));
const sdk_core_1 = require("@bitgo/sdk-core");
const constants_1 = require("./constants");
class CustomTransaction extends transaction_1.Transaction {
    constructor(_coinConfig) {
        super(_coinConfig);
    }
    /**
     * @inheritdoc
     * @param rawTransaction
     */
    fromRawTransaction(rawTransaction) {
        try {
            utils_1.default.isValidRawTransaction(rawTransaction);
            this._suiTransaction = transaction_1.Transaction.deserializeSuiTransaction(rawTransaction);
            this._suiTransaction.type = iface_1.SuiTransactionType.CustomTx;
            this._type = sdk_core_1.TransactionType.CustomTx;
            this._id = this._suiTransaction.id;
            this._rawTransaction = rawTransaction;
            this.loadInputsAndOutputs();
        }
        catch (e) {
            throw e;
        }
    }
    /**
     * @inheritdoc
     */
    get id() {
        return this._id || constants_1.UNAVAILABLE_TEXT;
    }
    /**
     * @inheritdoc
     */
    canSign(key) {
        return true;
    }
    /**
     * @inheritdoc
     */
    toBroadcastFormat() {
        if (!this._suiTransaction) {
            throw new sdk_core_1.InvalidTransactionError('empty transaction');
        }
        return this.serialize();
    }
    /**
     * @inheritdoc
     */
    loadInputsAndOutputs() {
        if (!this._suiTransaction) {
            return;
        }
        this._recipients = utils_1.default.getRecipients(this._suiTransaction);
        this._outputs = this._recipients.map((recipient, index) => ({
            address: recipient.address,
            value: recipient.amount,
            coin: this._coinConfig.name,
        }));
        const totalAmount = this._recipients.reduce((accumulator, current) => accumulator + Number(current.amount), 0);
        this._inputs = [
            {
                address: this.suiTransaction.sender,
                value: totalAmount.toString(),
                coin: this._coinConfig.name,
            },
        ];
    }
    /**
     * Get the raw transaction base64 string
     */
    get rawTransaction() {
        return this._rawTransaction;
    }
    /**
     * Get the recipients of the transaction if there is any transfers.
     */
    get recipients() {
        return this._recipients;
    }
    /**
     * @inheritdoc
     */
    getTxData() {
        if (!this._suiTransaction) {
            throw new sdk_core_1.InvalidTransactionError('empty transaction');
        }
        const tx = this._suiTransaction;
        return {
            sender: this._suiTransaction.sender,
            expiration: { None: null },
            gasData: this._suiTransaction.gasData,
            kind: {
                ProgrammableTransaction: tx.tx,
            },
        };
    }
    /**
     * @inheritdoc
     */
    toJson() {
        if (!this._suiTransaction) {
            throw new sdk_core_1.InvalidTransactionError('empty transaction');
        }
        const tx = this._suiTransaction;
        return {
            id: tx.id,
            sender: tx.sender,
            expiration: { None: null },
            gasData: tx.gasData,
            kind: {
                ProgrammableTransaction: tx.tx,
            },
        };
    }
    /**
     * @inheritdoc
     */
    explainTransaction() {
        const result = this.toJson();
        const displayOrder = ['id', 'outputs', 'outputAmount', 'changeOutputs', 'changeAmount', 'fee', 'type'];
        const explanationResult = {
            displayOrder,
            id: this.id,
            outputs: [],
            outputAmount: '0',
            changeOutputs: [],
            changeAmount: '0',
            fee: { fee: this.suiTransaction.gasData.budget.toString() },
            type: this.type,
        };
        return this.explainCustomTransaction(result, explanationResult);
    }
    /**
     * Returns a complete explanation of the custom transaction
     * @param json
     * @param explanationResult
     */
    explainCustomTransaction(json, explanationResult) {
        const recipients = utils_1.default.getRecipients(this.suiTransaction);
        const outputs = recipients.map((recipient) => recipient);
        const outputAmount = recipients.reduce((accumulator, current) => accumulator + Number(current.amount), 0);
        return {
            ...explanationResult,
            outputs,
            outputAmount,
        };
    }
}
exports.CustomTransaction = CustomTransaction;
//# sourceMappingURL=data:application/json;base64,