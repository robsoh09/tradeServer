import { TransactionBuilder } from './transactionBuilder';
import { CustomProgrammableTransaction, SuiTransaction } from './iface';
import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { CustomTransaction } from './customTransaction';
import { TransactionType } from '@bitgo/sdk-core';
import { Transaction } from './transaction';
export declare class CustomTransactionBuilder extends TransactionBuilder<CustomProgrammableTransaction> {
    protected _rawTransaction: string;
    constructor(_coinConfig: Readonly<CoinConfig>);
    protected get transactionType(): TransactionType;
    /**
     * set the raw transaction base64 string
     * @param rawTransaction
     */
    rawTransaction(rawTransaction: string): this;
    /**
     * @inheritdoc
     */
    protected fromImplementation(rawTransaction: string): Transaction<CustomProgrammableTransaction>;
    /**
     * @inheritdoc
     */
    protected buildImplementation(): Promise<Transaction<CustomProgrammableTransaction>>;
    /**
     * Currently custom tx only allows a combination of 3 types of SUI transactions:
     * 1. SplitCoins
     * 2. TransferObjects
     * 3. MoveCall
     * @inheritdoc
     */
    validateTransaction(transaction: CustomTransaction): void;
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     * @param tx
     */
    initBuilder(tx: CustomTransaction): void;
    /**
     * Validates all fields are defined
     */
    private validateTransactionFields;
    /**
     * Build the SuiTransaction object
     */
    protected buildSuiTransaction(): SuiTransaction<CustomProgrammableTransaction>;
}
//# sourceMappingURL=customTransactionBuilder.d.ts.map