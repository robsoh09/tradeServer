import { TransactionBuilder } from './transactionBuilder';
import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { BaseKey, Recipient, TransactionType } from '@bitgo/sdk-core';
import { SuiTransaction, TransferProgrammableTransaction } from './iface';
import { Transaction } from './transaction';
import { TransferTransaction } from './transferTransaction';
export declare class TransferBuilder extends TransactionBuilder<TransferProgrammableTransaction> {
    protected _recipients: Recipient[];
    constructor(_coinConfig: Readonly<CoinConfig>);
    protected get transactionType(): TransactionType;
    send(recipients: Recipient[]): this;
    /** @inheritdoc */
    validateTransaction(transaction: TransferTransaction): void;
    /** @inheritdoc */
    sign(key: BaseKey): void;
    /** @inheritdoc */
    protected fromImplementation(rawTransaction: string): Transaction<TransferProgrammableTransaction>;
    /** @inheritdoc */
    protected buildImplementation(): Promise<Transaction<TransferProgrammableTransaction>>;
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     *
     * @param {Transaction} tx the transaction data
     */
    initBuilder(tx: TransferTransaction): void;
    /**
     * Validates all fields are defined
     */
    private validateTransactionFields;
    /**
     * Build transfer programmable transaction
     *
     * @protected
     */
    protected buildSuiTransaction(): SuiTransaction<TransferProgrammableTransaction>;
}
//# sourceMappingURL=transferBuilder.d.ts.map