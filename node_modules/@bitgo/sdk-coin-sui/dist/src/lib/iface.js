"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MethodNames = exports.SuiTransactionType = void 0;
var SuiTransactionType;
(function (SuiTransactionType) {
    SuiTransactionType["Transfer"] = "Transfer";
    SuiTransactionType["AddStake"] = "AddStake";
    SuiTransactionType["WithdrawStake"] = "WithdrawStake";
    SuiTransactionType["CustomTx"] = "CustomTx";
})(SuiTransactionType = exports.SuiTransactionType || (exports.SuiTransactionType = {}));
/**
 * Method names for the transaction method. Names change based on the type of transaction e.g 'request_add_delegation_mul_coin' for the staking transaction
 */
var MethodNames;
(function (MethodNames) {
    /**
     * Add stake to a validator's staking pool.
     *
     * @see https://github.com/MystenLabs/sui/blob/main/crates/sui-framework/docs/sui_system.md#function-request_add_stake
     */
    MethodNames["RequestAddStake"] = "request_add_stake";
    /**
     * Withdraw some portion of a stake from a validator's staking pool.
     *
     * @see https://github.com/MystenLabs/sui/blob/main/crates/sui-framework/docs/sui_system.md#function-request_withdraw_stake
     */
    MethodNames["RequestWithdrawStake"] = "request_withdraw_stake";
    /**
     * Split StakedSui self to two parts, one with principal split_amount, and the remaining principal is left in self.
     *
     * @see https://github.com/MystenLabs/sui/blob/main/crates/sui-framework/docs/staking_pool.md#0x3_staking_pool_split
     */
    MethodNames["StakingPoolSplit"] = "::staking_pool::split";
    /**
     * Transfer ownership of obj to recipient.
     *
     * @see https://github.com/MystenLabs/sui/blob/main/crates/sui-framework/docs/transfer.md#function-public_transfer
     */
    MethodNames["PublicTransfer"] = "::transfer::public_transfer";
})(MethodNames = exports.MethodNames || (exports.MethodNames = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWZhY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2lmYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQWNBLElBQVksa0JBS1g7QUFMRCxXQUFZLGtCQUFrQjtJQUM1QiwyQ0FBcUIsQ0FBQTtJQUNyQiwyQ0FBcUIsQ0FBQTtJQUNyQixxREFBK0IsQ0FBQTtJQUMvQiwyQ0FBcUIsQ0FBQTtBQUN2QixDQUFDLEVBTFcsa0JBQWtCLEdBQWxCLDBCQUFrQixLQUFsQiwwQkFBa0IsUUFLN0I7QUFtRUQ7O0dBRUc7QUFDSCxJQUFZLFdBeUJYO0FBekJELFdBQVksV0FBVztJQUNyQjs7OztPQUlHO0lBQ0gsb0RBQXFDLENBQUE7SUFDckM7Ozs7T0FJRztJQUNILDhEQUErQyxDQUFBO0lBQy9DOzs7O09BSUc7SUFDSCx5REFBMEMsQ0FBQTtJQUMxQzs7OztPQUlHO0lBQ0gsNkRBQThDLENBQUE7QUFDaEQsQ0FBQyxFQXpCVyxXQUFXLEdBQVgsbUJBQVcsS0FBWCxtQkFBVyxRQXlCdEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBUcmFuc2FjdGlvbkV4cGxhbmF0aW9uIGFzIEJhc2VUcmFuc2FjdGlvbkV4cGxhbmF0aW9uLFxuICBUcmFuc2FjdGlvblR5cGUgYXMgQml0R29UcmFuc2FjdGlvblR5cGUsXG59IGZyb20gJ0BiaXRnby9zZGstY29yZSc7XG5pbXBvcnQge1xuICBHYXNEYXRhLFxuICBQcm9ncmFtbWFibGVUcmFuc2FjdGlvbixcbiAgQ2FsbEFyZyxcbiAgU3VpQWRkcmVzcyxcbiAgU3VpT2JqZWN0UmVmLFxuICBUcmFuc2FjdGlvbkV4cGlyYXRpb24sXG59IGZyb20gJy4vbXlzdGVubGFiL3R5cGVzJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uVHlwZSwgVHJhbnNhY3Rpb25CbG9ja0lucHV0IH0gZnJvbSAnLi9teXN0ZW5sYWIvYnVpbGRlcic7XG5cbmV4cG9ydCBlbnVtIFN1aVRyYW5zYWN0aW9uVHlwZSB7XG4gIFRyYW5zZmVyID0gJ1RyYW5zZmVyJyxcbiAgQWRkU3Rha2UgPSAnQWRkU3Rha2UnLFxuICBXaXRoZHJhd1N0YWtlID0gJ1dpdGhkcmF3U3Rha2UnLFxuICBDdXN0b21UeCA9ICdDdXN0b21UeCcsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNhY3Rpb25FeHBsYW5hdGlvbiBleHRlbmRzIEJhc2VUcmFuc2FjdGlvbkV4cGxhbmF0aW9uIHtcbiAgdHlwZTogQml0R29UcmFuc2FjdGlvblR5cGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHhEYXRhIHtcbiAgaWQ/OiBzdHJpbmc7XG4gIHNlbmRlcjogU3VpQWRkcmVzcztcbiAgZXhwaXJhdGlvbjogVHJhbnNhY3Rpb25FeHBpcmF0aW9uO1xuICBnYXNEYXRhOiBHYXNEYXRhO1xuICBraW5kOiB7XG4gICAgUHJvZ3JhbW1hYmxlVHJhbnNhY3Rpb246XG4gICAgICB8IFRyYW5zZmVyUHJvZ3JhbW1hYmxlVHJhbnNhY3Rpb25cbiAgICAgIHwgU3Rha2luZ1Byb2dyYW1tYWJsZVRyYW5zYWN0aW9uXG4gICAgICB8IEN1c3RvbVByb2dyYW1tYWJsZVRyYW5zYWN0aW9uO1xuICB9O1xufVxuXG5leHBvcnQgdHlwZSBUcmFuc2ZlclByb2dyYW1tYWJsZVRyYW5zYWN0aW9uID1cbiAgfCBQcm9ncmFtbWFibGVUcmFuc2FjdGlvblxuICB8IHtcbiAgICAgIGlucHV0czogQ2FsbEFyZ1tdIHwgVHJhbnNhY3Rpb25CbG9ja0lucHV0W107XG4gICAgICB0cmFuc2FjdGlvbnM6IFRyYW5zYWN0aW9uVHlwZVtdO1xuICAgIH07XG5cbmV4cG9ydCB0eXBlIFN0YWtpbmdQcm9ncmFtbWFibGVUcmFuc2FjdGlvbiA9XG4gIHwgUHJvZ3JhbW1hYmxlVHJhbnNhY3Rpb25cbiAgfCB7XG4gICAgICBpbnB1dHM6IENhbGxBcmdbXSB8IFRyYW5zYWN0aW9uQmxvY2tJbnB1dFtdO1xuICAgICAgdHJhbnNhY3Rpb25zOiBUcmFuc2FjdGlvblR5cGVbXTtcbiAgICB9O1xuXG5leHBvcnQgdHlwZSBVbnN0YWtpbmdQcm9ncmFtbWFibGVUcmFuc2FjdGlvbiA9XG4gIHwgUHJvZ3JhbW1hYmxlVHJhbnNhY3Rpb25cbiAgfCB7XG4gICAgICBpbnB1dHM6IENhbGxBcmdbXSB8IFRyYW5zYWN0aW9uQmxvY2tJbnB1dFtdO1xuICAgICAgdHJhbnNhY3Rpb25zOiBUcmFuc2FjdGlvblR5cGVbXTtcbiAgICB9O1xuXG5leHBvcnQgdHlwZSBDdXN0b21Qcm9ncmFtbWFibGVUcmFuc2FjdGlvbiA9XG4gIHwgUHJvZ3JhbW1hYmxlVHJhbnNhY3Rpb25cbiAgfCB7XG4gICAgICBpbnB1dHM6IENhbGxBcmdbXSB8IFRyYW5zYWN0aW9uQmxvY2tJbnB1dFtdO1xuICAgICAgdHJhbnNhY3Rpb25zOiBUcmFuc2FjdGlvblR5cGVbXTtcbiAgICB9O1xuXG5leHBvcnQgaW50ZXJmYWNlIFN1aVRyYW5zYWN0aW9uPFxuICBUID0gVHJhbnNmZXJQcm9ncmFtbWFibGVUcmFuc2FjdGlvbiB8IFN0YWtpbmdQcm9ncmFtbWFibGVUcmFuc2FjdGlvbiB8IEN1c3RvbVByb2dyYW1tYWJsZVRyYW5zYWN0aW9uXG4+IHtcbiAgaWQ/OiBzdHJpbmc7XG4gIHR5cGU6IFN1aVRyYW5zYWN0aW9uVHlwZTtcbiAgc2VuZGVyOiBzdHJpbmc7XG4gIHR4OiBUO1xuICBnYXNEYXRhOiBHYXNEYXRhO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlcXVlc3RBZGRTdGFrZSB7XG4gIGFtb3VudDogbnVtYmVyO1xuICB2YWxpZGF0b3JBZGRyZXNzOiBTdWlBZGRyZXNzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlcXVlc3RXaXRoZHJhd1N0YWtlZFN1aSB7XG4gIGFtb3VudD86IG51bWJlcjtcbiAgc3Rha2VkU3VpOiBTdWlPYmplY3RSZWY7XG59XG5cbi8qKlxuICogTWV0aG9kIG5hbWVzIGZvciB0aGUgdHJhbnNhY3Rpb24gbWV0aG9kLiBOYW1lcyBjaGFuZ2UgYmFzZWQgb24gdGhlIHR5cGUgb2YgdHJhbnNhY3Rpb24gZS5nICdyZXF1ZXN0X2FkZF9kZWxlZ2F0aW9uX211bF9jb2luJyBmb3IgdGhlIHN0YWtpbmcgdHJhbnNhY3Rpb25cbiAqL1xuZXhwb3J0IGVudW0gTWV0aG9kTmFtZXMge1xuICAvKipcbiAgICogQWRkIHN0YWtlIHRvIGEgdmFsaWRhdG9yJ3Mgc3Rha2luZyBwb29sLlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9NeXN0ZW5MYWJzL3N1aS9ibG9iL21haW4vY3JhdGVzL3N1aS1mcmFtZXdvcmsvZG9jcy9zdWlfc3lzdGVtLm1kI2Z1bmN0aW9uLXJlcXVlc3RfYWRkX3N0YWtlXG4gICAqL1xuICBSZXF1ZXN0QWRkU3Rha2UgPSAncmVxdWVzdF9hZGRfc3Rha2UnLFxuICAvKipcbiAgICogV2l0aGRyYXcgc29tZSBwb3J0aW9uIG9mIGEgc3Rha2UgZnJvbSBhIHZhbGlkYXRvcidzIHN0YWtpbmcgcG9vbC5cbiAgICpcbiAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vTXlzdGVuTGFicy9zdWkvYmxvYi9tYWluL2NyYXRlcy9zdWktZnJhbWV3b3JrL2RvY3Mvc3VpX3N5c3RlbS5tZCNmdW5jdGlvbi1yZXF1ZXN0X3dpdGhkcmF3X3N0YWtlXG4gICAqL1xuICBSZXF1ZXN0V2l0aGRyYXdTdGFrZSA9ICdyZXF1ZXN0X3dpdGhkcmF3X3N0YWtlJyxcbiAgLyoqXG4gICAqIFNwbGl0IFN0YWtlZFN1aSBzZWxmIHRvIHR3byBwYXJ0cywgb25lIHdpdGggcHJpbmNpcGFsIHNwbGl0X2Ftb3VudCwgYW5kIHRoZSByZW1haW5pbmcgcHJpbmNpcGFsIGlzIGxlZnQgaW4gc2VsZi5cbiAgICpcbiAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vTXlzdGVuTGFicy9zdWkvYmxvYi9tYWluL2NyYXRlcy9zdWktZnJhbWV3b3JrL2RvY3Mvc3Rha2luZ19wb29sLm1kIzB4M19zdGFraW5nX3Bvb2xfc3BsaXRcbiAgICovXG4gIFN0YWtpbmdQb29sU3BsaXQgPSAnOjpzdGFraW5nX3Bvb2w6OnNwbGl0JyxcbiAgLyoqXG4gICAqIFRyYW5zZmVyIG93bmVyc2hpcCBvZiBvYmogdG8gcmVjaXBpZW50LlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9NeXN0ZW5MYWJzL3N1aS9ibG9iL21haW4vY3JhdGVzL3N1aS1mcmFtZXdvcmsvZG9jcy90cmFuc2Zlci5tZCNmdW5jdGlvbi1wdWJsaWNfdHJhbnNmZXJcbiAgICovXG4gIFB1YmxpY1RyYW5zZmVyID0gJzo6dHJhbnNmZXI6OnB1YmxpY190cmFuc2ZlcicsXG59XG4iXX0=