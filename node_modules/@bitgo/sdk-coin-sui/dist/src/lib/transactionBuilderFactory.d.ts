import { BaseTransactionBuilderFactory } from '@bitgo/sdk-core';
import { TransferBuilder } from './transferBuilder';
import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { Transaction } from './transaction';
import { StakingBuilder } from './stakingBuilder';
import { CustomProgrammableTransaction, StakingProgrammableTransaction, TransferProgrammableTransaction, UnstakingProgrammableTransaction } from './iface';
import { TransactionBuilder } from './transactionBuilder';
import { UnstakingBuilder } from './unstakingBuilder';
import { CustomTransactionBuilder } from './customTransactionBuilder';
export declare class TransactionBuilderFactory extends BaseTransactionBuilderFactory {
    constructor(_coinConfig: Readonly<CoinConfig>);
    /** @inheritdoc */
    from(raw: string): TransactionBuilder<TransferProgrammableTransaction | StakingProgrammableTransaction>;
    /** @inheritdoc */
    getTransferBuilder(tx?: Transaction<TransferProgrammableTransaction>): TransferBuilder;
    /** @inheritdoc */
    getStakingBuilder(tx?: Transaction<StakingProgrammableTransaction>): StakingBuilder;
    /** @inheritdoc */
    getUnstakingBuilder(tx?: Transaction<UnstakingProgrammableTransaction>): UnstakingBuilder;
    /** @inheritdoc */
    getCustomTransactionBuilder(tx?: Transaction<CustomProgrammableTransaction>): CustomTransactionBuilder;
    /** @inheritdoc */
    getWalletInitializationBuilder(): void;
    /**
     * Initialize the builder with the given transaction
     *
     * @param {Transaction | undefined} tx - the transaction used to initialize the builder
     * @param {TransactionBuilder} builder - the builder to be initialized
     * @returns {TransactionBuilder} the builder initialized
     */
    private initializeBuilder;
    /** Parse the transaction from a raw transaction
     *
     * @param {string} rawTransaction - the raw tx
     * @returns {Transaction} parsedtransaction
     */
    private parseTransaction;
}
//# sourceMappingURL=transactionBuilderFactory.d.ts.map