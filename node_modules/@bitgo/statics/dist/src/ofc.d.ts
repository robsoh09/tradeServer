import { BaseCoin, BaseUnit, CoinFeature, CoinKind, KeyCurve, UnderlyingAsset } from './base';
import { BaseNetwork, OfcNetwork } from './networks';
export interface OfcConstructorOptions {
    id: string;
    fullName: string;
    name: string;
    network: BaseNetwork;
    asset: UnderlyingAsset;
    baseUnit: BaseUnit;
    features: CoinFeature[];
    decimalPlaces: number;
    isToken: boolean;
    kind: CoinKind;
    prefix?: string;
    suffix?: string;
    addressCoin?: string;
    primaryKeyCurve: KeyCurve;
}
/**
 * OFC (off chain) coins. These are virtual coins used to represent off chain assets on the BitGo platform.
 */
export declare class OfcCoin extends BaseCoin {
    static readonly DEFAULT_FEATURES: CoinFeature[];
    readonly addressCoin?: string;
    constructor(options: OfcConstructorOptions);
    protected requiredFeatures(): Set<CoinFeature>;
    protected disallowedFeatures(): Set<CoinFeature>;
}
/**
 * Factory function for ofc coin instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param kind Differentiates coins which represent fiat assets from those which represent crypto assets
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param isToken? Whether or not this account coin is a token of another coin
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `OfcCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function ofc(id: string, name: string, fullName: string, decimalPlaces: number, asset: UnderlyingAsset, kind?: CoinKind, features?: CoinFeature[], prefix?: string, suffix?: string, network?: OfcNetwork, isToken?: boolean, 
/** OFC tokens use SECP256K1 under the hood even if the chain doesn't **/
primaryKeyCurve?: KeyCurve): Readonly<OfcCoin>;
/**
 * Factory function for testnet ofc coin instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param kind Differentiates coins which represent fiat assets from those which represent crypto assets
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param isToken? Whether or not this account coin is a token of another coin
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `OfcCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function tofc(id: string, name: string, fullName: string, decimalPlaces: number, asset: UnderlyingAsset, kind?: CoinKind, features?: CoinFeature[], prefix?: string, suffix?: string, network?: OfcNetwork, isToken?: boolean, primaryKeyCurve?: KeyCurve): Readonly<OfcCoin>;
/**
 * Factory function for ofc erc20 coin instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param kind Differentiates coins which represent fiat assets from those which represent crypto assets
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param isToken? Whether or not this account coin is a token of another coin
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `OfcCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function ofcerc20(id: string, name: string, fullName: string, decimalPlaces: number, asset: UnderlyingAsset, kind?: CoinKind, features?: CoinFeature[], prefix?: string, suffix?: string, network?: OfcNetwork, isToken?: boolean, addressCoin?: string, primaryKeyCurve?: KeyCurve): Readonly<OfcCoin>;
/**
 * Factory function for testnet ofc erc20 coin instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param kind Differentiates coins which represent fiat assets from those which represent crypto assets
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param isToken? Whether or not this account coin is a token of another coin
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `OfcCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function tofcerc20(id: string, name: string, fullName: string, decimalPlaces: number, asset: UnderlyingAsset, kind?: CoinKind, features?: CoinFeature[], prefix?: string, suffix?: string, network?: OfcNetwork, isToken?: boolean, addressCoin?: string, primaryKeyCurve?: KeyCurve): Readonly<OfcCoin>;
/**
 * Factory function for ofc solana token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param features
 * @param prefix
 * @param suffix
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param kind Differentiates coins which represent fiat assets from those which represent crypto assets
 * @param isToken
 * @param addressCoin
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function ofcsolToken(id: string, name: string, fullName: string, decimalPlaces: number, asset: UnderlyingAsset, features?: CoinFeature[], kind?: CoinKind, prefix?: string, suffix?: string, network?: OfcNetwork, isToken?: boolean, addressCoin?: string, primaryKeyCurve?: KeyCurve): Readonly<OfcCoin>;
/**
 * Factory function for testnet ofc solana token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param features
 * @param prefix
 * @param suffix
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param kind Differentiates coins which represent fiat assets from those which represent crypto assets
 * @param isToken
 * @param addressCoin
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function tofcsolToken(id: string, name: string, fullName: string, decimalPlaces: number, asset: UnderlyingAsset, features?: CoinFeature[], kind?: CoinKind, prefix?: string, suffix?: string, network?: OfcNetwork, isToken?: boolean, addressCoin?: string, primaryKeyCurve?: KeyCurve): Readonly<OfcCoin>;
/**
 * Factory function for ofc stellar token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param kind Differentiates coins which represent fiat assets from those which represent crypto assets
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param isToken? Whether or not this account coin is a token of another coin
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `OfcCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function ofcStellarToken(id: string, name: string, fullName: string, decimalPlaces: number, asset: UnderlyingAsset, kind?: CoinKind, features?: CoinFeature[], prefix?: string, suffix?: string, network?: OfcNetwork, isToken?: boolean, addressCoin?: string, primaryKeyCurve?: KeyCurve): Readonly<OfcCoin>;
/**
 * Factory function for testnet ofc stellar token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param kind Differentiates coins which represent fiat assets from those which represent crypto assets
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param isToken? Whether or not this account coin is a token of another coin
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `OfcCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function tofcStellarToken(id: string, name: string, fullName: string, decimalPlaces: number, asset: UnderlyingAsset, kind?: CoinKind, features?: CoinFeature[], prefix?: string, suffix?: string, network?: OfcNetwork, isToken?: boolean, addressCoin?: string, primaryKeyCurve?: KeyCurve): Readonly<OfcCoin>;
/**
 * Factory function for ofc algo token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param kind Differentiates coins which represent fiat assets from those which represent crypto assets
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param isToken? Whether or not this account coin is a token of another coin
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `OfcCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function ofcAlgoToken(id: string, name: string, fullName: string, decimalPlaces: number, asset: UnderlyingAsset, kind?: CoinKind, features?: CoinFeature[], prefix?: string, suffix?: string, network?: OfcNetwork, isToken?: boolean, addressCoin?: string, primaryKeyCurve?: KeyCurve): Readonly<OfcCoin>;
/**
 * Factory function for testnet ofc algo token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param kind Differentiates coins which represent fiat assets from those which represent crypto assets
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param isToken? Whether or not this account coin is a token of another coin
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `OfcCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function tofcAlgoToken(id: string, name: string, fullName: string, decimalPlaces: number, asset: UnderlyingAsset, kind?: CoinKind, features?: CoinFeature[], prefix?: string, suffix?: string, network?: OfcNetwork, isToken?: boolean, addressCoin?: string, primaryKeyCurve?: KeyCurve): Readonly<OfcCoin>;
/**
 * Factory function for ofc hedera token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param kind Differentiates coins which represent fiat assets from those which represent crypto assets
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param isToken? Whether or not this account coin is a token of another coin
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `OfcCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function ofcHederaToken(id: string, name: string, fullName: string, decimalPlaces: number, asset: UnderlyingAsset, kind?: CoinKind, features?: CoinFeature[], prefix?: string, suffix?: string, network?: OfcNetwork, isToken?: boolean, addressCoin?: string, primaryKeyCurve?: KeyCurve): Readonly<OfcCoin>;
/**
 * Factory function for testnet ofc hedera token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param kind Differentiates coins which represent fiat assets from those which represent crypto assets
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param isToken? Whether or not this account coin is a token of another coin
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `OfcCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function tofcHederaToken(id: string, name: string, fullName: string, decimalPlaces: number, asset: UnderlyingAsset, kind?: CoinKind, features?: CoinFeature[], prefix?: string, suffix?: string, network?: OfcNetwork, isToken?: boolean, addressCoin?: string, primaryKeyCurve?: KeyCurve): Readonly<OfcCoin>;
/**
 * Factory function for ofc arbethErc20 token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param kind Differentiates coins which represent fiat assets from those which represent crypto assets
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param isToken? Whether or not this account coin is a token of another coin
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `OfcCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function ofcArbethErc20(id: string, name: string, fullName: string, decimalPlaces: number, asset: UnderlyingAsset, kind?: CoinKind, features?: CoinFeature[], prefix?: string, suffix?: string, network?: OfcNetwork, isToken?: boolean, addressCoin?: string, primaryKeyCurve?: KeyCurve): Readonly<OfcCoin>;
/**
 * Factory function for testnet ofc arbethErc20 token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param kind Differentiates coins which represent fiat assets from those which represent crypto assets
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param isToken? Whether or not this account coin is a token of another coin
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `OfcCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function tofcArbethErc20(id: string, name: string, fullName: string, decimalPlaces: number, asset: UnderlyingAsset, kind?: CoinKind, features?: CoinFeature[], prefix?: string, suffix?: string, network?: OfcNetwork, isToken?: boolean, addressCoin?: string, primaryKeyCurve?: KeyCurve): Readonly<OfcCoin>;
/**
 * Factory function for ofc avaxErc20 token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param kind Differentiates coins which represent fiat assets from those which represent crypto assets
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param isToken? Whether or not this account coin is a token of another coin
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `OfcCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function ofcAvaxErc20(id: string, name: string, fullName: string, decimalPlaces: number, asset: UnderlyingAsset, kind?: CoinKind, features?: CoinFeature[], prefix?: string, suffix?: string, network?: OfcNetwork, isToken?: boolean, addressCoin?: string, primaryKeyCurve?: KeyCurve): Readonly<OfcCoin>;
/**
 * Factory function for testnet ofc avaxErc20 token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param kind Differentiates coins which represent fiat assets from those which represent crypto assets
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param isToken? Whether or not this account coin is a token of another coin
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `OfcCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function tofcAvaxErc20(id: string, name: string, fullName: string, decimalPlaces: number, asset: UnderlyingAsset, kind?: CoinKind, features?: CoinFeature[], prefix?: string, suffix?: string, network?: OfcNetwork, isToken?: boolean, addressCoin?: string, primaryKeyCurve?: KeyCurve): Readonly<OfcCoin>;
/**
 * Factory function for ofc polygonErc20 token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param kind Differentiates coins which represent fiat assets from those which represent crypto assets
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param isToken? Whether or not this account coin is a token of another coin
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `OfcCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function ofcPolygonErc20(id: string, name: string, fullName: string, decimalPlaces: number, asset: UnderlyingAsset, kind?: CoinKind, features?: CoinFeature[], prefix?: string, suffix?: string, network?: OfcNetwork, isToken?: boolean, addressCoin?: string, primaryKeyCurve?: KeyCurve): Readonly<OfcCoin>;
/**
 * Factory function for testnet ofc polygonErc20 token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param kind Differentiates coins which represent fiat assets from those which represent crypto assets
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param isToken? Whether or not this account coin is a token of another coin
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `OfcCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function tofcPolygonErc20(id: string, name: string, fullName: string, decimalPlaces: number, asset: UnderlyingAsset, kind?: CoinKind, features?: CoinFeature[], prefix?: string, suffix?: string, network?: OfcNetwork, isToken?: boolean, addressCoin?: string, primaryKeyCurve?: KeyCurve): Readonly<OfcCoin>;
//# sourceMappingURL=ofc.d.ts.map