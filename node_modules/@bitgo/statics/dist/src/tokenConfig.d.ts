export interface BaseTokenConfig {
    coin: string;
    decimalPlaces: number;
    name: string;
    type: string;
}
export interface BaseNetworkConfig extends BaseTokenConfig {
    network: string;
}
export interface BaseContractAddressConfig extends BaseNetworkConfig {
    tokenContractAddress: string;
}
export declare type AvaxcTokenConfig = BaseContractAddressConfig;
export declare type CeloTokenConfig = BaseContractAddressConfig;
export declare type EthLikeTokenConfig = BaseContractAddressConfig;
export declare type EosTokenConfig = BaseContractAddressConfig;
export declare type Erc20TokenConfig = BaseContractAddressConfig;
export declare type TrxTokenConfig = BaseContractAddressConfig;
export declare type StellarTokenConfig = BaseNetworkConfig;
export declare type SolTokenConfig = BaseNetworkConfig & {
    tokenAddress: string;
};
export declare type AdaTokenConfig = BaseNetworkConfig & {
    policyId: string;
    assetName: string;
};
export declare type AlgoTokenConfig = BaseNetworkConfig & {
    alias?: string;
};
export declare type OfcTokenConfig = BaseTokenConfig & {
    backingCoin: string;
    isFiat: boolean;
};
export declare type HbarTokenConfig = BaseNetworkConfig;
export declare type XrpTokenConfig = BaseNetworkConfig & {
    issuerAddress: string;
    currencyCode: string;
    domain?: string;
};
export interface Tokens {
    bitcoin: {
        eth: {
            tokens: Erc20TokenConfig[];
        };
        xlm: {
            tokens: StellarTokenConfig[];
        };
        algo: {
            tokens: AlgoTokenConfig[];
        };
        ofc: {
            tokens: OfcTokenConfig[];
        };
        celo: {
            tokens: CeloTokenConfig[];
        };
        eos: {
            tokens: EosTokenConfig[];
        };
        avaxc: {
            tokens: AvaxcTokenConfig[];
        };
        polygon: {
            tokens: EthLikeTokenConfig[];
        };
        bsc: {
            tokens: EthLikeTokenConfig[];
        };
        arbeth: {
            tokens: EthLikeTokenConfig[];
        };
        opeth: {
            tokens: EthLikeTokenConfig[];
        };
        sol: {
            tokens: SolTokenConfig[];
        };
        hbar: {
            tokens: HbarTokenConfig[];
        };
        ada: {
            tokens: AdaTokenConfig[];
        };
        trx: {
            tokens: TrxTokenConfig[];
        };
        xrp: {
            tokens: XrpTokenConfig[];
        };
        zketh: {
            tokens: EthLikeTokenConfig[];
        };
    };
    testnet: {
        eth: {
            tokens: Erc20TokenConfig[];
        };
        xlm: {
            tokens: StellarTokenConfig[];
        };
        algo: {
            tokens: AlgoTokenConfig[];
        };
        ofc: {
            tokens: OfcTokenConfig[];
        };
        celo: {
            tokens: CeloTokenConfig[];
        };
        bsc: {
            tokens: EthLikeTokenConfig[];
        };
        eos: {
            tokens: EosTokenConfig[];
        };
        avaxc: {
            tokens: AvaxcTokenConfig[];
        };
        polygon: {
            tokens: EthLikeTokenConfig[];
        };
        arbeth: {
            tokens: EthLikeTokenConfig[];
        };
        opeth: {
            tokens: EthLikeTokenConfig[];
        };
        sol: {
            tokens: SolTokenConfig[];
        };
        hbar: {
            tokens: HbarTokenConfig[];
        };
        ada: {
            tokens: AdaTokenConfig[];
        };
        trx: {
            tokens: TrxTokenConfig[];
        };
        xrp: {
            tokens: XrpTokenConfig[];
        };
        zketh: {
            tokens: EthLikeTokenConfig[];
        };
    };
}
export declare const ethGasConfigs: {
    minimumGasPrice: number;
    defaultGasPrice: number;
    maximumGasPrice: number;
    defaultGasLimit: number;
    defaultGasLimitTokenSend: number;
    minimumGasLimit: number;
    maximumGasLimit: number;
    newEthLikeCoinsMinGasLimit: number;
    opethGasL1Fees: number;
};
export declare const formattedAlgoTokens: AlgoTokenConfig[];
export declare const tokens: Tokens;
export declare const mainnetTokens: {
    [x: string]: boolean;
};
export declare const testnetTokens: {
    [x: string]: boolean;
};
//# sourceMappingURL=tokenConfig.d.ts.map