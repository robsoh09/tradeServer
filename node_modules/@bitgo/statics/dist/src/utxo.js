"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.utxoCoins = exports.utxo = exports.UtxoCoin = void 0;
const base_1 = require("./base");
const networks_1 = require("./networks");
class UtxoCoin extends base_1.BaseCoin {
    constructor(options) {
        super({
            ...options,
            kind: base_1.CoinKind.CRYPTO,
            isToken: false,
            decimalPlaces: 8,
        });
        this.network = options.network;
    }
    disallowedFeatures() {
        return new Set([base_1.CoinFeature.ACCOUNT_MODEL]);
    }
    requiredFeatures() {
        return new Set([base_1.CoinFeature.UNSPENT_MODEL]);
    }
}
exports.UtxoCoin = UtxoCoin;
UtxoCoin.DEFAULT_FEATURES = [
    base_1.CoinFeature.UNSPENT_MODEL,
    base_1.CoinFeature.CHILD_PAYS_FOR_PARENT,
    base_1.CoinFeature.CUSTODY,
    base_1.CoinFeature.CUSTODY_BITGO_TRUST,
    base_1.CoinFeature.MULTISIG_COLD,
    base_1.CoinFeature.PAYGO,
];
/**
 * Factory function for utxo coin instances.
 *
 * @param id uuid v4 of the coin
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `UtxoCoin`
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function utxo(id, name, fullName, network, asset, baseUnit, features = UtxoCoin.DEFAULT_FEATURES, prefix = '', suffix = name.toUpperCase(), 
/** All UTXOs BitGo supports are SECP256K1 **/
primaryKeyCurve = base_1.KeyCurve.Secp256k1) {
    return Object.freeze(new UtxoCoin({
        id,
        name,
        fullName,
        network,
        prefix,
        suffix,
        features,
        asset,
        primaryKeyCurve,
        baseUnit,
    }));
}
exports.utxo = utxo;
const BCH_FEATURES = [
    ...UtxoCoin.DEFAULT_FEATURES,
    base_1.CoinFeature.CUSTODY_BITGO_GERMANY,
    base_1.CoinFeature.CUSTODY_BITGO_NEW_YORK,
    base_1.CoinFeature.CUSTODY_BITGO_FRANKFURT,
    base_1.CoinFeature.CUSTODY_BITGO_SINGAPORE,
];
const BTC_FEATURES = [
    ...UtxoCoin.DEFAULT_FEATURES,
    base_1.CoinFeature.CUSTODY_BITGO_GERMANY,
    base_1.CoinFeature.CUSTODY_BITGO_NEW_YORK,
    base_1.CoinFeature.CUSTODY_BITGO_FRANKFURT,
    base_1.CoinFeature.CUSTODY_BITGO_SISTER_TRUST_ONE,
    base_1.CoinFeature.BULK_TRANSACTION,
    base_1.CoinFeature.DISTRIBUTED_CUSTODY,
    base_1.CoinFeature.CUSTODY_BITGO_SINGAPORE,
    base_1.CoinFeature.CUSTODY_BITGO_SWITZERLAND,
];
const BTG_FEATURES = [
    ...UtxoCoin.DEFAULT_FEATURES,
    base_1.CoinFeature.CUSTODY_BITGO_GERMANY,
    base_1.CoinFeature.CUSTODY_BITGO_FRANKFURT,
];
const LTC_FEATURES = [
    ...UtxoCoin.DEFAULT_FEATURES,
    base_1.CoinFeature.CUSTODY_BITGO_GERMANY,
    base_1.CoinFeature.CUSTODY_BITGO_NEW_YORK,
    base_1.CoinFeature.CUSTODY_BITGO_FRANKFURT,
    base_1.CoinFeature.CUSTODY_BITGO_SINGAPORE,
];
const DOGE_FEATURES = [
    ...UtxoCoin.DEFAULT_FEATURES,
    base_1.CoinFeature.CUSTODY_BITGO_GERMANY,
    base_1.CoinFeature.CUSTODY_BITGO_FRANKFURT,
    base_1.CoinFeature.CUSTODY_BITGO_SINGAPORE,
];
exports.utxoCoins = [
    utxo('8d6e08d5-399f-414f-8430-6ceca1798cbf', 'bch', 'Bitcoin Cash', networks_1.Networks.main.bitcoinCash, base_1.UnderlyingAsset.BCH, base_1.BaseUnit.BTC, BCH_FEATURES),
    utxo('aae6fafc-5091-4b10-9a11-aa6cefea2805', 'tbch', 'Testnet Bitcoin Cash', networks_1.Networks.test.bitcoinCash, base_1.UnderlyingAsset.BCH, base_1.BaseUnit.BTC, BCH_FEATURES),
    utxo('941587ce-1c7a-4305-b908-15455d15e961', 'bcha', 'ECash', networks_1.Networks.main.eCash, base_1.UnderlyingAsset.BCHA, base_1.BaseUnit.BTC),
    utxo('af8de1e0-3e33-47bf-94d3-fb3c2bebead2', 'tbcha', 'Testnet ECash', networks_1.Networks.test.eCash, base_1.UnderlyingAsset.BCHA, base_1.BaseUnit.BTC),
    utxo('f728cfc7-d0cf-4f99-bca0-d25273e65fcf', 'bsv', 'Bitcoin SV', networks_1.Networks.main.bitcoinSV, base_1.UnderlyingAsset.BSV, base_1.BaseUnit.BTC, [base_1.CoinFeature.DEPRECATED, ...UtxoCoin.DEFAULT_FEATURES]),
    utxo('7cb81518-85d7-400f-960e-7bc00b3bfa62', 'tbsv', 'Testnet Bitcoin SV', networks_1.Networks.test.bitcoinSV, base_1.UnderlyingAsset.BSV, base_1.BaseUnit.BTC, [base_1.CoinFeature.DEPRECATED, ...UtxoCoin.DEFAULT_FEATURES]),
    utxo('5c1691c5-c9cc-49ed-abe0-c433dab2edaa', 'btc', 'Bitcoin', networks_1.Networks.main.bitcoin, base_1.UnderlyingAsset.BTC, base_1.BaseUnit.BTC, BTC_FEATURES),
    utxo('cde7559d-a536-4d12-8de4-90baa09f90bd', 'tbtc', 'Testnet Bitcoin', networks_1.Networks.test.bitcoin, base_1.UnderlyingAsset.BTC, base_1.BaseUnit.BTC, BTC_FEATURES),
    utxo('8feb110d-0d68-44ce-ae97-b8c30ec870a9', 'btg', 'Bitcoin Gold', networks_1.Networks.main.bitcoinGold, base_1.UnderlyingAsset.BTG, base_1.BaseUnit.BTC, BTG_FEATURES),
    utxo('633246f2-af21-41b8-8b9e-ba9ae25d386f', 'tbtg', 'Testnet Bitcoin Gold', networks_1.Networks.test.bitcoinGold, base_1.UnderlyingAsset.BTG, base_1.BaseUnit.BTC, BTG_FEATURES.filter((f) => f !== base_1.CoinFeature.MULTISIG_COLD)),
    utxo('9c8097f1-5d2c-4a62-a94c-96c271c0e5e0', 'ltc', 'Litecoin', networks_1.Networks.main.litecoin, base_1.UnderlyingAsset.LTC, base_1.BaseUnit.LTC, LTC_FEATURES),
    utxo('1aca32c8-a3e5-42eb-82df-4c263d8bfc68', 'tltc', 'Testnet Litecoin', networks_1.Networks.test.litecoin, base_1.UnderlyingAsset.LTC, base_1.BaseUnit.LTC, LTC_FEATURES),
    utxo('0739be6a-c72e-468d-9464-ca5601965708', 'dash', 'Dash', networks_1.Networks.main.dash, base_1.UnderlyingAsset.DASH, base_1.BaseUnit.DASH),
    utxo('5950d78f-e8dd-457a-ab5d-310e6b476bb1', 'tdash', 'Testnet Dash', networks_1.Networks.test.dash, base_1.UnderlyingAsset.DASH, base_1.BaseUnit.DASH),
    utxo('508f6b53-1e6e-41fd-b541-b2498b7c4b61', 'zec', 'ZCash', networks_1.Networks.main.zCash, base_1.UnderlyingAsset.ZEC, base_1.BaseUnit.ZEC),
    utxo('549a4499-387c-42d3-9048-c01d6724d98a', 'tzec', 'Testnet ZCash', networks_1.Networks.test.zCash, base_1.UnderlyingAsset.ZEC, base_1.BaseUnit.ZEC),
    utxo('c93a9160-458f-4a31-bea0-4a93ae8b1d2d', 'doge', 'Dogecoin', networks_1.Networks.main.dogecoin, base_1.UnderlyingAsset.DOGE, base_1.BaseUnit.BTC, DOGE_FEATURES),
    utxo('7a1597e8-fd8e-4b68-8086-f9159e37e0ce', 'tdoge', 'Testnet Dogecoin', networks_1.Networks.test.dogecoin, base_1.UnderlyingAsset.DOGE, base_1.BaseUnit.BTC, DOGE_FEATURES),
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXR4by5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dHhvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlDQUE4RjtBQUM5Rix5Q0FBbUQ7QUFlbkQsTUFBYSxRQUFTLFNBQVEsZUFBUTtJQWVwQyxZQUFZLE9BQStCO1FBQ3pDLEtBQUssQ0FBQztZQUNKLEdBQUcsT0FBTztZQUNWLElBQUksRUFBRSxlQUFRLENBQUMsTUFBTTtZQUNyQixPQUFPLEVBQUUsS0FBSztZQUNkLGFBQWEsRUFBRSxDQUFDO1NBQ2pCLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQztJQUNqQyxDQUFDO0lBRVMsa0JBQWtCO1FBQzFCLE9BQU8sSUFBSSxHQUFHLENBQUMsQ0FBQyxrQkFBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVTLGdCQUFnQjtRQUN4QixPQUFPLElBQUksR0FBRyxDQUFDLENBQUMsa0JBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7O0FBaENILDRCQWlDQztBQWhDd0IseUJBQWdCLEdBQUc7SUFDeEMsa0JBQVcsQ0FBQyxhQUFhO0lBQ3pCLGtCQUFXLENBQUMscUJBQXFCO0lBQ2pDLGtCQUFXLENBQUMsT0FBTztJQUNuQixrQkFBVyxDQUFDLG1CQUFtQjtJQUMvQixrQkFBVyxDQUFDLGFBQWE7SUFDekIsa0JBQVcsQ0FBQyxLQUFLO0NBQ2xCLENBQUM7QUEyQko7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsU0FBZ0IsSUFBSSxDQUNsQixFQUFVLEVBQ1YsSUFBWSxFQUNaLFFBQWdCLEVBQ2hCLE9BQW9CLEVBQ3BCLEtBQXNCLEVBQ3RCLFFBQWtCLEVBQ2xCLFdBQTBCLFFBQVEsQ0FBQyxnQkFBZ0IsRUFDbkQsTUFBTSxHQUFHLEVBQUUsRUFDWCxTQUFpQixJQUFJLENBQUMsV0FBVyxFQUFFO0FBQ25DLDhDQUE4QztBQUM5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YXR1cmUsIENvaW5LaW5kLCBLZXlDdXJ2ZSwgVW5kZXJseWluZ0Fzc2V0IH0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7IE5ldHdvcmtzLCBVdHhvTmV0d29yayB9IGZyb20gJy4vbmV0d29ya3MnO1xuXG5pbnRlcmZhY2UgVXR4b0NvbnN0cnVjdG9yT3B0aW9ucyB7XG4gIGlkOiBzdHJpbmc7XG4gIGZ1bGxOYW1lOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgbmV0d29yazogVXR4b05ldHdvcms7XG4gIGZlYXR1cmVzOiBDb2luRmVhdHVyZVtdO1xuICBhc3NldDogVW5kZXJseWluZ0Fzc2V0O1xuICBiYXNlVW5pdDogQmFzZVVuaXQ7XG4gIHByZWZpeD86IHN0cmluZztcbiAgc3VmZml4Pzogc3RyaW5nO1xuICBwcmltYXJ5S2V5Q3VydmU6IEtleUN1cnZlO1xufVxuXG5leHBvcnQgY2xhc3MgVXR4b0NvaW4gZXh0ZW5kcyBCYXNlQ29pbiB7XG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgREVGQVVMVF9GRUFUVVJFUyA9IFtcbiAgICBDb2luRmVhdHVyZS5VTlNQRU5UX01PREVMLFxuICAgIENvaW5GZWF0dXJlLkNISUxEX1BBWVNfRk9SX1BBUkVOVCxcbiAgICBDb2luRmVhdHVyZS5DVVNUT0RZLFxuICAgIENvaW5GZWF0dXJlLkNVU1RPRFlfQklUR09fVFJVU1QsXG4gICAgQ29pbkZlYXR1cmUuTVVMVElTSUdfQ09MRCxcbiAgICBDb2luRmVhdHVyZS5QQVlHTyxcbiAgXTtcblxuICAvKipcbiAgICogQWRkaXRpb25hbCBmaWVsZHMgZm9yIHV0eG8gY29pbnNcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBuZXR3b3JrOiBVdHhvTmV0d29yaztcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBVdHhvQ29uc3RydWN0b3JPcHRpb25zKSB7XG4gICAgc3VwZXIoe1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGtpbmQ6IENvaW5LaW5kLkNSWVBUTyxcbiAgICAgIGlzVG9rZW46IGZhbHNlLFxuICAgICAgZGVjaW1hbFBsYWNlczogOCxcbiAgICB9KTtcblxuICAgIHRoaXMubmV0d29yayA9IG9wdGlvbnMubmV0d29yaztcbiAgfVxuXG4gIHByb3RlY3RlZCBkaXNhbGxvd2VkRmVhdHVyZXMoKTogU2V0PENvaW5GZWF0dXJlPiB7XG4gICAgcmV0dXJuIG5ldyBTZXQoW0NvaW5GZWF0dXJlLkFDQ09VTlRfTU9ERUxdKTtcbiAgfVxuXG4gIHByb3RlY3RlZCByZXF1aXJlZEZlYXR1cmVzKCk6IFNldDxDb2luRmVhdHVyZT4ge1xuICAgIHJldHVybiBuZXcgU2V0KFtDb2luRmVhdHVyZS5VTlNQRU5UX01PREVMXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBGYWN0b3J5IGZ1bmN0aW9uIGZvciB1dHhvIGNvaW4gaW5zdGFuY2VzLlxuICpcbiAqIEBwYXJhbSBpZCB1dWlkIHY0IG9mIHRoZSBjb2luXG4gKiBAcGFyYW0gbmFtZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgY29pblxuICogQHBhcmFtIGZ1bGxOYW1lIENvbXBsZXRlIGh1bWFuLXJlYWRhYmxlIG5hbWUgb2YgdGhlIGNvaW5cbiAqIEBwYXJhbSBuZXR3b3JrIE5ldHdvcmsgb2JqZWN0IGZvciB0aGlzIGNvaW5cbiAqIEBwYXJhbSBhc3NldCBBc3NldCB3aGljaCB0aGlzIGNvaW4gcmVwcmVzZW50cy4gVGhpcyBpcyB0aGUgc2FtZSBmb3IgYm90aCBtYWlubmV0IGFuZCB0ZXN0bmV0IHZhcmlhbnRzIG9mIGEgY29pbi5cbiAqIEBwYXJhbSBmZWF0dXJlcz8gRmVhdHVyZXMgb2YgdGhpcyBjb2luLiBEZWZhdWx0cyB0byB0aGUgREVGQVVMVF9GRUFUVVJFUyBkZWZpbmVkIGluIGBVdHhvQ29pbmBcbiAqIEBwYXJhbSBwcmVmaXg/IE9wdGlvbmFsIGNvaW4gcHJlZml4LiBEZWZhdWx0cyB0byBlbXB0eSBzdHJpbmdcbiAqIEBwYXJhbSBzdWZmaXg/IE9wdGlvbmFsIGNvaW4gc3VmZml4LiBEZWZhdWx0cyB0byBjb2luIG5hbWUuXG4gKiBAcGFyYW0gcHJpbWFyeUtleUN1cnZlIFRoZSBlbGxpcHRpYyBjdXJ2ZSBmb3IgdGhpcyBjaGFpbi90b2tlblxuICovXG5leHBvcnQgZnVuY3Rpb24gdXR4byhcbiAgaWQ6IHN0cmluZyxcbiAgbmFtZTogc3RyaW5nLFxuICBmdWxsTmFtZTogc3RyaW5nLFxuICBuZXR3b3JrOiBVdHhvTmV0d29yayxcbiAgYXNzZXQ6IFVuZGVybHlpbmdBc3NldCxcbiAgYmFzZVVuaXQ6IEJhc2VVbml0LFxuICBmZWF0dXJlczogQ29pbkZlYXR1cmVbXSA9IFV0eG9Db2luLkRFRkFVTFRfRkVBVFVSRVMsXG4gIHByZWZpeCA9ICcnLFxuICBzdWZmaXg6IHN0cmluZyA9IG5hbWUudG9VcHBlckNhc2UoKSxcbiAgLyoqIEFsbCBVVFhPcyBCaXRHbyBzdXBwb3J0cyBhcmUgU0VDUDI1NksxICoqL1xuICBwcmltYXJ5S2V5Q3VydmU6IEtleUN1cnZlID0gS2V5Q3VydmUuU2VjcDI1NmsxXG4pIHtcbiAgcmV0dXJuIE9iamVjdC5mcmVlemUoXG4gICAgbmV3IFV0eG9Db2luKHtcbiAgICAgIGlkLFxuICAgICAgbmFtZSxcbiAgICAgIGZ1bGxOYW1lLFxuICAgICAgbmV0d29yayxcbiAgICAgIHByZWZpeCxcbiAgICAgIHN1ZmZpeCxcbiAgICAgIGZlYXR1cmVzLFxuICAgICAgYXNzZXQsXG4gICAgICBwcmltYXJ5S2V5Q3VydmUsXG4gICAgICBiYXNlVW5pdCxcbiAgICB9KVxuICApO1xufVxuXG5jb25zdCBCQ0hfRkVBVFVSRVMgPSBbXG4gIC4uLlV0eG9Db2luLkRFRkFVTFRfRkVBVFVSRVMsXG4gIENvaW5GZWF0dXJlLkNVU1RPRFlfQklUR09fR0VSTUFOWSxcbiAgQ29pbkZlYXR1cmUuQ1VTVE9EWV9CSVRHT19ORVdfWU9SSyxcbiAgQ29pbkZlYXR1cmUuQ1VTVE9EWV9CSVRHT19GUkFOS0ZVUlQsXG4gIENvaW5GZWF0dXJlLkNVU1RPRFlfQklUR09fU0lOR0FQT1JFLFxuXTtcbmNvbnN0IEJUQ19GRUFUVVJFUyA9IFtcbiAgLi4uVXR4b0NvaW4uREVGQVVMVF9GRUFUVVJFUyxcbiAgQ29pbkZlYXR1cmUuQ1VTVE9EWV9CSVRHT19HRVJNQU5ZLFxuICBDb2luRmVhdHVyZS5DVVNUT0RZX0JJVEdPX05FV19ZT1JLLFxuICBDb2luRmVhdHVyZS5DVVNUT0RZX0JJVEdPX0ZSQU5LRlVSVCxcbiAgQ29pbkZlYXR1cmUuQ1VTVE9EWV9CSVRHT19TSVNURVJfVFJVU1RfT05FLFxuICBDb2luRmVhdHVyZS5CVUxLX1RSQU5TQUNUSU9OLFxuICBDb2luRmVhdHVyZS5ESVNUUklCVVRFRF9DVVNUT0RZLFxuICBDb2luRmVhdHVyZS5DVVNUT0RZX0JJVEdPX1NJTkdBUE9SRSxcbiAgQ29pbkZlYXR1cmUuQ1VTVE9EWV9CSVRHT19TV0lUWkVSTEFORCxcbl07XG5jb25zdCBCVEdfRkVBVFVSRVMgPSBbXG4gIC4uLlV0eG9Db2luLkRFRkFVTFRfRkVBVFVSRVMsXG4gIENvaW5GZWF0dXJlLkNVU1RPRFlfQklUR09fR0VSTUFOWSxcbiAgQ29pbkZlYXR1cmUuQ1VTVE9EWV9CSVRHT19GUkFOS0ZVUlQsXG5dO1xuY29uc3QgTFRDX0ZFQVRVUkVTID0gW1xuICAuLi5VdHhvQ29pbi5ERUZBVUxUX0ZFQVRVUkVTLFxuICBDb2luRmVhdHVyZS5DVVNUT0RZX0JJVEdPX0dFUk1BTlksXG4gIENvaW5GZWF0dXJlLkNVU1RPRFlfQklUR09fTkVXX1lPUkssXG4gIENvaW5GZWF0dXJlLkNVU1RPRFlfQklUR09fRlJBTktGVVJULFxuICBDb2luRmVhdHVyZS5DVVNUT0RZX0JJVEdPX1NJTkdBUE9SRSxcbl07XG5jb25zdCBET0dFX0ZFQVRVUkVTID0gW1xuICAuLi5VdHhvQ29pbi5ERUZBVUxUX0ZFQVRVUkVTLFxuICBDb2luRmVhdHVyZS5DVVNUT0RZX0JJVEdPX0dFUk1BTlksXG4gIENvaW5GZWF0dXJlLkNVU1RPRFlfQklUR09fRlJBTktGVVJULFxuICBDb2luRmVhdHVyZS5DVVNUT0RZX0JJVEdPX1NJTkdBUE9SRSxcbl07XG5cbmV4cG9ydCBjb25zdCB1dHhvQ29pbnM6IFJlYWRvbmx5PEJhc2VDb2luPltdID0gW1xuICB1dHhvKFxuICAgICc4ZDZlMDhkNS0zOTlmLTQxNGYtODQzMC02Y2VjYTE3OThjYmYnLFxuICAgICdiY2gnLFxuICAgICdCaXRjb2luIENhc2gnLFxuICAgIE5ldHdvcmtzLm1haW4uYml0Y29pbkNhc2gsXG4gICAgVW5kZXJseWluZ0Fzc2V0LkJDSCxcbiAgICBCYXNlVW5pdC5CVEMsXG4gICAgQkNIX0ZFQVRVUkVTXG4gICksXG4gIHV0eG8oXG4gICAgJ2FhZTZmYWZjLTUwOTEtNGIxMC05YTExLWFhNmNlZmVhMjgwNScsXG4gICAgJ3RiY2gnLFxuICAgICdUZXN0bmV0IEJpdGNvaW4gQ2FzaCcsXG4gICAgTmV0d29ya3MudGVzdC5iaXRjb2luQ2FzaCxcbiAgICBVbmRlcmx5aW5nQXNzZXQuQkNILFxuICAgIEJhc2VVbml0LkJUQyxcbiAgICBCQ0hfRkVBVFVSRVNcbiAgKSxcbiAgdXR4byhcbiAgICAnOTQxNTg3Y2UtMWM3YS00MzA1LWI5MDgtMTU0NTVkMTVlOTYxJyxcbiAgICAnYmNoYScsXG4gICAgJ0VDYXNoJyxcbiAgICBOZXR3b3Jrcy5tYWluLmVDYXNoLFxuICAgIFVuZGVybHlpbmdBc3NldC5CQ0hBLFxuICAgIEJhc2VVbml0LkJUQ1xuICApLFxuICB1dHhvKFxuICAgICdhZjhkZTFlMC0zZTMzLTQ3YmYtOTRkMy1mYjNjMmJlYmVhZDInLFxuICAgICd0YmNoYScsXG4gICAgJ1Rlc3RuZXQgRUNhc2gnLFxuICAgIE5ldHdvcmtzLnRlc3QuZUNhc2gsXG4gICAgVW5kZXJseWluZ0Fzc2V0LkJDSEEsXG4gICAgQmFzZVVuaXQuQlRDXG4gICksXG4gIHV0eG8oXG4gICAgJ2Y3MjhjZmM3LWQwY2YtNGY5OS1iY2EwLWQyNTI3M2U2NWZjZicsXG4gICAgJ2JzdicsXG4gICAgJ0JpdGNvaW4gU1YnLFxuICAgIE5ldHdvcmtzLm1haW4uYml0Y29pblNWLFxuICAgIFVuZGVybHlpbmdBc3NldC5CU1YsXG4gICAgQmFzZVVuaXQuQlRDLFxuICAgIFtDb2luRmVhdHVyZS5ERVBSRUNBVEVELCAuLi5VdHhvQ29pbi5ERUZBVUxUX0ZFQVRVUkVTXVxuICApLFxuICB1dHhvKFxuICAgICc3Y2I4MTUxOC04NWQ3LTQwMGYtOTYwZS03YmMwMGIzYmZhNjInLFxuICAgICd0YnN2JyxcbiAgICAnVGVzdG5ldCBCaXRjb2luIFNWJyxcbiAgICBOZXR3b3Jrcy50ZXN0LmJpdGNvaW5TVixcbiAgICBVbmRlcmx5aW5nQXNzZXQuQlNWLFxuICAgIEJhc2VVbml0LkJUQyxcbiAgICBbQ29pbkZlYXR1cmUuREVQUkVDQVRFRCwgLi4uVXR4b0NvaW4uREVGQVVMVF9GRUFUVVJFU11cbiAgKSxcbiAgdXR4byhcbiAgICAnNWMxNjkxYzUtYzljYy00OWVkLWFiZTAtYzQzM2RhYjJlZGFhJyxcbiAgICAnYnRjJyxcbiAgICAnQml0Y29pbicsXG4gICAgTmV0d29ya3MubWFpbi5iaXRjb2luLFxuICAgIFVuZGVybHlpbmdBc3NldC5CVEMsXG4gICAgQmFzZVVuaXQuQlRDLFxuICAgIEJUQ19GRUFUVVJFU1xuICApLFxuICB1dHhvKFxuICAgICdjZGU3NTU5ZC1hNTM2LTRkMTItOGRlNC05MGJhYTA5ZjkwYmQnLFxuICAgICd0YnRjJyxcbiAgICAnVGVzdG5ldCBCaXRjb2luJyxcbiAgICBOZXR3b3Jrcy50ZXN0LmJpdGNvaW4sXG4gICAgVW5kZXJseWluZ0Fzc2V0LkJUQyxcbiAgICBCYXNlVW5pdC5CVEMsXG4gICAgQlRDX0ZFQVRVUkVTXG4gICksXG4gIHV0eG8oXG4gICAgJzhmZWIxMTBkLTBkNjgtNDRjZS1hZTk3LWI4YzMwZWM4NzBhOScsXG4gICAgJ2J0ZycsXG4gICAgJ0JpdGNvaW4gR29sZCcsXG4gICAgTmV0d29ya3MubWFpbi5iaXRjb2luR29sZCxcbiAgICBVbmRlcmx5aW5nQXNzZXQuQlRHLFxuICAgIEJhc2VVbml0LkJUQyxcbiAgICBCVEdfRkVBVFVSRVNcbiAgKSxcbiAgdXR4byhcbiAgICAnNjMzMjQ2ZjItYWYyMS00MWI4LThiOWUtYmE5YWUyNWQzODZmJyxcbiAgICAndGJ0ZycsXG4gICAgJ1Rlc3RuZXQgQml0Y29pbiBHb2xkJyxcbiAgICBOZXR3b3Jrcy50ZXN0LmJpdGNvaW5Hb2xkLFxuICAgIFVuZGVybHlpbmdBc3NldC5CVEcsXG4gICAgQmFzZVVuaXQuQlRDLFxuICAgIEJUR19GRUFUVVJFUy5maWx0ZXIoKGYpID0+IGYgIT09IENvaW5GZWF0dXJlLk1VTFRJU0lHX0NPTEQpXG4gICksXG4gIHV0eG8oXG4gICAgJzljODA5N2YxLTVkMmMtNGE2Mi1hOTRjLTk2YzI3MWMwZTVlMCcsXG4gICAgJ2x0YycsXG4gICAgJ0xpdGVjb2luJyxcbiAgICBOZXR3b3Jrcy5tYWluLmxpdGVjb2luLFxuICAgIFVuZGVybHlpbmdBc3NldC5MVEMsXG4gICAgQmFzZVVuaXQuTFRDLFxuICAgIExUQ19GRUFUVVJFU1xuICApLFxuICB1dHhvKFxuICAgICcxYWNhMzJjOC1hM2U1LTQyZWItODJkZi00YzI2M2Q4YmZjNjgnLFxuICAgICd0bHRjJyxcbiAgICAnVGVzdG5ldCBMaXRlY29pbicsXG4gICAgTmV0d29ya3MudGVzdC5saXRlY29pbixcbiAgICBVbmRlcmx5aW5nQXNzZXQuTFRDLFxuICAgIEJhc2VVbml0LkxUQyxcbiAgICBMVENfRkVBVFVSRVNcbiAgKSxcbiAgdXR4bygnMDczOWJlNmEtYzcyZS00NjhkLTk0NjQtY2E1NjAxOTY1NzA4JywgJ2Rhc2gnLCAnRGFzaCcsIE5ldHdvcmtzLm1haW4uZGFzaCwgVW5kZXJseWluZ0Fzc2V0LkRBU0gsIEJhc2VVbml0LkRBU0gpLFxuICB1dHhvKFxuICAgICc1OTUwZDc4Zi1lOGRkLTQ1N2EtYWI1ZC0zMTBlNmI0NzZiYjEnLFxuICAgICd0ZGFzaCcsXG4gICAgJ1Rlc3RuZXQgRGFzaCcsXG4gICAgTmV0d29ya3MudGVzdC5kYXNoLFxuICAgIFVuZGVybHlpbmdBc3NldC5EQVNILFxuICAgIEJhc2VVbml0LkRBU0hcbiAgKSxcbiAgdXR4bygnNTA4ZjZiNTMtMWU2ZS00MWZkLWI1NDEtYjI0OThiN2M0YjYxJywgJ3plYycsICdaQ2FzaCcsIE5ldHdvcmtzLm1haW4uekNhc2gsIFVuZGVybHlpbmdBc3NldC5aRUMsIEJhc2VVbml0LlpFQyksXG4gIHV0eG8oXG4gICAgJzU0OWE0NDk5LTM4N2MtNDJkMy05MDQ4LWMwMWQ2NzI0ZDk4YScsXG4gICAgJ3R6ZWMnLFxuICAgICdUZXN0bmV0IFpDYXNoJyxcbiAgICBOZXR3b3Jrcy50ZXN0LnpDYXNoLFxuICAgIFVuZGVybHlpbmdBc3NldC5aRUMsXG4gICAgQmFzZVVuaXQuWkVDXG4gICksXG4gIHV0eG8oXG4gICAgJ2M5M2E5MTYwLTQ1OGYtNGEzMS1iZWEwLTRhOTNhZThiMWQyZCcsXG4gICAgJ2RvZ2UnLFxuICAgICdEb2dlY29pbicsXG4gICAgTmV0d29ya3MubWFpbi5kb2dlY29pbixcbiAgICBVbmRlcmx5aW5nQXNzZXQuRE9HRSxcbiAgICBCYXNlVW5pdC5CVEMsXG4gICAgRE9HRV9GRUFUVVJFU1xuICApLFxuICB1dHhvKFxuICAgICc3YTE1OTdlOC1mZDhlLTRiNjgtODA4Ni1mOTE1OWUzN2UwY2UnLFxuICAgICd0ZG9nZScsXG4gICAgJ1Rlc3RuZXQgRG9nZWNvaW4nLFxuICAgIE5ldHdvcmtzLnRlc3QuZG9nZWNvaW4sXG4gICAgVW5kZXJseWluZ0Fzc2V0LkRPR0UsXG4gICAgQmFzZVVuaXQuQlRDLFxuICAgIERPR0VfRkVBVFVSRVNcbiAgKSxcbl07XG4iXX0=