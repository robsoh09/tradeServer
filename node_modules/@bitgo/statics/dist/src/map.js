"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoinMap = void 0;
const errors_1 = require("./errors");
class CoinMap {
    constructor() {
        this._map = new Map();
        this._coinByIds = new Map();
        // Holds key equivalences used during an asset name migration
        this._coinByAliases = new Map();
        // Do not instantiate
    }
    static fromCoins(coins) {
        return coins.reduce((coinMap, coin) => {
            if (coinMap.has(coin.name)) {
                throw new errors_1.DuplicateCoinDefinitionError(coin.name);
            }
            coinMap._map.set(coin.name, coin);
            if (coinMap._coinByIds.has(coin.id)) {
                throw new errors_1.DuplicateCoinIdDefinitionError(coin.id);
            }
            coinMap._coinByIds.set(coin.id, coin);
            const alias = coin.alias;
            if (alias) {
                if (coinMap.has(alias)) {
                    throw new errors_1.DuplicateCoinDefinitionError(alias);
                }
                coinMap._coinByAliases.set(alias, coin);
            }
            return coinMap;
        }, new CoinMap());
    }
    static coinNameFromChainId(chainId) {
        const ethLikeCoinFromChainId = {
            1: 'eth',
            42: 'teth',
            5: 'gteth',
            17000: 'hteth',
            10001: 'ethw',
            80002: 'tpolygon',
            137: 'polygon',
            56: 'bsc',
            97: 'tbsc',
            42161: 'arbeth',
            421614: 'tarbeth',
            10: 'opeth',
            11155420: 'topeth',
        };
        return ethLikeCoinFromChainId[chainId];
    }
    /**
     * Override `get` to throw if a coin is missing, instead of returning undefined.
     * It will honor key equivalences in case given key is missing.
     * @param {string} key
     * @return {BaseCoin}
     */
    get(key) {
        const coin = this._map.get(key) || this._coinByIds.get(key) || this._coinByAliases.get(key);
        if (coin) {
            return coin;
        }
        throw new errors_1.CoinNotDefinedError(key);
    }
    has(key) {
        return this._map.has(key) || this._coinByIds.has(key) || this._coinByAliases.has(key);
    }
    map(mapper) {
        const mapResult = [];
        this._map.forEach((value, key) => {
            mapResult.push(mapper(value, key));
        });
        return mapResult;
    }
    reduce(reducer, initialValue) {
        let acc = initialValue;
        this._map.forEach((value, key) => {
            acc = reducer(acc, value, key);
        });
        return acc;
    }
    filter(predicate) {
        const filterResult = [];
        this._map.forEach((value, key) => {
            if (predicate(value, key)) {
                filterResult.push(value);
            }
        });
        return CoinMap.fromCoins(filterResult);
    }
    forEach(callback) {
        this._map.forEach(callback);
    }
    [Symbol.iterator]() {
        return this._map[Symbol.iterator]();
    }
}
exports.CoinMap = CoinMap;
//# sourceMappingURL=data:application/json;base64,