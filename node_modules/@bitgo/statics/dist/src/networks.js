"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Networks = exports.BaseNetwork = exports.NetworkType = void 0;
const base_1 = require("./base");
var NetworkType;
(function (NetworkType) {
    NetworkType["MAINNET"] = "mainnet";
    NetworkType["TESTNET"] = "testnet";
})(NetworkType = exports.NetworkType || (exports.NetworkType = {}));
class BaseNetwork {
}
exports.BaseNetwork = BaseNetwork;
class Mainnet extends BaseNetwork {
    constructor() {
        super(...arguments);
        this.type = NetworkType.MAINNET;
    }
}
class Testnet extends BaseNetwork {
    constructor() {
        super(...arguments);
        this.type = NetworkType.TESTNET;
    }
}
class Algorand extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Algorand';
        this.family = base_1.CoinFamily.ALGO;
        this.explorerUrl = 'https://allo.info/tx/';
    }
}
class AlgorandTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'AlgorandTestnet';
        this.family = base_1.CoinFamily.ALGO;
        this.explorerUrl = 'https://explorer.bitquery.io/algorand_testnet/tx/';
    }
}
class Ada extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'AdaCardano';
        this.family = base_1.CoinFamily.ADA;
        this.utxolibName = 'cardano';
        this.poolDeposit = 500000000;
        this.stakeKeyDeposit = 2000000;
        this.explorerUrl = 'https://beta.explorer.cardano.org/en/transactions/';
        this.coinsPerUtxoWord = 34482;
        this.maxTransactionSize = 8000;
        this.maxValueSize = 4000;
    }
}
class AdaTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'AdaCardanoTestnet';
        this.family = base_1.CoinFamily.ADA;
        this.utxolibName = 'cardanoTestnet';
        this.explorerUrl = 'https://preprod.cexplorer.io/';
        this.coinsPerUtxoWord = 34482;
        this.maxTransactionSize = 8000;
        this.maxValueSize = 4000;
        this.poolDeposit = 500000000;
        this.stakeKeyDeposit = 2000000;
    }
}
class Arbitrum extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Arbitrum';
        this.family = base_1.CoinFamily.ARBETH;
        this.explorerUrl = 'https://arbiscan.io/tx/';
        this.accountExplorerUrl = 'https://arbiscan.io/address/';
        this.chainId = 42161;
        this.nativeCoinOperationHashPrefix = '42161';
        this.tokenOperationHashPrefix = '42161-ERC20';
        this.forwarderFactoryAddress = '0x37996e762fa8b671869740c79eb33f625b3bf92a';
        this.forwarderImplementationAddress = '0xd5fe1c1f216b775dfd30638fa7164d41321ef79b';
        this.walletFactoryAddress = '0x809ee567e413543af1caebcdb247f6a67eafc8dd';
        this.walletImplementationAddress = '0x944fef03af368414f29dc31a72061b8d64f568d2';
    }
}
class ArbitrumTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'ArbitrumTestnet';
        this.family = base_1.CoinFamily.ARBETH;
        this.explorerUrl = 'https://sepolia.arbiscan.io/tx/';
        this.accountExplorerUrl = 'https://sepolia.arbiscan.io/address/';
        this.chainId = 421614;
        this.nativeCoinOperationHashPrefix = '421614';
        this.tokenOperationHashPrefix = '421614-ERC20';
        this.forwarderFactoryAddress = '0x37996e762fa8b671869740c79eb33f625b3bf92a';
        this.forwarderImplementationAddress = '0xd5fe1c1f216b775dfd30638fa7164d41321ef79b';
        this.walletFactoryAddress = '0x809ee567e413543af1caebcdb247f6a67eafc8dd';
        this.walletImplementationAddress = '0x944fef03af368414f29dc31a72061b8d64f568d2';
    }
}
class AvalancheC extends Mainnet {
    constructor() {
        super(...arguments);
        // https://docs.avax.network/build/tutorials/smart-contracts/deploy-a-smart-contract-on-avalanche-using-remix-and-metamask#avalanche-mainnet-settings
        this.name = 'AvalancheC';
        this.family = base_1.CoinFamily.AVAXC;
        this.explorerUrl = 'https://subnets.avax.network/c-chain/tx/';
        this.accountExplorerUrl = 'https://subnets.avax.network/c-chain/address/';
        this.chainId = 43114;
    }
}
class AvalancheCTestnet extends Testnet {
    constructor() {
        super(...arguments);
        // https://docs.avax.network/build/tutorials/smart-contracts/deploy-a-smart-contract-on-avalanche-using-remix-and-metamask#avalanche-mainnet-settings
        this.name = 'AvalancheCTestnet';
        this.family = base_1.CoinFamily.AVAXC;
        this.explorerUrl = 'https://subnets-test.avax.network/c-chain/tx/';
        this.accountExplorerUrl = 'https://subnets-test.avax.network/c-chain/address/';
        this.chainId = 43113;
    }
}
class AvalancheP extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'AvalancheP';
        this.family = base_1.CoinFamily.AVAXP;
        this.explorerUrl = 'https://subnets.avax.network/p-chain/tx/';
        this.accountExplorerUrl = 'https://subnets.avax.network/p-chain/address/';
        this.blockchainID = '11111111111111111111111111111111LpoYY';
        this.cChainBlockchainID = '2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5';
        this.avaxAssetID = 'FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z';
        this.networkID = 1;
        this.hrp = 'avax';
        this.alias = 'P';
        this.vm = 'platformvm';
        this.txFee = '1000000'; // 1 MILLIAVAX
        this.maxImportFee = '10000000'; // 0.01 AVAX
        this.createSubnetTx = '1000000000'; // 1 AVAX
        this.createChainTx = '1000000000'; // 1 AVAX
        this.creationTxFee = '10000000'; // 1 CENTIAVAX
        this.minConsumption = '0.1';
        this.maxConsumption = '0.12';
        this.maxSupply = '720000000000000000'; // 720 mil tokens
        this.minStake = '2000000000000'; // 2000 AVAX
        this.minStakeDuration = '1209600'; // 2 weeks
        this.maxStakeDuration = '31536000'; // 1 year
        this.minDelegationStake = '25000000000'; // 25 AVAX
        this.minDelegationFee = '2';
    }
}
class AvalanchePTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'AvalanchePTestnet';
        this.family = base_1.CoinFamily.AVAXP;
        this.explorerUrl = 'https://subnets-test.avax.network/p-chain/tx/';
        this.accountExplorerUrl = 'https://subnets-test.avax.network/p-chain/address/';
        this.blockchainID = '11111111111111111111111111111111LpoYY';
        this.cChainBlockchainID = 'yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp';
        this.avaxAssetID = 'U8iRqJoiJm8xZHAacmvYyZVwqQx6uDNtQeP3CQ6fcgQk3JqnK';
        this.networkID = 5;
        this.alias = 'P';
        this.hrp = 'fuji';
        this.vm = 'platformvm';
        this.txFee = '1000000'; // 1 MILLIAVAX
        this.maxImportFee = '10000000'; // 0.01 AVAX
        this.createSubnetTx = '1000000000'; // 1 AVAX
        this.createChainTx = '1000000000'; // 1 AVAX
        this.creationTxFee = '10000000'; // 1 CENTIAVAX
        this.minConsumption = '0.1';
        this.maxConsumption = '0.12';
        this.maxSupply = '720000000000000000'; // 720 mil tokens
        this.minStake = '1000000000'; // 1 AVAX
        this.minStakeDuration = '86400'; // 1 day
        this.maxStakeDuration = '31536000'; // 1 year
        this.minDelegationStake = '1000000000'; // 1 AVAX
        this.minDelegationFee = '2';
    }
}
class BinanceSmartChain extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'BinanceSmartChain';
        this.family = base_1.CoinFamily.BSC;
        this.explorerUrl = 'https://www.bscscan.com/tx/';
        this.accountExplorerUrl = 'https://www.bscscan.com/address/';
        this.chainId = 56;
    }
}
class BinanceSmartChainTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'BinanceSmartChainTestnet';
        this.family = base_1.CoinFamily.BSC;
        this.explorerUrl = 'https://testnet.bscscan.com/tx/';
        this.accountExplorerUrl = 'https://testnet.bscscan.com/address/';
        this.chainId = 97;
    }
}
class Bitcoin extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Bitcoin';
        this.family = base_1.CoinFamily.BTC;
        this.utxolibName = 'bitcoin';
        this.explorerUrl = 'https://mempool.space/tx/';
    }
}
class BitcoinTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'BitcoinTestnet';
        this.family = base_1.CoinFamily.BTC;
        this.utxolibName = 'testnet';
        this.explorerUrl = 'https://mempool.space/testnet/tx/';
    }
}
class BitcoinCash extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'BitcoinCash';
        this.family = base_1.CoinFamily.BCH;
        this.utxolibName = 'bitcoincash';
        this.explorerUrl = 'https://www.blockchain.com/bch/tx/';
    }
}
class BitcoinCashTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'BitcoinCashTestnet';
        this.family = base_1.CoinFamily.BCH;
        this.utxolibName = 'bitcoincashTestnet';
        this.explorerUrl = 'https://www.blockchain.com/bch-testnet/tx/';
    }
}
class BitcoinSV extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'BitcoinSV';
        this.family = base_1.CoinFamily.BSV;
        this.utxolibName = 'bitcoinsv';
        this.explorerUrl = 'https://blockchair.com/bitcoin-sv/transaction/';
    }
}
class BitcoinSVTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'BitcoinSVTestnet';
        this.family = base_1.CoinFamily.BSV;
        this.utxolibName = 'bitcoinsvTestnet';
        this.explorerUrl = undefined;
    }
}
class BitcoinGold extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'BitcoinGold';
        this.family = base_1.CoinFamily.BTG;
        this.utxolibName = 'bitcoingold';
        this.explorerUrl = 'https://btgexplorer.com/tx/';
    }
}
class BitcoinGoldTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'BitcoinGoldTestnet';
        this.family = base_1.CoinFamily.BTG;
        this.utxolibName = 'bitcoingoldTestnet';
        this.explorerUrl = undefined;
    }
}
class Dash extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Dash';
        this.family = base_1.CoinFamily.DASH;
        this.utxolibName = 'dash';
        this.explorerUrl = 'https://insight.dashevo.org/insight/tx/';
    }
}
class DashTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'DashTestnet';
        this.family = base_1.CoinFamily.DASH;
        this.utxolibName = 'dashTest';
        this.explorerUrl = 'https://testnet-insight.dashevo.org/insight/tx/';
    }
}
class Dogecoin extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Dogecoin';
        this.family = base_1.CoinFamily.DOGE;
        this.utxolibName = 'dogecoin';
        this.explorerUrl = 'https://blockchair.com/dogecoin/transaction/';
    }
}
class DogecoinTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'DogecoinTestnet';
        this.family = base_1.CoinFamily.DOGE;
        this.utxolibName = 'dogecoinTest';
        this.explorerUrl = 'https://blockexplorer.one/dogecoin/testnet/tx/';
    }
}
class ECash extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'ECash';
        this.family = base_1.CoinFamily.BCHA;
        this.utxolibName = 'ecash';
        this.explorerUrl = 'https://blockchair.com/ecash';
    }
}
class ECashTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'ECashTestnet';
        this.family = base_1.CoinFamily.BCHA;
        this.utxolibName = 'ecashTest';
        this.explorerUrl = undefined;
    }
}
class Polkadot extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Polkadot';
        this.family = base_1.CoinFamily.DOT;
        this.explorerUrl = 'https://polkadot.subscan.io/extrinsic/';
        this.specName = 'polkadot';
        this.genesisHash = '0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3';
        this.specVersion = 9140;
        this.chainName = 'Polkadot';
        this.txVersion = 9;
    }
}
class PolkadotTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'Westend';
        this.family = base_1.CoinFamily.DOT;
        this.explorerUrl = 'https://westend.subscan.io/extrinsic/';
        this.specName = 'westend';
        this.genesisHash = '0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e';
        this.specVersion = 9430;
        this.chainName = 'Westend';
        this.txVersion = 22;
    }
}
class Celo extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Celo';
        this.family = base_1.CoinFamily.CELO;
        this.explorerUrl = 'https://explorer.celo.org/tx/';
        this.accountExplorerUrl = 'https://explorer.celo.org/address/';
        this.chainId = 42220;
        this.nativeCoinOperationHashPrefix = 'CELO';
        this.tokenOperationHashPrefix = 'CELO-ERC20';
    }
}
class CeloTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'CeloTestnet';
        this.family = base_1.CoinFamily.CELO;
        this.explorerUrl = 'https://alfajores-blockscout.celo-testnet.org/tx/';
        this.accountExplorerUrl = 'https://alfajores-blockscout.celo-testnet.org/address/';
        this.chainId = 44787;
        this.nativeCoinOperationHashPrefix = 'CELO';
        this.tokenOperationHashPrefix = 'CELO-ERC20';
    }
}
// TODO update explorerUrl STLX-1657
class Casper extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Casper';
        this.family = base_1.CoinFamily.CSPR;
        this.explorerUrl = 'https://cspr.live/deploy/';
        this.accountExplorerUrl = 'https://cspr.live/account/';
    }
}
class CasperTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'CasperTestnet';
        this.family = base_1.CoinFamily.CSPR;
        this.explorerUrl = 'https://integration.cspr.live/deploy/';
        this.accountExplorerUrl = 'https://integration.cspr.live/account/';
    }
}
class Ethereum extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Ethereum';
        this.family = base_1.CoinFamily.ETH;
        this.explorerUrl = 'https://etherscan.io/tx/';
        this.accountExplorerUrl = 'https://etherscan.io/address/';
        this.blockExplorerUrl = 'https://etherscan.io/block/';
        // from https://github.com/ethereumjs/ethereumjs-common/blob/a978f630858f6843176bb20b277569785914e899/src/chains/index.ts
        this.chainId = 1;
        this.batcherContractAddress = '0x0c9b25dfe02b2c89cce86e1a0bd6c04a7aca01b6';
        this.forwarderFactoryAddress = '0xffa397285ce46fb78c588a9e993286aac68c37cd';
        this.forwarderImplementationAddress = '0x059ffafdc6ef594230de44f824e2bd0a51ca5ded';
        this.nativeCoinOperationHashPrefix = 'ETHER';
        this.tokenOperationHashPrefix = 'ERC20';
    }
}
class Ethereum2 extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Ethereum2';
        this.family = base_1.CoinFamily.ETH2;
        this.explorerUrl = 'https://beaconscan.com/tx';
        this.accountExplorerUrl = 'https://beaconscan.com/address';
    }
}
class EthereumW extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Ethereum PoW';
        this.family = base_1.CoinFamily.ETHW;
        this.explorerUrl = '';
        this.accountExplorerUrl = '';
        this.chainId = 10001;
        this.batcherContractAddress = '';
        this.forwarderFactoryAddress = '';
        this.forwarderImplementationAddress = '';
        this.nativeCoinOperationHashPrefix = 'ETHER';
        this.tokenOperationHashPrefix = 'ERC20';
    }
}
class Pyrmont extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'Pyrmont';
        this.family = base_1.CoinFamily.ETH2;
        this.explorerUrl = 'https://beaconscan.com/pyrmont/tx';
        this.accountExplorerUrl = 'https://beaconscan.com/pyrmont/address';
    }
}
class Kovan extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'Kovan';
        this.family = base_1.CoinFamily.ETH;
        this.explorerUrl = 'https://kovan.etherscan.io/tx/';
        this.accountExplorerUrl = 'https://kovan.etherscan.io/address/';
        // from https://github.com/ethereumjs/ethereumjs-common/blob/a978f630858f6843176bb20b277569785914e899/src/chains/index.ts
        this.chainId = 42;
        this.batcherContractAddress = '0xc0aaf2649e7b0f3950164681eca2b1a8f654a478';
        this.forwarderFactoryAddress = '0xa79a485294d226075ee65410bc94ea454f3e409d';
        this.forwarderImplementationAddress = '0xa946e748f25a5ec6878eb1a9f2e902028174c0b3';
        this.nativeCoinOperationHashPrefix = 'ETHER';
        this.tokenOperationHashPrefix = 'ERC20';
    }
}
class Goerli extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'Goerli';
        this.family = base_1.CoinFamily.ETH;
        this.explorerUrl = 'https://goerli.etherscan.io/tx/';
        this.accountExplorerUrl = 'https://goerli.etherscan.io/address/';
        this.blockExplorerUrl = 'https://goerli.etherscan.io/block/';
        // from https://github.com/ethereumjs/ethereumjs-common/blob/a978f630858f6843176bb20b277569785914e899/src/chains/index.ts
        this.chainId = 5;
        this.batcherContractAddress = '0xe8e847cf573fc8ed75621660a36affd18c543d7e';
        this.forwarderFactoryAddress = '0xf5caa5e3e93afbc21bd19ef4f2691a37121f7917';
        this.forwarderImplementationAddress = '0x80d5c91e8cc21df69fc4d64f21dc2d83121c3999';
        this.nativeCoinOperationHashPrefix = 'ETHER';
        this.tokenOperationHashPrefix = 'ERC20';
    }
}
class Holesky extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'Holesky';
        this.family = base_1.CoinFamily.ETH;
        this.explorerUrl = 'https://holesky.etherscan.io/tx/';
        this.accountExplorerUrl = 'https://holesky.etherscan.io/address/';
        this.blockExplorerUrl = 'https://holesky.etherscan.io/block/';
        // https://chainlist.org/chain/17000
        this.chainId = 17000;
        this.batcherContractAddress = '0x8ae286c75a339ffabaed3a22088c52eb4f589780';
        this.forwarderFactoryAddress = '0x23223fd7cfc5f34b20f38ebb9a489e1ff3c084d1';
        this.forwarderImplementationAddress = '0xd4c24325b5ef514fbb1ecc76a9bb4dcb57a8341e';
        this.nativeCoinOperationHashPrefix = 'ETHER';
        this.tokenOperationHashPrefix = 'ERC20';
    }
}
class EthereumClassic extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'EthereumClassic';
        this.family = base_1.CoinFamily.ETC;
        this.explorerUrl = 'https://blockscout.com/etc/mainnet/tx/';
        this.accountExplorerUrl = 'https://blockscout.com/etc/mainnet/address/';
        // from  https://chainid.network/chains/
        this.chainId = 61;
        this.nativeCoinOperationHashPrefix = 'ETC';
        this.tokenOperationHashPrefix = 'ETC-ERC20';
    }
}
class EthereumClassicTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'EthereumClassicTestnet';
        this.family = base_1.CoinFamily.ETC;
        this.explorerUrl = 'https://blockscout.com/etc/mordor/tx/';
        this.accountExplorerUrl = 'https://blockscout.com/etc/mordor/address/';
        // from  https://chainid.network/chains/
        this.chainId = 63;
        this.nativeCoinOperationHashPrefix = 'ETC';
        this.tokenOperationHashPrefix = 'ETC-ERC20';
    }
}
class Eos extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Eos';
        this.family = base_1.CoinFamily.EOS;
        this.explorerUrl = 'https://explorer.eosnetwork.com/transaction/';
    }
}
class EosTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'EosTestnet';
        this.family = base_1.CoinFamily.EOS;
        this.explorerUrl = 'https://kylin.eosx.io/tx/';
    }
}
class Hedera extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Hedera';
        this.family = base_1.CoinFamily.HBAR;
        this.explorerUrl = 'https://hashscan.io/mainnet/transaction/';
    }
}
class HederaTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'HederaTestnet';
        this.family = base_1.CoinFamily.HBAR;
        this.explorerUrl = 'https://testnet.dragonglass.me/hedera/search?q=';
    }
}
class Litecoin extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Litecoin';
        this.family = base_1.CoinFamily.LTC;
        this.utxolibName = 'litecoin';
        this.explorerUrl = 'https://blockchair.com/litecoin/transaction/';
    }
}
class LitecoinTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'LitecoinTestnet';
        this.family = base_1.CoinFamily.LTC;
        this.utxolibName = 'litecoinTest';
        this.explorerUrl = 'https://blockexplorer.one/litecoin/testnet/tx/';
    }
}
class Ofc extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Ofc';
        this.family = base_1.CoinFamily.OFC;
        this.explorerUrl = undefined;
    }
}
class OfcTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'OfcTestnet';
        this.family = base_1.CoinFamily.OFC;
        this.explorerUrl = undefined;
    }
}
class Rbtc extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Rbtc';
        this.family = base_1.CoinFamily.RBTC;
        this.explorerUrl = 'https://explorer.rsk.co/tx/';
        this.accountExplorerUrl = 'https://explorer.rsk.co/address/';
        this.chainId = 30;
        this.nativeCoinOperationHashPrefix = 'RSK';
        this.tokenOperationHashPrefix = 'RSK-ERC20';
    }
}
class RbtcTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'RbtcTestnet';
        this.family = base_1.CoinFamily.RBTC;
        this.explorerUrl = 'https://explorer.testnet.rsk.co/tx/';
        this.accountExplorerUrl = 'https://explorer.testnet.rsk.co/address/';
        this.chainId = 31;
        this.nativeCoinOperationHashPrefix = 'RSK';
        this.tokenOperationHashPrefix = 'RSK-ERC20';
    }
}
class Stellar extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Stellar';
        this.family = base_1.CoinFamily.XLM;
        this.explorerUrl = 'https://stellar.expert/explorer/public/tx/';
    }
}
class StellarTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'StellarTestnet';
        this.family = base_1.CoinFamily.XLM;
        this.explorerUrl = 'https://stellar.expert/explorer/testnet/tx/';
    }
}
class Sol extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Sol';
        this.family = base_1.CoinFamily.SOL;
        this.explorerUrl = 'https://explorer.solana.com/tx/';
    }
}
class SolTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'SolTestnet';
        this.family = base_1.CoinFamily.SOL;
        this.explorerUrl = 'https://explorer.solana.com/tx/?cluster=devnet';
    }
}
class Sui extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Sui';
        this.family = base_1.CoinFamily.SUI;
        this.explorerUrl = 'https://explorer.sui.io/txblock/?network=mainnet';
    }
}
class SuiTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'Testnet Sui';
        this.family = base_1.CoinFamily.SUI;
        this.explorerUrl = 'https://explorer.sui.io/txblock/?network=testnet';
    }
}
class Atom extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Cosmos Hub ATOM';
        this.family = base_1.CoinFamily.ATOM;
        this.explorerUrl = 'https://atomscan.com/transactions/';
    }
}
class AtomTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'Testnet Cosmos Hub ATOM';
        this.family = base_1.CoinFamily.ATOM;
        this.explorerUrl = 'https://explorer.polypore.xyz/theta-testnet-001/tx/';
    }
}
class Osmo extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Osmosis';
        this.family = base_1.CoinFamily.OSMO;
        this.explorerUrl = 'https://www.mintscan.io/osmosis/txs/';
    }
}
class OsmoTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'Testnet Osmosis';
        this.family = base_1.CoinFamily.OSMO;
        this.explorerUrl = 'https://testnet.osmosis.explorers.guru/transaction/';
    }
}
class Tia extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Celestia';
        this.family = base_1.CoinFamily.TIA;
        this.explorerUrl = 'https://www.mintscan.io/celestia/tx/';
    }
}
class TiaTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'Testnet Celestia';
        this.family = base_1.CoinFamily.TIA;
        this.explorerUrl = 'https://testnet.celestia.explorers.guru/transaction/';
    }
}
class Hash extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Provenance';
        this.family = base_1.CoinFamily.HASH;
        this.explorerUrl = 'https://explorer.provenance.io/tx/';
    }
}
class HashTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'Testnet Provenance';
        this.family = base_1.CoinFamily.HASH;
        this.explorerUrl = 'https://explorer.test.provenance.io/tx/';
    }
}
class Bld extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Agoric';
        this.family = base_1.CoinFamily.BLD;
        this.explorerUrl = 'https://bigdipper.live/agoric/transactions/';
    }
}
class BldTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'Testnet Agoric';
        this.family = base_1.CoinFamily.BLD;
        this.explorerUrl = 'https://emerynet.explorer.agoric.net/agoric/tx/';
    }
}
class Sei extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Sei';
        this.family = base_1.CoinFamily.SEI;
        //  TODO(BG-78997): Sei is still only in testnet update to mainnet url when it's live
        this.explorerUrl = 'https://sei.explorers.guru/transaction/';
    }
}
class SeiTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'Testnet Sei';
        this.family = base_1.CoinFamily.SEI;
        this.explorerUrl = 'https://www.seiscan.app/atlantic-2/txs/';
    }
}
class Zeta extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Zeta';
        this.family = base_1.CoinFamily.ZETA;
        this.explorerUrl = 'https://explorer.zetachain.com/cosmos/tx/';
    }
}
class ZetaTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'Testnet Zeta';
        this.family = base_1.CoinFamily.ZETA;
        this.explorerUrl = 'https://athens.explorer.zetachain.com/cosmos/tx/';
    }
}
class Injective extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Injective';
        this.family = base_1.CoinFamily.INJECTIVE;
        this.explorerUrl = 'https://explorer.injective.network/transaction/';
    }
}
class InjectiveTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'InjectiveTestnet';
        this.family = base_1.CoinFamily.INJECTIVE;
        this.explorerUrl = 'https://testnet.explorer.injective.network/transaction/';
    }
}
class Kava extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Kava';
        this.family = base_1.CoinFamily.KAVA;
        this.explorerUrl = 'https://www.mintscan.io/kava/transactions/';
    }
}
class KavaTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'KavaTestnet';
        this.family = base_1.CoinFamily.KAVA;
        this.explorerUrl = 'https://testnet.mintscan.io/kava-testnet/txs/';
    }
}
class Ton extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Ton';
        this.family = base_1.CoinFamily.TON;
        this.explorerUrl = 'https://tonscan.org/tx/';
    }
}
class TonTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'Testnet Ton';
        this.family = base_1.CoinFamily.TON;
        this.explorerUrl = 'https://testnet.tonscan.org/tx/';
    }
}
class Coreum extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Coreum';
        this.family = base_1.CoinFamily.COREUM;
        this.explorerUrl = 'https://explorer.coreum.com/coreum/transactions/';
    }
}
class CoreumTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'CoreumTestnet';
        this.family = base_1.CoinFamily.COREUM;
        this.explorerUrl = 'https://explorer.testnet-1.coreum.dev/coreum/transactions/';
    }
}
class Bera extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Berachain';
        this.family = base_1.CoinFamily.BERA;
        this.explorerUrl = undefined;
    }
}
class BeraTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'BerachainTestnet';
        this.family = base_1.CoinFamily.BERA;
        this.explorerUrl = undefined;
    }
}
class Islm extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Haqq';
        this.family = base_1.CoinFamily.ISLM;
        this.explorerUrl = 'https://ping.pub/haqq/tx/';
    }
}
class IslmTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'HaqqTestnet';
        this.family = base_1.CoinFamily.ISLM;
        this.explorerUrl = 'https://testnet.ping.pub/haqq/tx/';
    }
}
class Stx extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Stx';
        this.family = base_1.CoinFamily.STX;
        this.explorerUrl = 'https://explorer.stacks.co/txid/';
        this.sendmanymemoContractAddress = 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE';
        this.stakingContractAddress = 'SP000000000000000000002Q6VF78';
    }
}
class StxTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'StxTestnet';
        this.family = base_1.CoinFamily.STX;
        this.explorerUrl = 'https://explorer.stacks.co/txid/?chain=testnet&api=https://api.nakamoto.testnet.hiro.so';
        this.sendmanymemoContractAddress = 'ST3F1X4QGV2SM8XD96X45M6RTQXKA1PZJZZCQAB4B';
        this.stakingContractAddress = 'ST000000000000000000002AMW42H';
    }
}
class SUSD extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'SUSD';
        this.family = base_1.CoinFamily.SUSD;
        this.explorerUrl = undefined;
    }
}
class SUSDTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'SUSDTestnet';
        this.family = base_1.CoinFamily.SUSD;
        this.explorerUrl = undefined;
    }
}
class FiatTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'FiatTestnet';
        this.family = base_1.CoinFamily.FIAT;
        this.explorerUrl = undefined;
    }
}
class Fiat extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Fiat';
        this.family = base_1.CoinFamily.FIAT;
        this.explorerUrl = undefined;
    }
}
class Trx extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Trx';
        this.family = base_1.CoinFamily.TRX;
        this.explorerUrl = 'https://tronscan.org/#/transaction/';
        this.maxFeeLimit = '5000000000';
        this.contractCallFeeLimit = '100000000';
    }
}
class TrxTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'TrxTestnet';
        this.family = base_1.CoinFamily.TRX;
        this.explorerUrl = 'https://shasta.tronscan.org/#/transaction/';
        this.maxFeeLimit = '5000000000';
        this.contractCallFeeLimit = '100000000';
    }
}
class Xrp extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Xrp';
        this.family = base_1.CoinFamily.XRP;
        this.explorerUrl = 'https://livenet.xrpl.org/transactions/';
    }
}
class XrpTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'XrpTestnet';
        this.family = base_1.CoinFamily.XRP;
        this.explorerUrl = 'https://test.bithomp.com/explorer/';
    }
}
class Xtz extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Xtz';
        this.family = base_1.CoinFamily.XTZ;
        this.explorerUrl = 'https://tzstats.com/';
        this.accountExplorerUrl = 'https://tzstats.com/';
    }
}
class XtzTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'XtzTestnet';
        this.family = base_1.CoinFamily.XTZ;
        this.explorerUrl = 'https://ghostnet.tzkt.io/';
        this.accountExplorerUrl = 'https://ghostnet.tzkt.io/';
    }
}
class ZCash extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'ZCash';
        this.family = base_1.CoinFamily.ZEC;
        this.utxolibName = 'zcash';
        this.explorerUrl = 'https://chain.so/tx/ZEC/';
    }
}
class ZCashTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'ZCashTestnet';
        this.family = base_1.CoinFamily.ZEC;
        this.utxolibName = 'zcashTest';
        this.explorerUrl = 'https://chain.so/tx/ZECTEST/';
    }
}
class Near extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Near';
        this.family = base_1.CoinFamily.NEAR;
        this.explorerUrl = 'https://explorer.near.org/transactions/';
        this.feeReserve = '50000000000000000000000';
        this.storageReserve = '2000000000000000000000'; // feeReserve + storageReserve is minimum account balance for a NEAR wallet https://docs.near.org/integrator/faq#is-there-a-minimum-account-balance
    }
}
class NearTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'NearTestnet';
        this.family = base_1.CoinFamily.NEAR;
        this.explorerUrl = 'https://testnet.nearblocks.io/txns/';
        this.feeReserve = '50000000000000000000000';
        this.storageReserve = '2000000000000000000000'; // feeReserve + storageReserve is minimum account balance for a NEAR wallet https://docs.near.org/integrator/faq#is-there-a-minimum-account-balance
    }
}
class Polygon extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Polygon';
        this.family = base_1.CoinFamily.POLYGON;
        this.explorerUrl = 'https://polygonscan.com/tx/';
        this.accountExplorerUrl = 'https://polygonscan.com/address/';
        this.chainId = 137;
        this.forwarderFactoryAddress = '0x29ef46035e9fa3d570c598d3266424ca11413b0c';
        this.forwarderImplementationAddress = '0x5397d0869aba0d55e96d5716d383f6e1d8695ed7';
        this.walletFactoryAddress = '0xa7198f48c58e91f01317e70cd24c5cce475c1555';
        this.walletImplementationAddress = '0xe5dcdc13b628c2df813db1080367e929c1507ca0';
        this.batcherContractAddress = '0x7adc9b3d7521710321bec7dd6897d337e53c2493';
        this.nativeCoinOperationHashPrefix = 'POLYGON';
        this.tokenOperationHashPrefix = 'POLYGON-ERC20';
    }
}
class PolygonTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'PolygonTestnet';
        this.family = base_1.CoinFamily.POLYGON;
        this.explorerUrl = 'https://amoy.polygonscan.com/tx/';
        this.accountExplorerUrl = 'https://amoy.polygonscan.com/address/';
        this.chainId = 80002;
        this.forwarderFactoryAddress = '0x23223fd7cfc5f34b20f38ebb9a489e1ff3c084d1';
        this.forwarderImplementationAddress = '0xd4c24325b5ef514fbb1ecc76a9bb4dcb57a8341e';
        this.walletFactoryAddress = '0xe9c16033e01bf9f94bf9f99fc0fefcfb8b124992';
        this.walletImplementationAddress = '0xf8360c213e4f44cce03e48cb9281254de2a7a566';
        this.batcherContractAddress = '0xcdf01a31ea2a1d62951aac3a5743c4416f9da3fb';
        this.nativeCoinOperationHashPrefix = 'POLYGON';
        this.tokenOperationHashPrefix = 'POLYGON-ERC20';
    }
}
class Optimism extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Optimism';
        this.family = base_1.CoinFamily.OPETH;
        this.explorerUrl = 'https://optimistic.etherscan.io/tx/';
        this.accountExplorerUrl = 'https://optimistic.etherscan.io/address/';
        this.chainId = 10;
        this.nativeCoinOperationHashPrefix = '10';
        this.tokenOperationHashPrefix = '10-ERC20';
        this.forwarderFactoryAddress = '0x37996e762fa8b671869740c79eb33f625b3bf92a';
        this.forwarderImplementationAddress = '0xd5fe1c1f216b775dfd30638fa7164d41321ef79b';
        this.walletFactoryAddress = '0x809ee567e413543af1caebcdb247f6a67eafc8dd';
        this.walletImplementationAddress = '0x944fef03af368414f29dc31a72061b8d64f568d2';
    }
}
class OptimismTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'OptimismTestnet';
        this.family = base_1.CoinFamily.OPETH;
        this.explorerUrl = 'https://sepolia-optimism.etherscan.io/tx/';
        this.accountExplorerUrl = 'https://sepolia-optimism.etherscan.io/address/';
        this.chainId = 11155420;
        this.nativeCoinOperationHashPrefix = '11155420';
        this.tokenOperationHashPrefix = '11155420-ERC20';
        this.forwarderFactoryAddress = '0x37996e762fa8b671869740c79eb33f625b3bf92a';
        this.forwarderImplementationAddress = '0xd5fe1c1f216b775dfd30638fa7164d41321ef79b';
        this.walletFactoryAddress = '0x809ee567e413543af1caebcdb247f6a67eafc8dd';
        this.walletImplementationAddress = '0x944fef03af368414f29dc31a72061b8d64f568d2';
    }
}
class ZkSync extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'ZkSync';
        this.family = base_1.CoinFamily.ZKETH;
        this.explorerUrl = 'https://explorer.zksync.io/tx/';
        this.accountExplorerUrl = 'https://explorer.zksync.io/address/';
        this.chainId = 324;
        this.nativeCoinOperationHashPrefix = '324';
        this.tokenOperationHashPrefix = '324-ERC20';
    }
}
class ZkSyncTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'ZkSyncTestnet';
        this.family = base_1.CoinFamily.ZKETH;
        this.explorerUrl = 'https://sepolia.explorer.zksync.io/tx/';
        this.accountExplorerUrl = 'https://sepolia.explorer.zksync.io/address/';
        this.chainId = 300;
        this.nativeCoinOperationHashPrefix = '300';
        this.tokenOperationHashPrefix = '300-ERC20';
        this.forwarderFactoryAddress = '0xdd498702f44c4da08eb9e08d3f015eefe5cb71fc';
        this.forwarderImplementationAddress = '0xbe69cae311191fb45e648ed20847f06fad2dbab4';
        this.walletFactoryAddress = '0x4550e1e7616d3364877fc6c9324938dab678621a';
        this.walletImplementationAddress = '0x92db2759d1dca129a0d9d46877f361be819184c4';
    }
}
class BaseChainTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'BaseChainTestnet';
        this.family = base_1.CoinFamily.BASEETH;
        this.explorerUrl = 'https://sepolia.basescan.org/tx/';
        this.accountExplorerUrl = 'https://sepolia.basescan.org/address/';
        this.chainId = 84532;
        this.nativeCoinOperationHashPrefix = '84532';
        this.tokenOperationHashPrefix = '84532-ERC20';
        this.forwarderFactoryAddress = '0xdd498702f44c4da08eb9e08d3f015eefe5cb71fc';
        this.forwarderImplementationAddress = '0xbe69cae311191fb45e648ed20847f06fad2dbab4';
        this.walletFactoryAddress = '0x4550e1e7616d3364877fc6c9324938dab678621a';
        this.walletImplementationAddress = '0x92db2759d1dca129a0d9d46877f361be819184c4';
    }
}
class BaseChain extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'BaseChain';
        this.family = base_1.CoinFamily.BASEETH;
        this.explorerUrl = 'https://basescan.org/tx/';
        this.accountExplorerUrl = 'https://basescan.org/address/';
        this.chainId = 8453;
        this.nativeCoinOperationHashPrefix = '8453';
        this.tokenOperationHashPrefix = '8453-ERC20';
        this.forwarderFactoryAddress = '0xdd498702f44c4da08eb9e08d3f015eefe5cb71fc';
        this.forwarderImplementationAddress = '0xbe69cae311191fb45e648ed20847f06fad2dbab4';
        this.walletFactoryAddress = '0x4550e1e7616d3364877fc6c9324938dab678621a';
        this.walletImplementationAddress = '0x92db2759d1dca129a0d9d46877f361be819184c4';
    }
}
exports.Networks = {
    main: {
        ada: Object.freeze(new Ada()),
        algorand: Object.freeze(new Algorand()),
        arbitrum: Object.freeze(new Arbitrum()),
        atom: Object.freeze(new Atom()),
        avalancheC: Object.freeze(new AvalancheC()),
        avalancheP: Object.freeze(new AvalancheP()),
        basechain: Object.freeze(new BaseChain()),
        bitcoin: Object.freeze(new Bitcoin()),
        bitcoinCash: Object.freeze(new BitcoinCash()),
        bitcoinGold: Object.freeze(new BitcoinGold()),
        bitcoinSV: Object.freeze(new BitcoinSV()),
        bera: Object.freeze(new Bera()),
        bld: Object.freeze(new Bld()),
        bsc: Object.freeze(new BinanceSmartChain()),
        casper: Object.freeze(new Casper()),
        celo: Object.freeze(new Celo()),
        coreum: Object.freeze(new Coreum()),
        dash: Object.freeze(new Dash()),
        dogecoin: Object.freeze(new Dogecoin()),
        dot: Object.freeze(new Polkadot()),
        eCash: Object.freeze(new ECash()),
        eos: Object.freeze(new Eos()),
        ethereum: Object.freeze(new Ethereum()),
        ethereum2: Object.freeze(new Ethereum2()),
        ethereumClassic: Object.freeze(new EthereumClassic()),
        ethereumW: Object.freeze(new EthereumW()),
        fiat: Object.freeze(new Fiat()),
        hash: Object.freeze(new Hash()),
        hedera: Object.freeze(new Hedera()),
        injective: Object.freeze(new Injective()),
        islm: Object.freeze(new Islm()),
        kava: Object.freeze(new Kava()),
        litecoin: Object.freeze(new Litecoin()),
        polygon: Object.freeze(new Polygon()),
        ofc: Object.freeze(new Ofc()),
        optimism: Object.freeze(new Optimism()),
        osmo: Object.freeze(new Osmo()),
        rbtc: Object.freeze(new Rbtc()),
        stellar: Object.freeze(new Stellar()),
        sei: Object.freeze(new Sei()),
        sol: Object.freeze(new Sol()),
        sui: Object.freeze(new Sui()),
        near: Object.freeze(new Near()),
        stx: Object.freeze(new Stx()),
        susd: Object.freeze(new SUSD()),
        tia: Object.freeze(new Tia()),
        ton: Object.freeze(new Ton()),
        trx: Object.freeze(new Trx()),
        xrp: Object.freeze(new Xrp()),
        xtz: Object.freeze(new Xtz()),
        zCash: Object.freeze(new ZCash()),
        zeta: Object.freeze(new Zeta()),
        zkSync: Object.freeze(new ZkSync()),
    },
    test: {
        ada: Object.freeze(new AdaTestnet()),
        algorand: Object.freeze(new AlgorandTestnet()),
        arbitrum: Object.freeze(new ArbitrumTestnet()),
        atom: Object.freeze(new AtomTestnet()),
        avalancheC: Object.freeze(new AvalancheCTestnet()),
        avalancheP: Object.freeze(new AvalanchePTestnet()),
        basechain: Object.freeze(new BaseChainTestnet()),
        bitcoin: Object.freeze(new BitcoinTestnet()),
        bitcoinCash: Object.freeze(new BitcoinCashTestnet()),
        bitcoinGold: Object.freeze(new BitcoinGoldTestnet()),
        bitcoinSV: Object.freeze(new BitcoinSVTestnet()),
        bera: Object.freeze(new BeraTestnet()),
        bld: Object.freeze(new BldTestnet()),
        bsc: Object.freeze(new BinanceSmartChainTestnet()),
        casper: Object.freeze(new CasperTestnet()),
        celo: Object.freeze(new CeloTestnet()),
        dash: Object.freeze(new DashTestnet()),
        dogecoin: Object.freeze(new DogecoinTestnet()),
        dot: Object.freeze(new PolkadotTestnet()),
        eCash: Object.freeze(new ECashTestnet()),
        eos: Object.freeze(new EosTestnet()),
        fiat: Object.freeze(new FiatTestnet()),
        pyrmont: Object.freeze(new Pyrmont()),
        ethereumClassicTestnet: Object.freeze(new EthereumClassicTestnet()),
        hash: Object.freeze(new HashTestnet()),
        hedera: Object.freeze(new HederaTestnet()),
        injective: Object.freeze(new InjectiveTestnet()),
        islm: Object.freeze(new IslmTestnet()),
        kava: Object.freeze(new KavaTestnet()),
        kovan: Object.freeze(new Kovan()),
        goerli: Object.freeze(new Goerli()),
        holesky: Object.freeze(new Holesky()),
        litecoin: Object.freeze(new LitecoinTestnet()),
        polygon: Object.freeze(new PolygonTestnet()),
        ofc: Object.freeze(new OfcTestnet()),
        optimism: Object.freeze(new OptimismTestnet()),
        osmo: Object.freeze(new OsmoTestnet()),
        rbtc: Object.freeze(new RbtcTestnet()),
        stellar: Object.freeze(new StellarTestnet()),
        sei: Object.freeze(new SeiTestnet()),
        sol: Object.freeze(new SolTestnet()),
        sui: Object.freeze(new SuiTestnet()),
        near: Object.freeze(new NearTestnet()),
        stx: Object.freeze(new StxTestnet()),
        susd: Object.freeze(new SUSDTestnet()),
        coreum: Object.freeze(new CoreumTestnet()),
        tia: Object.freeze(new TiaTestnet()),
        ton: Object.freeze(new TonTestnet()),
        trx: Object.freeze(new TrxTestnet()),
        xrp: Object.freeze(new XrpTestnet()),
        xtz: Object.freeze(new XtzTestnet()),
        zCash: Object.freeze(new ZCashTestnet()),
        zeta: Object.freeze(new ZetaTestnet()),
        zkSync: Object.freeze(new ZkSyncTestnet()),
    },
};
//# sourceMappingURL=data:application/json;base64,