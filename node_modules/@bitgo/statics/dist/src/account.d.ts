import { BaseCoin, BaseUnit, CoinFeature, KeyCurve, UnderlyingAsset } from './base';
import { AccountNetwork, BaseNetwork, EthereumNetwork, TronNetwork } from './networks';
export interface AccountConstructorOptions {
    id: string;
    fullName: string;
    name: string;
    alias?: string;
    network: AccountNetwork;
    asset: UnderlyingAsset;
    baseUnit: BaseUnit;
    features: CoinFeature[];
    decimalPlaces: number;
    isToken: boolean;
    prefix?: string;
    suffix?: string;
    primaryKeyCurve: KeyCurve;
}
/**
 * Account based coins, such as Ethereum, Stellar, or XRP.
 *
 * These types of coins maintain an "account balance" for each address on the network,
 * as opposed to the unspent transaction output model which maintains a record of all
 * "pieces" of coin which belong to an address.
 */
export declare class AccountCoin extends BaseCoin {
    static readonly DEFAULT_FEATURES: CoinFeature[];
    readonly network: AccountNetwork;
    constructor(options: AccountConstructorOptions);
    protected requiredFeatures(): Set<CoinFeature>;
    protected disallowedFeatures(): Set<CoinFeature>;
}
export interface Erc20ConstructorOptions extends AccountConstructorOptions {
    contractAddress: string;
}
export interface StellarCoinConstructorOptions extends AccountConstructorOptions {
    domain: string;
}
export interface HederaCoinConstructorOptions extends AccountConstructorOptions {
    nodeAccountId: string;
}
export interface HederaTokenConstructorOptions extends AccountConstructorOptions {
    nodeAccountId: string;
    tokenId: string;
}
export interface AlgoCoinConstructorOptions extends AccountConstructorOptions {
    tokenURL: string;
}
export interface EosCoinConstructorOptions extends AccountConstructorOptions {
    contractName: string;
}
export interface SolCoinConstructorOptions extends AccountConstructorOptions {
    tokenAddress: string;
}
export interface AdaCoinConstructorOptions extends AccountConstructorOptions {
    policyId: string;
    assetName: string;
}
export interface XrpCoinConstructorOptions extends AccountConstructorOptions {
    issuerAddress: string;
    currencyCode: string;
    domain: string;
}
declare type FiatCoinName = `fiat${string}` | `tfiat${string}`;
export interface FiatCoinConstructorOptions extends AccountConstructorOptions {
    name: FiatCoinName;
}
export interface ContractAddress extends String {
    __contractaddress_phantom__: never;
}
export declare class AccountCoinToken extends AccountCoin {
    constructor(options: AccountConstructorOptions);
}
/**
 * Some blockchains support tokens which are defined by an address at which they have a smart contract deployed.
 * Examples are ERC20 tokens, and the equivalent on other chains.
 */
export declare class ContractAddressDefinedToken extends AccountCoinToken {
    contractAddress: ContractAddress;
    constructor(options: Erc20ConstructorOptions);
}
/**
 * ERC20 token addresses are Base58 formatted on some blockchains.
 */
export declare class Base58ContractAddressDefinedToken extends AccountCoinToken {
    contractAddress: ContractAddress;
    constructor(options: Erc20ConstructorOptions);
}
/**
 * ERC 20 is a token standard for the Ethereum blockchain. They are similar to other account coins, but have a
 * contract address property which identifies the smart contract which defines the token.
 */
export declare class Erc20Coin extends ContractAddressDefinedToken {
}
/**
 * ERC 721 is the non fungible token standard for the Ethereum blockchain.
 *
 * {@link https://eips.ethereum.org/EIPS/eip-721 EIP721}
 */
export declare class Erc721Coin extends ContractAddressDefinedToken {
}
/**
 * ERC 1155 is the multi token standard for the Ethereum blockchain.
 *
 * {@link https://eips.ethereum.org/EIPS/eip-1155 EIP1155}
 */
export declare class Erc1155Coin extends ContractAddressDefinedToken {
}
/**
 * The TRON blockchain supports tokens of the ERC20 standard similar to ETH ERC20 tokens.
 */
export declare class TronErc20Coin extends Base58ContractAddressDefinedToken {
}
/**
 * Some blockchains have native coins which also support the ERC20 interface such as CELO.
 */
export declare class Erc20CompatibleAccountCoin extends ContractAddressDefinedToken {
    constructor(options: Erc20ConstructorOptions);
}
/**
 * The CELO blockchain supports tokens of the ERC20 standard similar to ETH ERC20 tokens.
 */
export declare class CeloCoin extends ContractAddressDefinedToken {
}
/**
 * The BSC blockchain supports tokens of the ERC20 standard similar to ETH ERC20 tokens.
 */
export declare class BscCoin extends ContractAddressDefinedToken {
}
/**
 * The Stellar network supports tokens (non-native assets)
 * XLM is also known as the native asset.
 * Stellar tokens work similar to XLM, but the token name is determined by the chain,
 * the token code and the issuer account in the form: (t)xlm:<token>-<issuer>
 */
export declare class StellarCoin extends AccountCoinToken {
    domain: string;
    constructor(options: StellarCoinConstructorOptions);
}
/**
 * The Hedera coin needs a client set with the node account Id.
 * It's an account based coin that needs the node account ID
 * where the transaction will be sent.
 *
 */
export declare class HederaCoin extends AccountCoinToken {
    nodeAccountId: string;
    constructor(options: HederaCoinConstructorOptions);
}
/**
 * The Hedera network supports tokens.
 * Hedera tokens work similar to native Hedera coin,
 * but the token is determined by the tokenId on the node
 *
 */
export declare class HederaToken extends AccountCoinToken {
    nodeAccountId: string;
    tokenId: string;
    constructor(options: HederaTokenConstructorOptions);
}
/**
 * The Algo network supports tokens (assets)
 * Algo tokens work similar to native ALGO coin, but the token name is determined by
 * unique asset id on the chain. Internally, BitGo uses token identifiers of the format: (t)algo:<assetId>
 *
 */
export declare class AlgoCoin extends AccountCoinToken {
    tokenURL: string;
    constructor(options: AlgoCoinConstructorOptions);
}
/**
 * The Eos network supports tokens
 * Eos tokens work similar to native Eos coin, but the token name is determined by
 * the contractName on the chain.
 *
 */
export declare class EosCoin extends AccountCoinToken {
    contractName: string;
    constructor(options: EosCoinConstructorOptions);
}
/**
 * The Sol network supports tokens
 * Sol tokens work similar to native SOL coin, but the token name is determined by
 * the tokenAddress on the chain.
 *
 */
export declare class SolCoin extends AccountCoinToken {
    tokenAddress: string;
    constructor(options: SolCoinConstructorOptions);
}
/**
 * The Ada network supports tokens
 * Ada tokens are identified by their policy ID and asset name
 *
 */
export declare class AdaCoin extends AccountCoinToken {
    policyId: string;
    assetName: string;
    constructor(options: AdaCoinConstructorOptions);
}
/**
 * The AVAX C Chain network support tokens
 * AVAX C Chain Tokens are ERC20 coins
 */
export declare class AvaxERC20Token extends ContractAddressDefinedToken {
    constructor(options: Erc20ConstructorOptions);
}
/**
 * The Polygon Chain network support tokens
 * Polygon Chain Tokens are ERC20 coins
 */
export declare class PolygonERC20Token extends ContractAddressDefinedToken {
    constructor(options: Erc20ConstructorOptions);
}
/**
 * The Arbitrum Chain network support tokens
 * Arbitrum Chain Tokens are ERC20 tokens
 */
export declare class ArbethERC20Token extends ContractAddressDefinedToken {
    constructor(options: Erc20ConstructorOptions);
}
/**
 * The Optimism Chain network support tokens
 * Optimism Chain Tokens are ERC20 tokens
 */
export declare class OpethERC20Token extends ContractAddressDefinedToken {
    constructor(options: Erc20ConstructorOptions);
}
/**
 * The zkSync network support tokens
 * zkSync Tokens are ERC20 tokens
 */
export declare class ZkethERC20Token extends ContractAddressDefinedToken {
    constructor(options: Erc20ConstructorOptions);
}
/**
 * The Xrp network supports tokens
 * Xrp tokens are identified by their issuer address
 * Naming format is similar to XLM
 * <network>:<token>-<issuer>
 */
export declare class XrpCoin extends AccountCoinToken {
    issuerAddress: string;
    currencyCode: string;
    domain: string;
    constructor(options: XrpCoinConstructorOptions);
}
/**
 * Fiat currencies, such as USD, EUR, or YEN.
 */
export declare class FiatCoin extends BaseCoin {
    static readonly DEFAULT_FEATURES: CoinFeature[];
    readonly network: BaseNetwork;
    constructor(options: FiatCoinConstructorOptions);
    protected requiredFeatures(): Set<CoinFeature>;
    protected disallowedFeatures(): Set<CoinFeature>;
}
/**
 * Factory function for account coin instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve? The elliptic curve for this chain/token
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param isToken? Whether or not this account coin is a token of another coin
 */
export declare function account(id: string, name: string, fullName: string, network: AccountNetwork, decimalPlaces: number, asset: UnderlyingAsset, baseUnit: BaseUnit, features?: CoinFeature[], primaryKeyCurve?: KeyCurve, prefix?: string, suffix?: string, isToken?: boolean): Readonly<AccountCoin>;
/**
 * Factory function for erc20 token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Ethereum main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function erc20(id: string, name: string, fullName: string, decimalPlaces: number, contractAddress: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: EthereumNetwork, primaryKeyCurve?: KeyCurve): Readonly<Erc20Coin>;
/**
 * Factory function for testnet erc20 token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to the Kovan test network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 */
export declare function terc20(id: string, name: string, fullName: string, decimalPlaces: number, contractAddress: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: EthereumNetwork): Readonly<Erc20Coin>;
/**
 * Factory function for erc721 token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param contractAddress Contract address of this token
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Ethereum main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function erc721(id: string, name: string, fullName: string, contractAddress: string, features?: CoinFeature[], prefix?: string, suffix?: string, network?: EthereumNetwork, primaryKeyCurve?: KeyCurve): Readonly<Erc721Coin>;
/**
 * Factory function for testnet erc721 token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param contractAddress Contract address of this token
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Holesky test network.
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function terc721(id: string, name: string, fullName: string, contractAddress: string, features?: CoinFeature[], prefix?: string, suffix?: string, network?: EthereumNetwork, primaryKeyCurve?: KeyCurve): Readonly<Erc721Coin>;
/**
 * Factory function for nonstandard token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param contractAddress Contract address of this token
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Ethereum main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function nonstandardToken(id: string, name: string, fullName: string, contractAddress: string, features?: CoinFeature[], prefix?: string, suffix?: string, network?: EthereumNetwork, primaryKeyCurve?: KeyCurve): Readonly<ContractAddressDefinedToken>;
/**
 * Factory function for erc1155 token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param contractAddress Contract address of this token
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Ethereum main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function erc1155(id: string, name: string, fullName: string, contractAddress: string, features?: CoinFeature[], prefix?: string, suffix?: string, network?: EthereumNetwork, primaryKeyCurve?: KeyCurve): Readonly<Erc1155Coin>;
/**
 * Factory function for testnet erc1155 token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param contractAddress Contract address of this token
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Holesky test network.
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function terc1155(id: string, name: string, fullName: string, contractAddress: string, features?: CoinFeature[], prefix?: string, suffix?: string, network?: EthereumNetwork, primaryKeyCurve?: KeyCurve): Readonly<Erc1155Coin>;
/**
 * Factory function for ERC20-compatible account coin instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function erc20CompatibleAccountCoin(id: string, name: string, fullName: string, network: EthereumNetwork, decimalPlaces: number, contractAddress: string, asset: UnderlyingAsset, baseUnit: BaseUnit, features?: CoinFeature[], prefix?: string, suffix?: string, primaryKeyCurve?: KeyCurve): Readonly<Erc20CompatibleAccountCoin>;
/**
 * Factory function for celo token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to CELO main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function celoToken(id: string, name: string, fullName: string, decimalPlaces: number, contractAddress: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: EthereumNetwork, primaryKeyCurve?: KeyCurve): Readonly<CeloCoin>;
/**
 * Factory function for testnet celo token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to the testnet CELO network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 */
export declare function tceloToken(id: string, name: string, fullName: string, decimalPlaces: number, contractAddress: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: EthereumNetwork): Readonly<CeloCoin>;
/**
 * Factory function for celo token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to BSC main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function bscToken(id: string, name: string, fullName: string, decimalPlaces: number, contractAddress: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: EthereumNetwork, primaryKeyCurve?: KeyCurve): Readonly<BscCoin>;
/**
 * Factory function for testnet bsc token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to the testnet BSC network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 */
export declare function tbscToken(id: string, name: string, fullName: string, decimalPlaces: number, contractAddress: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: EthereumNetwork): Readonly<BscCoin>;
/**
 * Factory function for Stellar token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param domain Domain of the token issuer (used to access token information from the issuer's stellar.toml file)
 * See https://www.stellar.org/developers/guides/concepts/stellar-toml.html
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Stellar mainnet.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function stellarToken(id: string, name: string, fullName: string, decimalPlaces: number, asset: UnderlyingAsset, domain?: string, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork, primaryKeyCurve?: KeyCurve): Readonly<StellarCoin>;
/**
 * Factory function for testnet Stellar token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param domain Domain of the token issuer (used to access token information from the issuer's stellar.toml file)
 * See https://www.stellar.org/developers/guides/concepts/stellar-toml.html
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Stellar testnet.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 */
export declare function tstellarToken(id: string, name: string, fullName: string, decimalPlaces: number, asset: UnderlyingAsset, domain?: string, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork): Readonly<StellarCoin>;
/**
 * Factory function for tron token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to TRON main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function tronToken(id: string, name: string, fullName: string, decimalPlaces: number, contractAddress: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: TronNetwork, primaryKeyCurve?: KeyCurve): Readonly<TronErc20Coin>;
/**
 * Factory function for testnet tron token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to the testnet TRON network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function ttronToken(id: string, name: string, fullName: string, decimalPlaces: number, contractAddress: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: TronNetwork, primaryKeyCurve?: KeyCurve): Readonly<TronErc20Coin>;
/**
 * Factory function for Hedera coin instances
 *
 * @param id uuid v4
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param nodeAccountId node account Id from which the transaction will be sent
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Hedera mainnet.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function hederaCoin(id: string, name: string, fullName: string, network: AccountNetwork, decimalPlaces: number, asset: UnderlyingAsset, nodeAccountId?: string, features?: CoinFeature[], prefix?: string, suffix?: string, primaryKeyCurve?: KeyCurve): Readonly<HederaCoin>;
/**
 * Factory function for Hedera token instances
 *
 * @param id uuid v4
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param nodeAccountId node account Id from which the transaction will be sent
 * @param tokenId The unique identifier of this token
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Hedera mainnet.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function hederaToken(id: string, name: string, fullName: string, network: AccountNetwork, decimalPlaces: number, asset: UnderlyingAsset, nodeAccountId: string | undefined, tokenId: string, features?: CoinFeature[], prefix?: string, suffix?: string, primaryKeyCurve?: KeyCurve): Readonly<HederaToken>;
/**
 * Factory function for ALGO token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token

 * @param alias (optional) alternative identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param tokenURL Optional asset Url for more informationa about the asset
 * See https://developer.algorand.org/docs/reference/transactions/#url
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to ALGO mainnet.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function algoToken(id: string, name: string, alias: string | undefined, fullName: string, decimalPlaces: number, asset: UnderlyingAsset, tokenURL?: string, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork, primaryKeyCurve?: KeyCurve): Readonly<AlgoCoin>;
/**
 * Factory function for testnet ALGO token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param alias (optional) alternative identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param tokenURL Optional asset Url for more informationa about the asset
 * See https://developer.algorand.org/docs/reference/transactions/#url
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Algo testnet.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 */
export declare function talgoToken(id: string, name: string, alias: string | undefined, fullName: string, decimalPlaces: number, asset: UnderlyingAsset, tokenURL?: string, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork): Readonly<AlgoCoin>;
/**
 * Factory function for eos token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractName Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to EOS main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function eosToken(id: string, name: string, fullName: string, decimalPlaces: number, contractName: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork, primaryKeyCurve?: KeyCurve): Readonly<EosCoin>;
/**
 * Factory function for testnet eos token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to the testnet EOS network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 */
export declare function teosToken(id: string, name: string, fullName: string, decimalPlaces: number, contractName: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork): Readonly<EosCoin>;
/**
 * Factory function for sol token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param tokenAddress Token address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to SOL main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES and REQUIRES_RESERVE defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function solToken(id: string, name: string, fullName: string, decimalPlaces: number, tokenAddress: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork, primaryKeyCurve?: KeyCurve): Readonly<SolCoin>;
/**
 * Factory function for testnet solana token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param tokenAddress Token address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to the testnet Solana network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES and REQUIRES_RESERVE defined in `AccountCoin`
 */
export declare function tsolToken(id: string, name: string, fullName: string, decimalPlaces: number, tokenAddress: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork): Readonly<SolCoin>;
/**
 * Factory function for ada token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param tokenSymbol Token symbol of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Cardano main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES and REQUIRES_RESERVE defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function adaToken(id: string, name: string, fullName: string, decimalPlaces: number, policyId: string, assetName: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork, primaryKeyCurve?: KeyCurve): Readonly<AdaCoin>;
/**
 * Factory function for testnet cardano token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param tokenSymbol Token symbol of this token i.e: AUSD
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to the testnet Cardano network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES and REQUIRES_RESERVE defined in `AccountCoin`
 */
export declare function tadaToken(id: string, name: string, fullName: string, decimalPlaces: number, policyId: string, assetName: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork): Readonly<AdaCoin>;
/**
 * Factory function for avaxErc20 token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to AvalancheC main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function avaxErc20(id: string, name: string, fullName: string, decimalPlaces: number, contractAddress: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork, primaryKeyCurve?: KeyCurve): Readonly<AvaxERC20Token>;
/**
 * Factory function for testnet avaxErc20 token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to the AvalancheC test network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function tavaxErc20(id: string, name: string, fullName: string, decimalPlaces: number, contractAddress: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork, primaryKeyCurve?: KeyCurve): Readonly<AvaxERC20Token>;
/**
 * Factory function for polygonErc20 token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Polygon main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function polygonErc20(id: string, name: string, fullName: string, decimalPlaces: number, contractAddress: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork, primaryKeyCurve?: KeyCurve): Readonly<PolygonERC20Token>;
/**
 * Factory function for Amoy testnet polygonErc20 token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to the Polygon test network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function tpolygonErc20(id: string, name: string, fullName: string, decimalPlaces: number, contractAddress: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork, primaryKeyCurve?: KeyCurve): Readonly<PolygonERC20Token>;
/**
 * Factory function for arbethErc20 token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Arbitrum main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function arbethErc20(id: string, name: string, fullName: string, decimalPlaces: number, contractAddress: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork, primaryKeyCurve?: KeyCurve): Readonly<ArbethERC20Token>;
/**
 * Factory function for Arbitrum Sepolia testnet arbethErc20 token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to the Arbitrum test network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function tarbethErc20(id: string, name: string, fullName: string, decimalPlaces: number, contractAddress: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork, primaryKeyCurve?: KeyCurve): Readonly<ArbethERC20Token>;
/**
 * Factory function for opethErc20 token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Optimism main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function opethErc20(id: string, name: string, fullName: string, decimalPlaces: number, contractAddress: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork, primaryKeyCurve?: KeyCurve): Readonly<OpethERC20Token>;
/**
 * Factory function for Optimism Sepolia testnet opethErc20 token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to the Optimism test network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function topethErc20(id: string, name: string, fullName: string, decimalPlaces: number, contractAddress: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork, primaryKeyCurve?: KeyCurve): Readonly<OpethERC20Token>;
/**
 * Factory function for zkethErc20 token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to zkSync mainnet network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function zkethErc20(id: string, name: string, fullName: string, decimalPlaces: number, contractAddress: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork, primaryKeyCurve?: KeyCurve): Readonly<ZkethERC20Token>;
/**
 * Factory function for zkSync Sepolia testnet zkethErc20 token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to the zkSync sepolia test network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function tzkethErc20(id: string, name: string, fullName: string, decimalPlaces: number, contractAddress: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork, primaryKeyCurve?: KeyCurve): Readonly<ZkethERC20Token>;
/**
 * Factory function for xrp token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param issuerAddress: The address of the issuer of the token,
 * @param currencyCode The token symbol. Example: USD, BTC, ETH, etc.
 * @param domain? the domain of the issuer of the token,
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Cardano main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function xrpToken(id: string, name: string, fullName: string, decimalPlaces: number, issuerAddress: string, currencyCode: string, domain: string | undefined, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork, primaryKeyCurve?: KeyCurve): Readonly<XrpCoin>;
/**
 * Factory function for testnet cardano token instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param issuerAddress: The address of the issuer of the token,
 * @param currencyCode The token symbol. Example: USD, BTC, ETH, etc.
 * @param domain? the domain of the issuer of the token,
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to the testnet Cardano network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 */
export declare function txrpToken(id: string, name: string, fullName: string, decimalPlaces: number, issuerAddress: string, currencyCode: string, domain: string | undefined, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork): Readonly<XrpCoin>;
/**
 * Factory function for fiat coin instances.
 *
 * @param id uuid v4
 * @param name unique identifier of the coin, should start with 'fiat' or 'tfiat' followed by the 3-char ISO-4217 alphabetical code
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `FiatCoin`
 * @param primaryKeyCurve? The elliptic curve for this chain/token
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param isToken? Whether or not this coin is a token of another coin
 */
export declare function fiat(id: string, name: FiatCoinName, fullName: string, network: BaseNetwork, decimalPlaces: number, asset: UnderlyingAsset, features?: CoinFeature[], primaryKeyCurve?: KeyCurve, prefix?: string, suffix?: string, isToken?: boolean): Readonly<FiatCoin>;
export {};
//# sourceMappingURL=account.d.ts.map