"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.testnetTokens = exports.mainnetTokens = exports.tokens = exports.formattedAlgoTokens = exports.ethGasConfigs = void 0;
const account_1 = require("./account");
const base_1 = require("./base");
const coins_1 = require("./coins");
const networks_1 = require("./networks");
const ofc_1 = require("./ofc");
// Get the list of ERC-20 tokens from statics and format it properly
const formattedErc20Tokens = coins_1.coins.reduce((acc, coin) => {
    if (coin instanceof account_1.Erc20Coin) {
        let baseCoin;
        switch (coin.network) {
            case networks_1.Networks.main.ethereum:
                baseCoin = 'eth';
                break;
            case networks_1.Networks.test.kovan:
                baseCoin = 'teth';
                break;
            case networks_1.Networks.test.goerli:
                baseCoin = 'gteth';
                break;
            case networks_1.Networks.test.holesky:
                baseCoin = 'hteth';
                break;
            default:
                throw new Error(`Erc20 token ${coin.name} has an unsupported network`);
        }
        acc.push({
            type: coin.name,
            coin: baseCoin,
            network: coin.network.type === networks_1.NetworkType.MAINNET ? 'Mainnet' : 'Testnet',
            name: coin.fullName,
            tokenContractAddress: coin.contractAddress.toString().toLowerCase(),
            decimalPlaces: coin.decimalPlaces,
        });
    }
    return acc;
}, []);
exports.ethGasConfigs = {
    minimumGasPrice: 1000000000,
    defaultGasPrice: 20000000000,
    maximumGasPrice: 2500000000000,
    defaultGasLimit: 500000,
    defaultGasLimitTokenSend: 1000000,
    minimumGasLimit: 30000,
    maximumGasLimit: 20000000,
    newEthLikeCoinsMinGasLimit: 400000,
    opethGasL1Fees: 1000000000000000, // Buffer for opeth L1 gas fees
};
// Get the list of Stellar tokens from statics and format it properly
const formattedStellarTokens = coins_1.coins.reduce((acc, coin) => {
    if (coin instanceof account_1.StellarCoin) {
        acc.push({
            type: coin.name,
            coin: coin.network.type === networks_1.NetworkType.MAINNET ? 'xlm' : 'txlm',
            network: coin.network.type === networks_1.NetworkType.MAINNET ? 'Mainnet' : 'Testnet',
            name: coin.fullName,
            decimalPlaces: coin.decimalPlaces,
        });
    }
    return acc;
}, []);
// Get the list of OFC tokens from statics and format it properly
const formattedOfcCoins = coins_1.coins.reduce((acc, coin) => {
    if (coin instanceof ofc_1.OfcCoin) {
        acc.push({
            type: coin.name,
            coin: 'ofc',
            backingCoin: coin.asset,
            name: coin.fullName,
            decimalPlaces: coin.decimalPlaces,
            isFiat: coin.kind === base_1.CoinKind.FIAT,
        });
    }
    return acc;
}, []);
const formattedCeloTokens = coins_1.coins.reduce((acc, coin) => {
    if (coin instanceof account_1.CeloCoin) {
        acc.push({
            type: coin.name,
            coin: coin.network.type === networks_1.NetworkType.MAINNET ? 'celo' : 'tcelo',
            network: coin.network.type === networks_1.NetworkType.MAINNET ? 'Mainnet' : 'Testnet',
            name: coin.fullName,
            tokenContractAddress: coin.contractAddress.toString().toLowerCase(),
            decimalPlaces: coin.decimalPlaces,
        });
    }
    return acc;
}, []);
const formattedBscTokens = coins_1.coins.reduce((acc, coin) => {
    if (coin instanceof account_1.BscCoin) {
        acc.push({
            type: coin.name,
            coin: coin.network.type === networks_1.NetworkType.MAINNET ? 'bsc' : 'tbsc',
            network: coin.network.type === networks_1.NetworkType.MAINNET ? 'Mainnet' : 'Testnet',
            name: coin.fullName,
            tokenContractAddress: coin.contractAddress.toString().toLowerCase(),
            decimalPlaces: coin.decimalPlaces,
        });
    }
    return acc;
}, []);
const formattedEosTokens = coins_1.coins.reduce((acc, coin) => {
    if (coin instanceof account_1.EosCoin) {
        acc.push({
            type: coin.name,
            coin: coin.network.type === networks_1.NetworkType.MAINNET ? 'eos' : 'teos',
            network: coin.network.type === networks_1.NetworkType.MAINNET ? 'Mainnet' : 'Testnet',
            name: coin.fullName,
            tokenContractAddress: coin.contractName.toString().toLowerCase(),
            decimalPlaces: coin.decimalPlaces,
        });
    }
    return acc;
}, []);
const formattedAvaxCTokens = coins_1.coins.reduce((acc, coin) => {
    if (coin instanceof account_1.AvaxERC20Token) {
        acc.push({
            type: coin.name,
            coin: coin.network.type === networks_1.NetworkType.MAINNET ? 'avaxc' : 'tavaxc',
            network: coin.network.type === networks_1.NetworkType.MAINNET ? 'Mainnet' : 'Testnet',
            name: coin.fullName,
            tokenContractAddress: coin.contractAddress.toString().toLowerCase(),
            decimalPlaces: coin.decimalPlaces,
        });
    }
    return acc;
}, []);
const formattedPolygonTokens = coins_1.coins.reduce((acc, coin) => {
    if (coin instanceof account_1.PolygonERC20Token ||
        ((coin instanceof account_1.Erc721Coin || coin instanceof account_1.Erc1155Coin) && coin.family === base_1.CoinFamily.POLYGON)) {
        acc.push({
            type: coin.name,
            coin: coin.network.type === networks_1.NetworkType.MAINNET ? 'polygon' : 'tpolygon',
            network: coin.network.type === networks_1.NetworkType.MAINNET ? 'Mainnet' : 'Testnet',
            name: coin.fullName,
            tokenContractAddress: coin.contractAddress.toString().toLowerCase(),
            decimalPlaces: coin.decimalPlaces,
        });
    }
    return acc;
}, []);
const formattedArbethTokens = coins_1.coins.reduce((acc, coin) => {
    if (coin instanceof account_1.ArbethERC20Token) {
        acc.push({
            type: coin.name,
            coin: coin.network.type === networks_1.NetworkType.MAINNET ? 'arbeth' : 'tarbeth',
            network: coin.network.type === networks_1.NetworkType.MAINNET ? 'Mainnet' : 'Testnet',
            name: coin.fullName,
            tokenContractAddress: coin.contractAddress.toString().toLowerCase(),
            decimalPlaces: coin.decimalPlaces,
        });
    }
    return acc;
}, []);
const formattedOpethTokens = coins_1.coins.reduce((acc, coin) => {
    if (coin instanceof account_1.OpethERC20Token) {
        acc.push({
            type: coin.name,
            coin: coin.network.type === networks_1.NetworkType.MAINNET ? 'opeth' : 'topeth',
            network: coin.network.type === networks_1.NetworkType.MAINNET ? 'Mainnet' : 'Testnet',
            name: coin.fullName,
            tokenContractAddress: coin.contractAddress.toString().toLowerCase(),
            decimalPlaces: coin.decimalPlaces,
        });
    }
    return acc;
}, []);
const formattedZkethTokens = coins_1.coins.reduce((acc, coin) => {
    if (coin instanceof account_1.ZkethERC20Token) {
        acc.push({
            type: coin.name,
            coin: coin.network.type === networks_1.NetworkType.MAINNET ? 'zketh' : 'tzketh',
            network: coin.network.type === networks_1.NetworkType.MAINNET ? 'Mainnet' : 'Testnet',
            name: coin.fullName,
            tokenContractAddress: coin.contractAddress.toString().toLowerCase(),
            decimalPlaces: coin.decimalPlaces,
        });
    }
    return acc;
}, []);
const formattedSolTokens = coins_1.coins.reduce((acc, coin) => {
    if (coin instanceof account_1.SolCoin) {
        acc.push({
            type: coin.name,
            coin: coin.network.type === networks_1.NetworkType.MAINNET ? 'sol' : 'tsol',
            network: coin.network.type === networks_1.NetworkType.MAINNET ? 'Mainnet' : 'Testnet',
            name: coin.fullName,
            tokenAddress: coin.tokenAddress,
            decimalPlaces: coin.decimalPlaces,
        });
    }
    return acc;
}, []);
exports.formattedAlgoTokens = coins_1.coins.reduce((acc, coin) => {
    if (coin instanceof account_1.AlgoCoin) {
        acc.push({
            type: coin.name,
            coin: coin.network.type === networks_1.NetworkType.MAINNET ? 'algo' : 'talgo',
            alias: coin.alias,
            network: coin.network.type === networks_1.NetworkType.MAINNET ? 'Mainnet' : 'Testnet',
            name: coin.fullName,
            decimalPlaces: coin.decimalPlaces,
        });
    }
    return acc;
}, []);
const formattedHbarTokens = coins_1.coins.reduce((acc, coin) => {
    if (coin instanceof account_1.HederaToken) {
        acc.push({
            type: coin.name,
            coin: coin.network.type === networks_1.NetworkType.MAINNET ? 'hbar' : 'thbar',
            network: coin.network.type === networks_1.NetworkType.MAINNET ? 'Mainnet' : 'Testnet',
            name: coin.fullName,
            decimalPlaces: coin.decimalPlaces,
        });
    }
    return acc;
}, []);
const formattedAdaTokens = coins_1.coins.reduce((acc, coin) => {
    if (coin instanceof account_1.AdaCoin) {
        acc.push({
            type: coin.name,
            coin: coin.network.type === networks_1.NetworkType.MAINNET ? 'ada' : 'tada',
            network: coin.network.type === networks_1.NetworkType.MAINNET ? 'Mainnet' : 'Testnet',
            name: coin.fullName,
            policyId: coin.policyId,
            assetName: coin.assetName,
            decimalPlaces: coin.decimalPlaces,
        });
    }
    return acc;
}, []);
const formattedTrxTokens = coins_1.coins.reduce((acc, coin) => {
    if (coin instanceof account_1.TronErc20Coin) {
        acc.push({
            type: coin.name,
            coin: coin.network.type === networks_1.NetworkType.MAINNET ? 'trx' : 'ttrx',
            network: coin.network.type === networks_1.NetworkType.MAINNET ? 'Mainnet' : 'Testnet',
            name: coin.fullName,
            tokenContractAddress: coin.contractAddress.toString().toLowerCase(),
            decimalPlaces: coin.decimalPlaces,
        });
    }
    return acc;
}, []);
const formattedXrpTokens = coins_1.coins.reduce((acc, coin) => {
    if (coin instanceof account_1.XrpCoin) {
        acc.push({
            type: coin.name,
            coin: coin.network.type === networks_1.NetworkType.MAINNET ? 'xrp' : 'txrp',
            network: coin.network.type === networks_1.NetworkType.MAINNET ? 'Mainnet' : 'Testnet',
            name: coin.fullName,
            decimalPlaces: coin.decimalPlaces,
            issuerAddress: coin.issuerAddress,
            currencyCode: coin.currencyCode,
            domain: coin.domain,
        });
    }
    return acc;
}, []);
exports.tokens = {
    // network name for production environments
    bitcoin: {
        eth: {
            tokens: formattedErc20Tokens.filter((token) => token.network === 'Mainnet'),
        },
        xlm: {
            tokens: formattedStellarTokens.filter((token) => token.network === 'Mainnet'),
        },
        algo: {
            tokens: exports.formattedAlgoTokens.filter((token) => token.network === 'Mainnet'),
        },
        ofc: {
            tokens: formattedOfcCoins.filter((token) => coins_1.coins.get(token.type).network.type === networks_1.NetworkType.MAINNET),
        },
        celo: {
            tokens: formattedCeloTokens.filter((token) => token.network === 'Mainnet'),
        },
        bsc: {
            tokens: formattedBscTokens.filter((token) => token.network === 'Mainnet'),
        },
        eos: {
            tokens: formattedEosTokens.filter((token) => token.network === 'Mainnet'),
        },
        avaxc: {
            tokens: formattedAvaxCTokens.filter((token) => token.network === 'Mainnet'),
        },
        polygon: {
            tokens: formattedPolygonTokens.filter((token) => token.network === 'Mainnet'),
        },
        arbeth: {
            tokens: formattedArbethTokens.filter((token) => token.network === 'Mainnet'),
        },
        opeth: {
            tokens: formattedOpethTokens.filter((token) => token.network === 'Mainnet'),
        },
        zketh: {
            tokens: formattedZkethTokens.filter((token) => token.network === 'Mainnet'),
        },
        sol: {
            tokens: formattedSolTokens.filter((token) => token.network === 'Mainnet'),
        },
        hbar: {
            tokens: formattedHbarTokens.filter((token) => token.network === 'Mainnet'),
        },
        ada: {
            tokens: formattedAdaTokens.filter((token) => token.network === 'Mainnet'),
        },
        trx: {
            tokens: formattedTrxTokens.filter((token) => token.network === 'Mainnet'),
        },
        xrp: {
            tokens: formattedXrpTokens.filter((token) => token.network === 'Mainnet'),
        },
    },
    // network name for test environments
    testnet: {
        eth: {
            tokens: formattedErc20Tokens.filter((token) => token.network === 'Testnet'),
        },
        xlm: {
            tokens: formattedStellarTokens.filter((token) => token.network === 'Testnet'),
        },
        algo: {
            tokens: exports.formattedAlgoTokens.filter((token) => token.network === 'Testnet'),
        },
        ofc: {
            tokens: formattedOfcCoins.filter((token) => coins_1.coins.get(token.type).network.type === networks_1.NetworkType.TESTNET),
        },
        celo: {
            tokens: formattedCeloTokens.filter((token) => token.network === 'Testnet'),
        },
        bsc: {
            tokens: formattedBscTokens.filter((token) => token.network === 'Testnet'),
        },
        eos: {
            tokens: formattedEosTokens.filter((token) => token.network === 'Testnet'),
        },
        avaxc: {
            tokens: formattedAvaxCTokens.filter((token) => token.network === 'Testnet'),
        },
        polygon: {
            tokens: formattedPolygonTokens.filter((token) => token.network === 'Testnet'),
        },
        arbeth: {
            tokens: formattedArbethTokens.filter((token) => token.network === 'Testnet'),
        },
        opeth: {
            tokens: formattedOpethTokens.filter((token) => token.network === 'Testnet'),
        },
        zketh: {
            tokens: formattedZkethTokens.filter((token) => token.network === 'Testnet'),
        },
        sol: {
            tokens: formattedSolTokens.filter((token) => token.network === 'Testnet'),
        },
        hbar: {
            tokens: formattedHbarTokens.filter((token) => token.network === 'Testnet'),
        },
        ada: {
            tokens: formattedAdaTokens.filter((token) => token.network === 'Testnet'),
        },
        trx: {
            tokens: formattedTrxTokens.filter((token) => token.network === 'Testnet'),
        },
        xrp: {
            tokens: formattedXrpTokens.filter((token) => token.network === 'Testnet'),
        },
    },
};
/**
 * Verify mainnet or testnet tokens
 * @param tokens
 */
const verifyTokens = function (tokens) {
    const verifiedTokens = {};
    tokens.forEach((token) => {
        if (verifiedTokens[token.type]) {
            throw new Error('token : ' + token.type + ' duplicated.');
        }
        verifiedTokens[token.type] = true;
        if (token.tokenContractAddress &&
            token.tokenContractAddress !==
                token.tokenContractAddress.toLocaleLowerCase()) {
            throw new Error('token contract: ' + token.type + ' is not all lower case: ' + token);
        }
    });
    return verifiedTokens;
};
const mainnetErc20Tokens = verifyTokens(exports.tokens.bitcoin.eth.tokens);
const mainnetStellarTokens = verifyTokens(exports.tokens.bitcoin.xlm.tokens);
exports.mainnetTokens = { ...mainnetErc20Tokens, ...mainnetStellarTokens };
const testnetErc20Tokens = verifyTokens(exports.tokens.testnet.eth.tokens);
const testnetStellarTokens = verifyTokens(exports.tokens.testnet.xlm.tokens);
exports.testnetTokens = { ...testnetErc20Tokens, ...testnetStellarTokens };
//# sourceMappingURL=data:application/json;base64,