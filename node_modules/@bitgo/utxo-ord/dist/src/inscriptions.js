"use strict";
/*
Functions for dealing with inscriptions.

See https://docs.ordinals.com/inscriptions.html
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.signRevealTransaction = exports.createOutputScriptForInscription = exports.createInscriptionRevealData = void 0;
const assert = require("assert");
const utxo_lib_1 = require("@bitgo/utxo-lib");
const utxolib = require("@bitgo/utxo-lib");
const OPS = utxo_lib_1.script.OPS;
const MAX_LENGTH_TAP_DATA_PUSH = 520;
/**
 * The max size of an individual OP_PUSH in a Taproot script is 520 bytes. This
 * function splits inscriptionData into an array buffer of 520 bytes length.
 * https://docs.ordinals.com/inscriptions.html
 * @param inscriptionData
 * @param chunkSize
 */
function splitBuffer(inscriptionData, chunkSize) {
    const pushDataBuffers = [];
    for (let i = 0; i < inscriptionData.length; i += chunkSize) {
        pushDataBuffers.push(inscriptionData.slice(i, i + chunkSize));
    }
    return pushDataBuffers;
}
/**
 *
 * @returns inscription payment object
 * @param pubkey
 * @param contentType
 * @param inscriptionData
 */
function createPaymentForInscription(pubkey, contentType, inscriptionData) {
    const dataPushBuffers = splitBuffer(inscriptionData, MAX_LENGTH_TAP_DATA_PUSH);
    const uncompiledScript = [
        pubkey,
        OPS.OP_CHECKSIG,
        OPS.OP_FALSE,
        OPS.OP_IF,
        Buffer.from('ord', 'ascii'),
        1,
        1,
        Buffer.from(contentType, 'ascii'),
        OPS.OP_0,
        ...dataPushBuffers,
        OPS.OP_ENDIF,
    ];
    const compiledScript = utxo_lib_1.script.compile(uncompiledScript);
    const redeem = {
        output: compiledScript,
        depth: 0,
    };
    return utxo_lib_1.p2trPayments.p2tr({ redeems: [redeem], redeemIndex: 0 }, { eccLib: utxo_lib_1.ecc });
}
/**
 * @param payment
 * @param controlBlock
 * @param commitOutput
 * @param network
 * @return virtual size of a transaction with a single inscription reveal input and a single commitOutput
 */
function getInscriptionRevealSize(payment, controlBlock, commitOutput, network) {
    var _a, _b;
    const psbt = utxo_lib_1.bitgo.createPsbtForNetwork({ network });
    const parsedControlBlock = utxo_lib_1.taproot.parseControlBlock(utxo_lib_1.ecc, controlBlock);
    const leafHash = utxo_lib_1.taproot.getTapleafHash(utxo_lib_1.ecc, parsedControlBlock, (_a = payment.redeem) === null || _a === void 0 ? void 0 : _a.output);
    psbt.addInput({
        hash: Buffer.alloc(32),
        index: 0,
        witnessUtxo: { script: commitOutput, value: BigInt(100000) },
        tapLeafScript: [
            {
                controlBlock,
                script: (_b = payment.redeem) === null || _b === void 0 ? void 0 : _b.output,
                leafVersion: utxo_lib_1.taproot.INITIAL_TAPSCRIPT_VERSION,
            },
        ],
    });
    psbt.addOutput({ script: commitOutput, value: BigInt(10000) });
    psbt.signTaprootInput(0, {
        publicKey: Buffer.alloc(32),
        signSchnorr(hash) {
            // dummy schnorr-sized signature
            return Buffer.alloc(64);
        },
    }, [leafHash]);
    psbt.finalizeTapInputWithSingleLeafScriptAndSignature(0);
    return psbt.extractTransaction(/* disableFeeCheck */ true).virtualSize();
}
/**
 * @param pubkey
 * @param contentType
 * @param inscriptionData
 * @param network
 * @returns PreparedInscriptionRevealData
 */
function createInscriptionRevealData(pubkey, contentType, inscriptionData, network) {
    var _a, _b;
    const payment = createPaymentForInscription(pubkey, contentType, inscriptionData);
    const { output: commitOutput, controlBlock } = payment;
    assert(commitOutput);
    assert(controlBlock);
    assert((_a = payment.redeem) === null || _a === void 0 ? void 0 : _a.output);
    const commitAddress = utxo_lib_1.address.fromOutputScript(commitOutput, network);
    const tapLeafScript = [
        {
            controlBlock,
            script: (_b = payment.redeem) === null || _b === void 0 ? void 0 : _b.output,
            leafVersion: utxo_lib_1.taproot.INITIAL_TAPSCRIPT_VERSION,
        },
    ];
    const revealTransactionVSize = getInscriptionRevealSize(payment, controlBlock, commitOutput, network);
    return {
        address: commitAddress,
        revealTransactionVSize,
        tapLeafScript: tapLeafScript[0],
    };
}
exports.createInscriptionRevealData = createInscriptionRevealData;
/**
 * @param pubkey
 * @param contentType
 * @param inscriptionData
 * @returns inscription address
 */
function createOutputScriptForInscription(pubkey, contentType, inscriptionData) {
    const payment = createPaymentForInscription(pubkey, contentType, inscriptionData);
    assert(payment.output, 'Failed to create inscription output script');
    return payment.output;
}
exports.createOutputScriptForInscription = createOutputScriptForInscription;
/**
 *
 * @param privateKey
 * @param tapLeafScript
 * @param commitAddress
 * @param recipientAddress
 * @param unsignedCommitTx
 * @param network
 *
 * @return a fully signed reveal transaction
 */
function signRevealTransaction(privateKey, tapLeafScript, commitAddress, recipientAddress, unsignedCommitTx, network) {
    const unserCommitTxn = utxolib.bitgo.createTransactionFromBuffer(unsignedCommitTx, network);
    const hash = unserCommitTxn.getHash();
    const commitOutput = utxolib.address.toOutputScript(commitAddress, network);
    const vout = unserCommitTxn.outs.findIndex((out) => out.script.equals(commitOutput));
    if (vout === -1) {
        throw new Error('Invalid commit transaction');
    }
    const psbt = utxo_lib_1.bitgo.createPsbtForNetwork({ network });
    psbt.addInput({
        hash,
        index: vout,
        witnessUtxo: { script: commitOutput, value: BigInt(unserCommitTxn.outs[vout].value) },
        tapLeafScript: [tapLeafScript],
    });
    const recipientOutput = utxo_lib_1.address.toOutputScript(recipientAddress, network);
    psbt.addOutput({ script: recipientOutput, value: BigInt(10000) });
    const signer = utxo_lib_1.ECPair.fromPrivateKey(privateKey);
    const parsedControlBlock = utxo_lib_1.taproot.parseControlBlock(utxo_lib_1.ecc, tapLeafScript.controlBlock);
    const leafHash = utxo_lib_1.taproot.getTapleafHash(utxo_lib_1.ecc, parsedControlBlock, tapLeafScript.script);
    psbt.signTaprootInput(0, signer, [leafHash]);
    return psbt;
}
exports.signRevealTransaction = signRevealTransaction;
//# sourceMappingURL=data:application/json;base64,