"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPsbtForSingleInscriptionPassingTransaction = exports.ErrorNoLayout = exports.MAX_UNSPENTS_FOR_OUTPUT_LAYOUT = exports.findOutputLayoutForWalletUnspents = exports.createPsbtFromOutputLayout = exports.DefaultInscriptionConstraints = void 0;
const utxo_lib_1 = require("@bitgo/utxo-lib");
const unspents_1 = require("@bitgo/unspents");
const OrdOutput_1 = require("./OrdOutput");
const SatPoint_1 = require("./SatPoint");
const SatRange_1 = require("./SatRange");
const OutputLayout_1 = require("./OutputLayout");
const combinations_1 = require("./combinations");
exports.DefaultInscriptionConstraints = {
    minChangeOutput: BigInt(10000),
    minInscriptionOutput: BigInt(10000),
    maxInscriptionOutput: BigInt(20000),
};
function createPsbtFromOutputLayout(network, inputBuilder, unspents, outputs, outputLayout) {
    const psbt = utxo_lib_1.bitgo.createPsbtForNetwork({ network: network });
    if (unspents.length === 0) {
        throw new Error(`must provide at least one unspent`);
    }
    unspents.forEach((u) => utxo_lib_1.bitgo.addWalletUnspentToPsbt(psbt, u, inputBuilder.walletKeys, inputBuilder.signer, inputBuilder.cosigner));
    const ordInput = OrdOutput_1.OrdOutput.joinAll(unspents.map((u) => new OrdOutput_1.OrdOutput(u.value)));
    const ordOutputs = (0, OutputLayout_1.getOrdOutputsForLayout)(ordInput, outputLayout);
    (0, OutputLayout_1.toArray)(ordOutputs).forEach((ordOutput) => {
        if (ordOutput === null) {
            return;
        }
        switch (ordOutput) {
            // skip padding outputs and fee output (virtual)
            case null:
            case ordOutputs.feeOutput:
                return;
            // add padding outputs
            case ordOutputs.firstChangeOutput:
            case ordOutputs.secondChangeOutput:
                const { chain, index } = ordOutput === ordOutputs.firstChangeOutput ? outputs.changeOutputs[0] : outputs.changeOutputs[1];
                utxo_lib_1.bitgo.addWalletOutputToPsbt(psbt, inputBuilder.walletKeys, chain, index, ordOutput.value);
                break;
            // add actual inscription output
            case ordOutputs.inscriptionOutput:
                let { inscriptionRecipient } = outputs;
                if (typeof inscriptionRecipient === 'string') {
                    inscriptionRecipient = utxo_lib_1.address.toOutputScript(inscriptionRecipient, network);
                }
                psbt.addOutput({
                    script: inscriptionRecipient,
                    value: ordOutput.value,
                });
                break;
        }
    });
    return psbt;
}
exports.createPsbtFromOutputLayout = createPsbtFromOutputLayout;
function toSatRange(p) {
    const { offset } = (0, SatPoint_1.parseSatPoint)(p);
    return new SatRange_1.SatRange(offset, offset);
}
function getFee(vsize, rateSatPerKB) {
    return BigInt(Math.ceil((vsize * rateSatPerKB) / 1000));
}
/**
 * @param inputs - inscription input must come first
 * @param satPoint - location of the inscription
 * @param outputs
 * @param constraints
 * @param minimizeInputs
 */
function findOutputLayoutForWalletUnspents(inputs, satPoint, outputs, constraints, { minimizeInputs = false } = {}) {
    if (minimizeInputs) {
        return findSmallestOutputLayoutForWalletUnspents(inputs, satPoint, outputs, constraints);
    }
    if (inputs.length === 0) {
        throw new Error(`must provide at least one input`);
    }
    if (outputs.changeOutputs[0].chain !== outputs.changeOutputs[1].chain) {
        // otherwise our fee calc is too complicated
        throw new Error(`wallet outputs must be on same chain`);
    }
    const { minChangeOutput = exports.DefaultInscriptionConstraints.minChangeOutput, minInscriptionOutput = exports.DefaultInscriptionConstraints.minInscriptionOutput, maxInscriptionOutput = exports.DefaultInscriptionConstraints.maxInscriptionOutput, } = constraints;
    // Join all the inputs into a single inscriptionOutput.
    // For the purposes of finding a layout there is no difference.
    const inscriptionOutput = OrdOutput_1.OrdOutput.joinAll(inputs.map((i) => new OrdOutput_1.OrdOutput(i.value, i === inputs[0] ? [toSatRange(satPoint)] : [])));
    const layout = (0, OutputLayout_1.findOutputLayout)(inscriptionOutput, {
        minChangeOutput,
        minInscriptionOutput,
        maxInscriptionOutput,
        feeFixed: getFee(unspents_1.VirtualSizes.txSegOverheadVSize +
            unspents_1.Dimensions.fromUnspents(inputs, {
                p2tr: { scriptPathLevel: 1 },
                p2trMusig2: { scriptPathLevel: undefined },
            }).getInputsVSize(), constraints.feeRateSatKB),
        feePerOutput: getFee(unspents_1.Dimensions.fromOutputOnChain(outputs.changeOutputs[0].chain).getOutputsVSize(), constraints.feeRateSatKB),
    });
    return layout ? { inputs, layout } : undefined;
}
exports.findOutputLayoutForWalletUnspents = findOutputLayoutForWalletUnspents;
exports.MAX_UNSPENTS_FOR_OUTPUT_LAYOUT = 5;
/**
 * @param inputs - inscription input must come first
 * @param satPoint - location of the inscription
 * @param outputs
 * @param constraints
 */
function findSmallestOutputLayoutForWalletUnspents(inputs, satPoint, outputs, constraints) {
    if (exports.MAX_UNSPENTS_FOR_OUTPUT_LAYOUT < inputs.length) {
        throw new Error(`input array is too large`);
    }
    // create powerset of all supplementary inputs and find the cheapest result
    const inputsArr = [inputs, ...(0, combinations_1.powerset)(inputs.slice(1)).map((s) => [inputs[0], ...s])];
    return inputsArr
        .map((inputs) => findOutputLayoutForWalletUnspents(inputs, satPoint, outputs, constraints))
        .reduce((best, next) => {
        if (best === undefined) {
            return next;
        }
        if (next === undefined) {
            return best;
        }
        return best.layout.feeOutput < next.layout.feeOutput ? best : next;
    });
}
class ErrorNoLayout extends Error {
    constructor() {
        super('Could not find output layout for inscription passing transaction');
    }
}
exports.ErrorNoLayout = ErrorNoLayout;
/**
 * @param network
 * @param inputBuilder
 * @param unspent
 * @param satPoint
 * @param outputs
 * @param constraints
 * @param supplementaryUnspents - additional inputs to cover fee.
 * @param [minimizeInputs=true] - try to find input combination with minimal fees. Limits supplementaryUnspents to 4.
 */
function createPsbtForSingleInscriptionPassingTransaction(network, inputBuilder, unspent, satPoint, outputs, constraints, { supplementaryUnspents = [], minimizeInputs = true, } = {}) {
    // support for legacy call style
    if (Array.isArray(unspent)) {
        if (unspent.length !== 1) {
            throw new Error(`can only pass single unspent`);
        }
        unspent = unspent[0];
    }
    const result = findOutputLayoutForWalletUnspents([unspent, ...supplementaryUnspents], satPoint, outputs, constraints, { minimizeInputs });
    if (!result) {
        throw new ErrorNoLayout();
    }
    return createPsbtFromOutputLayout(network, inputBuilder, result.inputs, outputs, result.layout);
}
exports.createPsbtForSingleInscriptionPassingTransaction = createPsbtForSingleInscriptionPassingTransaction;
//# sourceMappingURL=data:application/json;base64,