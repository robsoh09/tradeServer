"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ton = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const statics_1 = require("@bitgo/statics");
const keyPair_1 = require("./lib/keyPair");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const _ = __importStar(require("lodash"));
const lib_1 = require("./lib");
const tonweb_1 = __importDefault(require("tonweb"));
class Ton extends sdk_core_1.BaseCoin {
    constructor(bitgo, staticsCoin) {
        super(bitgo);
        if (!staticsCoin) {
            throw new Error('missing required constructor parameter staticsCoin');
        }
        this._staticsCoin = staticsCoin;
    }
    static createInstance(bitgo, staticsCoin) {
        return new Ton(bitgo, staticsCoin);
    }
    /**
     * Factor between the coin's base unit and its smallest subdivison
     */
    getBaseFactor() {
        return 1e9;
    }
    getChain() {
        return 'ton';
    }
    getFamily() {
        return 'ton';
    }
    getFullName() {
        return 'Ton';
    }
    /** @inheritDoc */
    supportsTss() {
        return true;
    }
    getMPCAlgorithm() {
        return 'eddsa';
    }
    allowsAccountConsolidations() {
        return true;
    }
    async verifyTransaction(params) {
        var _a;
        const coinConfig = statics_1.coins.get(this.getChain());
        const { txPrebuild: txPrebuild, txParams: txParams } = params;
        const transaction = new lib_1.Transaction(coinConfig);
        const rawTx = txPrebuild.txHex;
        if (!rawTx) {
            throw new Error('missing required tx prebuild property txHex');
        }
        transaction.fromRawTransaction(Buffer.from(rawTx, 'hex').toString('base64'));
        const explainedTx = transaction.explainTransaction();
        if (txParams.recipients !== undefined) {
            const filteredRecipients = (_a = txParams.recipients) === null || _a === void 0 ? void 0 : _a.map((recipient) => {
                return {
                    address: new tonweb_1.default.Address(recipient.address).toString(true, true, true),
                    amount: BigInt(recipient.amount),
                };
            });
            const filteredOutputs = explainedTx.outputs.map((output) => {
                return {
                    address: output.address,
                    amount: BigInt(output.amount),
                };
            });
            if (!_.isEqual(filteredOutputs, filteredRecipients)) {
                throw new Error('Tx outputs does not match with expected txParams recipients');
            }
            let totalAmount = new bignumber_js_1.default(0);
            for (const recipients of txParams.recipients) {
                totalAmount = totalAmount.plus(recipients.amount);
            }
            if (!totalAmount.isEqualTo(explainedTx.outputAmount)) {
                throw new Error('Tx total amount does not match with expected total amount field');
            }
        }
        return true;
    }
    async isWalletAddress(params) {
        const { keychains, address: newAddress, index } = params;
        if (!this.isValidAddress(newAddress)) {
            throw new sdk_core_1.InvalidAddressError(`invalid address: ${newAddress}`);
        }
        if (!keychains) {
            throw new Error('missing required param keychains');
        }
        for (const keychain of keychains) {
            const MPC = await sdk_core_1.EDDSAMethods.getInitializedMpcInstance();
            const commonKeychain = keychain.commonKeychain;
            const derivationPath = 'm/' + index;
            const derivedPublicKey = MPC.deriveUnhardened(commonKeychain, derivationPath).slice(0, 64);
            const expectedAddress = await lib_1.Utils.default.getAddressFromPublicKey(derivedPublicKey);
            if (newAddress !== expectedAddress) {
                return false;
            }
        }
        return true;
    }
    async parseTransaction(params) {
        const factory = new lib_1.TransactionBuilderFactory(statics_1.coins.get(this.getChain()));
        const transactionBuilder = factory.from(Buffer.from(params.txHex, 'hex').toString('base64'));
        const rebuiltTransaction = await transactionBuilder.build();
        const parsedTransaction = rebuiltTransaction.toJson();
        return {
            inputs: [
                {
                    address: parsedTransaction.sender,
                    amount: parsedTransaction.amount,
                },
            ],
            outputs: [
                {
                    address: parsedTransaction.destination,
                    amount: parsedTransaction.amount,
                },
            ],
        };
    }
    generateKeyPair(seed) {
        const keyPair = seed ? new keyPair_1.KeyPair({ seed }) : new keyPair_1.KeyPair();
        const keys = keyPair.getKeys();
        if (!keys.prv) {
            throw new Error('Missing prv in key generation.');
        }
        return {
            pub: keys.pub,
            prv: keys.prv,
        };
    }
    isValidPub(pub) {
        throw new Error('Method not implemented.');
    }
    isValidAddress(address) {
        try {
            const addressBase64 = address.replace(/\+/g, '-').replace(/\//g, '_');
            const buf = Buffer.from(addressBase64, 'base64');
            return buf.length === 36;
        }
        catch {
            return false;
        }
    }
    signTransaction(params) {
        throw new Error('Method not implemented.');
    }
    /** @inheritDoc */
    async getSignablePayload(serializedTx) {
        const factory = new lib_1.TransactionBuilderFactory(statics_1.coins.get(this.getChain()));
        const rebuiltTransaction = await factory.from(serializedTx).build();
        return rebuiltTransaction.signablePayload;
    }
    /** @inheritDoc */
    async explainTransaction(params) {
        try {
            const factory = new lib_1.TransactionBuilderFactory(statics_1.coins.get(this.getChain()));
            const transactionBuilder = factory.from(Buffer.from(params.txHex, 'hex').toString('base64'));
            const rebuiltTransaction = await transactionBuilder.build();
            return rebuiltTransaction.explainTransaction();
        }
        catch {
            throw new Error('Invalid transaction');
        }
    }
}
exports.Ton = Ton;
//# sourceMappingURL=data:application/json;base64,