/// <reference types="node" />
import { BaseKey, BaseTransaction, Recipient, TransactionExplanation } from '@bitgo/sdk-core';
import { TxData } from './iface';
import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { Cell } from 'tonweb/dist/types/boc/cell';
export declare class Transaction extends BaseTransaction {
    recipient: Recipient;
    message: string;
    seqno: number;
    expireTime: number;
    sender: string;
    publicKey: string;
    private unsignedMessage;
    private finalMessage;
    constructor(coinConfig: Readonly<CoinConfig>);
    canSign(key: BaseKey): boolean;
    toBroadcastFormat(): string;
    toJson(): TxData;
    get signablePayload(): Buffer;
    build(): Promise<void>;
    private createSigningMessage;
    private createOutMsg;
    createExternalMessage(signingMessage: Cell, seqno: number, signature: string): Promise<Cell>;
    loadInputsAndOutputs(): void;
    fromRawTransaction(rawTransaction: string): void;
    /** @inheritDoc */
    explainTransaction(): TransactionExplanation;
    private parseTransfer;
    private parseTransferBody;
    private parseTransferStateInit;
}
//# sourceMappingURL=transaction.d.ts.map