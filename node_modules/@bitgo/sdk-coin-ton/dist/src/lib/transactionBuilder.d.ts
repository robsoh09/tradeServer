/// <reference types="node" />
import { BaseAddress, BaseKey, BaseTransactionBuilder, FeeOptions, PublicKey as BasePublicKey, TransactionType } from '@bitgo/sdk-core';
import { Transaction } from './transaction';
import BigNumber from 'bignumber.js';
import { BaseCoin as CoinConfig } from '@bitgo/statics';
export declare abstract class TransactionBuilder extends BaseTransactionBuilder {
    protected _transaction: Transaction;
    private _signatures;
    constructor(coinConfig: Readonly<CoinConfig>);
    /**
     * The transaction type.
     */
    protected abstract get transactionType(): TransactionType;
    /** @inheritdoc */
    protected get transaction(): Transaction;
    /** @inheritdoc */
    protected set transaction(transaction: Transaction);
    /** @inheritdoc */
    protected signImplementation(key: BaseKey): Transaction;
    /** @inheritDoc */
    addSignature(publicKey: BasePublicKey, signature: Buffer): void;
    /**
     * Sets the sender of this transaction.
     * This account will be responsible for paying transaction fees.
     *
     * @param {string} senderAddress the account that is sending this transaction
     * @returns {TransactionBuilder} This transaction builder
     */
    sender(senderAddress: string): this;
    fee(feeOptions: FeeOptions): this;
    /** @inheritdoc */
    protected fromImplementation(rawTransaction: string): Transaction;
    /** @inheritdoc */
    protected buildImplementation(): Promise<Transaction>;
    /** @inheritdoc */
    validateAddress(address: BaseAddress, addressFormat?: string): void;
    /** @inheritdoc */
    validateKey(key: BaseKey): void;
    /** @inheritdoc */
    validateRawTransaction(rawTransaction: string): void;
    /** @inheritdoc */
    validateTransaction(transaction?: Transaction): void;
    /** @inheritdoc */
    validateValue(value: BigNumber): void;
    setMessage(msg: string): TransactionBuilder;
    sequenceNumber(number: number): TransactionBuilder;
    expireTime(number: number): TransactionBuilder;
    publicKey(key: string): TransactionBuilder;
}
//# sourceMappingURL=transactionBuilder.d.ts.map