"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenSSL = void 0;
const wasi_1 = require("@wasmer/wasi");
const opensslbytes_1 = require("./opensslbytes");
class OpenSSL {
    constructor() {
        this.isInitialized = false;
    }
    async init() {
        await (0, wasi_1.init)();
        this.waModule = await WebAssembly.compile(await this.getWasmBytes());
        this.isInitialized = true;
    }
    async generateSafePrime(bitLength) {
        const bigIntString = await this.runCommand(`prime -bits ${bitLength} -generate -safe`);
        return BigInt(bigIntString);
    }
    async runCommand(openSslCommand) {
        if (!this.isInitialized) {
            throw new Error('The OpenSSl class is not initialized! Please call OpenSSL.init().');
        }
        const command = Array.isArray(openSslCommand) ? openSslCommand : openSslCommand.split(/[\s]{1,}/g).filter(Boolean);
        const wasi = new wasi_1.WASI({
            args: command,
        });
        // Instantiate the WASI module
        // cannot use wasi.instantiate(module, {}); due to the size of the module
        const instance = await WebAssembly.instantiate(this.waModule, {
            ...wasi.getImports(this.waModule),
        });
        // Run the start function
        wasi.start(instance);
        return wasi.getStdoutString();
    }
    async getWasmBytes() {
        const waBuffer = (0, opensslbytes_1.loadWebAssembly)();
        if (!waBuffer) {
            throw new Error('Cannot load openssl web-assembly!');
        }
        return waBuffer.buffer;
    }
}
exports.OpenSSL = OpenSSL;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlbnNzbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9vcGVuc3NsL29wZW5zc2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdUNBQTBDO0FBQzFDLGlEQUFpRDtBQUVqRCxNQUFhLE9BQU87SUFBcEI7UUFFVSxrQkFBYSxHQUFHLEtBQUssQ0FBQztJQXNDaEMsQ0FBQztJQXBDQyxLQUFLLENBQUMsSUFBSTtRQUNSLE1BQU0sSUFBQSxXQUFJLEdBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxXQUFXLENBQUMsT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7UUFDckUsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7SUFDNUIsQ0FBQztJQUVELEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxTQUFpQjtRQUN2QyxNQUFNLFlBQVksR0FBRyxNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxTQUFTLGtCQUFrQixDQUFDLENBQUM7UUFDdkYsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUNPLEtBQUssQ0FBQyxVQUFVLENBQUMsY0FBaUM7UUFDeEQsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDdkIsTUFBTSxJQUFJLEtBQUssQ0FBQyxtRUFBbUUsQ0FBQyxDQUFDO1NBQ3RGO1FBQ0QsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuSCxNQUFNLElBQUksR0FBRyxJQUFJLFdBQUksQ0FBQztZQUNwQixJQUFJLEVBQUUsT0FBTztTQUNkLENBQUMsQ0FBQztRQUVILDhCQUE4QjtRQUM5Qix5RUFBeUU7UUFDekUsTUFBTSxRQUFRLEdBQUcsTUFBTSxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDNUQsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7U0FDbEMsQ0FBQyxDQUFDO1FBQ0gseUJBQXlCO1FBQ3pCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckIsT0FBTyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVPLEtBQUssQ0FBQyxZQUFZO1FBQ3hCLE1BQU0sUUFBUSxHQUFHLElBQUEsOEJBQWUsR0FBRSxDQUFDO1FBQ25DLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDYixNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7U0FDdEQ7UUFDRCxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBeENELDBCQXdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluaXQsIFdBU0kgfSBmcm9tICdAd2FzbWVyL3dhc2knO1xuaW1wb3J0IHsgbG9hZFdlYkFzc2VtYmx5IH0gZnJvbSAnLi9vcGVuc3NsYnl0ZXMnO1xuXG5leHBvcnQgY2xhc3MgT3BlblNTTCB7XG4gIHByaXZhdGUgd2FNb2R1bGU6IFdlYkFzc2VtYmx5Lk1vZHVsZTtcbiAgcHJpdmF0ZSBpc0luaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgYXN5bmMgaW5pdCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCBpbml0KCk7XG4gICAgdGhpcy53YU1vZHVsZSA9IGF3YWl0IFdlYkFzc2VtYmx5LmNvbXBpbGUoYXdhaXQgdGhpcy5nZXRXYXNtQnl0ZXMoKSk7XG4gICAgdGhpcy5pc0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgfVxuXG4gIGFzeW5jIGdlbmVyYXRlU2FmZVByaW1lKGJpdExlbmd0aDogbnVtYmVyKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICBjb25zdCBiaWdJbnRTdHJpbmcgPSBhd2FpdCB0aGlzLnJ1bkNvbW1hbmQoYHByaW1lIC1iaXRzICR7Yml0TGVuZ3RofSAtZ2VuZXJhdGUgLXNhZmVgKTtcbiAgICByZXR1cm4gQmlnSW50KGJpZ0ludFN0cmluZyk7XG4gIH1cbiAgcHJpdmF0ZSBhc3luYyBydW5Db21tYW5kKG9wZW5Tc2xDb21tYW5kOiBzdHJpbmcgfCBzdHJpbmdbXSk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgaWYgKCF0aGlzLmlzSW5pdGlhbGl6ZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIE9wZW5TU2wgY2xhc3MgaXMgbm90IGluaXRpYWxpemVkISBQbGVhc2UgY2FsbCBPcGVuU1NMLmluaXQoKS4nKTtcbiAgICB9XG4gICAgY29uc3QgY29tbWFuZCA9IEFycmF5LmlzQXJyYXkob3BlblNzbENvbW1hbmQpID8gb3BlblNzbENvbW1hbmQgOiBvcGVuU3NsQ29tbWFuZC5zcGxpdCgvW1xcc117MSx9L2cpLmZpbHRlcihCb29sZWFuKTtcbiAgICBjb25zdCB3YXNpID0gbmV3IFdBU0koe1xuICAgICAgYXJnczogY29tbWFuZCxcbiAgICB9KTtcblxuICAgIC8vIEluc3RhbnRpYXRlIHRoZSBXQVNJIG1vZHVsZVxuICAgIC8vIGNhbm5vdCB1c2Ugd2FzaS5pbnN0YW50aWF0ZShtb2R1bGUsIHt9KTsgZHVlIHRvIHRoZSBzaXplIG9mIHRoZSBtb2R1bGVcbiAgICBjb25zdCBpbnN0YW5jZSA9IGF3YWl0IFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKHRoaXMud2FNb2R1bGUsIHtcbiAgICAgIC4uLndhc2kuZ2V0SW1wb3J0cyh0aGlzLndhTW9kdWxlKSxcbiAgICB9KTtcbiAgICAvLyBSdW4gdGhlIHN0YXJ0IGZ1bmN0aW9uXG4gICAgd2FzaS5zdGFydChpbnN0YW5jZSk7XG4gICAgcmV0dXJuIHdhc2kuZ2V0U3Rkb3V0U3RyaW5nKCk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdldFdhc21CeXRlcygpOiBQcm9taXNlPFVpbnQ4QXJyYXk+IHtcbiAgICBjb25zdCB3YUJ1ZmZlciA9IGxvYWRXZWJBc3NlbWJseSgpO1xuICAgIGlmICghd2FCdWZmZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGxvYWQgb3BlbnNzbCB3ZWItYXNzZW1ibHkhJyk7XG4gICAgfVxuICAgIHJldHVybiB3YUJ1ZmZlci5idWZmZXI7XG4gIH1cbn1cbiJdfQ==