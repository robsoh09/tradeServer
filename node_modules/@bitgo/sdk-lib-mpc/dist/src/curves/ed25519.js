"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ed25519Curve = void 0;
const libsodium_wrappers_sumo_1 = __importDefault(require("libsodium-wrappers-sumo"));
const crypto_1 = require("crypto");
const util_1 = require("../util");
const privateKeySize = 32;
const publicKeySize = 32;
class Ed25519Curve {
    constructor() {
        this.scalarBytes = privateKeySize;
        this.pointBytes = publicKeySize;
    }
    static async initialize() {
        if (!Ed25519Curve.initialized) {
            await libsodium_wrappers_sumo_1.default.ready;
            Ed25519Curve.initialized = true;
        }
        return new Ed25519Curve();
    }
    scalarRandom() {
        return (0, util_1.bigIntFromBufferLE)(Buffer.from(libsodium_wrappers_sumo_1.default.crypto_core_ed25519_scalar_reduce((0, util_1.bigIntFromBufferLE)((0, crypto_1.randomBytes)(64)))));
    }
    scalarReduce(s) {
        return (0, util_1.bigIntFromBufferLE)(Buffer.from(libsodium_wrappers_sumo_1.default.crypto_core_ed25519_scalar_reduce((0, util_1.bigIntToBufferLE)(s, 64))));
    }
    scalarNegate(s) {
        return (0, util_1.bigIntFromBufferLE)(Buffer.from(libsodium_wrappers_sumo_1.default.crypto_core_ed25519_scalar_negate((0, util_1.bigIntToBufferLE)(s, privateKeySize))));
    }
    scalarInvert(s) {
        return (0, util_1.bigIntFromBufferLE)(Buffer.from(libsodium_wrappers_sumo_1.default.crypto_core_ed25519_scalar_invert((0, util_1.bigIntToBufferLE)(s, privateKeySize))));
    }
    scalarAdd(x, y) {
        return (0, util_1.bigIntFromBufferLE)(Buffer.from(libsodium_wrappers_sumo_1.default.crypto_core_ed25519_scalar_add((0, util_1.bigIntToBufferLE)(x, privateKeySize), (0, util_1.bigIntToBufferLE)(y, privateKeySize))));
    }
    scalarSub(x, y) {
        return (0, util_1.bigIntFromBufferLE)(Buffer.from(libsodium_wrappers_sumo_1.default.crypto_core_ed25519_scalar_sub((0, util_1.bigIntToBufferLE)(x, privateKeySize), (0, util_1.bigIntToBufferLE)(y, privateKeySize))));
    }
    scalarMult(x, y) {
        return (0, util_1.bigIntFromBufferLE)(Buffer.from(libsodium_wrappers_sumo_1.default.crypto_core_ed25519_scalar_mul((0, util_1.bigIntToBufferLE)(x, privateKeySize), (0, util_1.bigIntToBufferLE)(y, privateKeySize))));
    }
    basePointMult(n) {
        return (0, util_1.bigIntFromBufferLE)(Buffer.from(libsodium_wrappers_sumo_1.default.crypto_scalarmult_ed25519_base_noclamp((0, util_1.bigIntToBufferLE)(n, privateKeySize))));
    }
    pointAdd(p, q) {
        return (0, util_1.bigIntFromBufferLE)(Buffer.from(libsodium_wrappers_sumo_1.default.crypto_core_ed25519_add((0, util_1.bigIntToBufferLE)(p, publicKeySize), (0, util_1.bigIntToBufferLE)(q, publicKeySize))));
    }
    pointMultiply(p, s) {
        return (0, util_1.bigIntFromBufferLE)(Buffer.from(libsodium_wrappers_sumo_1.default.crypto_scalarmult_ed25519_noclamp((0, util_1.bigIntToBufferLE)(s, publicKeySize), (0, util_1.bigIntToBufferLE)(p, publicKeySize))));
    }
    verify(message, signature, publicKey) {
        const signedMessage = Buffer.concat([signature, message]);
        try {
            // Returns the message which was signed if the signature is valid
            const result = Buffer.from(libsodium_wrappers_sumo_1.default.crypto_sign_open(signedMessage, (0, util_1.bigIntToBufferLE)(publicKey, publicKeySize)));
            return Buffer.compare(message, result) === 0;
        }
        catch (error) {
            // Invalid signature causes an exception
            return false;
        }
    }
    order() {
        return BigInt('0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed') * BigInt('0x08');
    }
}
exports.Ed25519Curve = Ed25519Curve;
Ed25519Curve.initialized = false;
//# sourceMappingURL=data:application/json;base64,