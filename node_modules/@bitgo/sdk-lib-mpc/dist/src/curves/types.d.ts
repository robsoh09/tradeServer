/// <reference types="node" />
export declare type PublicKeychain = {
    pk: bigint;
    chaincode: bigint;
};
export declare type PrivateKeychain = PublicKeychain & {
    sk: bigint;
    prefix?: bigint;
};
/**
 * An interface for calculating a subkey in an HD key scheme.
 */
export interface HDTree {
    publicDerive(keychain: PublicKeychain, path: string): PublicKeychain;
    privateDerive(keychain: PrivateKeychain, path: string): PrivateKeychain;
}
/**
 * Base Interface for supporting elliptic curve parameters
 */
export interface BaseCurve {
    scalarReduce(s: bigint): bigint;
    scalarNegate(s: bigint): bigint;
    scalarInvert(s: bigint): bigint;
    scalarRandom(): bigint;
    scalarAdd(x: bigint, y: bigint): bigint;
    scalarSub(x: bigint, y: bigint): bigint;
    scalarMult(x: bigint, y: bigint): bigint;
    basePointMult(n: bigint): bigint;
    pointAdd(p: bigint, q: bigint): bigint;
    pointMultiply(p: bigint, s: bigint): bigint;
    verify(message: Buffer, signature: Buffer, publicKey: bigint): boolean;
    order: () => bigint;
    scalarBytes: number;
    pointBytes: number;
}
//# sourceMappingURL=types.d.ts.map