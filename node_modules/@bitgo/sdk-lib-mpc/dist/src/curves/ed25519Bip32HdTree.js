"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ed25519Bip32HdTree = void 0;
const crypto_1 = require("crypto");
const util_1 = require("../util");
const ed25519_1 = require("./ed25519");
const util_2 = require("./util");
const constant_1 = require("./constant");
class Ed25519Bip32HdTree {
    static async initialize() {
        if (!Ed25519Bip32HdTree.initialized) {
            await ed25519_1.Ed25519Curve.initialize();
            Ed25519Bip32HdTree.initialized = true;
        }
        return new Ed25519Bip32HdTree();
    }
    publicDerive(keychain, path) {
        const indices = (0, util_2.pathToIndices)(path);
        function deriveIndex(acc, index) {
            const [pk, chaincode] = acc;
            const [zout, iout] = deriveEd25519Helper(index, chaincode, pk);
            const zl = zout.slice(0, 32);
            // left = kl + 8 * trunc28(zl)
            const t = BigInt(8) * (0, util_1.bigIntFromBufferLE)(zl.slice(0, 28));
            const left = Ed25519Bip32HdTree.curve.pointAdd(pk, Ed25519Bip32HdTree.curve.basePointMult(t));
            return [left, (0, util_1.bigIntFromBufferBE)(iout.slice(32))];
        }
        const subkey = indices.reduce(deriveIndex, deriveIndex([keychain.pk, keychain.chaincode], indices.shift()));
        return { pk: subkey[0], chaincode: subkey[1] };
    }
    privateDerive(keychain, path) {
        const indices = (0, util_2.pathToIndices)(path);
        function deriveIndex(acc, index) {
            const [pk, sk, prefix, chaincode] = acc;
            const [zout, iout] = deriveEd25519Helper(index, chaincode, pk, sk);
            const zl = zout.slice(0, 32);
            const zr = zout.slice(32);
            // left = kl + 8 * trunc28(zl)
            const t = BigInt(8) * (0, util_1.bigIntFromBufferLE)(zl.slice(0, 28));
            const left_pk = Ed25519Bip32HdTree.curve.pointAdd(pk, Ed25519Bip32HdTree.curve.basePointMult(t));
            const left_sk = Ed25519Bip32HdTree.curve.scalarAdd(sk, t);
            // right = zr + kr
            const right = (prefix + (0, util_1.bigIntFromBufferBE)(zr)) % constant_1.chaincodeBase;
            return [left_pk, left_sk, right, (0, util_1.bigIntFromBufferBE)(iout.slice(32))];
        }
        const [pk, sk, prefix, chaincode] = indices.reduce(deriveIndex, deriveIndex([keychain.pk, keychain.sk, keychain.prefix, keychain.chaincode], indices.shift()));
        return { pk, sk, prefix, chaincode };
    }
}
exports.Ed25519Bip32HdTree = Ed25519Bip32HdTree;
Ed25519Bip32HdTree.curve = new ed25519_1.Ed25519Curve();
Ed25519Bip32HdTree.initialized = false;
function deriveEd25519Helper(index = 0, chaincode, pk, sk) {
    const zmac = (0, crypto_1.createHmac)('sha512', (0, util_1.bigIntToBufferBE)(chaincode, 32));
    const imac = (0, crypto_1.createHmac)('sha512', (0, util_1.bigIntToBufferBE)(chaincode, 32));
    const seri = Buffer.alloc(4);
    seri.writeUInt32LE(index, 0);
    if (((index >>> 0) & 0x80000000) === 0) {
        // Normal derivation:
        // Z = HMAC-SHA512(Key = cpar, Data = 0x02 || serP(point(kpar)) || ser32(i)).
        // I = HMAC-SHA512(Key = cpar, Data = 0x03 || serP(point(kpar)) || ser32(i)).
        zmac.update('\x02');
        zmac.update((0, util_1.bigIntToBufferLE)(pk, 32));
        zmac.update(seri);
        imac.update('\x03');
        imac.update((0, util_1.bigIntToBufferLE)(pk, 32));
        imac.update(seri);
    }
    else {
        if (sk === undefined) {
            throw new Error("Can't performed hardened derivation without private key");
        }
        // Hardened derivation:
        // Z = HMAC-SHA512(Key = cpar, Data = 0x00 || ser256(left(kpar)) || ser32(i)).
        // I = HMAC-SHA512(Key = cpar, Data = 0x01 || ser256(left(kpar)) || ser32(i)).
        zmac.update('\x00');
        zmac.update((0, util_1.bigIntToBufferLE)(sk, 32));
        zmac.update(seri);
        imac.update('\x01');
        imac.update((0, util_1.bigIntToBufferLE)(sk, 32));
        imac.update(seri);
    }
    return [zmac.digest(), imac.digest()];
}
//# sourceMappingURL=data:application/json;base64,