/// <reference types="node" />
import * as t from 'io-ts';
import { XShare } from '../ecdsa/types';
interface BroadcastMessage<T> {
    payload: T;
    from: number;
    signatureR?: T;
}
interface P2PMessage<T, G> {
    payload: T;
    from: number;
    commitment?: G;
    to: number;
}
export declare enum DkgState {
    Uninitialized = 0,
    Round1 = 1,
    Round2 = 2,
    Round3 = 3,
    Round4 = 4,
    Complete = 5,
    InvalidState = 6
}
export declare enum DsgState {
    Uninitialized = 0,
    Round1 = 1,
    Round2 = 2,
    Round3 = 3,
    Round4 = 4,
    Complete = 5,
    InvalidState = 6
}
export declare type AuthEncMessage = {
    encryptedMessage: string;
    signature: string;
};
export declare type AuthMessage = {
    message: string;
    signature: string;
};
export declare type PartyGpgKey = {
    partyId: number;
    gpgKey: string;
};
export declare type DklsSignature<T> = {
    R: T;
    S: T;
};
export declare type RetrofitData = {
    bigSiList: string[];
    xShare: Partial<XShare>;
    xiList?: number[][];
};
export declare const ReducedKeyShareType: t.TypeC<{
    bigSList: t.ArrayC<t.ArrayC<t.NumberC>>;
    xList: t.ArrayC<t.ArrayC<t.NumberC>>;
    rootChainCode: t.ArrayC<t.NumberC>;
    prv: t.ArrayC<t.NumberC>;
    pub: t.ArrayC<t.NumberC>;
}>;
export declare type ReducedKeyShare = t.TypeOf<typeof ReducedKeyShareType>;
export declare type SerializedBroadcastMessage = BroadcastMessage<string>;
export declare type DeserializedBroadcastMessage = BroadcastMessage<Uint8Array>;
export declare type SerializedP2PMessage = P2PMessage<string, string>;
export declare type DeserializedP2PMessage = P2PMessage<Uint8Array, Uint8Array>;
export declare type SerializedDklsSignature = DklsSignature<string>;
export declare type DeserializedDklsSignature = DklsSignature<Uint8Array>;
export declare type AuthEncP2PMessage = P2PMessage<AuthEncMessage, string>;
export declare type AuthBroadcastMessage = BroadcastMessage<AuthMessage>;
export declare type SerializedMessages = {
    p2pMessages: SerializedP2PMessage[];
    broadcastMessages: SerializedBroadcastMessage[];
};
export declare type AuthEncMessages = {
    p2pMessages: AuthEncP2PMessage[];
    broadcastMessages: AuthBroadcastMessage[];
};
export declare type DeserializedMessages = {
    p2pMessages: DeserializedP2PMessage[];
    broadcastMessages: DeserializedBroadcastMessage[];
};
/**
 * Serializes messages payloads to base64 strings.
 * @param messages
 */
export declare function serializeMessages(messages: DeserializedMessages): SerializedMessages;
/**
 * Deserialize messages payloads to Uint8Array.
 * @param messages
 */
export declare function deserializeMessages(messages: SerializedMessages): DeserializedMessages;
/**
 * Deserializes a P2P message.
 * @param message
 */
export declare function deserializeP2PMessage(message: SerializedP2PMessage): DeserializedP2PMessage;
/**
 * Deserializes a Broadcast message.
 * @param message
 */
export declare function deserializeBroadcastMessage(message: SerializedBroadcastMessage): DeserializedBroadcastMessage;
/**
 * Serializes a P2P message.
 * @param message
 */
export declare function serializeP2PMessage(message: DeserializedP2PMessage): SerializedP2PMessage;
/**
 * Serializes a Broadcast message.
 * @param message
 */
export declare function serializeBroadcastMessage(message: DeserializedBroadcastMessage): SerializedBroadcastMessage;
/**
 * Gets commonkeyChain from DKLS keyShare
 * @param {Buffer} keyShare - DKLS keyShare
 * @returns {string} commonKeychain in hex format
 */
export declare function getCommonKeychain(keyShare: Buffer): string;
export declare function getDecodedReducedKeyShare(reducedKeyShare: Buffer | Uint8Array): ReducedKeyShare;
export {};
//# sourceMappingURL=types.d.ts.map