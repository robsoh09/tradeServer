"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encryptAndAuthOutgoingMessages = exports.decryptAndVerifyIncomingMessages = exports.verifySignedData = exports.decryptAndVerifySignedData = exports.encryptAndDetachSignData = exports.detachSignData = void 0;
const pgp = __importStar(require("openpgp"));
/**
 * Detach signs a binary and encodes it in base64
 * @param data binary to encode in base64 and sign
 * @param privateArmor private key to sign with
 */
async function detachSignData(data, privateArmor) {
    const message = await pgp.createMessage({ binary: data });
    const privateKey = await pgp.readPrivateKey({ armoredKey: privateArmor });
    const signature = await pgp.sign({
        message,
        signingKeys: privateKey,
        format: 'armored',
        detached: true,
        config: {
            rejectCurves: new Set(),
            showVersion: false,
            showComment: false,
        },
    });
    return {
        message: data.toString('base64'),
        signature: signature,
    };
}
exports.detachSignData = detachSignData;
/**
 * Encrypts and detach signs a binary
 * @param data binary to encrypt and sign
 * @param publicArmor public key to encrypt with
 * @param privateArmor private key to sign with
 */
async function encryptAndDetachSignData(data, publicArmor, privateArmor) {
    const message = await pgp.createMessage({ binary: data });
    const publicKey = await pgp.readKey({ armoredKey: publicArmor });
    const privateKey = await pgp.readPrivateKey({ armoredKey: privateArmor });
    const encryptedMessage = await pgp.encrypt({
        message,
        encryptionKeys: publicKey,
        format: 'armored',
        config: {
            rejectCurves: new Set(),
            showVersion: false,
            showComment: false,
        },
    });
    const signature = await pgp.sign({
        message,
        signingKeys: privateKey,
        format: 'armored',
        detached: true,
        config: {
            rejectCurves: new Set(),
            showVersion: false,
            showComment: false,
        },
    });
    return {
        encryptedMessage: encryptedMessage,
        signature: signature,
    };
}
exports.encryptAndDetachSignData = encryptAndDetachSignData;
/**
 * Decrypts and verifies signature on a binary
 * @param encryptedAndSignedMessage message to decrypt and verify
 * @param publicArmor public key to verify signature with
 * @param privateArmor private key to decrypt with
 */
async function decryptAndVerifySignedData(encryptedAndSignedMessage, publicArmor, privateArmor) {
    const publicKey = await pgp.readKey({ armoredKey: publicArmor });
    const privateKey = await pgp.readPrivateKey({ armoredKey: privateArmor });
    const decryptedMessage = await pgp.decrypt({
        message: await pgp.readMessage({ armoredMessage: encryptedAndSignedMessage.encryptedMessage }),
        decryptionKeys: [privateKey],
        config: {
            rejectCurves: new Set(),
            showVersion: false,
            showComment: false,
        },
        format: 'binary',
    });
    const verificationResult = await pgp.verify({
        message: await pgp.createMessage({ binary: decryptedMessage.data }),
        signature: await pgp.readSignature({ armoredSignature: encryptedAndSignedMessage.signature }),
        verificationKeys: publicKey,
    });
    await verificationResult.signatures[0].verified;
    return Buffer.from(decryptedMessage.data).toString('base64');
}
exports.decryptAndVerifySignedData = decryptAndVerifySignedData;
/**
 * Verifies signature on a binary (message passed should be encoded in base64).
 * @param signedMessage message to verify
 * @param publicArmor public key to verify signature with
 */
async function verifySignedData(signedMessage, publicArmor) {
    const publicKey = await pgp.readKey({ armoredKey: publicArmor });
    const verificationResult = await pgp.verify({
        message: await pgp.createMessage({ binary: Buffer.from(signedMessage.message, 'base64') }),
        signature: await pgp.readSignature({ armoredSignature: signedMessage.signature }),
        verificationKeys: publicKey,
    });
    try {
        await verificationResult.signatures[0].verified;
        return true;
    }
    catch (e) {
        return false;
    }
}
exports.verifySignedData = verifySignedData;
/**
 * Decrypts and verifies p2p messages + verifies broadcast messages
 * @param messages message to decrypt and verify
 * @param pubVerificationGpgKeys public keys to verify signatures with
 * @param prvDecryptionGpgKeys private keys to decrypt with
 */
async function decryptAndVerifyIncomingMessages(messages, pubVerificationGpgKeys, prvDecryptionGpgKeys) {
    return {
        p2pMessages: await Promise.all(messages.p2pMessages.map(async (m) => {
            const pubGpgKey = pubVerificationGpgKeys.find((k) => k.partyId === m.from);
            const prvGpgKey = prvDecryptionGpgKeys.find((k) => k.partyId === m.to);
            if (!pubGpgKey) {
                throw Error(`No public key provided for sender with ID: ${m.from}`);
            }
            if (!prvGpgKey) {
                throw Error(`No private key provided for recepient with ID: ${m.to}`);
            }
            return {
                to: m.to,
                from: m.from,
                payload: await decryptAndVerifySignedData(m.payload, pubGpgKey.gpgKey, prvGpgKey.gpgKey),
                commitment: m.commitment,
            };
        })),
        broadcastMessages: await Promise.all(messages.broadcastMessages.map(async (m) => {
            const pubGpgKey = pubVerificationGpgKeys.find((k) => k.partyId === m.from);
            if (!pubGpgKey) {
                throw Error(`No public key provided for sender with ID: ${m.from}`);
            }
            if (!(await verifySignedData(m.payload, pubGpgKey.gpgKey))) {
                throw Error(`Failed to authenticate broadcast message from party: ${m.from}`);
            }
            return {
                from: m.from,
                payload: m.payload.message,
            };
        })),
    };
}
exports.decryptAndVerifyIncomingMessages = decryptAndVerifyIncomingMessages;
/**
 * Encrypts and signs p2p messages + signs broadcast messages
 * @param messages messages to encrypt and sign
 * @param pubEncryptionGpgKey public keys to encrypt data to
 * @param prvAuthenticationGpgKey private keys to sign with
 */
async function encryptAndAuthOutgoingMessages(messages, pubEncryptionGpgKeys, prvAuthenticationGpgKeys) {
    return {
        p2pMessages: await Promise.all(messages.p2pMessages.map(async (m) => {
            const pubGpgKey = pubEncryptionGpgKeys.find((k) => k.partyId === m.to);
            const prvGpgKey = prvAuthenticationGpgKeys.find((k) => k.partyId === m.from);
            if (!pubGpgKey) {
                throw Error(`No public key provided for recipient with ID: ${m.to}`);
            }
            if (!prvGpgKey) {
                throw Error(`No private key provided for sender with ID: ${m.from}`);
            }
            return {
                to: m.to,
                from: m.from,
                payload: await encryptAndDetachSignData(Buffer.from(m.payload, 'base64'), pubGpgKey.gpgKey, prvGpgKey.gpgKey),
                commitment: m.commitment,
            };
        })),
        broadcastMessages: await Promise.all(messages.broadcastMessages.map(async (m) => {
            const prvGpgKey = prvAuthenticationGpgKeys.find((k) => k.partyId === m.from);
            if (!prvGpgKey) {
                throw Error(`No private key provided for sender with ID: ${m.from}`);
            }
            return {
                from: m.from,
                payload: await detachSignData(Buffer.from(m.payload, 'base64'), prvGpgKey.gpgKey),
                signatureR: m.signatureR
                    ? {
                        message: m.signatureR,
                        signature: '',
                    }
                    : undefined,
            };
        })),
    };
}
exports.encryptAndAuthOutgoingMessages = encryptAndAuthOutgoingMessages;
//# sourceMappingURL=data:application/json;base64,