"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDecodedReducedKeyShare = exports.getCommonKeychain = exports.serializeBroadcastMessage = exports.serializeP2PMessage = exports.deserializeBroadcastMessage = exports.deserializeP2PMessage = exports.deserializeMessages = exports.serializeMessages = exports.ReducedKeyShareType = exports.DsgState = exports.DkgState = void 0;
const assert_1 = __importDefault(require("assert"));
const cbor_x_1 = require("cbor-x");
const t = __importStar(require("io-ts"));
const Either_1 = require("fp-ts/Either");
var DkgState;
(function (DkgState) {
    DkgState[DkgState["Uninitialized"] = 0] = "Uninitialized";
    DkgState[DkgState["Round1"] = 1] = "Round1";
    DkgState[DkgState["Round2"] = 2] = "Round2";
    DkgState[DkgState["Round3"] = 3] = "Round3";
    DkgState[DkgState["Round4"] = 4] = "Round4";
    DkgState[DkgState["Complete"] = 5] = "Complete";
    DkgState[DkgState["InvalidState"] = 6] = "InvalidState";
})(DkgState = exports.DkgState || (exports.DkgState = {}));
var DsgState;
(function (DsgState) {
    DsgState[DsgState["Uninitialized"] = 0] = "Uninitialized";
    DsgState[DsgState["Round1"] = 1] = "Round1";
    DsgState[DsgState["Round2"] = 2] = "Round2";
    DsgState[DsgState["Round3"] = 3] = "Round3";
    DsgState[DsgState["Round4"] = 4] = "Round4";
    DsgState[DsgState["Complete"] = 5] = "Complete";
    DsgState[DsgState["InvalidState"] = 6] = "InvalidState";
})(DsgState = exports.DsgState || (exports.DsgState = {}));
exports.ReducedKeyShareType = t.type({
    bigSList: t.array(t.array(t.number)),
    xList: t.array(t.array(t.number)),
    rootChainCode: t.array(t.number),
    prv: t.array(t.number),
    pub: t.array(t.number),
});
/**
 * Serializes messages payloads to base64 strings.
 * @param messages
 */
function serializeMessages(messages) {
    return {
        p2pMessages: messages.p2pMessages.map(serializeP2PMessage),
        broadcastMessages: messages.broadcastMessages.map(serializeBroadcastMessage),
    };
}
exports.serializeMessages = serializeMessages;
/**
 * Deserialize messages payloads to Uint8Array.
 * @param messages
 */
function deserializeMessages(messages) {
    return {
        p2pMessages: messages.p2pMessages.map(deserializeP2PMessage),
        broadcastMessages: messages.broadcastMessages.map(deserializeBroadcastMessage),
    };
}
exports.deserializeMessages = deserializeMessages;
/**
 * Deserializes a P2P message.
 * @param message
 */
function deserializeP2PMessage(message) {
    return {
        to: message.to,
        from: message.from,
        payload: new Uint8Array(Buffer.from(message.payload, 'base64')),
        commitment: message.commitment ? new Uint8Array(Buffer.from(message.commitment, 'hex')) : undefined,
    };
}
exports.deserializeP2PMessage = deserializeP2PMessage;
/**
 * Deserializes a Broadcast message.
 * @param message
 */
function deserializeBroadcastMessage(message) {
    return {
        from: message.from,
        payload: new Uint8Array(Buffer.from(message.payload, 'base64')),
        signatureR: message.signatureR ? new Uint8Array(Buffer.from(message.signatureR, 'base64')) : undefined,
    };
}
exports.deserializeBroadcastMessage = deserializeBroadcastMessage;
/**
 * Serializes a P2P message.
 * @param message
 */
function serializeP2PMessage(message) {
    return {
        to: message.to,
        from: message.from,
        payload: Buffer.from(message.payload).toString('base64'),
        commitment: message.commitment ? Buffer.from(message.commitment).toString('hex') : undefined,
    };
}
exports.serializeP2PMessage = serializeP2PMessage;
/**
 * Serializes a Broadcast message.
 * @param message
 */
function serializeBroadcastMessage(message) {
    return {
        from: message.from,
        payload: Buffer.from(message.payload).toString('base64'),
        signatureR: message.signatureR ? Buffer.from(message.signatureR).toString('base64') : undefined,
    };
}
exports.serializeBroadcastMessage = serializeBroadcastMessage;
/**
 * Gets commonkeyChain from DKLS keyShare
 * @param {Buffer} keyShare - DKLS keyShare
 * @returns {string} commonKeychain in hex format
 */
function getCommonKeychain(keyShare) {
    const parsedKeyShare = (0, cbor_x_1.decode)(keyShare);
    (0, assert_1.default)(parsedKeyShare.public_key, 'public_key not found in keyShare');
    (0, assert_1.default)(parsedKeyShare.root_chain_code, 'root_chain_code not found in public_key');
    const publicKey = Buffer.from(parsedKeyShare.public_key).toString('hex');
    const rootChainCode = Buffer.from(parsedKeyShare.root_chain_code).toString('hex');
    return publicKey + rootChainCode;
}
exports.getCommonKeychain = getCommonKeychain;
function getDecodedReducedKeyShare(reducedKeyShare) {
    const decoded = exports.ReducedKeyShareType.decode((0, cbor_x_1.decode)(reducedKeyShare));
    if ((0, Either_1.isLeft)(decoded)) {
        throw new Error(`Unable to parse reducedKeyShare: ${decoded.left}`);
    }
    return decoded.right;
}
exports.getDecodedReducedKeyShare = getDecodedReducedKeyShare;
//# sourceMappingURL=data:application/json;base64,