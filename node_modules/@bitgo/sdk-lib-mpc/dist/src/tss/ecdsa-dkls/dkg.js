"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dkg = void 0;
const dkls_wasm_ll_node_1 = require("@silencelaboratories/dkls-wasm-ll-node");
const types_1 = require("./types");
const cbor_x_1 = require("cbor-x");
const util_1 = require("../../util");
const curves_1 = require("../../curves");
class Dkg {
    constructor(n, t, partyIdx, retrofitData) {
        this.dkgState = types_1.DkgState.Uninitialized;
        this.n = n;
        this.t = t;
        this.partyIdx = partyIdx;
        this.chainCodeCommitment = undefined;
        this.retrofitData = retrofitData;
    }
    _restoreSession() {
        if (!this.dkgSession) {
            this.dkgSession = dkls_wasm_ll_node_1.KeygenSession.fromBytes(this.dkgSessionBytes);
        }
    }
    _createDKLsRetrofitKeyShare() {
        if (this.retrofitData) {
            if (!this.retrofitData.xShare.y || !this.retrofitData.xShare.chaincode || !this.retrofitData.xShare.x) {
                throw Error('xShare must have a public key, private share value, and a chaincode.');
            }
            if (this.retrofitData.bigSiList.length !== this.n - 1) {
                throw Error("bigSiList should contain the other parties' Si's");
            }
            const bigSList = [];
            const xiList = [];
            let j = 0;
            for (let i = 0; i < this.n; i++) {
                if (i === this.partyIdx) {
                    const secp256k1 = new curves_1.Secp256k1Curve();
                    bigSList.push(Array.from((0, util_1.bigIntToBufferBE)(secp256k1.basePointMult(BigInt('0x' + this.retrofitData.xShare.x)))));
                }
                else {
                    bigSList.push(Array.from(Buffer.from(this.retrofitData.bigSiList[j], 'hex')));
                    j++;
                }
                xiList.push(Array.from((0, util_1.bigIntToBufferBE)(BigInt(i + 1), 32)));
            }
            const dklsKeyShare = {
                total_parties: this.n,
                threshold: this.t,
                rank_list: new Array(this.n).fill(0),
                party_id: this.partyIdx,
                public_key: Array.from(Buffer.from(this.retrofitData.xShare.y, 'hex')),
                root_chain_code: Array.from(Buffer.from(this.retrofitData.xShare.chaincode, 'hex')),
                final_session_id: Array(32).fill(0),
                seed_ot_receivers: new Array(this.n - 1).fill(Array(32832).fill(0)),
                seed_ot_senders: new Array(this.n - 1).fill(Array(32768).fill(0)),
                sent_seed_list: [Array(32).fill(0)],
                rec_seed_list: [Array(32).fill(0)],
                s_i: Array.from(Buffer.from(this.retrofitData.xShare.x, 'hex')),
                big_s_list: bigSList,
                x_i_list: this.retrofitData.xiList ? this.retrofitData.xiList : xiList,
            };
            this.dklsKeyShareRetrofitObject = dkls_wasm_ll_node_1.Keyshare.fromBytes((0, cbor_x_1.encode)(dklsKeyShare));
        }
    }
    _deserializeState() {
        if (!this.dkgSession) {
            throw Error('Session not intialized');
        }
        const round = (0, cbor_x_1.decode)(this.dkgSession.toBytes()).round;
        switch (round) {
            case 'WaitMsg1':
                this.dkgState = types_1.DkgState.Round1;
                break;
            case 'WaitMsg2':
                this.dkgState = types_1.DkgState.Round2;
                break;
            case 'WaitMsg3':
                this.dkgState = types_1.DkgState.Round3;
                break;
            case 'WaitMsg4':
                this.dkgState = types_1.DkgState.Round4;
                break;
            case 'Ended':
                this.dkgState = types_1.DkgState.Complete;
                break;
            default:
                this.dkgState = types_1.DkgState.InvalidState;
                throw Error(`Invalid State: ${round}`);
        }
    }
    async initDkg() {
        if (this.t > this.n || this.partyIdx >= this.n) {
            throw Error('Invalid parameters for DKG');
        }
        if (this.dkgState != types_1.DkgState.Uninitialized) {
            throw Error('DKG session already initialized');
        }
        if (typeof window !== 'undefined') {
            const initDkls = require('@silencelaboratories/dkls-wasm-ll-web');
            await initDkls.default();
        }
        this._createDKLsRetrofitKeyShare();
        if (this.dklsKeyShareRetrofitObject) {
            this.dkgSession = dkls_wasm_ll_node_1.KeygenSession.initKeyRotation(this.dklsKeyShareRetrofitObject);
        }
        else {
            this.dkgSession = new dkls_wasm_ll_node_1.KeygenSession(this.n, this.t, this.partyIdx);
        }
        try {
            const payload = this.dkgSession.createFirstMessage().payload;
            this._deserializeState();
            return {
                payload: payload,
                from: this.partyIdx,
            };
        }
        catch (e) {
            throw Error(`Error while creating the first message from party ${this.partyIdx}: ${e}`);
        }
    }
    getKeyShare() {
        if (!this.keyShareBuff) {
            throw Error('Can not get key share, DKG is not complete yet.');
        }
        return this.keyShareBuff;
    }
    getReducedKeyShare() {
        if (!this.keyShareBuff) {
            throw Error('Can not get key share, DKG is not complete yet.');
        }
        const decodedKeyshare = (0, cbor_x_1.decode)(this.keyShareBuff);
        const reducedKeyShare = {
            bigSList: decodedKeyshare.big_s_list,
            xList: decodedKeyshare.x_i_list,
            rootChainCode: decodedKeyshare.root_chain_code,
            prv: decodedKeyshare.s_i,
            pub: decodedKeyshare.public_key,
        };
        const encodedKeyShare = (0, cbor_x_1.encode)(reducedKeyShare);
        return encodedKeyShare;
    }
    handleIncomingMessages(messagesForIthRound) {
        let nextRoundMessages = [];
        let nextRoundDeserializedMessages = { broadcastMessages: [], p2pMessages: [] };
        this._restoreSession();
        if (!this.dkgSession) {
            throw Error('Session not initialized');
        }
        try {
            if (this.dkgState === types_1.DkgState.Round3) {
                const commitmentsUnsorted = messagesForIthRound.p2pMessages
                    .map((m) => {
                    return { from: m.from, commitment: m.commitment };
                })
                    .concat([{ from: this.partyIdx, commitment: this.chainCodeCommitment }]);
                const commitmentsSorted = commitmentsUnsorted
                    .sort((a, b) => {
                    return a.from - b.from;
                })
                    .map((c) => c.commitment);
                nextRoundMessages = this.dkgSession.handleMessages(messagesForIthRound.broadcastMessages
                    .map((m) => new dkls_wasm_ll_node_1.Message(m.payload, m.from, undefined))
                    .concat(messagesForIthRound.p2pMessages.map((m) => new dkls_wasm_ll_node_1.Message(m.payload, m.from, m.to))), commitmentsSorted);
            }
            else {
                nextRoundMessages = this.dkgSession.handleMessages(messagesForIthRound.broadcastMessages
                    .map((m) => new dkls_wasm_ll_node_1.Message(m.payload, m.from, undefined))
                    .concat(messagesForIthRound.p2pMessages.map((m) => new dkls_wasm_ll_node_1.Message(m.payload, m.from, m.to))), undefined);
            }
            if (this.dkgState === types_1.DkgState.Round4) {
                this.dkgKeyShare = this.dkgSession.keyshare();
                this.keyShareBuff = Buffer.from(this.dkgKeyShare.toBytes());
                this.dkgKeyShare.free();
                this.dkgState = types_1.DkgState.Complete;
                return { broadcastMessages: [], p2pMessages: [] };
            }
            else {
                // Update round data.
                this._deserializeState();
            }
            if (this.dkgState === types_1.DkgState.Round2) {
                this.chainCodeCommitment = this.dkgSession.calculateChainCodeCommitment();
            }
            nextRoundDeserializedMessages = {
                p2pMessages: nextRoundMessages
                    .filter((m) => m.to_id !== undefined)
                    .map((m) => {
                    const p2pReturn = {
                        payload: m.payload,
                        from: m.from_id,
                        to: m.to_id,
                        commitment: this.chainCodeCommitment,
                    };
                    return p2pReturn;
                }),
                broadcastMessages: nextRoundMessages
                    .filter((m) => m.to_id === undefined)
                    .map((m) => {
                    const broadcastReturn = {
                        payload: m.payload,
                        from: m.from_id,
                    };
                    return broadcastReturn;
                }),
            };
        }
        catch (e) {
            throw Error(`Error while creating messages from party ${this.partyIdx}, round ${this.dkgState}: ${e}`);
        }
        finally {
            nextRoundMessages.forEach((m) => m.free());
            // Session is freed when keyshare is called.
            if (this.dkgState !== types_1.DkgState.Complete) {
                this.dkgSessionBytes = this.dkgSession.toBytes();
                this.dkgSession = undefined;
            }
        }
        return nextRoundDeserializedMessages;
    }
}
exports.Dkg = Dkg;
//# sourceMappingURL=data:application/json;base64,