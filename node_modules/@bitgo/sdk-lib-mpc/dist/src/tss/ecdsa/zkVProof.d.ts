/// <reference types="node" />
import { BaseCurve as Curve } from '../../curves';
import { ZkVProof } from './types';
/**
 * Create a ZK Proof of knowledge of the s and l that are behind the public value V = sR + lG.
 * @param V The curve point V.
 * @param s The s that multiplies R.
 * @param l The l that multiplies the curve genreator G.
 * @param R The curve point R shared by all participants.
 * @param curve The elliptic curve.
 * @param additionalCtx Additional contextual information to associate with the proof.
 * @returns The created proof.
 */
export declare function createZkVProof(V: bigint, s: bigint, l: bigint, R: bigint, curve: Curve, additionalCtx?: Buffer): ZkVProof;
/**
 * Verify a ZK Proof of knowledge of the s and l that are behind the public value V = sR + lG.
 * @param V The curve point V.
 * @param proof The ZK proof.
 * @param R The curve point R shared by all participants.
 * @param curve The elliptic curve.
 * @param additionalCtx Additional contextual information that is supposed to associate with the proof.
 * @returns True if the proof checks out.
 */
export declare function verifyZkVProof(V: bigint, proof: ZkVProof, R: bigint, curve: Curve, additionalCtx?: Buffer): boolean;
//# sourceMappingURL=zkVProof.d.ts.map