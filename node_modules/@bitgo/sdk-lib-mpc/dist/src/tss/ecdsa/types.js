"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializePaillierChallengeWithProofs = exports.serializePaillierChallengeProofs = exports.serializePaillierChallenge = exports.deserializePaillierChallengeWithProofs = exports.deserializePaillierChallengeProofs = exports.deserializePaillierChallenge = exports.serializeNtildeWithProofs = exports.deserializeNtildeWithProofs = exports.serializeNtilde = exports.deserializeNtilde = void 0;
const util_1 = require("../../util");
/**
 * Deserializes a challenge from hex strings to bigint
 * @param challenge
 */
function deserializeNtilde(challenge) {
    return {
        ntilde: (0, util_1.hexToBigInt)(challenge.ntilde),
        h1: (0, util_1.hexToBigInt)(challenge.h1),
        h2: (0, util_1.hexToBigInt)(challenge.h2),
    };
}
exports.deserializeNtilde = deserializeNtilde;
/**
 * Serializes a challenge from big int to hex strings.
 * @param challenge
 */
function serializeNtilde(challenge) {
    return {
        ntilde: (0, util_1.bigIntToHex)(challenge.ntilde),
        h1: (0, util_1.bigIntToHex)(challenge.h1),
        h2: (0, util_1.bigIntToHex)(challenge.h2),
    };
}
exports.serializeNtilde = serializeNtilde;
/**
 * Deserializes a challenge and it's proofs from hex strings to bigint
 * @param challenge
 */
function deserializeNtildeWithProofs(challenge) {
    return {
        ...deserializeNtilde(challenge),
        ntildeProof: {
            h1WrtH2: {
                alpha: (0, util_1.convertHexArrToBigIntArr)(challenge.ntildeProof.h1WrtH2.alpha),
                t: (0, util_1.convertHexArrToBigIntArr)(challenge.ntildeProof.h1WrtH2.t),
            },
            h2WrtH1: {
                alpha: (0, util_1.convertHexArrToBigIntArr)(challenge.ntildeProof.h2WrtH1.alpha),
                t: (0, util_1.convertHexArrToBigIntArr)(challenge.ntildeProof.h2WrtH1.t),
            },
        },
    };
}
exports.deserializeNtildeWithProofs = deserializeNtildeWithProofs;
/**
 * Serializes a challenge and it's proofs from big int to hex strings.
 * @param challenge
 */
function serializeNtildeWithProofs(challenge) {
    return {
        ...serializeNtilde(challenge),
        ntildeProof: {
            h1WrtH2: {
                alpha: (0, util_1.convertBigIntArrToHexArr)(challenge.ntildeProof.h1WrtH2.alpha),
                t: (0, util_1.convertBigIntArrToHexArr)(challenge.ntildeProof.h1WrtH2.t),
            },
            h2WrtH1: {
                alpha: (0, util_1.convertBigIntArrToHexArr)(challenge.ntildeProof.h2WrtH1.alpha),
                t: (0, util_1.convertBigIntArrToHexArr)(challenge.ntildeProof.h2WrtH1.t),
            },
        },
    };
}
exports.serializeNtildeWithProofs = serializeNtildeWithProofs;
/**
 * Deserializes a paillier challenge to hex strings.
 * @param challenge
 */
function deserializePaillierChallenge(challenge) {
    return {
        p: (0, util_1.convertHexArrToBigIntArr)(challenge.p),
    };
}
exports.deserializePaillierChallenge = deserializePaillierChallenge;
/**
 * Deserializes a paillier challenge proof to hex strings.
 * @param challenge
 */
function deserializePaillierChallengeProofs(challenge) {
    return {
        sigma: (0, util_1.convertHexArrToBigIntArr)(challenge.sigma),
    };
}
exports.deserializePaillierChallengeProofs = deserializePaillierChallengeProofs;
/**
 * Deserializes a paillier challenge and its proof to hex strings.
 * @param challengeWithProofs
 */
function deserializePaillierChallengeWithProofs(challengeWithProofs) {
    return {
        ...deserializePaillierChallenge(challengeWithProofs),
        ...deserializePaillierChallengeProofs(challengeWithProofs),
    };
}
exports.deserializePaillierChallengeWithProofs = deserializePaillierChallengeWithProofs;
/**
 * Serializes a paillier challenge to hex strings.
 * @param challenge
 */
function serializePaillierChallenge(challenge) {
    return {
        p: (0, util_1.convertBigIntArrToHexArr)(challenge.p, 768),
    };
}
exports.serializePaillierChallenge = serializePaillierChallenge;
/**
 * Serializes a paillier challenge proof to hex strings.
 * @param challenge
 */
function serializePaillierChallengeProofs(challenge) {
    return {
        sigma: (0, util_1.convertBigIntArrToHexArr)(challenge.sigma, 768),
    };
}
exports.serializePaillierChallengeProofs = serializePaillierChallengeProofs;
/**
 * Serializes a paillier challenge and its proof to hex strings.
 * @param challengeWithProofs
 */
function serializePaillierChallengeWithProofs(challengeWithProofs) {
    return {
        ...serializePaillierChallenge(challengeWithProofs),
        ...serializePaillierChallengeProofs(challengeWithProofs),
    };
}
exports.serializePaillierChallengeWithProofs = serializePaillierChallengeWithProofs;
//# sourceMappingURL=data:application/json;base64,