"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDerivationPath = exports.randomBigInt = exports.randomPositiveCoPrimeLessThan = exports.randomPositiveCoPrimeTo = exports.getPaillierPublicKey = exports.clamp = exports.bigIntFromU8ABE = exports.bigIntFromBufferBE = exports.bigIntToBufferBE = exports.bigIntFromBufferLE = exports.bigIntToBufferLE = exports.bigIntToHex = exports.hexToBigInt = exports.convertBigIntArrToHexArr = exports.convertHexArrToBigIntArr = void 0;
const paillier_bigint_1 = require("paillier-bigint");
const bigint_crypto_utils_1 = require("bigint-crypto-utils");
const bigint_mod_arith_1 = require("bigint-mod-arith");
const crypto_1 = __importDefault(require("crypto"));
/**
 * Returns a bigint array from a hex string array
 * @param values
 */
function convertHexArrToBigIntArr(values) {
    return values.map((value) => {
        return hexToBigInt(value);
    });
}
exports.convertHexArrToBigIntArr = convertHexArrToBigIntArr;
/**
 * Returns a hex string array from a bigint array
 * @param values
 * @param hexLength - length to pad each big int number too
 */
function convertBigIntArrToHexArr(values, hexLength) {
    return values.map((value) => {
        return bigIntToHex(value, hexLength);
    });
}
exports.convertBigIntArrToHexArr = convertBigIntArrToHexArr;
function hexToBigInt(hex) {
    // Strangely bigint.toString(16) gives a hex string without 0x,
    // but it won't accept the same string without 0x to convert
    // to a bigint (BigInt(hex string)). So have to introduce this
    // check to convert to add 0x in case if hex string
    // doesn't have it.
    if (hex.slice(0, 2) === '0x') {
        return BigInt(hex);
    }
    return BigInt('0x' + hex);
}
exports.hexToBigInt = hexToBigInt;
/**
 * Returns an hex string of the given bigint
 *
 * @param {bigint} bigint - the bigint to be converted to hex
 * @param hexLength
 * @returns {string} - the hex value
 */
function bigIntToHex(bigint, hexLength) {
    let hex = bigint.toString(16);
    hex = '0'.slice(0, hex.length % 2) + hex;
    if (hexLength) {
        hex = hex.padStart(hexLength, '0');
    }
    return hex;
}
exports.bigIntToHex = bigIntToHex;
function bigIntToBufferLE(n, minBytes) {
    let v = n.toString(16);
    v = '0'.slice(0, v.length % 2) + v;
    const buf = Buffer.from(v, 'hex').reverse();
    if (minBytes && buf.length < minBytes) {
        return Buffer.concat([buf, Buffer.alloc(minBytes - buf.length)]);
    }
    return buf;
}
exports.bigIntToBufferLE = bigIntToBufferLE;
function bigIntFromBufferLE(buf) {
    return BigInt('0x' + Buffer.from(buf).reverse().toString('hex'));
}
exports.bigIntFromBufferLE = bigIntFromBufferLE;
function bigIntToBufferBE(n, minBytes) {
    let v = n.toString(16);
    v = '0'.slice(0, v.length % 2) + v;
    const buf = Buffer.from(v, 'hex');
    if (minBytes && buf.length < minBytes) {
        return Buffer.concat([Buffer.alloc(minBytes - buf.length), buf]);
    }
    return buf;
}
exports.bigIntToBufferBE = bigIntToBufferBE;
function bigIntFromBufferBE(buf) {
    return BigInt('0x' + buf.toString('hex'));
}
exports.bigIntFromBufferBE = bigIntFromBufferBE;
function bigIntFromU8ABE(buf) {
    return bigIntFromBufferBE(Buffer.from(buf));
}
exports.bigIntFromU8ABE = bigIntFromU8ABE;
function clamp(u) {
    u &= BigInt('0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8');
    u |= BigInt('0x4000000000000000000000000000000000000000000000000000000000000000');
    return u;
}
exports.clamp = clamp;
/**
 * Function get paillier public key simple varient
 * @param {bigint} n
 * @returns {bigint}
 */
function getPaillierPublicKey(n) {
    return new paillier_bigint_1.PublicKey(n, n + BigInt(1));
}
exports.getPaillierPublicKey = getPaillierPublicKey;
/**
 * Generate a random positive integer co-prime to x
 * @param x
 * @returns {Promise<bigint>}
 */
async function randomPositiveCoPrimeTo(x) {
    while (true) {
        const y = await randomBigInt((0, bigint_crypto_utils_1.bitLength)(x));
        if (y > BigInt(0) && (0, bigint_mod_arith_1.gcd)(x, y) === BigInt(1)) {
            return y;
        }
    }
}
exports.randomPositiveCoPrimeTo = randomPositiveCoPrimeTo;
/**
 * Generate a random positive integer coprime less than x with the same bit depth.
 * @param x
 * @returns {Promise<bigint>}
 */
async function randomPositiveCoPrimeLessThan(x) {
    if (x <= BigInt(2)) {
        throw new Error('x must be larger than 2');
    }
    while (true) {
        const y = await randomBigInt((0, bigint_crypto_utils_1.bitLength)(x));
        if (y > BigInt(0) && y < x && (0, bigint_mod_arith_1.gcd)(x, y) === BigInt(1)) {
            return y;
        }
    }
}
exports.randomPositiveCoPrimeLessThan = randomPositiveCoPrimeLessThan;
/**
 * Generate a random number of a given bitlength
 * @param bitlength
 * @returns {Promise<bigint>}
 */
async function randomBigInt(bitlength) {
    return bigIntFromBufferBE(Buffer.from(await (0, bigint_crypto_utils_1.randBits)(bitlength, true)));
}
exports.randomBigInt = randomBigInt;
/**
 * @param seed - used to construct derivation path deterministically
 * @param isMaster - if set, path starts with prefix `m/`
 * @return path `(m/)/999999/a/b` where `a` and `b` are 7-byte pseudorandom numbers based on seed
 */
function getDerivationPath(seed, isMaster = true) {
    const derivationPathInput = sha256(sha256(`${seed}`)).toString('hex');
    const derivationPathParts = [
        parseInt(derivationPathInput.slice(0, 7), 16),
        parseInt(derivationPathInput.slice(7, 14), 16),
    ];
    const prefix = isMaster ? 'm/' : '';
    return prefix + '999999/' + derivationPathParts.join('/');
}
exports.getDerivationPath = getDerivationPath;
function sha256(input) {
    return crypto_1.default.createHash('sha256').update(input).digest();
}
//# sourceMappingURL=data:application/json;base64,