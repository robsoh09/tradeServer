/// <reference types="node" />
/// <reference types="bn.js" />
import { BN } from 'ethereumjs-util';
import { BaseCoin, BitGoBase, KeyPair, ParsedTransaction, ParseTransactionOptions, VerifyAddressOptions, VerifyTransactionOptions } from '@bitgo/sdk-core';
import { BaseCoin as StaticsBaseCoin } from '@bitgo/statics';
import { Eth, TransactionBuilder } from '@bitgo/sdk-coin-eth';
declare type FullNodeResponseBody = {
    jsonrpc: string;
    id: string;
    result?: string;
    error?: {
        code: string;
        message: string;
    };
};
export declare class Ethw extends Eth {
    protected constructor(bitgo: BitGoBase, staticsCoin?: Readonly<StaticsBaseCoin>);
    static createInstance(bitgo: BitGoBase, staticsCoin?: Readonly<StaticsBaseCoin>): BaseCoin;
    verifyTransaction(params: VerifyTransactionOptions): Promise<boolean>;
    isWalletAddress(params: VerifyAddressOptions): Promise<boolean>;
    parseTransaction(params: ParseTransactionOptions): Promise<ParsedTransaction>;
    generateKeyPair(seed?: Buffer | undefined): KeyPair;
    /**
     * Query full node for the balance of an address
     * @param {string} address the ETHw address
     * @returns {Promise<BN>} address balance
     */
    queryAddressBalance(address: string): Promise<BN>;
    /**
     * Queries the contract (via RPC) for the next sequence ID
     * @param {string} address address of the contract
     * @returns {Promise<number>} sequence ID
     */
    querySequenceId(address: string): Promise<number>;
    /**
     * Queries public full node to get the next ETHw nonce that should be used for the given ETH address
     * @param {string} address
     * @returns {Promise<number>} next ETHw nonce
     */
    getAddressNonce(address: string): Promise<number>;
    /**
     * Make a RPC query to full node for information such as balance, token balance, solidity calls
     * @param {string} method RPC method to execute
     * @param {Array} params params to include in the RPC request
     * @returns {Promise<FullNodeResponseBody>} response from full node
     */
    recoveryFullNodeRPCQuery(method: string, params: Array<unknown>): Promise<FullNodeResponseBody>;
    /**
     * Create a new transaction builder for the current chain
     * @return a new transaction builder
     */
    protected getTransactionBuilder(): TransactionBuilder;
}
export {};
//# sourceMappingURL=ethw.d.ts.map