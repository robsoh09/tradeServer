"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.toBech32 = exports.fromBech32 = exports.fromBase58Check = exports.toBase58Check = exports.toOutputScript = exports.fromOutputScript = void 0;
const bitcoinjs = require("bitcoinjs-lib");
const zcashAddress = require("../src/bitgo/zcash/address");
const networks_1 = require("./networks");
const index_1 = require("./index");
function fromOutputScript(outputScript, network) {
    if ((0, networks_1.isValidNetwork)(network) && (0, networks_1.isZcash)(network)) {
        return zcashAddress.fromOutputScript(outputScript, network);
    }
    // We added p2tr payments from our forked bitcoinjs-lib to utxo-lib instead. Our bitcoinjs fork will no longer have
    // p2tr support so utxo-lib should take care of retrieving a p2tr address from outputScript and bitcoinjs-lib can
    // handle the other type of payments.
    try {
        return index_1.p2trPayments.p2tr({ output: outputScript, network }).address;
    }
    catch (e) {
        // noop. try the bitcoinjs method
    }
    return bitcoinjs.address.fromOutputScript(outputScript, network);
}
exports.fromOutputScript = fromOutputScript;
function toOutputScript(address, network) {
    if ((0, networks_1.isValidNetwork)(network) && (0, networks_1.isZcash)(network)) {
        return zcashAddress.toOutputScript(address, network);
    }
    return bitcoinjs.address.toOutputScript(address, network);
}
exports.toOutputScript = toOutputScript;
function toBase58Check(hash, version, network) {
    if ((0, networks_1.isValidNetwork)(network) && (0, networks_1.isZcash)(network)) {
        return zcashAddress.toBase58Check(hash, version);
    }
    return bitcoinjs.address.toBase58Check(hash, version);
}
exports.toBase58Check = toBase58Check;
function fromBase58Check(address, network) {
    if ((0, networks_1.isValidNetwork)(network) && (0, networks_1.isZcash)(network)) {
        return zcashAddress.fromBase58Check(address);
    }
    return bitcoinjs.address.fromBase58Check(address);
}
exports.fromBase58Check = fromBase58Check;
_a = bitcoinjs.address, exports.fromBech32 = _a.fromBech32, exports.toBech32 = _a.toBech32;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkcmVzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hZGRyZXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSwyQ0FBMkM7QUFHM0MsMkRBQTJEO0FBQzNELHlDQUE4RDtBQUM5RCxtQ0FBdUM7QUFFdkMsU0FBZ0IsZ0JBQWdCLENBQUMsWUFBb0IsRUFBRSxPQUFnQjtJQUNyRSxJQUFJLElBQUEseUJBQWMsRUFBQyxPQUFPLENBQUMsSUFBSSxJQUFBLGtCQUFPLEVBQUMsT0FBTyxDQUFDLEVBQUU7UUFDL0MsT0FBTyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQzdEO0lBRUQsbUhBQW1IO0lBQ25ILGlIQUFpSDtJQUNqSCxxQ0FBcUM7SUFDckMsSUFBSTtRQUNGLE9BQU8sb0JBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBaUIsQ0FBQztLQUMvRTtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsaUNBQWlDO0tBQ2xDO0lBRUQsT0FBTyxTQUFTLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxPQUE0QixDQUFDLENBQUM7QUFDeEYsQ0FBQztBQWZELDRDQWVDO0FBRUQsU0FBZ0IsY0FBYyxDQUFDLE9BQWUsRUFBRSxPQUFnQjtJQUM5RCxJQUFJLElBQUEseUJBQWMsRUFBQyxPQUFPLENBQUMsSUFBSSxJQUFBLGtCQUFPLEVBQUMsT0FBTyxDQUFDLEVBQUU7UUFDL0MsT0FBTyxZQUFZLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztLQUN0RDtJQUNELE9BQU8sU0FBUyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLE9BQTRCLENBQUMsQ0FBQztBQUNqRixDQUFDO0FBTEQsd0NBS0M7QUFFRCxTQUFnQixhQUFhLENBQUMsSUFBWSxFQUFFLE9BQWUsRUFBRSxPQUFnQjtJQUMzRSxJQUFJLElBQUEseUJBQWMsRUFBQyxPQUFPLENBQUMsSUFBSSxJQUFBLGtCQUFPLEVBQUMsT0FBTyxDQUFDLEVBQUU7UUFDL0MsT0FBTyxZQUFZLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNsRDtJQUNELE9BQU8sU0FBUyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3hELENBQUM7QUFMRCxzQ0FLQztBQUVELFNBQWdCLGVBQWUsQ0FBQyxPQUFlLEVBQUUsT0FBZ0I7SUFDL0QsSUFBSSxJQUFBLHlCQUFjLEVBQUMsT0FBTyxDQUFDLElBQUksSUFBQSxrQkFBTyxFQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQy9DLE9BQU8sWUFBWSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUM5QztJQUNELE9BQU8sU0FBUyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDcEQsQ0FBQztBQUxELDBDQUtDO0FBRVksS0FBMkIsU0FBUyxDQUFDLE9BQU8sRUFBMUMsa0JBQVUsa0JBQUUsZ0JBQVEsZUFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBiaXRjb2luanMgZnJvbSAnYml0Y29pbmpzLWxpYic7XG5pbXBvcnQgeyBCYXNlNThDaGVja1Jlc3VsdCwgQmVjaDMyUmVzdWx0IH0gZnJvbSAnYml0Y29pbmpzLWxpYi9zcmMvYWRkcmVzcyc7XG5cbmltcG9ydCAqIGFzIHpjYXNoQWRkcmVzcyBmcm9tICcuLi9zcmMvYml0Z28vemNhc2gvYWRkcmVzcyc7XG5pbXBvcnQgeyBpc1ZhbGlkTmV0d29yaywgaXNaY2FzaCwgTmV0d29yayB9IGZyb20gJy4vbmV0d29ya3MnO1xuaW1wb3J0IHsgcDJ0clBheW1lbnRzIH0gZnJvbSAnLi9pbmRleCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tT3V0cHV0U2NyaXB0KG91dHB1dFNjcmlwdDogQnVmZmVyLCBuZXR3b3JrOiBOZXR3b3JrKTogc3RyaW5nIHtcbiAgaWYgKGlzVmFsaWROZXR3b3JrKG5ldHdvcmspICYmIGlzWmNhc2gobmV0d29yaykpIHtcbiAgICByZXR1cm4gemNhc2hBZGRyZXNzLmZyb21PdXRwdXRTY3JpcHQob3V0cHV0U2NyaXB0LCBuZXR3b3JrKTtcbiAgfVxuXG4gIC8vIFdlIGFkZGVkIHAydHIgcGF5bWVudHMgZnJvbSBvdXIgZm9ya2VkIGJpdGNvaW5qcy1saWIgdG8gdXR4by1saWIgaW5zdGVhZC4gT3VyIGJpdGNvaW5qcyBmb3JrIHdpbGwgbm8gbG9uZ2VyIGhhdmVcbiAgLy8gcDJ0ciBzdXBwb3J0IHNvIHV0eG8tbGliIHNob3VsZCB0YWtlIGNhcmUgb2YgcmV0cmlldmluZyBhIHAydHIgYWRkcmVzcyBmcm9tIG91dHB1dFNjcmlwdCBhbmQgYml0Y29pbmpzLWxpYiBjYW5cbiAgLy8gaGFuZGxlIHRoZSBvdGhlciB0eXBlIG9mIHBheW1lbnRzLlxuICB0cnkge1xuICAgIHJldHVybiBwMnRyUGF5bWVudHMucDJ0cih7IG91dHB1dDogb3V0cHV0U2NyaXB0LCBuZXR3b3JrIH0pLmFkZHJlc3MgYXMgc3RyaW5nO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gbm9vcC4gdHJ5IHRoZSBiaXRjb2luanMgbWV0aG9kXG4gIH1cblxuICByZXR1cm4gYml0Y29pbmpzLmFkZHJlc3MuZnJvbU91dHB1dFNjcmlwdChvdXRwdXRTY3JpcHQsIG5ldHdvcmsgYXMgYml0Y29pbmpzLk5ldHdvcmspO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9PdXRwdXRTY3JpcHQoYWRkcmVzczogc3RyaW5nLCBuZXR3b3JrOiBOZXR3b3JrKTogQnVmZmVyIHtcbiAgaWYgKGlzVmFsaWROZXR3b3JrKG5ldHdvcmspICYmIGlzWmNhc2gobmV0d29yaykpIHtcbiAgICByZXR1cm4gemNhc2hBZGRyZXNzLnRvT3V0cHV0U2NyaXB0KGFkZHJlc3MsIG5ldHdvcmspO1xuICB9XG4gIHJldHVybiBiaXRjb2luanMuYWRkcmVzcy50b091dHB1dFNjcmlwdChhZGRyZXNzLCBuZXR3b3JrIGFzIGJpdGNvaW5qcy5OZXR3b3JrKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvQmFzZTU4Q2hlY2soaGFzaDogQnVmZmVyLCB2ZXJzaW9uOiBudW1iZXIsIG5ldHdvcms6IE5ldHdvcmspOiBzdHJpbmcge1xuICBpZiAoaXNWYWxpZE5ldHdvcmsobmV0d29yaykgJiYgaXNaY2FzaChuZXR3b3JrKSkge1xuICAgIHJldHVybiB6Y2FzaEFkZHJlc3MudG9CYXNlNThDaGVjayhoYXNoLCB2ZXJzaW9uKTtcbiAgfVxuICByZXR1cm4gYml0Y29pbmpzLmFkZHJlc3MudG9CYXNlNThDaGVjayhoYXNoLCB2ZXJzaW9uKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21CYXNlNThDaGVjayhhZGRyZXNzOiBzdHJpbmcsIG5ldHdvcms6IE5ldHdvcmspOiBCYXNlNThDaGVja1Jlc3VsdCB7XG4gIGlmIChpc1ZhbGlkTmV0d29yayhuZXR3b3JrKSAmJiBpc1pjYXNoKG5ldHdvcmspKSB7XG4gICAgcmV0dXJuIHpjYXNoQWRkcmVzcy5mcm9tQmFzZTU4Q2hlY2soYWRkcmVzcyk7XG4gIH1cbiAgcmV0dXJuIGJpdGNvaW5qcy5hZGRyZXNzLmZyb21CYXNlNThDaGVjayhhZGRyZXNzKTtcbn1cblxuZXhwb3J0IGNvbnN0IHsgZnJvbUJlY2gzMiwgdG9CZWNoMzIgfSA9IGJpdGNvaW5qcy5hZGRyZXNzO1xuXG5leHBvcnQgeyBCYXNlNThDaGVja1Jlc3VsdCwgQmVjaDMyUmVzdWx0IH07XG4iXX0=