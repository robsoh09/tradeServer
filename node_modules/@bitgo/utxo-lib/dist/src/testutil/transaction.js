"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.constructTxnBuilder = exports.signAllTxnInputs = exports.signTxnInput = exports.getTxnSigners = exports.toTxnUnspent = exports.txnOutputScriptTypes = exports.txnInputScriptTypes = void 0;
const assert = require("assert");
const outputScripts_1 = require("../bitgo/outputScripts");
const bitgo_1 = require("../bitgo");
const mock_1 = require("./mock");
/**
 * array of supported input script types.
 */
exports.txnInputScriptTypes = ['p2sh', 'p2shP2wsh', 'p2wsh', 'p2tr', outputScripts_1.scriptTypeP2shP2pk];
/**
 * array of supported output script types.
 */
exports.txnOutputScriptTypes = outputScripts_1.scriptTypes2Of3;
/**
 * create unspent object from input script type, index, network and root wallet key.
 */
function toTxnUnspent(input, index, network, rootWalletKeys) {
    if (input.scriptType === 'p2shP2pk') {
        return (0, mock_1.mockReplayProtectionUnspent)(network, input.value, { key: rootWalletKeys['user'], vout: index });
    }
    else {
        return (0, mock_1.mockWalletUnspent)(network, input.value, {
            chain: (0, bitgo_1.getInternalChainCode)(input.scriptType),
            vout: index,
            keys: rootWalletKeys,
            index,
        });
    }
}
exports.toTxnUnspent = toTxnUnspent;
/**
 * returns signer and cosigner names for TxnInputScriptType.
 * user and undefined as signer and cosigner respectively for p2shP2pk.
 * user and bitgo as signer and cosigner respectively for other input script types.
 */
function getTxnSigners(inputType) {
    return {
        signerName: 'user',
        cosignerName: inputType === 'p2shP2pk' ? undefined : 'bitgo',
    };
}
exports.getTxnSigners = getTxnSigners;
/**
 * signs with first or second signature for single input.
 * p2shP2pk is signed only with first sign.
 */
function signTxnInput(txb, input, inputIndex, rootWalletKeys, sign, signers) {
    const { signerName, cosignerName } = signers ? signers : getTxnSigners(input.scriptType);
    const unspent = toTxnUnspent(input, inputIndex, txb.network, rootWalletKeys);
    if (sign === 'halfsigned') {
        if (input.scriptType === 'p2shP2pk') {
            (0, bitgo_1.signInputP2shP2pk)(txb, inputIndex, rootWalletKeys[signerName]);
        }
        else if ((0, bitgo_1.isWalletUnspent)(unspent) && cosignerName) {
            (0, bitgo_1.signInputWithUnspent)(txb, inputIndex, unspent, bitgo_1.WalletUnspentSigner.from(rootWalletKeys, rootWalletKeys[signerName], rootWalletKeys[cosignerName]));
        }
    }
    if ((0, bitgo_1.isWalletUnspent)(unspent) && sign === 'fullsigned' && cosignerName) {
        (0, bitgo_1.signInputWithUnspent)(txb, inputIndex, unspent, bitgo_1.WalletUnspentSigner.from(rootWalletKeys, rootWalletKeys[cosignerName], rootWalletKeys[signerName]));
    }
}
exports.signTxnInput = signTxnInput;
/**
 * signs with first or second signature for all inputs.
 * p2shP2pk is signed only with first sign.
 */
function signAllTxnInputs(txb, inputs, rootWalletKeys, sign, signers) {
    inputs.forEach((input, index) => {
        signTxnInput(txb, input, index, rootWalletKeys, sign, signers);
    });
}
exports.signAllTxnInputs = signAllTxnInputs;
/**
 * construct transaction for given inputs, outputs, network and root wallet keys.
 */
function constructTxnBuilder(inputs, outputs, network, rootWalletKeys, sign, signers) {
    const totalInputAmount = inputs.reduce((sum, input) => sum + BigInt(input.value), BigInt(0));
    const outputInputAmount = outputs.reduce((sum, output) => sum + BigInt(output.value), BigInt(0));
    assert(totalInputAmount >= outputInputAmount, 'total output can not exceed total input');
    assert(!outputs.some((o) => (o.scriptType && o.address) || (!o.scriptType && !o.address)), 'only either output script type or address should be provided');
    const txb = (0, bitgo_1.createTransactionBuilderForNetwork)(network);
    const unspents = inputs.map((input, i) => toTxnUnspent(input, i, network, rootWalletKeys));
    unspents.forEach((u, i) => {
        (0, bitgo_1.addToTransactionBuilder)(txb, u);
    });
    outputs.forEach((output, i) => {
        const address = output.scriptType
            ? (0, bitgo_1.getWalletAddress)(rootWalletKeys, output.isInternalAddress ? (0, bitgo_1.getInternalChainCode)(output.scriptType) : (0, bitgo_1.getExternalChainCode)(output.scriptType), i, network)
            : output.address;
        if (!address) {
            throw new Error('address is missing');
        }
        txb.addOutput(address, output.value);
    });
    if (sign === 'unsigned') {
        return txb;
    }
    signAllTxnInputs(txb, inputs, rootWalletKeys, 'halfsigned', signers);
    if (sign === 'fullsigned') {
        signAllTxnInputs(txb, inputs, rootWalletKeys, sign, signers);
    }
    return txb;
}
exports.constructTxnBuilder = constructTxnBuilder;
//# sourceMappingURL=data:application/json;base64,