"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteWitnessUtxoForNonSegwitInputs = exports.isPsbtLite = exports.clonePsbtWithoutNonWitnessUtxo = exports.extractP2msOnlyHalfSignedTx = exports.getSignatureValidationArrayPsbt = exports.addXpubsToPsbt = exports.isTransactionWithKeyPathSpendInput = exports.isTxInputArray = exports.isPsbtInputArray = exports.getStrictSignatureCounts = exports.getStrictSignatureCount = exports.toScriptType2Of3s = exports.parsePsbtInput = exports.getPsbtInputScriptType = exports.signWalletPsbt = exports.toWalletPsbt = void 0;
const assert = require("assert");
const utils_1 = require("bip174/src/lib/utils");
const bs58check = require("bs58check");
const UtxoPsbt_1 = require("../UtxoPsbt");
const UtxoTransaction_1 = require("../UtxoTransaction");
const outputScripts_1 = require("../outputScripts");
const WalletKeys_1 = require("./WalletKeys");
const Unspent_1 = require("../Unspent");
const transaction_1 = require("../transaction");
const Unspent_2 = require("./Unspent");
const parseInput_1 = require("../parseInput");
const Musig2_1 = require("../Musig2");
const types_1 = require("../types");
const taproot_1 = require("../../taproot");
const bitcoinjs_lib_1 = require("bitcoinjs-lib");
const index_1 = require("../../index");
const PsbtUtil_1 = require("../PsbtUtil");
function getTaprootSigners(script, walletKeys) {
    const parsedPublicKeys = (0, parseInput_1.parsePubScript2Of3)(script, 'taprootScriptPathSpend').publicKeys;
    const walletSigners = parsedPublicKeys.map((publicKey) => {
        const index = walletKeys.publicKeys.findIndex((walletPublicKey) => (0, outputScripts_1.toXOnlyPublicKey)(walletPublicKey).equals(publicKey));
        if (index >= 0) {
            return { walletKey: walletKeys.triple[index], rootKey: walletKeys.parent.triple[index] };
        }
        throw new Error('Taproot public key is not a wallet public key');
    });
    return [walletSigners[0], walletSigners[1]];
}
function updatePsbtInput(psbt, inputIndex, unspent, rootWalletKeys) {
    const input = (0, utils_1.checkForInput)(psbt.data.inputs, inputIndex);
    const signatureCount = (0, PsbtUtil_1.getPsbtInputSignatureCount)(input);
    const scriptType = (0, outputScripts_1.scriptTypeForChain)(unspent.chain);
    if (signatureCount === 0 && scriptType === 'p2tr') {
        return;
    }
    const walletKeys = rootWalletKeys.deriveForChainAndIndex(unspent.chain, unspent.index);
    if (scriptType === 'p2tr') {
        if (!Array.isArray(input.tapLeafScript) || input.tapLeafScript.length === 0) {
            throw new Error('Invalid PSBT state. Missing required fields.');
        }
        if (input.tapLeafScript.length > 1) {
            throw new Error('Bitgo only supports a single tap leaf script per input');
        }
        const [signer, cosigner] = getTaprootSigners(input.tapLeafScript[0].script, walletKeys);
        const leafHash = (0, outputScripts_1.getLeafHash)({
            publicKeys: walletKeys.publicKeys,
            signer: signer.walletKey.publicKey,
            cosigner: cosigner.walletKey.publicKey,
        });
        psbt.updateInput(inputIndex, {
            tapBip32Derivation: [signer, cosigner].map((walletSigner) => ({
                leafHashes: [leafHash],
                pubkey: (0, outputScripts_1.toXOnlyPublicKey)(walletSigner.walletKey.publicKey),
                path: rootWalletKeys.getDerivationPath(walletSigner.rootKey, unspent.chain, unspent.index),
                masterFingerprint: walletSigner.rootKey.fingerprint,
            })),
        });
    }
    else {
        if (signatureCount === 0) {
            const { witnessScript, redeemScript } = (0, outputScripts_1.createOutputScript2of3)(walletKeys.publicKeys, scriptType);
            if (witnessScript && psbt.data.inputs[inputIndex].witnessScript === undefined) {
                psbt.updateInput(inputIndex, { witnessScript });
            }
            if (redeemScript && psbt.data.inputs[inputIndex].redeemScript === undefined) {
                psbt.updateInput(inputIndex, { redeemScript });
            }
        }
        psbt.updateInput(inputIndex, {
            bip32Derivation: [0, 1, 2].map((idx) => ({
                pubkey: walletKeys.triple[idx].publicKey,
                path: walletKeys.paths[idx],
                masterFingerprint: rootWalletKeys.triple[idx].fingerprint,
            })),
        });
    }
}
/**
 * @return PSBT filled with metatdata as per input params tx, unspents and rootWalletKeys.
 * Unsigned PSBT for taproot input with witnessUtxo
 * Unsigned PSBT for other input with witnessUtxo/nonWitnessUtxo, redeemScript/witnessScript, bip32Derivation
 * Signed PSBT for taproot input with witnessUtxo, tapLeafScript, tapBip32Derivation, tapScriptSig
 * Signed PSBT for other input with witnessUtxo/nonWitnessUtxo, redeemScript/witnessScript, bip32Derivation, partialSig
 */
function toWalletPsbt(tx, unspents, rootWalletKeys) {
    const prevOutputs = unspents.map((u) => {
        assert.notStrictEqual((0, outputScripts_1.scriptTypeForChain)(u.chain), 'p2trMusig2');
        return (0, Unspent_1.toPrevOutputWithPrevTx)(u, tx.network);
    });
    const psbt = (0, transaction_1.createPsbtFromTransaction)(tx, prevOutputs);
    unspents.forEach((u, i) => {
        if ((0, Unspent_2.isWalletUnspent)(u) && u.index !== undefined) {
            updatePsbtInput(psbt, i, u, rootWalletKeys);
        }
    });
    return psbt;
}
exports.toWalletPsbt = toWalletPsbt;
/**
 * @param psbt
 * @param inputIndex
 * @param signer
 * @param unspent
 * @return signed PSBT with signer's key for unspent
 */
function signWalletPsbt(psbt, inputIndex, signer, unspent) {
    const scriptType = (0, outputScripts_1.scriptTypeForChain)(unspent.chain);
    if (scriptType === 'p2tr' || scriptType === 'p2trMusig2') {
        psbt.signTaprootInputHD(inputIndex, signer);
    }
    else {
        psbt.signInputHD(inputIndex, signer);
    }
}
exports.signWalletPsbt = signWalletPsbt;
/**
 * @returns script type of the input
 */
function getPsbtInputScriptType(input) {
    const isP2pk = (script) => {
        try {
            const chunks = bitcoinjs_lib_1.script.decompile(script);
            return ((chunks === null || chunks === void 0 ? void 0 : chunks.length) === 2 &&
                Buffer.isBuffer(chunks[0]) &&
                bitcoinjs_lib_1.script.isCanonicalPubKey(chunks[0]) &&
                chunks[1] === index_1.opcodes.OP_CHECKSIG);
        }
        catch (e) {
            return false;
        }
    };
    let scriptType;
    if (Buffer.isBuffer(input.redeemScript) && Buffer.isBuffer(input.witnessScript)) {
        scriptType = 'p2shP2wsh';
    }
    else if (Buffer.isBuffer(input.redeemScript)) {
        scriptType = isP2pk(input.redeemScript) ? 'p2shP2pk' : 'p2sh';
    }
    else if (Buffer.isBuffer(input.witnessScript)) {
        scriptType = 'p2wsh';
    }
    if (Array.isArray(input.tapLeafScript) && input.tapLeafScript.length > 0) {
        if (scriptType) {
            throw new Error(`Found both ${scriptType} and taprootScriptPath PSBT metadata.`);
        }
        if (input.tapLeafScript.length > 1) {
            throw new Error('Bitgo only supports a single tap leaf script per input.');
        }
        scriptType = 'taprootScriptPathSpend';
    }
    if (input.tapInternalKey) {
        if (scriptType) {
            throw new Error(`Found both ${scriptType} and taprootKeyPath PSBT metadata.`);
        }
        scriptType = 'taprootKeyPathSpend';
    }
    if (scriptType) {
        return scriptType;
    }
    throw new Error('could not parse input');
}
exports.getPsbtInputScriptType = getPsbtInputScriptType;
function parseTaprootKeyPathSignatures(input) {
    const partialSigs = (0, Musig2_1.parsePsbtMusig2PartialSigs)(input);
    if (!partialSigs) {
        return { signatures: undefined, participantPublicKeys: undefined };
    }
    const signatures = partialSigs.map((pSig) => pSig.partialSig);
    const participantPublicKeys = partialSigs.map((pSig) => pSig.participantPubKey);
    return (0, types_1.isTuple)(signatures) && (0, types_1.isTuple)(participantPublicKeys)
        ? { signatures, participantPublicKeys }
        : { signatures: [signatures[0]], participantPublicKeys: [participantPublicKeys[0]] };
}
function parsePartialOrTapScriptSignatures(sig) {
    if (!(sig === null || sig === void 0 ? void 0 : sig.length)) {
        return { signatures: undefined };
    }
    if (sig.length > 2) {
        throw new Error('unexpected signature count');
    }
    const signatures = sig.map((tSig) => tSig.signature);
    return (0, types_1.isTuple)(signatures) ? { signatures } : { signatures: [signatures[0]] };
}
function parseSignatures(input, scriptType) {
    return scriptType === 'taprootKeyPathSpend'
        ? parseTaprootKeyPathSignatures(input)
        : scriptType === 'taprootScriptPathSpend'
            ? parsePartialOrTapScriptSignatures(input.tapScriptSig)
            : parsePartialOrTapScriptSignatures(input.partialSig);
}
function parseScript(input, scriptType) {
    var _a;
    let pubScript;
    if (scriptType === 'p2sh' || scriptType === 'p2shP2pk') {
        pubScript = input.redeemScript;
    }
    else if (scriptType === 'p2wsh' || scriptType === 'p2shP2wsh') {
        pubScript = input.witnessScript;
    }
    else if (scriptType === 'taprootScriptPathSpend') {
        pubScript = input.tapLeafScript ? input.tapLeafScript[0].script : undefined;
    }
    else if (scriptType === 'taprootKeyPathSpend') {
        if ((_a = input.witnessUtxo) === null || _a === void 0 ? void 0 : _a.script) {
            pubScript = input.witnessUtxo.script;
        }
        else if (input.tapInternalKey && input.tapMerkleRoot) {
            pubScript = (0, taproot_1.createTaprootOutputScript)({ internalPubKey: input.tapInternalKey, taptreeRoot: input.tapMerkleRoot });
        }
    }
    if (!pubScript) {
        throw new Error(`Invalid PSBT state for ${scriptType}. Missing required fields.`);
    }
    return (0, parseInput_1.parsePubScript)(pubScript, scriptType);
}
/**
 * @return psbt metadata are parsed as per below conditions.
 * redeemScript/witnessScript/tapLeafScript matches BitGo.
 * signature and public key count matches BitGo.
 * P2SH-P2PK => scriptType, redeemScript, public key, signature.
 * P2SH => scriptType, redeemScript, public keys, signatures.
 * PW2SH => scriptType, witnessScript, public keys, signatures.
 * P2SH-PW2SH => scriptType, redeemScript, witnessScript, public keys, signatures.
 * P2TR and P2TR MUSIG2 script path => scriptType (taprootScriptPathSpend), pubScript (leaf script), controlBlock,
 * scriptPathLevel, leafVersion, public keys, signatures.
 * P2TR MUSIG2 kep path => scriptType (taprootKeyPathSpend), pubScript (scriptPubKey), participant pub keys (signer),
 * public key (tapOutputkey), signatures (partial signer sigs).
 */
function parsePsbtInput(input) {
    if ((0, PsbtUtil_1.isPsbtInputFinalized)(input)) {
        throw new Error('Finalized PSBT parsing is not supported');
    }
    const scriptType = getPsbtInputScriptType(input);
    const parsedPubScript = parseScript(input, scriptType);
    const signatures = parseSignatures(input, scriptType);
    if (parsedPubScript.scriptType === 'taprootKeyPathSpend' && 'participantPublicKeys' in signatures) {
        return {
            ...parsedPubScript,
            ...signatures,
        };
    }
    if (parsedPubScript.scriptType === 'taprootScriptPathSpend') {
        if (!input.tapLeafScript) {
            throw new Error('Invalid PSBT state for taprootScriptPathSpend. Missing required fields.');
        }
        const controlBlock = input.tapLeafScript[0].controlBlock;
        if (!(0, parseInput_1.isValidControlBock)(controlBlock)) {
            throw new Error('Invalid PSBT taprootScriptPathSpend controlBlock.');
        }
        const scriptPathLevel = (0, parseInput_1.calculateScriptPathLevel)(controlBlock);
        const leafVersion = (0, parseInput_1.getLeafVersion)(controlBlock);
        return {
            ...parsedPubScript,
            ...signatures,
            controlBlock,
            scriptPathLevel,
            leafVersion,
        };
    }
    if (parsedPubScript.scriptType === 'p2sh' ||
        parsedPubScript.scriptType === 'p2wsh' ||
        parsedPubScript.scriptType === 'p2shP2wsh') {
        if (parsedPubScript.scriptType === 'p2shP2wsh') {
            parsedPubScript.redeemScript = input.redeemScript;
        }
        return {
            ...parsedPubScript,
            ...signatures,
        };
    }
    if (parsedPubScript.scriptType === 'p2shP2pk' && (!signatures.signatures || !(0, types_1.isTuple)(signatures.signatures))) {
        return {
            ...parsedPubScript,
            signatures: signatures.signatures,
        };
    }
    throw new Error('invalid pub script');
}
exports.parsePsbtInput = parsePsbtInput;
/**
 * Converts a parsed script type into an array of script types.
 * @param parsedScriptType - The parsed script type.
 * @returns An array of ScriptType2Of3 values corresponding to the parsed script type.
 */
function toScriptType2Of3s(parsedScriptType) {
    return parsedScriptType === 'taprootScriptPathSpend'
        ? ['p2trMusig2', 'p2tr']
        : parsedScriptType === 'taprootKeyPathSpend'
            ? ['p2trMusig2']
            : [parsedScriptType];
}
exports.toScriptType2Of3s = toScriptType2Of3s;
/**
 * @returns strictly parse the input and get signature count.
 * unsigned(0), half-signed(1) or fully-signed(2)
 */
function getStrictSignatureCount(input) {
    var _a, _b;
    const calculateSignatureCount = (signatures) => {
        const count = signatures ? signatures.filter((s) => !(0, parseInput_1.isPlaceholderSignature)(s)).length : 0;
        if (count === 0 || count === 1 || count === 2) {
            return count;
        }
        throw new Error('invalid signature count');
    };
    if ('hash' in input) {
        if (((_a = input.script) === null || _a === void 0 ? void 0 : _a.length) || ((_b = input.witness) === null || _b === void 0 ? void 0 : _b.length)) {
            const parsedInput = (0, parseInput_1.parseSignatureScript)(input);
            return parsedInput.scriptType === 'taprootKeyPathSpend' ? 2 : calculateSignatureCount(parsedInput.signatures);
        }
        return 0;
    }
    else {
        return calculateSignatureCount(parsePsbtInput(input).signatures);
    }
}
exports.getStrictSignatureCount = getStrictSignatureCount;
/**
 * @returns strictly parse input and get signature count for all inputs.
 * 0=unsigned, 1=half-signed or 2=fully-signed
 */
function getStrictSignatureCounts(tx) {
    const inputs = tx instanceof UtxoPsbt_1.UtxoPsbt ? tx.data.inputs : tx instanceof UtxoTransaction_1.UtxoTransaction ? tx.ins : tx;
    return inputs.map((input, _) => getStrictSignatureCount(input));
}
exports.getStrictSignatureCounts = getStrictSignatureCounts;
/**
 * @return true iff inputs array is of PsbtInputType type
 * */
function isPsbtInputArray(inputs) {
    return !isTxInputArray(inputs);
}
exports.isPsbtInputArray = isPsbtInputArray;
/**
 * @return true iff inputs array is of TxInput type
 * */
function isTxInputArray(inputs) {
    assert(!!inputs.length, 'empty inputs array');
    return 'hash' in inputs[0];
}
exports.isTxInputArray = isTxInputArray;
/**
 * @returns true iff given psbt/transaction/tx-input-array/psbt-input-array contains at least one taproot key path spend input
 */
function isTransactionWithKeyPathSpendInput(data) {
    const inputs = data instanceof UtxoPsbt_1.UtxoPsbt ? data.data.inputs : data instanceof UtxoTransaction_1.UtxoTransaction ? data.ins : data;
    if (!inputs.length) {
        return false;
    }
    if (isPsbtInputArray(inputs)) {
        return inputs.some((input, _) => getPsbtInputScriptType(input) === 'taprootKeyPathSpend');
    }
    return inputs.some((input, _) => {
        // If the input is not signed, it cannot be a taprootKeyPathSpend input because you can only
        // extract a fully signed psbt into a transaction with taprootKeyPathSpend inputs.
        if (getStrictSignatureCount(input) === 0) {
            return false;
        }
        return (0, parseInput_1.parseSignatureScript)(input).scriptType === 'taprootKeyPathSpend';
    });
}
exports.isTransactionWithKeyPathSpendInput = isTransactionWithKeyPathSpendInput;
/**
 * Set the RootWalletKeys as the globalXpubs on the psbt
 *
 * We do all the matching of the (tap)bip32Derivations masterFingerprint to the fingerprint of the
 * extendedPubkey.
 */
function addXpubsToPsbt(psbt, rootWalletKeys) {
    const safeRootWalletKeys = new WalletKeys_1.RootWalletKeys(rootWalletKeys.triple.map((bip32) => bip32.neutered()), rootWalletKeys.derivationPrefixes);
    const xPubs = safeRootWalletKeys.triple.map((bip32) => ({
        extendedPubkey: bs58check.decode(bip32.toBase58()),
        masterFingerprint: bip32.fingerprint,
        // TODO: BG-73797 - bip174 currently requires m prefix for this to be a valid globalXpub
        path: 'm',
    }));
    psbt.updateGlobal({ globalXpub: xPubs });
}
exports.addXpubsToPsbt = addXpubsToPsbt;
/**
 * validates signatures for each 2 of 3 input against user, backup, bitgo keys derived from rootWalletKeys.
 * @returns array of input index and its [is valid user sig exist, is valid backup sig exist, is valid user bitgo exist]
 * For p2shP2pk input, [false, false, false] is returned since it is not a 2 of 3 sig input.
 */
function getSignatureValidationArrayPsbt(psbt, rootWalletKeys) {
    return psbt.data.inputs.map((input, i) => {
        const sigValArrayForInput = getPsbtInputScriptType(input) === 'p2shP2pk'
            ? [false, false, false]
            : psbt.getSignatureValidationArray(i, { rootNodes: rootWalletKeys.triple });
        return [i, sigValArrayForInput];
    });
}
exports.getSignatureValidationArrayPsbt = getSignatureValidationArrayPsbt;
/**
 * Extracts the half signed transaction from the psbt for p2ms based script types - p2sh, p2wsh, and p2shP2wsh.
 * The purpose is to provide backward compatibility to keyternal (KRS) that only supports network transaction and p2ms script types.
 */
function extractP2msOnlyHalfSignedTx(psbt) {
    assert(!!(psbt.data.inputs.length && psbt.data.outputs.length), 'empty inputs or outputs');
    const tx = psbt.getUnsignedTx();
    function isP2msParsedPsbtInput(parsed) {
        return ['p2sh', 'p2shP2wsh', 'p2wsh'].includes(parsed.scriptType);
    }
    psbt.data.inputs.forEach((input, i) => {
        var _a, _b;
        const parsed = parsePsbtInput(input);
        assert(isP2msParsedPsbtInput(parsed), `unsupported script type ${parsed.scriptType}`);
        assert(((_a = input.partialSig) === null || _a === void 0 ? void 0 : _a.length) === 1, `unexpected signature count ${(_b = input.partialSig) === null || _b === void 0 ? void 0 : _b.length}`);
        const [partialSig] = input.partialSig;
        assert(input.sighashType !== undefined && input.sighashType === bitcoinjs_lib_1.script.signature.decode(partialSig.signature).hashType, 'signature sighash does not match input sighash type');
        // type casting is to address the invalid type checking in payments.p2ms
        const signatures = parsed.publicKeys.map((pk) => partialSig.pubkey.equals(pk) ? partialSig.signature : bitcoinjs_lib_1.opcodes.OP_0);
        const isP2SH = !!parsed.redeemScript;
        const isP2WSH = !!parsed.witnessScript;
        const payment = index_1.payments.p2ms({ output: parsed.pubScript, signatures }, { validate: false, allowIncomplete: true });
        const p2wsh = isP2WSH ? index_1.payments.p2wsh({ redeem: payment }) : undefined;
        const p2sh = isP2SH ? index_1.payments.p2sh({ redeem: p2wsh || payment }) : undefined;
        if (p2sh === null || p2sh === void 0 ? void 0 : p2sh.input) {
            tx.setInputScript(i, p2sh.input);
        }
        if (p2wsh === null || p2wsh === void 0 ? void 0 : p2wsh.witness) {
            tx.setWitness(i, p2wsh.witness);
        }
    });
    return tx;
}
exports.extractP2msOnlyHalfSignedTx = extractP2msOnlyHalfSignedTx;
/**
 * Clones the psbt without nonWitnessUtxo for non-segwit inputs and witnessUtxo is added instead.
 * It is not BIP-174 compliant, so use it carefully.
 */
function clonePsbtWithoutNonWitnessUtxo(psbt) {
    const newPsbt = (0, transaction_1.createPsbtFromHex)(psbt.toHex(), psbt.network);
    const txInputs = psbt.txInputs;
    psbt.data.inputs.forEach((input, i) => {
        if (input.nonWitnessUtxo && !input.witnessUtxo) {
            const tx = (0, transaction_1.createTransactionFromBuffer)(input.nonWitnessUtxo, psbt.network, { amountType: 'bigint' });
            if (!txInputs[i].hash.equals(tx.getHash())) {
                throw new Error(`Non-witness UTXO hash for input #${i} doesn't match the hash specified in the prevout`);
            }
            newPsbt.data.inputs[i].witnessUtxo = tx.outs[txInputs[i].index];
        }
        delete newPsbt.data.inputs[i].nonWitnessUtxo;
    });
    return newPsbt;
}
exports.clonePsbtWithoutNonWitnessUtxo = clonePsbtWithoutNonWitnessUtxo;
/**
 * Returns true if there are non-segwit inputs in the PSBT that do not contain the
 * nonWitnessUtxo.
 *
 * isPsbtLite(clonePsbtWithoutNonWitnessUtxo(psbt)) === true
 *
 * @param psbt
 */
function isPsbtLite(psbt) {
    let isFull = true;
    const nonSegwitInputTypes = ['p2shP2pk', 'p2sh'];
    psbt.data.inputs.forEach((input) => {
        if (isFull && nonSegwitInputTypes.includes(getPsbtInputScriptType(input))) {
            isFull = !!input.nonWitnessUtxo;
        }
    });
    return !isFull;
}
exports.isPsbtLite = isPsbtLite;
/**
 * Deletes witnessUtxo for non-segwit inputs to make the PSBT BIP-174 compliant.
 */
function deleteWitnessUtxoForNonSegwitInputs(psbt) {
    psbt.data.inputs.forEach((input, i) => {
        const scriptType = getPsbtInputScriptType(input);
        if (scriptType === 'p2sh' || scriptType === 'p2shP2pk') {
            delete input.witnessUtxo;
        }
    });
}
exports.deleteWitnessUtxoForNonSegwitInputs = deleteWitnessUtxoForNonSegwitInputs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHNidC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9iaXRnby93YWxsZXQvUHNidC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpQ0FBaUM7QUFHakMsZ0RBQXFEO0FBRXJELHVDQUF1QztBQUN2QywwQ0FBdUM7QUFDdkMsd0RBQXFEO0FBQ3JELG9EQU0wQjtBQUMxQiw2Q0FBaUU7QUFDakUsd0NBQW9EO0FBQ3BELGdEQUEyRztBQUMzRyx1Q0FBMkQ7QUFFM0QsOENBZXVCO0FBQ3ZCLHNDQUF1RDtBQUN2RCxvQ0FBMkM7QUFDM0MsMkNBQTBEO0FBQzFELGlEQUEyRTtBQUMzRSx1Q0FBZ0Q7QUFDaEQsMENBQStFO0FBcUUvRSxTQUFTLGlCQUFpQixDQUFDLE1BQWMsRUFBRSxVQUE2QjtJQUN0RSxNQUFNLGdCQUFnQixHQUFHLElBQUEsK0JBQWtCLEVBQUMsTUFBTSxFQUFFLHdCQUF3QixDQUFDLENBQUMsVUFBVSxDQUFDO0lBQ3pGLE1BQU0sYUFBYSxHQUFHLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFO1FBQ3ZELE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FDaEUsSUFBQSxnQ0FBZ0IsRUFBQyxlQUFlLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQ3BELENBQUM7UUFDRixJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUU7WUFDZCxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7U0FDMUY7UUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLCtDQUErQyxDQUFDLENBQUM7SUFDbkUsQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLENBQUMsYUFB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Q0FBQztTQUNqQztJQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUNqQixDQUFDO0FBVEQsZ0NBU0M7QUFFRDs7R0FFRztBQUNILFNBQWdCLG1DQUFtQyxDQUFDLElBQWM7SUFDaEUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3BDLE1BQU0sVUFBVSxHQUFHLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pELElBQUksVUFBVSxLQUFLLE1BQU0sSUFBSSxVQUFVLEtBQUssVUFBVSxFQUFFO1lBQ3RELE9BQU8sS0FBSyxDQUFDLFdBQVcsQ0FBQztTQUMxQjtJQUNILENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQVBELGtGQU9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5cbmltcG9ydCB7IEdsb2JhbFhwdWIsIFBhcnRpYWxTaWcsIFBzYnRJbnB1dCwgVGFwU2NyaXB0U2lnIH0gZnJvbSAnYmlwMTc0L3NyYy9saWIvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBjaGVja0ZvcklucHV0IH0gZnJvbSAnYmlwMTc0L3NyYy9saWIvdXRpbHMnO1xuaW1wb3J0IHsgQklQMzJJbnRlcmZhY2UgfSBmcm9tICdiaXAzMic7XG5pbXBvcnQgKiBhcyBiczU4Y2hlY2sgZnJvbSAnYnM1OGNoZWNrJztcbmltcG9ydCB7IFV0eG9Qc2J0IH0gZnJvbSAnLi4vVXR4b1BzYnQnO1xuaW1wb3J0IHsgVXR4b1RyYW5zYWN0aW9uIH0gZnJvbSAnLi4vVXR4b1RyYW5zYWN0aW9uJztcbmltcG9ydCB7XG4gIGNyZWF0ZU91dHB1dFNjcmlwdDJvZjMsXG4gIGdldExlYWZIYXNoLFxuICBTY3JpcHRUeXBlMk9mMyxcbiAgc2NyaXB0VHlwZUZvckNoYWluLFxuICB0b1hPbmx5UHVibGljS2V5LFxufSBmcm9tICcuLi9vdXRwdXRTY3JpcHRzJztcbmltcG9ydCB7IERlcml2ZWRXYWxsZXRLZXlzLCBSb290V2FsbGV0S2V5cyB9IGZyb20gJy4vV2FsbGV0S2V5cyc7XG5pbXBvcnQgeyB0b1ByZXZPdXRwdXRXaXRoUHJldlR4IH0gZnJvbSAnLi4vVW5zcGVudCc7XG5pbXBvcnQgeyBjcmVhdGVQc2J0RnJvbUhleCwgY3JlYXRlUHNidEZyb21UcmFuc2FjdGlvbiwgY3JlYXRlVHJhbnNhY3Rpb25Gcm9tQnVmZmVyIH0gZnJvbSAnLi4vdHJhbnNhY3Rpb24nO1xuaW1wb3J0IHsgaXNXYWxsZXRVbnNwZW50LCBXYWxsZXRVbnNwZW50IH0gZnJvbSAnLi9VbnNwZW50JztcblxuaW1wb3J0IHtcbiAgZ2V0TGVhZlZlcnNpb24sXG4gIGNhbGN1bGF0ZVNjcmlwdFBhdGhMZXZlbCxcbiAgaXNWYWxpZENvbnRyb2xCb2NrLFxuICBQYXJzZWRQdWJTY3JpcHRQMm1zLFxuICBQYXJzZWRQdWJTY3JpcHRUYXByb290U2NyaXB0UGF0aCxcbiAgcGFyc2VQdWJTY3JpcHQyT2YzLFxuICBQYXJzZWRQdWJTY3JpcHRUYXByb290LFxuICBQYXJzZWRQdWJTY3JpcHRUYXByb290S2V5UGF0aCxcbiAgcGFyc2VQdWJTY3JpcHQsXG4gIFBhcnNlZFB1YlNjcmlwdFAyc2hQMnBrLFxuICBQYXJzZWRTY3JpcHRUeXBlLFxuICBpc1BsYWNlaG9sZGVyU2lnbmF0dXJlLFxuICBwYXJzZVNpZ25hdHVyZVNjcmlwdCxcbiAgUGFyc2VkU2NyaXB0VHlwZTJPZjMsXG59IGZyb20gJy4uL3BhcnNlSW5wdXQnO1xuaW1wb3J0IHsgcGFyc2VQc2J0TXVzaWcyUGFydGlhbFNpZ3MgfSBmcm9tICcuLi9NdXNpZzInO1xuaW1wb3J0IHsgaXNUdXBsZSwgVHJpcGxlIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlVGFwcm9vdE91dHB1dFNjcmlwdCB9IGZyb20gJy4uLy4uL3RhcHJvb3QnO1xuaW1wb3J0IHsgb3Bjb2RlcyBhcyBvcHMsIHNjcmlwdCBhcyBic2NyaXB0LCBUeElucHV0IH0gZnJvbSAnYml0Y29pbmpzLWxpYic7XG5pbXBvcnQgeyBvcGNvZGVzLCBwYXltZW50cyB9IGZyb20gJy4uLy4uL2luZGV4JztcbmltcG9ydCB7IGdldFBzYnRJbnB1dFNpZ25hdHVyZUNvdW50LCBpc1BzYnRJbnB1dEZpbmFsaXplZCB9IGZyb20gJy4uL1BzYnRVdGlsJztcblxuLy8gb25seSB1c2VkIGZvciBidWlsZGluZyBgU2lnbmF0dXJlQ29udGFpbmVyYFxudHlwZSBCYXNlU2lnbmF0dXJlQ29udGFpbmVyPFQ+ID0ge1xuICBzaWduYXR1cmVzOiBUO1xufTtcblxudHlwZSBVbnNpZ25lZFNpZ25hdHVyZUNvbnRhaW5lciA9IEJhc2VTaWduYXR1cmVDb250YWluZXI8dW5kZWZpbmVkPjtcbnR5cGUgSGFsZlNpZ25lZFNpZ25hdHVyZUNvbnRhaW5lciA9IEJhc2VTaWduYXR1cmVDb250YWluZXI8W0J1ZmZlcl0+O1xudHlwZSBGdWxsU2lnbmVkU2lnbmF0dXJlQ29udGFpbmVyID0gQmFzZVNpZ25hdHVyZUNvbnRhaW5lcjxbQnVmZmVyLCBCdWZmZXJdPjtcblxudHlwZSBTaWduYXR1cmVDb250YWluZXIgPSBVbnNpZ25lZFNpZ25hdHVyZUNvbnRhaW5lciB8IEhhbGZTaWduZWRTaWduYXR1cmVDb250YWluZXIgfCBGdWxsU2lnbmVkU2lnbmF0dXJlQ29udGFpbmVyO1xuXG4vKipcbiAqIENvbnRlbnRzIG9mIGEgcHJlLWZpbmFsaXplZCBQU0JUIElucHV0IGZvciBwMnRyTXVzaWcyIGtleSBwYXRoIGluIHRoZSBub24tZmluYWxpemVkIHN0YXRlLlxuICogVCBpcyBbQnVmZmVyXSBmb3IgZmlyc3Qgc2lnbmF0dXJlLCBbQnVmZmVyLCBCdWZmZXJdIGZvciBib3RoIHNpZ25hdHVyZXMgYW5kIGB1bmRlZmluZWRgIGZvciBubyBzaWduYXR1cmVzLlxuICovXG50eXBlIEJhc2VUYXByb290S2V5UGF0aFNpZ25hdHVyZUNvbnRhaW5lcjxUPiA9IHtcbiAgc2lnbmF0dXJlczogVDtcbiAgLyoqIE9ubHkgY29udGFpbnMgcGFydGljaXBhbnRzIHRoYXQgaGF2ZSBhZGRlZCBhIHNpZ25hdHVyZSAqL1xuICBwYXJ0aWNpcGFudFB1YmxpY0tleXM6IFQ7XG59O1xuXG50eXBlIFVuc2lnbmVkVGFwcm9vdEtleVBhdGhTaWduYXR1cmVDb250YWluZXIgPSBCYXNlVGFwcm9vdEtleVBhdGhTaWduYXR1cmVDb250YWluZXI8dW5kZWZpbmVkPjtcbnR5cGUgSGFsZlNpZ25lZFRhcHJvb3RLZXlQYXRoU2lnbmF0dXJlQ29udGFpbmVyID0gQmFzZVRhcHJvb3RLZXlQYXRoU2lnbmF0dXJlQ29udGFpbmVyPFtCdWZmZXJdPjtcbnR5cGUgRnVsbFNpZ25lZFRhcHJvb3RLZXlQYXRoU2lnbmF0dXJlQ29udGFpbmVyID0gQmFzZVRhcHJvb3RLZXlQYXRoU2lnbmF0dXJlQ29udGFpbmVyPFtCdWZmZXIsIEJ1ZmZlcl0+O1xuXG50eXBlIFRhcHJvb3RLZXlQYXRoU2lnbmF0dXJlQ29udGFpbmVyID1cbiAgfCBVbnNpZ25lZFRhcHJvb3RLZXlQYXRoU2lnbmF0dXJlQ29udGFpbmVyXG4gIHwgSGFsZlNpZ25lZFRhcHJvb3RLZXlQYXRoU2lnbmF0dXJlQ29udGFpbmVyXG4gIHwgRnVsbFNpZ25lZFRhcHJvb3RLZXlQYXRoU2lnbmF0dXJlQ29udGFpbmVyO1xuXG4vKipcbiAqIFRvIGhvbGQgcGFyc2VkIHBzYnQgZGF0YSBmb3IgcDJtcyBiYXNlZCBzY3JpcHQgdHlwZXMgLSBwMnNoLCBwMndzaCwgYW5kIHAyc2hQMndzaFxuICovXG5leHBvcnQgdHlwZSBQYXJzZWRQc2J0UDJtcyA9IFBhcnNlZFB1YlNjcmlwdFAybXMgJiBTaWduYXR1cmVDb250YWluZXI7XG5cbi8qKlxuICogVG8gaG9sZCBwYXJzZWQgcHNidCBkYXRhIGZvciBUYXByb290S2V5UGF0aFNwZW5kIHNjcmlwdCB0eXBlLlxuICovXG5leHBvcnQgdHlwZSBQYXJzZWRQc2J0VGFwcm9vdEtleVBhdGggPSBQYXJzZWRQdWJTY3JpcHRUYXByb290S2V5UGF0aCAmIFRhcHJvb3RLZXlQYXRoU2lnbmF0dXJlQ29udGFpbmVyO1xuXG4vKipcbiAqIFRvIGhvbGQgcGFyc2VkIHBzYnQgZGF0YSBmb3IgVGFwcm9vdFNjcmlwdFBhdGhTcGVuZCBzY3JpcHQgcGF0aCBzY3JpcHQgdHlwZS5cbiAqL1xuZXhwb3J0IHR5cGUgUGFyc2VkUHNidFRhcHJvb3RTY3JpcHRQYXRoID0gUGFyc2VkUHViU2NyaXB0VGFwcm9vdFNjcmlwdFBhdGggJlxuICBTaWduYXR1cmVDb250YWluZXIgJiB7XG4gICAgY29udHJvbEJsb2NrOiBCdWZmZXI7XG4gICAgbGVhZlZlcnNpb246IG51bWJlcjtcbiAgICAvKiogSW5kaWNhdGVzIHRoZSBsZXZlbCBpbnNpZGUgdGhlIHRhcHRyZWUuICovXG4gICAgc2NyaXB0UGF0aExldmVsOiBudW1iZXI7XG4gIH07XG5cbmV4cG9ydCB0eXBlIFBhcnNlZFBzYnRUYXByb290ID0gUGFyc2VkUHNidFRhcHJvb3RLZXlQYXRoIHwgUGFyc2VkUHNidFRhcHJvb3RTY3JpcHRQYXRoO1xuXG50eXBlIFAyc2hQMnBrU2lnbmF0dXJlQ29udGFpbmVyID0gVW5zaWduZWRTaWduYXR1cmVDb250YWluZXIgfCBIYWxmU2lnbmVkU2lnbmF0dXJlQ29udGFpbmVyO1xuXG5leHBvcnQgdHlwZSBQYXJzZWRQc2J0UDJzaFAycGsgPSBQYXJzZWRQdWJTY3JpcHRQMnNoUDJwayAmIFAyc2hQMnBrU2lnbmF0dXJlQ29udGFpbmVyO1xuXG5pbnRlcmZhY2UgV2FsbGV0U2lnbmVyIHtcbiAgd2FsbGV0S2V5OiBCSVAzMkludGVyZmFjZTtcbiAgcm9vdEtleTogQklQMzJJbnRlcmZhY2U7XG59XG5cbi8qKlxuICogcHNidCBpbnB1dCBpbmRleCBhbmQgaXRzIHVzZXIsIGJhY2t1cCwgYml0Z28gc2lnbmF0dXJlcyBzdGF0dXNcbiAqL1xuZXhwb3J0IHR5cGUgU2lnbmF0dXJlVmFsaWRhdGlvbiA9IFtpbmRleDogbnVtYmVyLCBzaWdUcmlwbGU6IFRyaXBsZTxib29sZWFuPl07XG5cbmZ1bmN0aW9uIGdldFRhcHJvb3RTaWduZXJzKHNjcmlwdDogQnVmZmVyLCB3YWxsZXRLZXlzOiBEZXJpdmVkV2FsbGV0S2V5cyk6IFtXYWxsZXRTaWduZXIsIFdhbGxldFNpZ25lcl0ge1xuICBjb25zdCBwYXJzZWRQdWJsaWNLZXlzID0gcGFyc2VQdWJTY3JpcHQyT2YzKHNjcmlwdCwgJ3RhcHJvb3RTY3JpcHRQYXRoU3BlbmQnKS5wdWJsaWNLZXlzO1xuICBjb25zdCB3YWxsZXRTaWduZXJzID0gcGFyc2VkUHVibGljS2V5cy5tYXAoKHB1YmxpY0tleSkgPT4ge1xuICAgIGNvbnN0IGluZGV4ID0gd2FsbGV0S2V5cy5wdWJsaWNLZXlzLmZpbmRJbmRleCgod2FsbGV0UHVibGljS2V5KSA9PlxuICAgICAgdG9YT25seVB1YmxpY0tleSh3YWxsZXRQdWJsaWNLZXkpLmVxdWFscyhwdWJsaWNLZXkpXG4gICAgKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgcmV0dXJuIHsgd2FsbGV0S2V5OiB3YWxsZXRLZXlzLnRyaXBsZVtpbmRleF0sIHJvb3RLZXk6IHdhbGxldEtleXMucGFyZW50LnRyaXBsZVtpbmRleF0gfTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUYXByb290IHB1YmxpYyBrZXkgaXMgbm90IGEgd2FsbGV0IHB1YmxpYyBrZXknKTtcbiAgfSk7XG4gIHJldHVybiBbd2FsbGV0U2lnbmVyc1swXSwgd2FsbGV0U2lnbmVyc1sxXV07XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVBzYnRJbnB1dChcbiAgcHNidDogVXR4b1BzYnQsXG4gIGlucHV0SW5kZXg6IG51bWJlcixcbiAgdW5zcGVudDogV2FsbGV0VW5zcGVudDxiaWdpbnQ+LFxuICByb290V2FsbGV0S2V5czogUm9vdFdhbGxldEtleXNcbik6IHZvaWQge1xuICBjb25zdCBpbnB1dCA9IGNoZWNrRm9ySW5wdXQocHNidC5kYXRhLmlucHV0cywgaW5wdXRJbmRleCk7XG4gIGNvbnN0IHNpZ25hdHVyZUNvdW50ID0gZ2V0UHNidElucHV0U2lnbmF0dXJlQ291bnQoaW5wdXQpO1xuICBjb25zdCBzY3JpcHRUeXBlID0gc2NyaXB0VHlwZUZvckNoYWluKHVuc3BlbnQuY2hhaW4pO1xuICBpZiAoc2lnbmF0dXJlQ291bnQgPT09IDAgJiYgc2NyaXB0VHlwZSA9PT0gJ3AydHInKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHdhbGxldEtleXMgPSByb290V2FsbGV0S2V5cy5kZXJpdmVGb3JDaGFpbkFuZEluZGV4KHVuc3BlbnQuY2hhaW4sIHVuc3BlbnQuaW5kZXgpO1xuXG4gIGlmIChzY3JpcHRUeXBlID09PSAncDJ0cicpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQudGFwTGVhZlNjcmlwdCkgfHwgaW5wdXQudGFwTGVhZlNjcmlwdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBQU0JUIHN0YXRlLiBNaXNzaW5nIHJlcXVpcmVkIGZpZWxkcy4nKTtcbiAgICB9XG5cbiAgICBpZiAoaW5wdXQudGFwTGVhZlNjcmlwdC5sZW5ndGggPiAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JpdGdvIG9ubHkgc3VwcG9ydHMgYSBzaW5nbGUgdGFwIGxlYWYgc2NyaXB0IHBlciBpbnB1dCcpO1xuICAgIH1cblxuICAgIGNvbnN0IFtzaWduZXIsIGNvc2lnbmVyXSA9IGdldFRhcHJvb3RTaWduZXJzKGlucHV0LnRhcExlYWZTY3JpcHRbMF0uc2NyaXB0LCB3YWxsZXRLZXlzKTtcblxuICAgIGNvbnN0IGxlYWZIYXNoID0gZ2V0TGVhZkhhc2goe1xuICAgICAgcHVibGljS2V5czogd2FsbGV0S2V5cy5wdWJsaWNLZXlzLFxuICAgICAgc2lnbmVyOiBzaWduZXIud2FsbGV0S2V5LnB1YmxpY0tleSxcbiAgICAgIGNvc2lnbmVyOiBjb3NpZ25lci53YWxsZXRLZXkucHVibGljS2V5LFxuICAgIH0pO1xuXG4gICAgcHNidC51cGRhdGVJbnB1dChpbnB1dEluZGV4LCB7XG4gICAgICB0YXBCaXAzMkRlcml2YXRpb246IFtzaWduZXIsIGNvc2lnbmVyXS5tYXAoKHdhbGxldFNpZ25lcikgPT4gKHtcbiAgICAgICAgbGVhZkhhc2hlczogW2xlYWZIYXNoXSxcbiAgICAgICAgcHVia2V5OiB0b1hPbmx5UHVibGljS2V5KHdhbGxldFNpZ25lci53YWxsZXRLZXkucHVibGljS2V5KSxcbiAgICAgICAgcGF0aDogcm9vdFdhbGxldEtleXMuZ2V0RGVyaXZhdGlvblBhdGgod2FsbGV0U2lnbmVyLnJvb3RLZXksIHVuc3BlbnQuY2hhaW4sIHVuc3BlbnQuaW5kZXgpLFxuICAgICAgICBtYXN0ZXJGaW5nZXJwcmludDogd2FsbGV0U2lnbmVyLnJvb3RLZXkuZmluZ2VycHJpbnQsXG4gICAgICB9KSksXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHNpZ25hdHVyZUNvdW50ID09PSAwKSB7XG4gICAgICBjb25zdCB7IHdpdG5lc3NTY3JpcHQsIHJlZGVlbVNjcmlwdCB9ID0gY3JlYXRlT3V0cHV0U2NyaXB0Mm9mMyh3YWxsZXRLZXlzLnB1YmxpY0tleXMsIHNjcmlwdFR5cGUpO1xuICAgICAgaWYgKHdpdG5lc3NTY3JpcHQgJiYgcHNidC5kYXRhLmlucHV0c1tpbnB1dEluZGV4XS53aXRuZXNzU2NyaXB0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHNidC51cGRhdGVJbnB1dChpbnB1dEluZGV4LCB7IHdpdG5lc3NTY3JpcHQgfSk7XG4gICAgICB9XG4gICAgICBpZiAocmVkZWVtU2NyaXB0ICYmIHBzYnQuZGF0YS5pbnB1dHNbaW5wdXRJbmRleF0ucmVkZWVtU2NyaXB0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHNidC51cGRhdGVJbnB1dChpbnB1dEluZGV4LCB7IHJlZGVlbVNjcmlwdCB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwc2J0LnVwZGF0ZUlucHV0KGlucHV0SW5kZXgsIHtcbiAgICAgIGJpcDMyRGVyaXZhdGlvbjogWzAsIDEsIDJdLm1hcCgoaWR4KSA9PiAoe1xuICAgICAgICBwdWJrZXk6IHdhbGxldEtleXMudHJpcGxlW2lkeF0ucHVibGljS2V5LFxuICAgICAgICBwYXRoOiB3YWxsZXRLZXlzLnBhdGhzW2lkeF0sXG4gICAgICAgIG1hc3RlckZpbmdlcnByaW50OiByb290V2FsbGV0S2V5cy50cmlwbGVbaWR4XS5maW5nZXJwcmludCxcbiAgICAgIH0pKSxcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIEByZXR1cm4gUFNCVCBmaWxsZWQgd2l0aCBtZXRhdGRhdGEgYXMgcGVyIGlucHV0IHBhcmFtcyB0eCwgdW5zcGVudHMgYW5kIHJvb3RXYWxsZXRLZXlzLlxuICogVW5zaWduZWQgUFNCVCBmb3IgdGFwcm9vdCBpbnB1dCB3aXRoIHdpdG5lc3NVdHhvXG4gKiBVbnNpZ25lZCBQU0JUIGZvciBvdGhlciBpbnB1dCB3aXRoIHdpdG5lc3NVdHhvL25vbldpdG5lc3NVdHhvLCByZWRlZW1TY3JpcHQvd2l0bmVzc1NjcmlwdCwgYmlwMzJEZXJpdmF0aW9uXG4gKiBTaWduZWQgUFNCVCBmb3IgdGFwcm9vdCBpbnB1dCB3aXRoIHdpdG5lc3NVdHhvLCB0YXBMZWFmU2NyaXB0LCB0YXBCaXAzMkRlcml2YXRpb24sIHRhcFNjcmlwdFNpZ1xuICogU2lnbmVkIFBTQlQgZm9yIG90aGVyIGlucHV0IHdpdGggd2l0bmVzc1V0eG8vbm9uV2l0bmVzc1V0eG8sIHJlZGVlbVNjcmlwdC93aXRuZXNzU2NyaXB0LCBiaXAzMkRlcml2YXRpb24sIHBhcnRpYWxTaWdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvV2FsbGV0UHNidChcbiAgdHg6IFV0eG9UcmFuc2FjdGlvbjxiaWdpbnQ+LFxuICB1bnNwZW50czogV2FsbGV0VW5zcGVudDxiaWdpbnQ+W10sXG4gIHJvb3RXYWxsZXRLZXlzOiBSb290V2FsbGV0S2V5c1xuKTogVXR4b1BzYnQge1xuICBjb25zdCBwcmV2T3V0cHV0cyA9IHVuc3BlbnRzLm1hcCgodSkgPT4ge1xuICAgIGFzc2VydC5ub3RTdHJpY3RFcXVhbChzY3JpcHRUeXBlRm9yQ2hhaW4odS5jaGFpbiksICdwMnRyTXVzaWcyJyk7XG4gICAgcmV0dXJuIHRvUHJldk91dHB1dFdpdGhQcmV2VHgodSwgdHgubmV0d29yayk7XG4gIH0pO1xuICBjb25zdCBwc2J0ID0gY3JlYXRlUHNidEZyb21UcmFuc2FjdGlvbih0eCwgcHJldk91dHB1dHMpO1xuICB1bnNwZW50cy5mb3JFYWNoKCh1LCBpKSA9PiB7XG4gICAgaWYgKGlzV2FsbGV0VW5zcGVudCh1KSAmJiB1LmluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHVwZGF0ZVBzYnRJbnB1dChwc2J0LCBpLCB1LCByb290V2FsbGV0S2V5cyk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHBzYnQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHBzYnRcbiAqIEBwYXJhbSBpbnB1dEluZGV4XG4gKiBAcGFyYW0gc2lnbmVyXG4gKiBAcGFyYW0gdW5zcGVudFxuICogQHJldHVybiBzaWduZWQgUFNCVCB3aXRoIHNpZ25lcidzIGtleSBmb3IgdW5zcGVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2lnbldhbGxldFBzYnQoXG4gIHBzYnQ6IFV0eG9Qc2J0LFxuICBpbnB1dEluZGV4OiBudW1iZXIsXG4gIHNpZ25lcjogQklQMzJJbnRlcmZhY2UsXG4gIHVuc3BlbnQ6IFdhbGxldFVuc3BlbnQ8YmlnaW50PlxuKTogdm9pZCB7XG4gIGNvbnN0IHNjcmlwdFR5cGUgPSBzY3JpcHRUeXBlRm9yQ2hhaW4odW5zcGVudC5jaGFpbik7XG4gIGlmIChzY3JpcHRUeXBlID09PSAncDJ0cicgfHwgc2NyaXB0VHlwZSA9PT0gJ3AydHJNdXNpZzInKSB7XG4gICAgcHNidC5zaWduVGFwcm9vdElucHV0SEQoaW5wdXRJbmRleCwgc2lnbmVyKTtcbiAgfSBlbHNlIHtcbiAgICBwc2J0LnNpZ25JbnB1dEhEKGlucHV0SW5kZXgsIHNpZ25lcik7XG4gIH1cbn1cblxuLyoqXG4gKiBAcmV0dXJucyBzY3JpcHQgdHlwZSBvZiB0aGUgaW5wdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBzYnRJbnB1dFNjcmlwdFR5cGUoaW5wdXQ6IFBzYnRJbnB1dCk6IFBhcnNlZFNjcmlwdFR5cGUge1xuICBjb25zdCBpc1AycGsgPSAoc2NyaXB0OiBCdWZmZXIpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY2h1bmtzID0gYnNjcmlwdC5kZWNvbXBpbGUoc2NyaXB0KTtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGNodW5rcz8ubGVuZ3RoID09PSAyICYmXG4gICAgICAgIEJ1ZmZlci5pc0J1ZmZlcihjaHVua3NbMF0pICYmXG4gICAgICAgIGJzY3JpcHQuaXNDYW5vbmljYWxQdWJLZXkoY2h1bmtzWzBdKSAmJlxuICAgICAgICBjaHVua3NbMV0gPT09IG9wY29kZXMuT1BfQ0hFQ0tTSUdcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgbGV0IHNjcmlwdFR5cGU6IFBhcnNlZFNjcmlwdFR5cGUgfCB1bmRlZmluZWQ7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoaW5wdXQucmVkZWVtU2NyaXB0KSAmJiBCdWZmZXIuaXNCdWZmZXIoaW5wdXQud2l0bmVzc1NjcmlwdCkpIHtcbiAgICBzY3JpcHRUeXBlID0gJ3Ayc2hQMndzaCc7XG4gIH0gZWxzZSBpZiAoQnVmZmVyLmlzQnVmZmVyKGlucHV0LnJlZGVlbVNjcmlwdCkpIHtcbiAgICBzY3JpcHRUeXBlID0gaXNQMnBrKGlucHV0LnJlZGVlbVNjcmlwdCkgPyAncDJzaFAycGsnIDogJ3Ayc2gnO1xuICB9IGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcihpbnB1dC53aXRuZXNzU2NyaXB0KSkge1xuICAgIHNjcmlwdFR5cGUgPSAncDJ3c2gnO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KGlucHV0LnRhcExlYWZTY3JpcHQpICYmIGlucHV0LnRhcExlYWZTY3JpcHQubGVuZ3RoID4gMCkge1xuICAgIGlmIChzY3JpcHRUeXBlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZvdW5kIGJvdGggJHtzY3JpcHRUeXBlfSBhbmQgdGFwcm9vdFNjcmlwdFBhdGggUFNCVCBtZXRhZGF0YS5gKTtcbiAgICB9XG4gICAgaWYgKGlucHV0LnRhcExlYWZTY3JpcHQubGVuZ3RoID4gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdCaXRnbyBvbmx5IHN1cHBvcnRzIGEgc2luZ2xlIHRhcCBsZWFmIHNjcmlwdCBwZXIgaW5wdXQuJyk7XG4gICAgfVxuICAgIHNjcmlwdFR5cGUgPSAndGFwcm9vdFNjcmlwdFBhdGhTcGVuZCc7XG4gIH1cbiAgaWYgKGlucHV0LnRhcEludGVybmFsS2V5KSB7XG4gICAgaWYgKHNjcmlwdFR5cGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRm91bmQgYm90aCAke3NjcmlwdFR5cGV9IGFuZCB0YXByb290S2V5UGF0aCBQU0JUIG1ldGFkYXRhLmApO1xuICAgIH1cbiAgICBzY3JpcHRUeXBlID0gJ3RhcHJvb3RLZXlQYXRoU3BlbmQnO1xuICB9XG4gIGlmIChzY3JpcHRUeXBlKSB7XG4gICAgcmV0dXJuIHNjcmlwdFR5cGU7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcGFyc2UgaW5wdXQnKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUYXByb290S2V5UGF0aFNpZ25hdHVyZXMoaW5wdXQ6IFBzYnRJbnB1dCk6IFRhcHJvb3RLZXlQYXRoU2lnbmF0dXJlQ29udGFpbmVyIHtcbiAgY29uc3QgcGFydGlhbFNpZ3MgPSBwYXJzZVBzYnRNdXNpZzJQYXJ0aWFsU2lncyhpbnB1dCk7XG4gIGlmICghcGFydGlhbFNpZ3MpIHtcbiAgICByZXR1cm4geyBzaWduYXR1cmVzOiB1bmRlZmluZWQsIHBhcnRpY2lwYW50UHVibGljS2V5czogdW5kZWZpbmVkIH07XG4gIH1cbiAgY29uc3Qgc2lnbmF0dXJlcyA9IHBhcnRpYWxTaWdzLm1hcCgocFNpZykgPT4gcFNpZy5wYXJ0aWFsU2lnKTtcbiAgY29uc3QgcGFydGljaXBhbnRQdWJsaWNLZXlzID0gcGFydGlhbFNpZ3MubWFwKChwU2lnKSA9PiBwU2lnLnBhcnRpY2lwYW50UHViS2V5KTtcbiAgcmV0dXJuIGlzVHVwbGU8QnVmZmVyPihzaWduYXR1cmVzKSAmJiBpc1R1cGxlPEJ1ZmZlcj4ocGFydGljaXBhbnRQdWJsaWNLZXlzKVxuICAgID8geyBzaWduYXR1cmVzLCBwYXJ0aWNpcGFudFB1YmxpY0tleXMgfVxuICAgIDogeyBzaWduYXR1cmVzOiBbc2lnbmF0dXJlc1swXV0sIHBhcnRpY2lwYW50UHVibGljS2V5czogW3BhcnRpY2lwYW50UHVibGljS2V5c1swXV0gfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VQYXJ0aWFsT3JUYXBTY3JpcHRTaWduYXR1cmVzKHNpZzogUGFydGlhbFNpZ1tdIHwgVGFwU2NyaXB0U2lnW10gfCB1bmRlZmluZWQpOiBTaWduYXR1cmVDb250YWluZXIge1xuICBpZiAoIXNpZz8ubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHsgc2lnbmF0dXJlczogdW5kZWZpbmVkIH07XG4gIH1cbiAgaWYgKHNpZy5sZW5ndGggPiAyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1bmV4cGVjdGVkIHNpZ25hdHVyZSBjb3VudCcpO1xuICB9XG4gIGNvbnN0IHNpZ25hdHVyZXMgPSBzaWcubWFwKCh0U2lnKSA9PiB0U2lnLnNpZ25hdHVyZSk7XG4gIHJldHVybiBpc1R1cGxlPEJ1ZmZlcj4oc2lnbmF0dXJlcykgPyB7IHNpZ25hdHVyZXMgfSA6IHsgc2lnbmF0dXJlczogW3NpZ25hdHVyZXNbMF1dIH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlU2lnbmF0dXJlcyhcbiAgaW5wdXQ6IFBzYnRJbnB1dCxcbiAgc2NyaXB0VHlwZTogUGFyc2VkU2NyaXB0VHlwZVxuKTogU2lnbmF0dXJlQ29udGFpbmVyIHwgVGFwcm9vdEtleVBhdGhTaWduYXR1cmVDb250YWluZXIge1xuICByZXR1cm4gc2NyaXB0VHlwZSA9PT0gJ3RhcHJvb3RLZXlQYXRoU3BlbmQnXG4gICAgPyBwYXJzZVRhcHJvb3RLZXlQYXRoU2lnbmF0dXJlcyhpbnB1dClcbiAgICA6IHNjcmlwdFR5cGUgPT09ICd0YXByb290U2NyaXB0UGF0aFNwZW5kJ1xuICAgID8gcGFyc2VQYXJ0aWFsT3JUYXBTY3JpcHRTaWduYXR1cmVzKGlucHV0LnRhcFNjcmlwdFNpZylcbiAgICA6IHBhcnNlUGFydGlhbE9yVGFwU2NyaXB0U2lnbmF0dXJlcyhpbnB1dC5wYXJ0aWFsU2lnKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VTY3JpcHQoXG4gIGlucHV0OiBQc2J0SW5wdXQsXG4gIHNjcmlwdFR5cGU6IFBhcnNlZFNjcmlwdFR5cGVcbik6IFBhcnNlZFB1YlNjcmlwdFAybXMgfCBQYXJzZWRQdWJTY3JpcHRUYXByb290IHwgUGFyc2VkUHViU2NyaXB0UDJzaFAycGsge1xuICBsZXQgcHViU2NyaXB0OiBCdWZmZXIgfCB1bmRlZmluZWQ7XG4gIGlmIChzY3JpcHRUeXBlID09PSAncDJzaCcgfHwgc2NyaXB0VHlwZSA9PT0gJ3Ayc2hQMnBrJykge1xuICAgIHB1YlNjcmlwdCA9IGlucHV0LnJlZGVlbVNjcmlwdDtcbiAgfSBlbHNlIGlmIChzY3JpcHRUeXBlID09PSAncDJ3c2gnIHx8IHNjcmlwdFR5cGUgPT09ICdwMnNoUDJ3c2gnKSB7XG4gICAgcHViU2NyaXB0ID0gaW5wdXQud2l0bmVzc1NjcmlwdDtcbiAgfSBlbHNlIGlmIChzY3JpcHRUeXBlID09PSAndGFwcm9vdFNjcmlwdFBhdGhTcGVuZCcpIHtcbiAgICBwdWJTY3JpcHQgPSBpbnB1dC50YXBMZWFmU2NyaXB0ID8gaW5wdXQudGFwTGVhZlNjcmlwdFswXS5zY3JpcHQgOiB1bmRlZmluZWQ7XG4gIH0gZWxzZSBpZiAoc2NyaXB0VHlwZSA9PT0gJ3RhcHJvb3RLZXlQYXRoU3BlbmQnKSB7XG4gICAgaWYgKGlucHV0LndpdG5lc3NVdHhvPy5zY3JpcHQpIHtcbiAgICAgIHB1YlNjcmlwdCA9IGlucHV0LndpdG5lc3NVdHhvLnNjcmlwdDtcbiAgICB9IGVsc2UgaWYgKGlucHV0LnRhcEludGVybmFsS2V5ICYmIGlucHV0LnRhcE1lcmtsZVJvb3QpIHtcbiAgICAgIHB1YlNjcmlwdCA9IGNyZWF0ZVRhcHJvb3RPdXRwdXRTY3JpcHQoeyBpbnRlcm5hbFB1YktleTogaW5wdXQudGFwSW50ZXJuYWxLZXksIHRhcHRyZWVSb290OiBpbnB1dC50YXBNZXJrbGVSb290IH0pO1xuICAgIH1cbiAgfVxuICBpZiAoIXB1YlNjcmlwdCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBQU0JUIHN0YXRlIGZvciAke3NjcmlwdFR5cGV9LiBNaXNzaW5nIHJlcXVpcmVkIGZpZWxkcy5gKTtcbiAgfVxuICByZXR1cm4gcGFyc2VQdWJTY3JpcHQocHViU2NyaXB0LCBzY3JpcHRUeXBlKTtcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHBzYnQgbWV0YWRhdGEgYXJlIHBhcnNlZCBhcyBwZXIgYmVsb3cgY29uZGl0aW9ucy5cbiAqIHJlZGVlbVNjcmlwdC93aXRuZXNzU2NyaXB0L3RhcExlYWZTY3JpcHQgbWF0Y2hlcyBCaXRHby5cbiAqIHNpZ25hdHVyZSBhbmQgcHVibGljIGtleSBjb3VudCBtYXRjaGVzIEJpdEdvLlxuICogUDJTSC1QMlBLID0+IHNjcmlwdFR5cGUsIHJlZGVlbVNjcmlwdCwgcHVibGljIGtleSwgc2lnbmF0dXJlLlxuICogUDJTSCA9PiBzY3JpcHRUeXBlLCByZWRlZW1TY3JpcHQsIHB1YmxpYyBrZXlzLCBzaWduYXR1cmVzLlxuICogUFcyU0ggPT4gc2NyaXB0VHlwZSwgd2l0bmVzc1NjcmlwdCwgcHVibGljIGtleXMsIHNpZ25hdHVyZXMuXG4gKiBQMlNILVBXMlNIID0+IHNjcmlwdFR5cGUsIHJlZGVlbVNjcmlwdCwgd2l0bmVzc1NjcmlwdCwgcHVibGljIGtleXMsIHNpZ25hdHVyZXMuXG4gKiBQMlRSIGFuZCBQMlRSIE1VU0lHMiBzY3JpcHQgcGF0aCA9PiBzY3JpcHRUeXBlICh0YXByb290U2NyaXB0UGF0aFNwZW5kKSwgcHViU2NyaXB0IChsZWFmIHNjcmlwdCksIGNvbnRyb2xCbG9jayxcbiAqIHNjcmlwdFBhdGhMZXZlbCwgbGVhZlZlcnNpb24sIHB1YmxpYyBrZXlzLCBzaWduYXR1cmVzLlxuICogUDJUUiBNVVNJRzIga2VwIHBhdGggPT4gc2NyaXB0VHlwZSAodGFwcm9vdEtleVBhdGhTcGVuZCksIHB1YlNjcmlwdCAoc2NyaXB0UHViS2V5KSwgcGFydGljaXBhbnQgcHViIGtleXMgKHNpZ25lciksXG4gKiBwdWJsaWMga2V5ICh0YXBPdXRwdXRrZXkpLCBzaWduYXR1cmVzIChwYXJ0aWFsIHNpZ25lciBzaWdzKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUHNidElucHV0KGlucHV0OiBQc2J0SW5wdXQpOiBQYXJzZWRQc2J0UDJtcyB8IFBhcnNlZFBzYnRUYXByb290IHwgUGFyc2VkUHNidFAyc2hQMnBrIHtcbiAgaWYgKGlzUHNidElucHV0RmluYWxpemVkKGlucHV0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignRmluYWxpemVkIFBTQlQgcGFyc2luZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG4gIH1cbiAgY29uc3Qgc2NyaXB0VHlwZSA9IGdldFBzYnRJbnB1dFNjcmlwdFR5cGUoaW5wdXQpO1xuICBjb25zdCBwYXJzZWRQdWJTY3JpcHQgPSBwYXJzZVNjcmlwdChpbnB1dCwgc2NyaXB0VHlwZSk7XG4gIGNvbnN0IHNpZ25hdHVyZXMgPSBwYXJzZVNpZ25hdHVyZXMoaW5wdXQsIHNjcmlwdFR5cGUpO1xuXG4gIGlmIChwYXJzZWRQdWJTY3JpcHQuc2NyaXB0VHlwZSA9PT0gJ3RhcHJvb3RLZXlQYXRoU3BlbmQnICYmICdwYXJ0aWNpcGFudFB1YmxpY0tleXMnIGluIHNpZ25hdHVyZXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ucGFyc2VkUHViU2NyaXB0LFxuICAgICAgLi4uc2lnbmF0dXJlcyxcbiAgICB9O1xuICB9XG4gIGlmIChwYXJzZWRQdWJTY3JpcHQuc2NyaXB0VHlwZSA9PT0gJ3RhcHJvb3RTY3JpcHRQYXRoU3BlbmQnKSB7XG4gICAgaWYgKCFpbnB1dC50YXBMZWFmU2NyaXB0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgUFNCVCBzdGF0ZSBmb3IgdGFwcm9vdFNjcmlwdFBhdGhTcGVuZC4gTWlzc2luZyByZXF1aXJlZCBmaWVsZHMuJyk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRyb2xCbG9jayA9IGlucHV0LnRhcExlYWZTY3JpcHRbMF0uY29udHJvbEJsb2NrO1xuICAgIGlmICghaXNWYWxpZENvbnRyb2xCb2NrKGNvbnRyb2xCbG9jaykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBQU0JUIHRhcHJvb3RTY3JpcHRQYXRoU3BlbmQgY29udHJvbEJsb2NrLicpO1xuICAgIH1cbiAgICBjb25zdCBzY3JpcHRQYXRoTGV2ZWwgPSBjYWxjdWxhdGVTY3JpcHRQYXRoTGV2ZWwoY29udHJvbEJsb2NrKTtcbiAgICBjb25zdCBsZWFmVmVyc2lvbiA9IGdldExlYWZWZXJzaW9uKGNvbnRyb2xCbG9jayk7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnBhcnNlZFB1YlNjcmlwdCxcbiAgICAgIC4uLnNpZ25hdHVyZXMsXG4gICAgICBjb250cm9sQmxvY2ssXG4gICAgICBzY3JpcHRQYXRoTGV2ZWwsXG4gICAgICBsZWFmVmVyc2lvbixcbiAgICB9O1xuICB9XG4gIGlmIChcbiAgICBwYXJzZWRQdWJTY3JpcHQuc2NyaXB0VHlwZSA9PT0gJ3Ayc2gnIHx8XG4gICAgcGFyc2VkUHViU2NyaXB0LnNjcmlwdFR5cGUgPT09ICdwMndzaCcgfHxcbiAgICBwYXJzZWRQdWJTY3JpcHQuc2NyaXB0VHlwZSA9PT0gJ3Ayc2hQMndzaCdcbiAgKSB7XG4gICAgaWYgKHBhcnNlZFB1YlNjcmlwdC5zY3JpcHRUeXBlID09PSAncDJzaFAyd3NoJykge1xuICAgICAgcGFyc2VkUHViU2NyaXB0LnJlZGVlbVNjcmlwdCA9IGlucHV0LnJlZGVlbVNjcmlwdDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnBhcnNlZFB1YlNjcmlwdCxcbiAgICAgIC4uLnNpZ25hdHVyZXMsXG4gICAgfTtcbiAgfVxuICBpZiAocGFyc2VkUHViU2NyaXB0LnNjcmlwdFR5cGUgPT09ICdwMnNoUDJwaycgJiYgKCFzaWduYXR1cmVzLnNpZ25hdHVyZXMgfHwgIWlzVHVwbGUoc2lnbmF0dXJlcy5zaWduYXR1cmVzKSkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ucGFyc2VkUHViU2NyaXB0LFxuICAgICAgc2lnbmF0dXJlczogc2lnbmF0dXJlcy5zaWduYXR1cmVzLFxuICAgIH07XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHB1YiBzY3JpcHQnKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHBhcnNlZCBzY3JpcHQgdHlwZSBpbnRvIGFuIGFycmF5IG9mIHNjcmlwdCB0eXBlcy5cbiAqIEBwYXJhbSBwYXJzZWRTY3JpcHRUeXBlIC0gVGhlIHBhcnNlZCBzY3JpcHQgdHlwZS5cbiAqIEByZXR1cm5zIEFuIGFycmF5IG9mIFNjcmlwdFR5cGUyT2YzIHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBwYXJzZWQgc2NyaXB0IHR5cGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b1NjcmlwdFR5cGUyT2YzcyhwYXJzZWRTY3JpcHRUeXBlOiBQYXJzZWRTY3JpcHRUeXBlMk9mMyk6IFNjcmlwdFR5cGUyT2YzW10ge1xuICByZXR1cm4gcGFyc2VkU2NyaXB0VHlwZSA9PT0gJ3RhcHJvb3RTY3JpcHRQYXRoU3BlbmQnXG4gICAgPyBbJ3AydHJNdXNpZzInLCAncDJ0ciddXG4gICAgOiBwYXJzZWRTY3JpcHRUeXBlID09PSAndGFwcm9vdEtleVBhdGhTcGVuZCdcbiAgICA/IFsncDJ0ck11c2lnMiddXG4gICAgOiBbcGFyc2VkU2NyaXB0VHlwZV07XG59XG5cbi8qKlxuICogQHJldHVybnMgc3RyaWN0bHkgcGFyc2UgdGhlIGlucHV0IGFuZCBnZXQgc2lnbmF0dXJlIGNvdW50LlxuICogdW5zaWduZWQoMCksIGhhbGYtc2lnbmVkKDEpIG9yIGZ1bGx5LXNpZ25lZCgyKVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RyaWN0U2lnbmF0dXJlQ291bnQoaW5wdXQ6IFR4SW5wdXQgfCBQc2J0SW5wdXQpOiAwIHwgMSB8IDIge1xuICBjb25zdCBjYWxjdWxhdGVTaWduYXR1cmVDb3VudCA9IChcbiAgICBzaWduYXR1cmVzOiBbQnVmZmVyIHwgMCwgQnVmZmVyIHwgMCwgQnVmZmVyIHwgMF0gfCBbQnVmZmVyLCBCdWZmZXJdIHwgW0J1ZmZlcl0gfCB1bmRlZmluZWRcbiAgKTogMCB8IDEgfCAyID0+IHtcbiAgICBjb25zdCBjb3VudCA9IHNpZ25hdHVyZXMgPyBzaWduYXR1cmVzLmZpbHRlcigocykgPT4gIWlzUGxhY2Vob2xkZXJTaWduYXR1cmUocykpLmxlbmd0aCA6IDA7XG4gICAgaWYgKGNvdW50ID09PSAwIHx8IGNvdW50ID09PSAxIHx8IGNvdW50ID09PSAyKSB7XG4gICAgICByZXR1cm4gY291bnQ7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBzaWduYXR1cmUgY291bnQnKTtcbiAgfTtcblxuICBpZiAoJ2hhc2gnIGluIGlucHV0KSB7XG4gICAgaWYgKGlucHV0LnNjcmlwdD8ubGVuZ3RoIHx8IGlucHV0LndpdG5lc3M/Lmxlbmd0aCkge1xuICAgICAgY29uc3QgcGFyc2VkSW5wdXQgPSBwYXJzZVNpZ25hdHVyZVNjcmlwdChpbnB1dCk7XG4gICAgICByZXR1cm4gcGFyc2VkSW5wdXQuc2NyaXB0VHlwZSA9PT0gJ3RhcHJvb3RLZXlQYXRoU3BlbmQnID8gMiA6IGNhbGN1bGF0ZVNpZ25hdHVyZUNvdW50KHBhcnNlZElucHV0LnNpZ25hdHVyZXMpO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY2FsY3VsYXRlU2lnbmF0dXJlQ291bnQocGFyc2VQc2J0SW5wdXQoaW5wdXQpLnNpZ25hdHVyZXMpO1xuICB9XG59XG5cbi8qKlxuICogQHJldHVybnMgc3RyaWN0bHkgcGFyc2UgaW5wdXQgYW5kIGdldCBzaWduYXR1cmUgY291bnQgZm9yIGFsbCBpbnB1dHMuXG4gKiAwPXVuc2lnbmVkLCAxPWhhbGYtc2lnbmVkIG9yIDI9ZnVsbHktc2lnbmVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdHJpY3RTaWduYXR1cmVDb3VudHMoXG4gIHR4OiBVdHhvUHNidCB8IFV0eG9UcmFuc2FjdGlvbjxudW1iZXIgfCBiaWdpbnQ+IHwgUHNidElucHV0W10gfCBUeElucHV0W11cbik6ICgwIHwgMSB8IDIpW10ge1xuICBjb25zdCBpbnB1dHMgPSB0eCBpbnN0YW5jZW9mIFV0eG9Qc2J0ID8gdHguZGF0YS5pbnB1dHMgOiB0eCBpbnN0YW5jZW9mIFV0eG9UcmFuc2FjdGlvbiA/IHR4LmlucyA6IHR4O1xuICByZXR1cm4gaW5wdXRzLm1hcCgoaW5wdXQsIF8pID0+IGdldFN0cmljdFNpZ25hdHVyZUNvdW50KGlucHV0KSk7XG59XG5cbi8qKlxuICogQHJldHVybiB0cnVlIGlmZiBpbnB1dHMgYXJyYXkgaXMgb2YgUHNidElucHV0VHlwZSB0eXBlXG4gKiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHNidElucHV0QXJyYXkoaW5wdXRzOiBQc2J0SW5wdXRbXSB8IFR4SW5wdXRbXSk6IGlucHV0cyBpcyBQc2J0SW5wdXRbXSB7XG4gIHJldHVybiAhaXNUeElucHV0QXJyYXkoaW5wdXRzKTtcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHRydWUgaWZmIGlucHV0cyBhcnJheSBpcyBvZiBUeElucHV0IHR5cGVcbiAqICovXG5leHBvcnQgZnVuY3Rpb24gaXNUeElucHV0QXJyYXkoaW5wdXRzOiBQc2J0SW5wdXRbXSB8IFR4SW5wdXRbXSk6IGlucHV0cyBpcyBUeElucHV0W10ge1xuICBhc3NlcnQoISFpbnB1dHMubGVuZ3RoLCAnZW1wdHkgaW5wdXRzIGFycmF5Jyk7XG4gIHJldHVybiAnaGFzaCcgaW4gaW5wdXRzWzBdO1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHRydWUgaWZmIGdpdmVuIHBzYnQvdHJhbnNhY3Rpb24vdHgtaW5wdXQtYXJyYXkvcHNidC1pbnB1dC1hcnJheSBjb250YWlucyBhdCBsZWFzdCBvbmUgdGFwcm9vdCBrZXkgcGF0aCBzcGVuZCBpbnB1dFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNUcmFuc2FjdGlvbldpdGhLZXlQYXRoU3BlbmRJbnB1dChcbiAgZGF0YTogVXR4b1BzYnQgfCBVdHhvVHJhbnNhY3Rpb248YmlnaW50IHwgbnVtYmVyPiB8IFBzYnRJbnB1dFtdIHwgVHhJbnB1dFtdXG4pOiBib29sZWFuIHtcbiAgY29uc3QgaW5wdXRzID0gZGF0YSBpbnN0YW5jZW9mIFV0eG9Qc2J0ID8gZGF0YS5kYXRhLmlucHV0cyA6IGRhdGEgaW5zdGFuY2VvZiBVdHhvVHJhbnNhY3Rpb24gPyBkYXRhLmlucyA6IGRhdGE7XG4gIGlmICghaW5wdXRzLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoaXNQc2J0SW5wdXRBcnJheShpbnB1dHMpKSB7XG4gICAgcmV0dXJuIGlucHV0cy5zb21lKChpbnB1dCwgXykgPT4gZ2V0UHNidElucHV0U2NyaXB0VHlwZShpbnB1dCkgPT09ICd0YXByb290S2V5UGF0aFNwZW5kJyk7XG4gIH1cbiAgcmV0dXJuIGlucHV0cy5zb21lKChpbnB1dCwgXykgPT4ge1xuICAgIC8vIElmIHRoZSBpbnB1dCBpcyBub3Qgc2lnbmVkLCBpdCBjYW5ub3QgYmUgYSB0YXByb290S2V5UGF0aFNwZW5kIGlucHV0IGJlY2F1c2UgeW91IGNhbiBvbmx5XG4gICAgLy8gZXh0cmFjdCBhIGZ1bGx5IHNpZ25lZCBwc2J0IGludG8gYSB0cmFuc2FjdGlvbiB3aXRoIHRhcHJvb3RLZXlQYXRoU3BlbmQgaW5wdXRzLlxuICAgIGlmIChnZXRTdHJpY3RTaWduYXR1cmVDb3VudChpbnB1dCkgPT09IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlU2lnbmF0dXJlU2NyaXB0KGlucHV0KS5zY3JpcHRUeXBlID09PSAndGFwcm9vdEtleVBhdGhTcGVuZCc7XG4gIH0pO1xufVxuXG4vKipcbiAqIFNldCB0aGUgUm9vdFdhbGxldEtleXMgYXMgdGhlIGdsb2JhbFhwdWJzIG9uIHRoZSBwc2J0XG4gKlxuICogV2UgZG8gYWxsIHRoZSBtYXRjaGluZyBvZiB0aGUgKHRhcCliaXAzMkRlcml2YXRpb25zIG1hc3RlckZpbmdlcnByaW50IHRvIHRoZSBmaW5nZXJwcmludCBvZiB0aGVcbiAqIGV4dGVuZGVkUHVia2V5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkWHB1YnNUb1BzYnQocHNidDogVXR4b1BzYnQsIHJvb3RXYWxsZXRLZXlzOiBSb290V2FsbGV0S2V5cyk6IHZvaWQge1xuICBjb25zdCBzYWZlUm9vdFdhbGxldEtleXMgPSBuZXcgUm9vdFdhbGxldEtleXMoXG4gICAgcm9vdFdhbGxldEtleXMudHJpcGxlLm1hcCgoYmlwMzIpID0+IGJpcDMyLm5ldXRlcmVkKCkpIGFzIFRyaXBsZTxCSVAzMkludGVyZmFjZT4sXG4gICAgcm9vdFdhbGxldEtleXMuZGVyaXZhdGlvblByZWZpeGVzXG4gICk7XG4gIGNvbnN0IHhQdWJzID0gc2FmZVJvb3RXYWxsZXRLZXlzLnRyaXBsZS5tYXAoXG4gICAgKGJpcDMyKTogR2xvYmFsWHB1YiA9PiAoe1xuICAgICAgZXh0ZW5kZWRQdWJrZXk6IGJzNThjaGVjay5kZWNvZGUoYmlwMzIudG9CYXNlNTgoKSksXG4gICAgICBtYXN0ZXJGaW5nZXJwcmludDogYmlwMzIuZmluZ2VycHJpbnQsXG4gICAgICAvLyBUT0RPOiBCRy03Mzc5NyAtIGJpcDE3NCBjdXJyZW50bHkgcmVxdWlyZXMgbSBwcmVmaXggZm9yIHRoaXMgdG8gYmUgYSB2YWxpZCBnbG9iYWxYcHViXG4gICAgICBwYXRoOiAnbScsXG4gICAgfSlcbiAgKTtcbiAgcHNidC51cGRhdGVHbG9iYWwoeyBnbG9iYWxYcHViOiB4UHVicyB9KTtcbn1cblxuLyoqXG4gKiB2YWxpZGF0ZXMgc2lnbmF0dXJlcyBmb3IgZWFjaCAyIG9mIDMgaW5wdXQgYWdhaW5zdCB1c2VyLCBiYWNrdXAsIGJpdGdvIGtleXMgZGVyaXZlZCBmcm9tIHJvb3RXYWxsZXRLZXlzLlxuICogQHJldHVybnMgYXJyYXkgb2YgaW5wdXQgaW5kZXggYW5kIGl0cyBbaXMgdmFsaWQgdXNlciBzaWcgZXhpc3QsIGlzIHZhbGlkIGJhY2t1cCBzaWcgZXhpc3QsIGlzIHZhbGlkIHVzZXIgYml0Z28gZXhpc3RdXG4gKiBGb3IgcDJzaFAycGsgaW5wdXQsIFtmYWxzZSwgZmFsc2UsIGZhbHNlXSBpcyByZXR1cm5lZCBzaW5jZSBpdCBpcyBub3QgYSAyIG9mIDMgc2lnIGlucHV0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2lnbmF0dXJlVmFsaWRhdGlvbkFycmF5UHNidChwc2J0OiBVdHhvUHNidCwgcm9vdFdhbGxldEtleXM6IFJvb3RXYWxsZXRLZXlzKTogU2lnbmF0dXJlVmFsaWRhdGlvbltdIHtcbiAgcmV0dXJuIHBzYnQuZGF0YS5pbnB1dHMubWFwKChpbnB1dCwgaSkgPT4ge1xuICAgIGNvbnN0IHNpZ1ZhbEFycmF5Rm9ySW5wdXQ6IFRyaXBsZTxib29sZWFuPiA9XG4gICAgICBnZXRQc2J0SW5wdXRTY3JpcHRUeXBlKGlucHV0KSA9PT0gJ3Ayc2hQMnBrJ1xuICAgICAgICA/IFtmYWxzZSwgZmFsc2UsIGZhbHNlXVxuICAgICAgICA6IHBzYnQuZ2V0U2lnbmF0dXJlVmFsaWRhdGlvbkFycmF5KGksIHsgcm9vdE5vZGVzOiByb290V2FsbGV0S2V5cy50cmlwbGUgfSk7XG4gICAgcmV0dXJuIFtpLCBzaWdWYWxBcnJheUZvcklucHV0XTtcbiAgfSk7XG59XG5cbi8qKlxuICogRXh0cmFjdHMgdGhlIGhhbGYgc2lnbmVkIHRyYW5zYWN0aW9uIGZyb20gdGhlIHBzYnQgZm9yIHAybXMgYmFzZWQgc2NyaXB0IHR5cGVzIC0gcDJzaCwgcDJ3c2gsIGFuZCBwMnNoUDJ3c2guXG4gKiBUaGUgcHVycG9zZSBpcyB0byBwcm92aWRlIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgdG8ga2V5dGVybmFsIChLUlMpIHRoYXQgb25seSBzdXBwb3J0cyBuZXR3b3JrIHRyYW5zYWN0aW9uIGFuZCBwMm1zIHNjcmlwdCB0eXBlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RQMm1zT25seUhhbGZTaWduZWRUeChwc2J0OiBVdHhvUHNidCk6IFV0eG9UcmFuc2FjdGlvbjxiaWdpbnQ+IHtcbiAgYXNzZXJ0KCEhKHBzYnQuZGF0YS5pbnB1dHMubGVuZ3RoICYmIHBzYnQuZGF0YS5vdXRwdXRzLmxlbmd0aCksICdlbXB0eSBpbnB1dHMgb3Igb3V0cHV0cycpO1xuICBjb25zdCB0eCA9IHBzYnQuZ2V0VW5zaWduZWRUeCgpO1xuXG4gIGZ1bmN0aW9uIGlzUDJtc1BhcnNlZFBzYnRJbnB1dChcbiAgICBwYXJzZWQ6IFBhcnNlZFBzYnRQMm1zIHwgUGFyc2VkUHNidFRhcHJvb3QgfCBQYXJzZWRQc2J0UDJzaFAycGtcbiAgKTogcGFyc2VkIGlzIFBhcnNlZFBzYnRQMm1zIHtcbiAgICByZXR1cm4gWydwMnNoJywgJ3Ayc2hQMndzaCcsICdwMndzaCddLmluY2x1ZGVzKHBhcnNlZC5zY3JpcHRUeXBlKTtcbiAgfVxuXG4gIHBzYnQuZGF0YS5pbnB1dHMuZm9yRWFjaCgoaW5wdXQsIGkpID0+IHtcbiAgICBjb25zdCBwYXJzZWQgPSBwYXJzZVBzYnRJbnB1dChpbnB1dCk7XG4gICAgYXNzZXJ0KGlzUDJtc1BhcnNlZFBzYnRJbnB1dChwYXJzZWQpLCBgdW5zdXBwb3J0ZWQgc2NyaXB0IHR5cGUgJHtwYXJzZWQuc2NyaXB0VHlwZX1gKTtcbiAgICBhc3NlcnQoaW5wdXQucGFydGlhbFNpZz8ubGVuZ3RoID09PSAxLCBgdW5leHBlY3RlZCBzaWduYXR1cmUgY291bnQgJHtpbnB1dC5wYXJ0aWFsU2lnPy5sZW5ndGh9YCk7XG4gICAgY29uc3QgW3BhcnRpYWxTaWddID0gaW5wdXQucGFydGlhbFNpZztcbiAgICBhc3NlcnQoXG4gICAgICBpbnB1dC5zaWdoYXNoVHlwZSAhPT0gdW5kZWZpbmVkICYmIGlucHV0LnNpZ2hhc2hUeXBlID09PSBic2NyaXB0LnNpZ25hdHVyZS5kZWNvZGUocGFydGlhbFNpZy5zaWduYXR1cmUpLmhhc2hUeXBlLFxuICAgICAgJ3NpZ25hdHVyZSBzaWdoYXNoIGRvZXMgbm90IG1hdGNoIGlucHV0IHNpZ2hhc2ggdHlwZSdcbiAgICApO1xuXG4gICAgLy8gdHlwZSBjYXN0aW5nIGlzIHRvIGFkZHJlc3MgdGhlIGludmFsaWQgdHlwZSBjaGVja2luZyBpbiBwYXltZW50cy5wMm1zXG4gICAgY29uc3Qgc2lnbmF0dXJlcyA9IHBhcnNlZC5wdWJsaWNLZXlzLm1hcCgocGspID0+XG4gICAgICBwYXJ0aWFsU2lnLnB1YmtleS5lcXVhbHMocGspID8gcGFydGlhbFNpZy5zaWduYXR1cmUgOiAob3BzLk9QXzAgYXMgdW5rbm93biBhcyBCdWZmZXIpXG4gICAgKTtcblxuICAgIGNvbnN0IGlzUDJTSCA9ICEhcGFyc2VkLnJlZGVlbVNjcmlwdDtcbiAgICBjb25zdCBpc1AyV1NIID0gISFwYXJzZWQud2l0bmVzc1NjcmlwdDtcblxuICAgIGNvbnN0IHBheW1lbnQgPSBwYXltZW50cy5wMm1zKHsgb3V0cHV0OiBwYXJzZWQucHViU2NyaXB0LCBzaWduYXR1cmVzIH0sIHsgdmFsaWRhdGU6IGZhbHNlLCBhbGxvd0luY29tcGxldGU6IHRydWUgfSk7XG4gICAgY29uc3QgcDJ3c2ggPSBpc1AyV1NIID8gcGF5bWVudHMucDJ3c2goeyByZWRlZW06IHBheW1lbnQgfSkgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgcDJzaCA9IGlzUDJTSCA/IHBheW1lbnRzLnAyc2goeyByZWRlZW06IHAyd3NoIHx8IHBheW1lbnQgfSkgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAocDJzaD8uaW5wdXQpIHtcbiAgICAgIHR4LnNldElucHV0U2NyaXB0KGksIHAyc2guaW5wdXQpO1xuICAgIH1cbiAgICBpZiAocDJ3c2g/LndpdG5lc3MpIHtcbiAgICAgIHR4LnNldFdpdG5lc3MoaSwgcDJ3c2gud2l0bmVzcyk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdHg7XG59XG5cbi8qKlxuICogQ2xvbmVzIHRoZSBwc2J0IHdpdGhvdXQgbm9uV2l0bmVzc1V0eG8gZm9yIG5vbi1zZWd3aXQgaW5wdXRzIGFuZCB3aXRuZXNzVXR4byBpcyBhZGRlZCBpbnN0ZWFkLlxuICogSXQgaXMgbm90IEJJUC0xNzQgY29tcGxpYW50LCBzbyB1c2UgaXQgY2FyZWZ1bGx5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVQc2J0V2l0aG91dE5vbldpdG5lc3NVdHhvKHBzYnQ6IFV0eG9Qc2J0KTogVXR4b1BzYnQge1xuICBjb25zdCBuZXdQc2J0ID0gY3JlYXRlUHNidEZyb21IZXgocHNidC50b0hleCgpLCBwc2J0Lm5ldHdvcmspO1xuICBjb25zdCB0eElucHV0cyA9IHBzYnQudHhJbnB1dHM7XG5cbiAgcHNidC5kYXRhLmlucHV0cy5mb3JFYWNoKChpbnB1dCwgaSkgPT4ge1xuICAgIGlmIChpbnB1dC5ub25XaXRuZXNzVXR4byAmJiAhaW5wdXQud2l0bmVzc1V0eG8pIHtcbiAgICAgIGNvbnN0IHR4ID0gY3JlYXRlVHJhbnNhY3Rpb25Gcm9tQnVmZmVyKGlucHV0Lm5vbldpdG5lc3NVdHhvLCBwc2J0Lm5ldHdvcmssIHsgYW1vdW50VHlwZTogJ2JpZ2ludCcgfSk7XG4gICAgICBpZiAoIXR4SW5wdXRzW2ldLmhhc2guZXF1YWxzKHR4LmdldEhhc2goKSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb24td2l0bmVzcyBVVFhPIGhhc2ggZm9yIGlucHV0ICMke2l9IGRvZXNuJ3QgbWF0Y2ggdGhlIGhhc2ggc3BlY2lmaWVkIGluIHRoZSBwcmV2b3V0YCk7XG4gICAgICB9XG4gICAgICBuZXdQc2J0LmRhdGEuaW5wdXRzW2ldLndpdG5lc3NVdHhvID0gdHgub3V0c1t0eElucHV0c1tpXS5pbmRleF07XG4gICAgfVxuICAgIGRlbGV0ZSBuZXdQc2J0LmRhdGEuaW5wdXRzW2ldLm5vbldpdG5lc3NVdHhvO1xuICB9KTtcblxuICByZXR1cm4gbmV3UHNidDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlcmUgYXJlIG5vbi1zZWd3aXQgaW5wdXRzIGluIHRoZSBQU0JUIHRoYXQgZG8gbm90IGNvbnRhaW4gdGhlXG4gKiBub25XaXRuZXNzVXR4by5cbiAqXG4gKiBpc1BzYnRMaXRlKGNsb25lUHNidFdpdGhvdXROb25XaXRuZXNzVXR4byhwc2J0KSkgPT09IHRydWVcbiAqXG4gKiBAcGFyYW0gcHNidFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNQc2J0TGl0ZShwc2J0OiBVdHhvUHNidCk6IGJvb2xlYW4ge1xuICBsZXQgaXNGdWxsID0gdHJ1ZTtcbiAgY29uc3Qgbm9uU2Vnd2l0SW5wdXRUeXBlcyA9IFsncDJzaFAycGsnLCAncDJzaCddO1xuICBwc2J0LmRhdGEuaW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgaWYgKGlzRnVsbCAmJiBub25TZWd3aXRJbnB1dFR5cGVzLmluY2x1ZGVzKGdldFBzYnRJbnB1dFNjcmlwdFR5cGUoaW5wdXQpKSkge1xuICAgICAgaXNGdWxsID0gISFpbnB1dC5ub25XaXRuZXNzVXR4bztcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gIWlzRnVsbDtcbn1cblxuLyoqXG4gKiBEZWxldGVzIHdpdG5lc3NVdHhvIGZvciBub24tc2Vnd2l0IGlucHV0cyB0byBtYWtlIHRoZSBQU0JUIEJJUC0xNzQgY29tcGxpYW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlV2l0bmVzc1V0eG9Gb3JOb25TZWd3aXRJbnB1dHMocHNidDogVXR4b1BzYnQpOiB2b2lkIHtcbiAgcHNidC5kYXRhLmlucHV0cy5mb3JFYWNoKChpbnB1dCwgaSkgPT4ge1xuICAgIGNvbnN0IHNjcmlwdFR5cGUgPSBnZXRQc2J0SW5wdXRTY3JpcHRUeXBlKGlucHV0KTtcbiAgICBpZiAoc2NyaXB0VHlwZSA9PT0gJ3Ayc2gnIHx8IHNjcmlwdFR5cGUgPT09ICdwMnNoUDJwaycpIHtcbiAgICAgIGRlbGV0ZSBpbnB1dC53aXRuZXNzVXR4bztcbiAgICB9XG4gIH0pO1xufVxuIl19