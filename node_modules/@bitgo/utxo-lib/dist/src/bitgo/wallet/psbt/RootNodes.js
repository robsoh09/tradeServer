"use strict";
/**
 * Contains helper methods for getting and sorting root nodes from a PSBT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSortedRootNodes = exports.sortRootNodes = exports.getUnsortedRootNodes = exports.ErrorNoMultiSigInputFound = void 0;
const assert = require("assert");
const bs58check = require("bs58check");
const types_1 = require("../../types");
const bip32_1 = require("bip32");
const noble_ecc_1 = require("../../../noble_ecc");
const outputScripts_1 = require("../../outputScripts");
const transaction_1 = require("../../transaction");
const Psbt_1 = require("../Psbt");
/**
 * Error thrown when no multi-sig input is found in a PSBT.
 * */
class ErrorNoMultiSigInputFound extends Error {
    constructor(message) {
        super(message);
    }
}
exports.ErrorNoMultiSigInputFound = ErrorNoMultiSigInputFound;
/**
 * Retrieves unsorted root BIP32Interface nodes from a PSBT if available.
 * @param psbt - The PSBT from which to extract the global Xpubs.
 * @returns An array of BIP32Interface objects or undefined if not available.
 */
function getUnsortedRootNodes(psbt) {
    var _a;
    const bip32s = (_a = psbt.data.globalMap.globalXpub) === null || _a === void 0 ? void 0 : _a.map((xpub) => (0, bip32_1.BIP32Factory)(noble_ecc_1.ecc).fromBase58(bs58check.encode(xpub.extendedPubkey)));
    assert(!bip32s || (0, types_1.isTriple)(bip32s), `Invalid globalXpubs in PSBT. Expected 3 or none. Got ${bip32s === null || bip32s === void 0 ? void 0 : bip32s.length}`);
    return bip32s;
}
exports.getUnsortedRootNodes = getUnsortedRootNodes;
/**
 * Determines if the given public keys' permutation matches a specified script.
 * @param params - Object containing public keys, permutation, script public key, script type, and network.
 * @returns A boolean indicating if the permutation matches the script.
 */
function matchesScript({ pubKeys, perm, scriptPubKey, parsedScriptType, network, }) {
    const pubKeysPerm = [pubKeys[perm[0]], pubKeys[perm[1]], pubKeys[perm[2]]];
    const scriptTypes = (0, Psbt_1.toScriptType2Of3s)(parsedScriptType);
    return scriptTypes.some((scriptType) => (0, outputScripts_1.createOutputScript2of3)(pubKeysPerm, scriptType, network).scriptPubKey.equals(scriptPubKey));
}
/**
 * Finds the correct order of public keys to match a given script.
 * @param pubKeys - Array of public keys involved in the script.
 * @param scriptPubKey - The script public key to match against.
 * @param parsedScriptType - The parsed script type.
 * @param network - Bitcoin network.
 * @returns The order of public keys that match the script.
 */
function findSortOrderOfPubKeys(pubKeys, scriptPubKey, parsedScriptType, network) {
    const permutations = [
        [0, 1, 2],
        [0, 2, 1],
        [1, 0, 2],
        [1, 2, 0],
        [2, 0, 1],
        [2, 1, 0],
    ];
    const order = permutations.find((perm) => matchesScript({ pubKeys, perm, scriptPubKey, parsedScriptType, network }));
    assert(order, 'Could not find sort order of multi sig public keys');
    return order;
}
/**
 * Extracts multi-sig input data, including script type, script public key, and derivation path, from the first relevant PSBT input.
 * @param psbt - The PSBT to extract data from.
 * @returns An object containing the parsed script type, script public key, and derivation path.
 */
function getFirstMultiSigInputData(psbt) {
    function getScriptPubKey(input, prevOutIndex) {
        var _a, _b;
        const scriptPubKey = (_b = (_a = input.witnessUtxo) === null || _a === void 0 ? void 0 : _a.script) !== null && _b !== void 0 ? _b : (input.nonWitnessUtxo
            ? (0, transaction_1.createTransactionFromBuffer)(input.nonWitnessUtxo, psbt.network, { amountType: 'bigint' }).outs[prevOutIndex]
                .script
            : undefined);
        assert(scriptPubKey, 'Input scriptPubKey can not be found');
        return scriptPubKey;
    }
    function getDerivationPath(input) {
        var _a;
        const bip32Dv = (_a = input === null || input === void 0 ? void 0 : input.bip32Derivation) !== null && _a !== void 0 ? _a : input === null || input === void 0 ? void 0 : input.tapBip32Derivation;
        assert(bip32Dv === null || bip32Dv === void 0 ? void 0 : bip32Dv.length, 'Input Bip32Derivation can not be found');
        return bip32Dv[0].path;
    }
    const txInputs = psbt.txInputs;
    for (let i = 0; i < psbt.data.inputs.length; i++) {
        const input = psbt.data.inputs[i];
        const parsedScriptType = (0, Psbt_1.getPsbtInputScriptType)(input);
        if (parsedScriptType === 'p2shP2pk') {
            continue;
        }
        const scriptPubKey = getScriptPubKey(input, txInputs[i].index);
        const derivationPath = getDerivationPath(input);
        return { parsedScriptType, scriptPubKey, derivationPath };
    }
    throw new ErrorNoMultiSigInputFound('No multi sig input found');
}
/**
 * Sorts given root nodes based on the script compatibility with the PSBT's multi-sig inputs.
 * @param psbt - The PSBT containing multi-sig inputs.
 * @param rootNodes - Array of root nodes to sort.
 * @returns An array of BIP32Interface objects in the order that matches the multi-sig script.
 */
function sortRootNodes(psbt, rootNodes) {
    const { parsedScriptType, scriptPubKey, derivationPath } = getFirstMultiSigInputData(psbt);
    const pubKeys = rootNodes.map((rootNode) => rootNode.derivePath(derivationPath).publicKey);
    const order = findSortOrderOfPubKeys(pubKeys, scriptPubKey, parsedScriptType, psbt.network);
    return order.map((i) => rootNodes[i]);
}
exports.sortRootNodes = sortRootNodes;
/**
 * Retrieves sorted root nodes from a PSBT, ensuring they are ordered according to script compatibility.
 * @param psbt - The PSBT to extract and sort root nodes from.
 * @returns An array of sorted BIP32Interface root nodes.
 */
function getSortedRootNodes(psbt) {
    const unsortedRootNodes = getUnsortedRootNodes(psbt);
    assert(unsortedRootNodes, 'Could not find root nodes in PSBT');
    return sortRootNodes(psbt, unsortedRootNodes);
}
exports.getSortedRootNodes = getSortedRootNodes;
//# sourceMappingURL=data:application/json;base64,