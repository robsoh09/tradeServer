"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.musig2DeterministicSign = exports.createMusig2DeterministicNonce = exports.getSigHashTypeFromSigs = exports.assertPsbtMusig2Nonces = exports.assertPsbtMusig2Participants = exports.parsePsbtMusig2PartialSigs = exports.parsePsbtMusig2Nonces = exports.parsePsbtMusig2Participants = exports.createMusig2SigningSession = exports.musig2AggregateSigs = exports.musig2PartialSigVerify = exports.musig2PartialSign = exports.createTapTweak = exports.createAggregateNonce = exports.createTapOutputKey = exports.createTapInternalKey = exports.decodePsbtMusig2PartialSig = exports.decodePsbtMusig2Nonce = exports.decodePsbtMusig2Participants = exports.encodePsbtMusig2PartialSig = exports.encodePsbtMusig2PubNonce = exports.encodePsbtMusig2Participants = exports.Musig2NonceStore = void 0;
const outputScripts_1 = require("./outputScripts");
const noble_ecc_1 = require("../noble_ecc");
const taproot_1 = require("../taproot");
const index_1 = require("../index");
const PsbtUtil_1 = require("./PsbtUtil");
/**
 * Because musig uses reference-equal buffers to cache nonces, we wrap it here to allow using
 * nonces that are byte-equal but not reference-equal.
 */
class Musig2NonceStore {
    constructor() {
        this.nonces = [];
    }
    /**
     * Get original Buffer instance for nonce (which may be a copy).
     * @return byte-equal buffer that is reference-equal to what was stored earlier in createMusig2Nonce
     */
    getRef(nonce) {
        for (const b of this.nonces) {
            if (Buffer.from(b).equals(nonce)) {
                return b;
            }
        }
        throw new Error(`unknown nonce`);
    }
    /**
     * Creates musig2 nonce and stores buffer reference.
     * tapInternalkey, tapMerkleRoot, tapBip32Derivation for rootWalletKey are required per p2trMusig2 key path input.
     * Also participant keys are required from psbt proprietary key values.
     * Ref: https://gist.github.com/sanket1729/4b525c6049f4d9e034d27368c49f28a6
     * @param privateKey - signer private key
     * @param publicKey - signer xy public key
     * @param xOnlyPublicKey - tweaked aggregated key (tapOutputKey)
     * @param sessionId Additional entropy. If provided it must either be a counter unique to this secret key,
     * (converted to an array of 32 bytes), or 32 uniformly random bytes.
     */
    createMusig2Nonce(privateKey, publicKey, xOnlyPublicKey, txHash, sessionId) {
        if (txHash.length != 32) {
            throw new Error(`Invalid txHash size ${txHash}`);
        }
        const buf = noble_ecc_1.musig.nonceGen({ secretKey: privateKey, publicKey, xOnlyPublicKey, msg: txHash, sessionId });
        this.nonces.push(buf);
        return buf;
    }
}
exports.Musig2NonceStore = Musig2NonceStore;
/**
 * Psbt proprietary key val util function for participants pub keys. SubType is 0x01
 * Ref: https://gist.github.com/sanket1729/4b525c6049f4d9e034d27368c49f28a6
 * @return x-only tapOutputKey||tapInternalKey as sub keydata, plain sigining participant keys as valuedata
 */
function encodePsbtMusig2Participants(participants) {
    const keydata = [participants.tapOutputKey, participants.tapInternalKey].map((pubkey) => (0, outputScripts_1.checkXOnlyPublicKey)(pubkey));
    const value = participants.participantPubKeys.map((pubkey) => (0, outputScripts_1.checkPlainPublicKey)(pubkey));
    const key = {
        identifier: PsbtUtil_1.PSBT_PROPRIETARY_IDENTIFIER,
        subtype: PsbtUtil_1.ProprietaryKeySubtype.MUSIG2_PARTICIPANT_PUB_KEYS,
        keydata: Buffer.concat(keydata),
    };
    return { key, value: Buffer.concat(value) };
}
exports.encodePsbtMusig2Participants = encodePsbtMusig2Participants;
/**
 * Psbt proprietary key val util function for pub nonce. SubType is 0x02
 * Ref: https://gist.github.com/sanket1729/4b525c6049f4d9e034d27368c49f28a6
 * @return plain-participantPubKey||x-only-tapOutputKey as sub keydata, 66 bytes of 2 pub nonces as valuedata
 */
function encodePsbtMusig2PubNonce(nonce) {
    if (nonce.pubNonce.length !== 66) {
        throw new Error(`Invalid pubNonces length ${nonce.pubNonce.length}`);
    }
    const keydata = Buffer.concat([
        (0, outputScripts_1.checkPlainPublicKey)(nonce.participantPubKey),
        (0, outputScripts_1.checkXOnlyPublicKey)(nonce.tapOutputKey),
    ]);
    const key = {
        identifier: PsbtUtil_1.PSBT_PROPRIETARY_IDENTIFIER,
        subtype: PsbtUtil_1.ProprietaryKeySubtype.MUSIG2_PUB_NONCE,
        keydata,
    };
    return { key, value: nonce.pubNonce };
}
exports.encodePsbtMusig2PubNonce = encodePsbtMusig2PubNonce;
function encodePsbtMusig2PartialSig(partialSig) {
    if (partialSig.partialSig.length !== 32 && partialSig.partialSig.length !== 33) {
        throw new Error(`Invalid partialSig length ${partialSig.partialSig.length}`);
    }
    const keydata = Buffer.concat([
        (0, outputScripts_1.checkPlainPublicKey)(partialSig.participantPubKey),
        (0, outputScripts_1.checkXOnlyPublicKey)(partialSig.tapOutputKey),
    ]);
    const key = {
        identifier: PsbtUtil_1.PSBT_PROPRIETARY_IDENTIFIER,
        subtype: PsbtUtil_1.ProprietaryKeySubtype.MUSIG2_PARTIAL_SIG,
        keydata,
    };
    return { key, value: partialSig.partialSig };
}
exports.encodePsbtMusig2PartialSig = encodePsbtMusig2PartialSig;
/**
 * Decodes proprietary key value data for participant pub keys
 * @param kv
 */
function decodePsbtMusig2Participants(kv) {
    if (kv.key.identifier !== PsbtUtil_1.PSBT_PROPRIETARY_IDENTIFIER ||
        kv.key.subtype !== PsbtUtil_1.ProprietaryKeySubtype.MUSIG2_PARTICIPANT_PUB_KEYS) {
        throw new Error(`Invalid identifier ${kv.key.identifier} or subtype ${kv.key.subtype} for participants pub keys`);
    }
    const key = kv.key.keydata;
    if (key.length !== 64) {
        throw new Error(`Invalid keydata size ${key.length} for participant pub keys`);
    }
    const value = kv.value;
    if (value.length !== 66) {
        throw new Error(`Invalid valuedata size ${value.length} for participant pub keys`);
    }
    const participantPubKeys = [value.subarray(0, 33), value.subarray(33)];
    if (participantPubKeys[0].equals(participantPubKeys[1])) {
        throw new Error(`Duplicate participant pub keys found`);
    }
    return { tapOutputKey: key.subarray(0, 32), tapInternalKey: key.subarray(32), participantPubKeys };
}
exports.decodePsbtMusig2Participants = decodePsbtMusig2Participants;
/**
 * Decodes proprietary key value data for musig2 nonce
 * @param kv
 */
function decodePsbtMusig2Nonce(kv) {
    if (kv.key.identifier !== PsbtUtil_1.PSBT_PROPRIETARY_IDENTIFIER || kv.key.subtype !== PsbtUtil_1.ProprietaryKeySubtype.MUSIG2_PUB_NONCE) {
        throw new Error(`Invalid identifier ${kv.key.identifier} or subtype ${kv.key.subtype} for nonce`);
    }
    const key = kv.key.keydata;
    if (key.length !== 65) {
        throw new Error(`Invalid keydata size ${key.length} for nonce`);
    }
    const value = kv.value;
    if (value.length !== 66) {
        throw new Error(`Invalid valuedata size ${value.length} for nonce`);
    }
    return { participantPubKey: key.subarray(0, 33), tapOutputKey: key.subarray(33), pubNonce: value };
}
exports.decodePsbtMusig2Nonce = decodePsbtMusig2Nonce;
/**
 * Decodes proprietary key value data for musig2 partial sig
 * @param kv
 */
function decodePsbtMusig2PartialSig(kv) {
    if (kv.key.identifier !== PsbtUtil_1.PSBT_PROPRIETARY_IDENTIFIER ||
        kv.key.subtype !== PsbtUtil_1.ProprietaryKeySubtype.MUSIG2_PARTIAL_SIG) {
        throw new Error(`Invalid identifier ${kv.key.identifier} or subtype ${kv.key.subtype} for partial sig`);
    }
    const key = kv.key.keydata;
    if (key.length !== 65) {
        throw new Error(`Invalid keydata size ${key.length} for partial sig`);
    }
    const value = kv.value;
    if (value.length !== 32 && value.length !== 33) {
        throw new Error(`Invalid valuedata size ${value.length} for partial sig`);
    }
    return { participantPubKey: key.subarray(0, 33), tapOutputKey: key.subarray(33), partialSig: value };
}
exports.decodePsbtMusig2PartialSig = decodePsbtMusig2PartialSig;
function createTapInternalKey(plainPubKeys) {
    return Buffer.from(noble_ecc_1.musig.getXOnlyPubkey(noble_ecc_1.musig.keyAgg(plainPubKeys)));
}
exports.createTapInternalKey = createTapInternalKey;
function createTapOutputKey(internalPubKey, tapTreeRoot) {
    return Buffer.from((0, taproot_1.tapTweakPubkey)(noble_ecc_1.ecc, (0, outputScripts_1.toXOnlyPublicKey)(internalPubKey), (0, outputScripts_1.checkTapMerkleRoot)(tapTreeRoot)).xOnlyPubkey);
}
exports.createTapOutputKey = createTapOutputKey;
function createAggregateNonce(pubNonces) {
    return Buffer.from(noble_ecc_1.musig.nonceAgg(pubNonces));
}
exports.createAggregateNonce = createAggregateNonce;
function createTapTweak(tapInternalKey, tapMerkleRoot) {
    return Buffer.from((0, taproot_1.calculateTapTweak)((0, outputScripts_1.checkXOnlyPublicKey)(tapInternalKey), (0, outputScripts_1.checkTapMerkleRoot)(tapMerkleRoot)));
}
exports.createTapTweak = createTapTweak;
function startMusig2SigningSession(aggNonce, hash, publicKeys, tweak) {
    return noble_ecc_1.musig.startSigningSession(aggNonce, hash, publicKeys, { tweak, xOnly: true });
}
function musig2PartialSign(privateKey, publicNonce, sessionKey, nonceStore) {
    (0, outputScripts_1.checkTxHash)(Buffer.from(sessionKey.msg));
    return Buffer.from(noble_ecc_1.musig.partialSign({
        secretKey: privateKey,
        publicNonce: nonceStore.getRef(publicNonce),
        sessionKey,
    }));
}
exports.musig2PartialSign = musig2PartialSign;
function musig2PartialSigVerify(sig, publicKey, publicNonce, sessionKey) {
    (0, outputScripts_1.checkTxHash)(Buffer.from(sessionKey.msg));
    return noble_ecc_1.musig.partialVerify({ sig, publicKey, publicNonce, sessionKey });
}
exports.musig2PartialSigVerify = musig2PartialSigVerify;
function musig2AggregateSigs(sigs, sessionKey) {
    return Buffer.from(noble_ecc_1.musig.signAgg(sigs, sessionKey));
}
exports.musig2AggregateSigs = musig2AggregateSigs;
/** @return session key that can be used to reference the session later */
function createMusig2SigningSession(sessionArgs) {
    (0, outputScripts_1.checkTxHash)(sessionArgs.txHash);
    const aggNonce = createAggregateNonce(sessionArgs.pubNonces);
    const tweak = createTapTweak(sessionArgs.internalPubKey, sessionArgs.tapTreeRoot);
    return startMusig2SigningSession(aggNonce, sessionArgs.txHash, sessionArgs.pubKeys, tweak);
}
exports.createMusig2SigningSession = createMusig2SigningSession;
/**
 * @returns psbt proprietary key for musig2 participant key value data
 * If no key value exists, undefined is returned.
 */
function parsePsbtMusig2Participants(input) {
    const participantsKeyVals = (0, PsbtUtil_1.getPsbtInputProprietaryKeyVals)(input, {
        identifier: PsbtUtil_1.PSBT_PROPRIETARY_IDENTIFIER,
        subtype: PsbtUtil_1.ProprietaryKeySubtype.MUSIG2_PARTICIPANT_PUB_KEYS,
    });
    if (!participantsKeyVals.length) {
        return undefined;
    }
    if (participantsKeyVals.length > 1) {
        throw new Error(`Found ${participantsKeyVals.length} matching participant key value instead of 1`);
    }
    return decodePsbtMusig2Participants(participantsKeyVals[0]);
}
exports.parsePsbtMusig2Participants = parsePsbtMusig2Participants;
/**
 * @returns psbt proprietary key for musig2 public nonce key value data
 * If no key value exists, undefined is returned.
 */
function parsePsbtMusig2Nonces(input) {
    const nonceKeyVals = (0, PsbtUtil_1.getPsbtInputProprietaryKeyVals)(input, {
        identifier: PsbtUtil_1.PSBT_PROPRIETARY_IDENTIFIER,
        subtype: PsbtUtil_1.ProprietaryKeySubtype.MUSIG2_PUB_NONCE,
    });
    if (!nonceKeyVals.length) {
        return undefined;
    }
    if (nonceKeyVals.length > 2) {
        throw new Error(`Found ${nonceKeyVals.length} matching nonce key value instead of 1 or 2`);
    }
    return nonceKeyVals.map((kv) => decodePsbtMusig2Nonce(kv));
}
exports.parsePsbtMusig2Nonces = parsePsbtMusig2Nonces;
/**
 * @returns psbt proprietary key for musig2 partial sig key value data
 * If no key value exists, undefined is returned.
 */
function parsePsbtMusig2PartialSigs(input) {
    const sigKeyVals = (0, PsbtUtil_1.getPsbtInputProprietaryKeyVals)(input, {
        identifier: PsbtUtil_1.PSBT_PROPRIETARY_IDENTIFIER,
        subtype: PsbtUtil_1.ProprietaryKeySubtype.MUSIG2_PARTIAL_SIG,
    });
    if (!sigKeyVals.length) {
        return undefined;
    }
    if (sigKeyVals.length > 2) {
        throw new Error(`Found ${sigKeyVals.length} matching partial signature key value instead of 1 or 2`);
    }
    return sigKeyVals.map((kv) => decodePsbtMusig2PartialSig(kv));
}
exports.parsePsbtMusig2PartialSigs = parsePsbtMusig2PartialSigs;
/**
 * Assert musig2 participant key value data with tapInternalKey and tapMerkleRoot.
 * <tapOutputKey><tapInputKey> => <participantKey1><participantKey2>
 * Using tapMerkleRoot and 2 participant keys, the tapInputKey is validated and using tapMerkleRoot and tapInputKey,
 * the tapOutputKey is validated.
 */
function assertPsbtMusig2Participants(participantKeyValData, tapInternalKey, tapMerkleRoot) {
    (0, outputScripts_1.checkXOnlyPublicKey)(tapInternalKey);
    (0, outputScripts_1.checkTapMerkleRoot)(tapMerkleRoot);
    const participantPubKeys = participantKeyValData.participantPubKeys;
    const internalKey = createTapInternalKey(participantPubKeys);
    if (!internalKey.equals(participantKeyValData.tapInternalKey)) {
        throw new Error('Invalid participants keydata tapInternalKey');
    }
    const outputKey = createTapOutputKey(internalKey, tapMerkleRoot);
    if (!outputKey.equals(participantKeyValData.tapOutputKey)) {
        throw new Error('Invalid participants keydata tapOutputKey');
    }
    if (!internalKey.equals(tapInternalKey)) {
        throw new Error('tapInternalKey and aggregated participant pub keys does not match');
    }
}
exports.assertPsbtMusig2Participants = assertPsbtMusig2Participants;
/**
 * Assert musig2 public nonce key value data with participant key value data
 * (refer assertPsbtMusig2ParticipantsKeyValData).
 * <participantKey1><tapOutputKey> => <pubNonce1>
 * <participantKey2><tapOutputKey> => <pubNonce2>
 * Checks against participant keys and tapOutputKey
 */
function assertPsbtMusig2Nonces(noncesKeyValData, participantKeyValData) {
    (0, outputScripts_1.checkXOnlyPublicKey)(participantKeyValData.tapOutputKey);
    participantKeyValData.participantPubKeys.forEach((kv) => (0, outputScripts_1.checkPlainPublicKey)(kv));
    if (participantKeyValData.participantPubKeys[0].equals(participantKeyValData.participantPubKeys[1])) {
        throw new Error(`Duplicate participant pub keys found`);
    }
    if (noncesKeyValData.length > 2) {
        throw new Error(`Invalid nonce key value count ${noncesKeyValData.length}`);
    }
    noncesKeyValData.forEach((nonceKv) => {
        const index = participantKeyValData.participantPubKeys.findIndex((pubKey) => nonceKv.participantPubKey.equals(pubKey));
        if (index < 0) {
            throw new Error('Invalid nonce keydata participant pub key');
        }
        if (!nonceKv.tapOutputKey.equals(participantKeyValData.tapOutputKey)) {
            throw new Error('Invalid nonce keydata tapOutputKey');
        }
    });
}
exports.assertPsbtMusig2Nonces = assertPsbtMusig2Nonces;
/**
 * @returns Input object but sig hash type data is taken out from partialSig field.
 * If sig hash type is not common for all sigs, error out, otherwise returns the modified object and single hash type.
 */
function getSigHashTypeFromSigs(partialSigs) {
    if (!partialSigs.length) {
        throw new Error('partialSigs array can not be empty');
    }
    const pSigsWithHashType = partialSigs.map((kv) => {
        const { partialSig, participantPubKey, tapOutputKey } = kv;
        return partialSig.length === 33
            ? { pSig: { partialSig: partialSig.slice(0, 32), participantPubKey, tapOutputKey }, sigHashType: partialSig[32] }
            : { pSig: { partialSig, participantPubKey, tapOutputKey }, sigHashType: index_1.Transaction.SIGHASH_DEFAULT };
    });
    const sigHashType = pSigsWithHashType[0].sigHashType;
    if (!pSigsWithHashType.every((pSig) => pSig.sigHashType === sigHashType)) {
        throw new Error('signatures must use same sig hash type');
    }
    return { partialSigs: pSigsWithHashType.map(({ pSig }) => pSig), sigHashType };
}
exports.getSigHashTypeFromSigs = getSigHashTypeFromSigs;
function createMusig2DeterministicNonce(params) {
    return Buffer.from(noble_ecc_1.musig.deterministicNonceGen({
        secretKey: params.privateKey,
        aggOtherNonce: noble_ecc_1.musig.nonceAgg([params.otherNonce]),
        publicKeys: params.publicKeys,
        tweaks: [{ tweak: createTapTweak(params.internalPubKey, params.tapTreeRoot), xOnly: true }],
        msg: params.hash,
    }).publicNonce);
}
exports.createMusig2DeterministicNonce = createMusig2DeterministicNonce;
function musig2DeterministicSign(params) {
    const { sig, sessionKey, publicNonce } = noble_ecc_1.musig.deterministicSign({
        secretKey: params.privateKey,
        aggOtherNonce: noble_ecc_1.musig.nonceAgg([params.otherNonce]),
        publicKeys: params.publicKeys,
        tweaks: [{ tweak: createTapTweak(params.internalPubKey, params.tapTreeRoot), xOnly: true }],
        msg: params.hash,
    });
    return { sig: Buffer.from(sig), sessionKey, publicNonce: Buffer.from(publicNonce) };
}
exports.musig2DeterministicSign = musig2DeterministicSign;
//# sourceMappingURL=data:application/json;base64,