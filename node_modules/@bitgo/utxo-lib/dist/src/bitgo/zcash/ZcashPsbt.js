"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZcashPsbt = void 0;
const UtxoPsbt_1 = require("../UtxoPsbt");
const ZcashTransaction_1 = require("./ZcashTransaction");
const __1 = require("../../");
const bip174_1 = require("bip174");
const types = require("bitcoinjs-lib/src/types");
const PsbtUtil_1 = require("../PsbtUtil");
const typeforce = require('typeforce');
const CONSENSUS_BRANCH_ID_KEY = Buffer.concat([
    Buffer.of(0xfc),
    Buffer.of(0x05),
    Buffer.from(PsbtUtil_1.PSBT_PROPRIETARY_IDENTIFIER),
    Buffer.of(PsbtUtil_1.ProprietaryKeySubtype.ZEC_CONSENSUS_BRANCH_ID),
]);
class ZcashPsbt extends UtxoPsbt_1.UtxoPsbt {
    static transactionFromBuffer(buffer, network) {
        return ZcashTransaction_1.ZcashTransaction.fromBuffer(buffer, false, 'bigint', network);
    }
    static createPsbt(opts, data) {
        return new ZcashPsbt(opts, data || new bip174_1.Psbt(new __1.PsbtTransaction({ tx: new ZcashTransaction_1.ZcashTransaction(opts.network) })));
    }
    /**
     * In version < 5 of Zcash transactions, the consensus branch ID is not serialized in the transaction
     * whereas in version 5 it is. If the transaction is less than a version 5, set the consensus branch id
     * in the global map in the psbt. If it is a version 5 transaction, throw an error if the consensus
     * branch id is set in the psbt (because it should be on the transaction already).
     * @param buffer Psbt buffer
     * @param opts options
     */
    static fromBuffer(buffer, opts) {
        var _a;
        const psbt = super.fromBuffer(buffer, opts);
        // Read `consensusBranchId` from the global-map
        let consensusBranchId = undefined;
        (_a = psbt.data.globalMap.unknownKeyVals) === null || _a === void 0 ? void 0 : _a.forEach(({ key, value }, i) => {
            if (key.equals(CONSENSUS_BRANCH_ID_KEY)) {
                consensusBranchId = value.readUint32LE();
            }
        });
        switch (psbt.tx.version) {
            case 4:
            case ZcashTransaction_1.ZcashTransaction.VERSION4_BRANCH_CANOPY:
            case ZcashTransaction_1.ZcashTransaction.VERSION4_BRANCH_NU5:
                if (!consensusBranchId || !psbt.data.globalMap.unknownKeyVals) {
                    throw new Error('Could not find consensus branch id on psbt for version 4 Zcash transaction');
                }
                psbt.tx.consensusBranchId = consensusBranchId;
                psbt.data.globalMap.unknownKeyVals = psbt.data.globalMap.unknownKeyVals.filter(({ key }) => key !== CONSENSUS_BRANCH_ID_KEY);
                // Delete consensusBranchId from globalMap so that if we were to serialize the psbt again
                // we would not add a duplicate key into the global map
                psbt.data.globalMap.unknownKeyVals.pop();
                return psbt;
            case 5:
            case ZcashTransaction_1.ZcashTransaction.VERSION5_BRANCH_NU5:
                if (consensusBranchId) {
                    throw new Error('Found consensus branch id in psbt global-map for version 5 Zcash transaction');
                }
                return psbt;
            default:
                throw new Error(`Unsupported transaction version ${psbt.tx.version}`);
        }
    }
    /**
     * If it is a version 4 transaction, add the consensus branch id to
     * the global map. If it is a version 5 transaction, just return the
     * buffer because the consensus branch id is already serialized in
     * the transaction.
     */
    toBuffer() {
        if (this.tx.version === 5 || this.tx.version === ZcashTransaction_1.ZcashTransaction.VERSION5_BRANCH_NU5) {
            return super.toBuffer();
        }
        const value = Buffer.alloc(4);
        value.writeUint32LE(this.tx.consensusBranchId);
        this.addUnknownKeyValToGlobal({ key: CONSENSUS_BRANCH_ID_KEY, value });
        if (!this.data.globalMap.unknownKeyVals) {
            throw new Error('Failed adding consensus branch id to unknownKeyVals');
        }
        const buff = super.toBuffer();
        this.data.globalMap.unknownKeyVals.pop();
        return buff;
    }
    setVersion(version, overwinter = true) {
        typeforce(types.UInt32, version);
        this.tx.overwintered = overwinter ? 1 : 0;
        this.tx.version = version;
        return this;
    }
    setDefaultsForVersion(network, version) {
        switch (version) {
            case 4:
            case ZcashTransaction_1.ZcashTransaction.VERSION4_BRANCH_CANOPY:
            case ZcashTransaction_1.ZcashTransaction.VERSION4_BRANCH_NU5:
                this.setVersion(4);
                break;
            case 5:
            case ZcashTransaction_1.ZcashTransaction.VERSION5_BRANCH_NU5:
                this.setVersion(5);
                break;
            default:
                throw new Error(`invalid version ${version}`);
        }
        this.tx.versionGroupId = (0, ZcashTransaction_1.getDefaultVersionGroupIdForVersion)(version);
        this.tx.consensusBranchId = (0, ZcashTransaction_1.getDefaultConsensusBranchIdForVersion)(network, version);
    }
    // For Zcash transactions, we do not have to have non-witness UTXO data for non-segwit
    // transactions because zcash hashes the value directly. Thus, it is unnecessary to have
    // the previous transaction hash on the unspent.
    signInput(inputIndex, keyPair, sighashTypes) {
        return (0, PsbtUtil_1.withUnsafeNonSegwit)(this, super.signInput.bind(this, inputIndex, keyPair, sighashTypes));
    }
    validateSignaturesOfInput(inputIndex, validator, pubkey) {
        return (0, PsbtUtil_1.withUnsafeNonSegwit)(this, super.validateSignaturesOfInput.bind(this, inputIndex, validator, pubkey));
    }
    setPropertyCheckSignatures(propName, value) {
        if (this.tx[propName] === value) {
            return;
        }
        this.checkForSignatures(propName);
        this.tx[propName] = value;
    }
    setConsensusBranchId(consensusBranchId) {
        typeforce(types.UInt32, consensusBranchId);
        this.setPropertyCheckSignatures('consensusBranchId', consensusBranchId);
    }
    setVersionGroupId(versionGroupId) {
        typeforce(types.UInt32, versionGroupId);
        this.setPropertyCheckSignatures('versionGroupId', versionGroupId);
    }
    setExpiryHeight(expiryHeight) {
        typeforce(types.UInt32, expiryHeight);
        this.setPropertyCheckSignatures('expiryHeight', expiryHeight);
    }
}
exports.ZcashPsbt = ZcashPsbt;
//# sourceMappingURL=data:application/json;base64,