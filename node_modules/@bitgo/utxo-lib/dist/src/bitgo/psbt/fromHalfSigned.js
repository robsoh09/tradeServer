"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.unsign = exports.getInputUpdate = void 0;
const assert = require("assert");
const __1 = require("../..");
const parseInput_1 = require("../parseInput");
const signature_1 = require("../signature");
const outputScripts_1 = require("../outputScripts");
function omitUndefined(v) {
    return Object.fromEntries(Object.entries(v).filter(([k, v]) => v !== undefined));
}
function getInputUpdate(tx, vin, prevOuts) {
    const nonWitnessUtxo = prevOuts[vin].prevTx;
    const { script, witness } = tx.ins[vin];
    if (script.length === 0 && witness.length === 0) {
        return nonWitnessUtxo ? { nonWitnessUtxo } : {};
    }
    const parsedInput = (0, parseInput_1.parseSignatureScript)(tx.ins[vin]);
    assert.ok(parsedInput.scriptType !== 'taprootKeyPathSpend');
    function getPartialSigs() {
        assert.ok(parsedInput.scriptType !== 'taprootKeyPathSpend');
        return (0, signature_1.getSignaturesWithPublicKeys)(tx, vin, prevOuts, parsedInput.publicKeys).flatMap((signature, i) => signature
            ? [
                {
                    pubkey: parsedInput.publicKeys[i],
                    signature,
                },
            ]
            : []);
    }
    // Because Zcash directly hashes the value for non-segwit transactions, we do not need to check indirectly
    // with the previous transaction. Therefore, we can treat Zcash non-segwit transactions as Bitcoin
    // segwit transactions
    if (parsedInput.scriptType !== 'taprootScriptPathSpend' &&
        !(0, outputScripts_1.hasWitnessData)(parsedInput.scriptType) &&
        !nonWitnessUtxo &&
        (0, __1.getMainnet)(tx.network) !== __1.networks.zcash) {
        throw new Error(`scriptType ${parsedInput.scriptType} requires prevTx Buffer`);
    }
    switch (parsedInput.scriptType) {
        case 'p2shP2pk':
            return {
                nonWitnessUtxo,
                partialSig: [{ pubkey: parsedInput.publicKeys[0], signature: parsedInput.signatures[0] }],
            };
        case 'p2sh':
        case 'p2wsh':
        case 'p2shP2wsh':
            return omitUndefined({
                nonWitnessUtxo,
                partialSig: getPartialSigs(),
                redeemScript: parsedInput.redeemScript,
                witnessScript: parsedInput.witnessScript,
            });
        case 'taprootScriptPathSpend':
            const leafHash = __1.taproot.getTapleafHash(__1.ecc, parsedInput.controlBlock, parsedInput.pubScript);
            return {
                tapLeafScript: [
                    {
                        controlBlock: parsedInput.controlBlock,
                        script: parsedInput.pubScript,
                        leafVersion: parsedInput.leafVersion,
                    },
                ],
                tapScriptSig: getPartialSigs().map((obj) => ({ ...obj, leafHash })),
            };
    }
}
exports.getInputUpdate = getInputUpdate;
/**
 * Takes a partially signed transaction and removes the scripts and signatures.
 *
 * Inputs must be one of:
 *  - p2shP2pk
 *  - p2sh 2-of-3
 *  - p2shP2wsh 2-of-3
 *  - p2wsh 2-of-3
 *  - p2tr script path 2-of-2
 *
 * @param tx the partially signed transaction
 * @param prevOuts
 *
 * @return the removed scripts and signatures, ready to be added to a PSBT
 */
function unsign(tx, prevOuts) {
    return tx.ins.map((input, vin) => {
        const update = getInputUpdate(tx, vin, prevOuts);
        input.witness = [];
        input.script = Buffer.alloc(0);
        return update;
    });
}
exports.unsign = unsign;
//# sourceMappingURL=data:application/json;base64,