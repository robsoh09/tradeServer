import { Ada } from './ada';
import { BitGoBase, CoinConstructor, NamedCoinConstructor } from '@bitgo/sdk-core';
export interface AdaTokenConfig {
    name: string;
    type: string;
    coin: string;
    network: string;
    policyId: string;
    assetName: string;
    decimalPlaces: number;
}
export declare class AdaToken extends Ada {
    readonly tokenConfig: AdaTokenConfig;
    constructor(bitgo: BitGoBase, tokenConfig: AdaTokenConfig);
    static createTokenConstructor(config: AdaTokenConfig): CoinConstructor;
    static createTokenConstructors(): NamedCoinConstructor[];
    get name(): string;
    get coin(): string;
    get network(): string;
    get policyId(): string;
    get assetName(): string;
    get decimalPlaces(): number;
    getChain(): string;
    getBaseChain(): string;
    getFullName(): string;
    getBaseFactor(): number;
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    valuelessTransferAllowed(): boolean;
    /**
     * Flag for sending data along with transactions
     * @returns {boolean} True if okay to send tx data (CELO), false otherwise
     */
    transactionDataAllowed(): boolean;
}
//# sourceMappingURL=adaToken.d.ts.map