/// <reference types="node" />
import BigNumber from 'bignumber.js';
import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { BaseAddress, BaseKey, BaseTransactionBuilder, PublicKey as BasePublicKey, Signature, TransactionType } from '@bitgo/sdk-core';
import { Asset, Transaction, TransactionInput, TransactionOutput, Withdrawal } from './transaction';
import { KeyPair } from './keyPair';
import * as CardanoWasm from '@emurgo/cardano-serialization-lib-nodejs';
export declare abstract class TransactionBuilder extends BaseTransactionBuilder {
    protected _transaction: Transaction;
    protected _signers: KeyPair[];
    protected _transactionInputs: TransactionInput[];
    protected _transactionOutputs: TransactionOutput[];
    protected _initSignatures: Signature[];
    protected _signatures: Signature[];
    protected _changeAddress: string;
    protected _senderBalance: string;
    protected _ttl: number;
    protected _certs: CardanoWasm.Certificate[];
    protected _withdrawals: Withdrawal[];
    protected _type: TransactionType;
    protected _multiAssets: Asset[];
    private _fee;
    constructor(_coinConfig: Readonly<CoinConfig>);
    input(i: TransactionInput): this;
    output(o: TransactionOutput): this;
    assets(a: Asset): this;
    ttl(t: number): this;
    changeAddress(addr: string, totalInputBalance: string): this;
    fee(fee: string): this;
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     *
     * @param {Transaction} tx the transaction data
     */
    initBuilder(tx: Transaction): void;
    /** @inheritdoc */
    protected fromImplementation(rawTransaction: string): Transaction;
    /** @inheritdoc */
    protected buildImplementation(): Promise<Transaction>;
    /** @inheritdoc */
    protected signImplementation(key: BaseKey): Transaction;
    /** @inheritdoc */
    protected get transaction(): Transaction;
    /** @inheritdoc */
    protected set transaction(transaction: Transaction);
    /** @inheritdoc */
    validateAddress(address: BaseAddress, addressFormat?: string): void;
    /** @inheritdoc */
    validateKey(key: BaseKey): void;
    /** @inheritdoc */
    validateRawTransaction(rawTransaction: any): void;
    /** @inheritdoc */
    validateTransaction(transaction: Transaction): void;
    /** @inheritdoc */
    validateValue(value: BigNumber): void;
    /** @inheritDoc */
    addSignature(publicKey: BasePublicKey, signature: Buffer): void;
    private getAllSignatures;
}
//# sourceMappingURL=transactionBuilder.d.ts.map