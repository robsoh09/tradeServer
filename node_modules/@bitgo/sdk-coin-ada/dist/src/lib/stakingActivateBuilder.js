"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StakingActivateBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const transactionBuilder_1 = require("./transactionBuilder");
const CardanoWasm = __importStar(require("@emurgo/cardano-serialization-lib-nodejs"));
class StakingActivateBuilder extends transactionBuilder_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._type = sdk_core_1.TransactionType.StakingActivate;
    }
    get transactionType() {
        return sdk_core_1.TransactionType.StakingActivate;
    }
    /** @inheritdoc */
    initBuilder(tx) {
        super.initBuilder(tx);
    }
    /**
     * Creates the proper certificates needed to register a user's stake key & then delegate to a given pool.
     *
     * @param stakingPublicKey The user's public stake key
     * @param poolHash Pool ID Hash of the pool we are going to delegate to
     */
    stakingCredential(stakingPublicKey, poolHash) {
        const stakeCredential = CardanoWasm.StakeCredential.from_keyhash(CardanoWasm.PublicKey.from_bytes(Buffer.from(stakingPublicKey, 'hex')).hash());
        const stakeKeyRegistrationCert = CardanoWasm.Certificate.new_stake_registration(CardanoWasm.StakeRegistration.new(stakeCredential));
        this._certs.push(stakeKeyRegistrationCert);
        const stakeDelegationCert = CardanoWasm.Certificate.new_stake_delegation(CardanoWasm.StakeDelegation.new(stakeCredential, CardanoWasm.Ed25519KeyHash.from_bytes(Buffer.from(poolHash, 'hex'))));
        this._certs.push(stakeDelegationCert);
        return this;
    }
    /** @inheritdoc */
    async buildImplementation() {
        const tx = await super.buildImplementation();
        tx.setTransactionType(sdk_core_1.TransactionType.StakingActivate);
        return tx;
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        return super.fromImplementation(rawTransaction);
    }
    /** @inheritdoc */
    signImplementation(key) {
        return super.signImplementation(key);
    }
}
exports.StakingActivateBuilder = StakingActivateBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Rha2luZ0FjdGl2YXRlQnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvc3Rha2luZ0FjdGl2YXRlQnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDhDQUEyRDtBQUUzRCw2REFBMEQ7QUFFMUQsc0ZBQXdFO0FBRXhFLE1BQWEsc0JBQXVCLFNBQVEsdUNBQWtCO0lBQzVELFlBQVksV0FBaUM7UUFDM0MsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ25CLElBQUksQ0FBQyxLQUFLLEdBQUcsMEJBQWUsQ0FBQyxlQUFlLENBQUM7SUFDL0MsQ0FBQztJQUVELElBQWMsZUFBZTtRQUMzQixPQUFPLDBCQUFlLENBQUMsZUFBZSxDQUFDO0lBQ3pDLENBQUM7SUFFRCxrQkFBa0I7SUFDbEIsV0FBVyxDQUFDLEVBQWU7UUFDekIsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxpQkFBaUIsQ0FBQyxnQkFBd0IsRUFBRSxRQUFnQjtRQUMxRCxNQUFNLGVBQWUsR0FBRyxXQUFXLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FDOUQsV0FBVyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUM5RSxDQUFDO1FBQ0YsTUFBTSx3QkFBd0IsR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDLHNCQUFzQixDQUM3RSxXQUFXLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUNuRCxDQUFDO1FBQ0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUMzQyxNQUFNLG1CQUFtQixHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUMsb0JBQW9CLENBQ3RFLFdBQVcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUM3QixlQUFlLEVBQ2YsV0FBVyxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FDcEUsQ0FDRixDQUFDO1FBQ0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUN0QyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxrQkFBa0I7SUFDUixLQUFLLENBQUMsbUJBQW1CO1FBQ2pDLE1BQU0sRUFBRSxHQUFHLE1BQU0sS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDN0MsRUFBRSxDQUFDLGtCQUFrQixDQUFDLDBCQUFlLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDdkQsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQsa0JBQWtCO0lBQ1Isa0JBQWtCLENBQUMsY0FBc0I7UUFDakQsT0FBTyxLQUFLLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELGtCQUFrQjtJQUNSLGtCQUFrQixDQUFDLEdBQVk7UUFDdkMsT0FBTyxLQUFLLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkMsQ0FBQztDQUNGO0FBdkRELHdEQXVEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VLZXksIFRyYW5zYWN0aW9uVHlwZSB9IGZyb20gJ0BiaXRnby9zZGstY29yZSc7XG5pbXBvcnQgeyBCYXNlQ29pbiBhcyBDb2luQ29uZmlnIH0gZnJvbSAnQGJpdGdvL3N0YXRpY3MnO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb25CdWlsZGVyIH0gZnJvbSAnLi90cmFuc2FjdGlvbkJ1aWxkZXInO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb24gfSBmcm9tICcuL3RyYW5zYWN0aW9uJztcbmltcG9ydCAqIGFzIENhcmRhbm9XYXNtIGZyb20gJ0BlbXVyZ28vY2FyZGFuby1zZXJpYWxpemF0aW9uLWxpYi1ub2RlanMnO1xuXG5leHBvcnQgY2xhc3MgU3Rha2luZ0FjdGl2YXRlQnVpbGRlciBleHRlbmRzIFRyYW5zYWN0aW9uQnVpbGRlciB7XG4gIGNvbnN0cnVjdG9yKF9jb2luQ29uZmlnOiBSZWFkb25seTxDb2luQ29uZmlnPikge1xuICAgIHN1cGVyKF9jb2luQ29uZmlnKTtcbiAgICB0aGlzLl90eXBlID0gVHJhbnNhY3Rpb25UeXBlLlN0YWtpbmdBY3RpdmF0ZTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXQgdHJhbnNhY3Rpb25UeXBlKCk6IFRyYW5zYWN0aW9uVHlwZSB7XG4gICAgcmV0dXJuIFRyYW5zYWN0aW9uVHlwZS5TdGFraW5nQWN0aXZhdGU7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgaW5pdEJ1aWxkZXIodHg6IFRyYW5zYWN0aW9uKTogdm9pZCB7XG4gICAgc3VwZXIuaW5pdEJ1aWxkZXIodHgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGhlIHByb3BlciBjZXJ0aWZpY2F0ZXMgbmVlZGVkIHRvIHJlZ2lzdGVyIGEgdXNlcidzIHN0YWtlIGtleSAmIHRoZW4gZGVsZWdhdGUgdG8gYSBnaXZlbiBwb29sLlxuICAgKlxuICAgKiBAcGFyYW0gc3Rha2luZ1B1YmxpY0tleSBUaGUgdXNlcidzIHB1YmxpYyBzdGFrZSBrZXlcbiAgICogQHBhcmFtIHBvb2xIYXNoIFBvb2wgSUQgSGFzaCBvZiB0aGUgcG9vbCB3ZSBhcmUgZ29pbmcgdG8gZGVsZWdhdGUgdG9cbiAgICovXG4gIHN0YWtpbmdDcmVkZW50aWFsKHN0YWtpbmdQdWJsaWNLZXk6IHN0cmluZywgcG9vbEhhc2g6IHN0cmluZyk6IHRoaXMge1xuICAgIGNvbnN0IHN0YWtlQ3JlZGVudGlhbCA9IENhcmRhbm9XYXNtLlN0YWtlQ3JlZGVudGlhbC5mcm9tX2tleWhhc2goXG4gICAgICBDYXJkYW5vV2FzbS5QdWJsaWNLZXkuZnJvbV9ieXRlcyhCdWZmZXIuZnJvbShzdGFraW5nUHVibGljS2V5LCAnaGV4JykpLmhhc2goKVxuICAgICk7XG4gICAgY29uc3Qgc3Rha2VLZXlSZWdpc3RyYXRpb25DZXJ0ID0gQ2FyZGFub1dhc20uQ2VydGlmaWNhdGUubmV3X3N0YWtlX3JlZ2lzdHJhdGlvbihcbiAgICAgIENhcmRhbm9XYXNtLlN0YWtlUmVnaXN0cmF0aW9uLm5ldyhzdGFrZUNyZWRlbnRpYWwpXG4gICAgKTtcbiAgICB0aGlzLl9jZXJ0cy5wdXNoKHN0YWtlS2V5UmVnaXN0cmF0aW9uQ2VydCk7XG4gICAgY29uc3Qgc3Rha2VEZWxlZ2F0aW9uQ2VydCA9IENhcmRhbm9XYXNtLkNlcnRpZmljYXRlLm5ld19zdGFrZV9kZWxlZ2F0aW9uKFxuICAgICAgQ2FyZGFub1dhc20uU3Rha2VEZWxlZ2F0aW9uLm5ldyhcbiAgICAgICAgc3Rha2VDcmVkZW50aWFsLFxuICAgICAgICBDYXJkYW5vV2FzbS5FZDI1NTE5S2V5SGFzaC5mcm9tX2J5dGVzKEJ1ZmZlci5mcm9tKHBvb2xIYXNoLCAnaGV4JykpXG4gICAgICApXG4gICAgKTtcbiAgICB0aGlzLl9jZXJ0cy5wdXNoKHN0YWtlRGVsZWdhdGlvbkNlcnQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIHByb3RlY3RlZCBhc3luYyBidWlsZEltcGxlbWVudGF0aW9uKCk6IFByb21pc2U8VHJhbnNhY3Rpb24+IHtcbiAgICBjb25zdCB0eCA9IGF3YWl0IHN1cGVyLmJ1aWxkSW1wbGVtZW50YXRpb24oKTtcbiAgICB0eC5zZXRUcmFuc2FjdGlvblR5cGUoVHJhbnNhY3Rpb25UeXBlLlN0YWtpbmdBY3RpdmF0ZSk7XG4gICAgcmV0dXJuIHR4O1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIHByb3RlY3RlZCBmcm9tSW1wbGVtZW50YXRpb24ocmF3VHJhbnNhY3Rpb246IHN0cmluZyk6IFRyYW5zYWN0aW9uIHtcbiAgICByZXR1cm4gc3VwZXIuZnJvbUltcGxlbWVudGF0aW9uKHJhd1RyYW5zYWN0aW9uKTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICBwcm90ZWN0ZWQgc2lnbkltcGxlbWVudGF0aW9uKGtleTogQmFzZUtleSk6IFRyYW5zYWN0aW9uIHtcbiAgICByZXR1cm4gc3VwZXIuc2lnbkltcGxlbWVudGF0aW9uKGtleSk7XG4gIH1cbn1cbiJdfQ==