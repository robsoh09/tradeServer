"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const CardanoWasm = __importStar(require("@emurgo/cardano-serialization-lib-nodejs"));
const keyPair_1 = require("./keyPair");
var CertType;
(function (CertType) {
    CertType[CertType["StakeKeyRegistration"] = 0] = "StakeKeyRegistration";
    CertType[CertType["StakeKeyDelegation"] = 1] = "StakeKeyDelegation";
    CertType[CertType["StakeKeyDeregistration"] = 2] = "StakeKeyDeregistration";
    CertType[CertType["StakePoolRegistration"] = 3] = "StakePoolRegistration";
})(CertType || (CertType = {}));
class Transaction extends sdk_core_1.BaseTransaction {
    constructor(coinConfig) {
        super(coinConfig);
    }
    get transaction() {
        return this._transaction;
    }
    set transaction(tx) {
        this._transaction = tx;
        this._id = Buffer.from(CardanoWasm.hash_transaction(tx.body()).to_bytes()).toString('hex');
    }
    /** @inheritdoc */
    canSign(key) {
        try {
            new keyPair_1.KeyPair({ prv: key.key });
            return true;
        }
        catch {
            return false;
        }
    }
    toBroadcastFormat() {
        if (!this._transaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction data');
        }
        return Buffer.from(this._transaction.to_bytes()).toString('hex');
    }
    /** @inheritdoc */
    toJson() {
        if (!this._transaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction data');
        }
        const result = {
            id: this.id,
            type: this._type,
            inputs: [],
            outputs: [],
            witnesses: [],
            certs: [],
            withdrawals: [],
        };
        for (let i = 0; i < this._transaction.body().inputs().len(); i++) {
            const input = this._transaction.body().inputs().get(i);
            result.inputs.push({
                transaction_id: Buffer.from(input.transaction_id().to_bytes()).toString('hex'),
                transaction_index: input.index(),
            });
        }
        for (let i = 0; i < this._transaction.body().outputs().len(); i++) {
            const output = this._transaction.body().outputs().get(i);
            result.outputs.push({
                address: output.address().to_bech32(),
                amount: output.amount().coin().to_str(),
                multiAssets: output.amount().multiasset() || undefined,
            });
        }
        if (this._transaction.body().certs()) {
            for (let i = 0; i < this._transaction.body().certs().len(); i++) {
                const cert = this._transaction.body().certs().get(i);
                if (cert.as_stake_registration() !== undefined) {
                    const stakeRegistration = cert.as_stake_registration();
                    result.certs.push({
                        type: CertType.StakeKeyRegistration,
                        stakeCredentialHash: Buffer.from(stakeRegistration.stake_credential().to_bytes()).toString('hex'),
                    });
                }
                if (cert.as_stake_deregistration() !== undefined) {
                    const stakeDeregistration = cert.as_stake_deregistration();
                    result.certs.push({
                        type: CertType.StakeKeyDeregistration,
                        stakeCredentialHash: Buffer.from(stakeDeregistration.stake_credential().to_bytes()).toString('hex'),
                    });
                }
                if (cert.as_stake_delegation() !== undefined) {
                    const stakeDelegation = cert.as_stake_delegation();
                    result.certs.push({
                        type: CertType.StakeKeyDelegation,
                        stakeCredentialHash: Buffer.from(stakeDelegation.stake_credential().to_bytes()).toString('hex'),
                        poolKeyHash: Buffer.from(stakeDelegation.pool_keyhash().to_bytes()).toString('hex'),
                    });
                }
                if (cert.as_pool_registration() !== undefined) {
                    const stakePoolRegistration = cert.as_pool_registration();
                    result.certs.push({
                        type: CertType.StakePoolRegistration,
                        poolKeyHash: Buffer.from(stakePoolRegistration.pool_params().operator().to_bytes()).toString('hex'),
                    });
                }
            }
        }
        result.pledgeDetails = this._pledgeDetails;
        if (this._transaction.body().withdrawals()) {
            const withdrawals = this._transaction.body().withdrawals();
            const keys = withdrawals.keys();
            for (let i = 0; i < keys.len(); i++) {
                const rewardAddress = keys.get(i);
                const reward = withdrawals.get(rewardAddress);
                result.withdrawals.push({
                    stakeAddress: rewardAddress.to_address().to_bytes().toString(),
                    value: reward.to_str(),
                });
            }
        }
        if (this._transaction.witness_set().vkeys() !== undefined) {
            const vkeys = this._transaction.witness_set().vkeys();
            for (let i = 0; i < vkeys.len(); i++) {
                const vkey = this._transaction.witness_set().vkeys().get(i);
                result.witnesses.push({
                    publicKey: vkey === null || vkey === void 0 ? void 0 : vkey.vkey().public_key().to_hex(),
                    signature: vkey === null || vkey === void 0 ? void 0 : vkey.signature().to_hex(),
                });
            }
        }
        return result;
    }
    /**
     * Build input and output field for this transaction
     *
     */
    loadInputsAndOutputs() {
        const outputs = [];
        const inputs = [];
        const tx_outputs = this._transaction.body().outputs();
        for (let i = 0; i < tx_outputs.len(); i++) {
            const output = tx_outputs.get(i);
            outputs.push({
                address: output.address().to_bech32(),
                value: output.amount().coin().to_str(),
            });
        }
        this._outputs = outputs;
        this._inputs = inputs;
    }
    /** @inheritdoc */
    get signablePayload() {
        return Buffer.from(CardanoWasm.hash_transaction(this._transaction.body()).to_bytes());
    }
    /**
     * Sets this transaction payload
     *
     * @param rawTx
     */
    fromRawTransaction(rawTx) {
        if (CardanoWasm.Transaction === undefined) {
            // a temp fix until we solve import problem in webpack
            throw new sdk_core_1.NodeEnvironmentError('unable to load cardano serialization library');
        }
        const HEX_REGEX = /^[0-9a-fA-F]+$/;
        const bufferRawTransaction = HEX_REGEX.test(rawTx) ? Buffer.from(rawTx, 'hex') : Buffer.from(rawTx, 'base64');
        try {
            const txn = CardanoWasm.Transaction.from_bytes(bufferRawTransaction);
            this._transaction = txn;
            this._id = Buffer.from(CardanoWasm.hash_transaction(txn.body()).to_bytes()).toString('hex');
            this._type = sdk_core_1.TransactionType.Send;
            if (this._transaction.body().certs()) {
                const certs = [];
                for (let i = 0; i < this._transaction.body().certs().len(); i++) {
                    const cert = this._transaction.body().certs().get(i);
                    certs.push(cert);
                }
                if (certs.some((c) => c.as_pool_registration() !== undefined)) {
                    this._type = sdk_core_1.TransactionType.StakingPledge;
                    const stakeKeyRegistration = certs.find((c) => c.as_stake_registration() !== undefined);
                    const stakeKeyDelegation = certs.find((c) => c.as_stake_delegation() !== undefined);
                    const stakePoolRegistration = certs.find((c) => c.as_pool_registration() !== undefined);
                    this._pledgeDetails = {
                        stakeKeyRegistration: this.loadStakeKeyRegistration(stakeKeyRegistration),
                        stakeKeyDelegation: this.loadStakeKeyDelegation(stakeKeyDelegation),
                        stakePoolRegistration: this.loadStakePoolRegistration(stakePoolRegistration),
                    };
                }
                else if (certs.some((c) => c.as_stake_registration() !== undefined)) {
                    this._type = sdk_core_1.TransactionType.StakingActivate;
                }
                else if (certs.some((c) => c.as_stake_deregistration() !== undefined)) {
                    this._type = sdk_core_1.TransactionType.StakingDeactivate;
                }
            }
            if (this._transaction.body().withdrawals()) {
                this._type = sdk_core_1.TransactionType.StakingWithdraw;
            }
            this._fee = txn.body().fee().to_str();
            this.loadInputsAndOutputs();
            if (this._transaction.witness_set().vkeys()) {
                const vkeys = this._transaction.witness_set().vkeys();
                for (let i = 0; i < vkeys.len(); i++) {
                    const vkey = vkeys.get(i);
                    this._signatures.push(vkey.signature().to_hex());
                }
            }
        }
        catch (e) {
            throw new sdk_core_1.InvalidTransactionError('unable to build transaction from raw');
        }
    }
    loadStakeKeyRegistration(certificate) {
        if (certificate === undefined) {
            return undefined;
        }
        const stakeRegistration = certificate.as_stake_registration();
        if (stakeRegistration !== undefined && stakeRegistration.stake_credential().to_keyhash() !== undefined) {
            return {
                type: CertType.StakeKeyRegistration,
                stakeCredentialHash: stakeRegistration.stake_credential().to_keyhash().to_hex(),
            };
        }
        else {
            return undefined;
        }
    }
    loadStakeKeyDelegation(certificate) {
        if (certificate === undefined) {
            return undefined;
        }
        const stakeDelegation = certificate.as_stake_delegation();
        if (stakeDelegation !== undefined && stakeDelegation.stake_credential().to_keyhash() !== undefined) {
            return {
                type: CertType.StakeKeyDelegation,
                stakeCredentialHash: stakeDelegation.stake_credential().to_keyhash().to_hex(),
                poolKeyHash: stakeDelegation.pool_keyhash().to_hex(),
            };
        }
        else {
            return undefined;
        }
    }
    loadStakePoolRegistration(certificate) {
        const poolRegistration = certificate.as_pool_registration();
        const rewardAccount = poolRegistration.pool_params().reward_account();
        const networkId = rewardAccount.to_address().network_id();
        const owners = [];
        for (let i = 0; i < poolRegistration.pool_params().pool_owners().len(); i++) {
            const poolOwner = poolRegistration.pool_params().pool_owners().get(i);
            const ownerStakeKey = CardanoWasm.StakeCredential.from_keyhash(poolOwner);
            owners.push(CardanoWasm.RewardAddress.new(networkId, ownerStakeKey).to_address().to_bech32());
        }
        return {
            type: CertType.StakePoolRegistration,
            poolKeyHash: poolRegistration.pool_params().operator().to_hex(),
            vrfKeyHash: poolRegistration.pool_params().vrf_keyhash().to_hex(),
            pledge: poolRegistration.pool_params().pledge().to_str(),
            cost: poolRegistration.pool_params().cost().to_str(),
            marginNumerator: poolRegistration.pool_params().margin().numerator().to_str(),
            marginDenominator: poolRegistration.pool_params().margin().denominator().to_str(),
            rewardAccount: rewardAccount.to_address().to_bech32(),
            poolOwners: owners,
        };
    }
    /**
     * Set the transaction type.
     *
     * @param {TransactionType} transactionType The transaction type to be set.
     */
    setTransactionType(transactionType) {
        this._type = transactionType;
    }
    /** @inheritdoc */
    explainTransaction() {
        const txJson = this.toJson();
        const displayOrder = ['id', 'outputAmount', 'changeAmount', 'outputs', 'changeOutputs', 'fee', 'type'];
        const amount = txJson.outputs.map((o) => ({ amount: BigInt(o.amount) }));
        const outputAmount = amount.reduce((p, n) => p + BigInt(n.amount), BigInt('0')).toString();
        const type = this._type === sdk_core_1.TransactionType.Send
            ? 'Transfer'
            : this._type === sdk_core_1.TransactionType.StakingActivate
                ? 'StakingActivate'
                : this._type === sdk_core_1.TransactionType.StakingWithdraw
                    ? 'StakingWithdraw'
                    : this._type === sdk_core_1.TransactionType.StakingDeactivate
                        ? 'StakingDeactivate'
                        : this._type === sdk_core_1.TransactionType.StakingPledge
                            ? 'StakingPledge'
                            : 'undefined';
        return {
            displayOrder,
            id: txJson.id,
            outputs: txJson.outputs.map((o) => ({ address: o.address, amount: o.amount })),
            outputAmount: outputAmount,
            changeOutputs: [],
            changeAmount: '0',
            fee: { fee: this._fee },
            type,
            certificates: txJson.certs,
            withdrawals: txJson.withdrawals,
            pledgeDetails: this._pledgeDetails,
        };
    }
    getPledgeDetails() {
        return this._pledgeDetails;
    }
    /**
     * Get transaction fee
     */
    get getFee() {
        return this._fee;
    }
    /**
     * Set transaction fee
     *
     * @param fee
     */
    fee(fee) {
        this._fee = fee;
    }
}
exports.Transaction = Transaction;
//# sourceMappingURL=data:application/json;base64,