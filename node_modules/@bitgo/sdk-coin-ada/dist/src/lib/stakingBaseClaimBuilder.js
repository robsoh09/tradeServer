"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StakingBaseClaimBuilder = void 0;
const transactionBuilder_1 = require("./transactionBuilder");
const __1 = require("../");
/**
 * Common functionalities for claiming rewards and withdrawing unstaked builders.
 */
class StakingBaseClaimBuilder extends transactionBuilder_1.TransactionBuilder {
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        return super.fromImplementation(rawTransaction);
    }
    /** @inheritdoc */
    signImplementation(key) {
        return super.signImplementation(key);
    }
    /**
     * Creates a withdrawal to add to our transaction body so we can withdraw from our rewards/stake address
     *
     * @param stakingPubKey User's public stake key
     * @param value Amount from the rewards address we're withdrawing
     */
    addWithdrawal(stakingPubKey, value) {
        const coinName = this._coinConfig.name;
        const rewardAddress = __1.Utils.default.getRewardAddress(stakingPubKey, coinName);
        this._withdrawals.push({
            stakeAddress: rewardAddress,
            value,
        });
        return this;
    }
}
exports.StakingBaseClaimBuilder = StakingBaseClaimBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Rha2luZ0Jhc2VDbGFpbUJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3N0YWtpbmdCYXNlQ2xhaW1CdWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZEQUEwRDtBQUcxRCwyQkFBNEI7QUFFNUI7O0dBRUc7QUFDSCxNQUFzQix1QkFBd0IsU0FBUSx1Q0FBa0I7SUFDdEUsa0JBQWtCO0lBQ1Isa0JBQWtCLENBQUMsY0FBc0I7UUFDakQsT0FBTyxLQUFLLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELGtCQUFrQjtJQUNSLGtCQUFrQixDQUFDLEdBQVk7UUFDdkMsT0FBTyxLQUFLLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsYUFBYSxDQUFDLGFBQXFCLEVBQUUsS0FBYTtRQUNoRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztRQUN2QyxNQUFNLGFBQWEsR0FBRyxTQUFLLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUM5RSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztZQUNyQixZQUFZLEVBQUUsYUFBYTtZQUMzQixLQUFLO1NBQ04sQ0FBQyxDQUFDO1FBQ0gsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQ0Y7QUExQkQsMERBMEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHJhbnNhY3Rpb25CdWlsZGVyIH0gZnJvbSAnLi90cmFuc2FjdGlvbkJ1aWxkZXInO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb24gfSBmcm9tICcuL3RyYW5zYWN0aW9uJztcbmltcG9ydCB7IEJhc2VLZXkgfSBmcm9tICdAYml0Z28vc2RrLWNvcmUnO1xuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8nO1xuXG4vKipcbiAqIENvbW1vbiBmdW5jdGlvbmFsaXRpZXMgZm9yIGNsYWltaW5nIHJld2FyZHMgYW5kIHdpdGhkcmF3aW5nIHVuc3Rha2VkIGJ1aWxkZXJzLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU3Rha2luZ0Jhc2VDbGFpbUJ1aWxkZXIgZXh0ZW5kcyBUcmFuc2FjdGlvbkJ1aWxkZXIge1xuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgcHJvdGVjdGVkIGZyb21JbXBsZW1lbnRhdGlvbihyYXdUcmFuc2FjdGlvbjogc3RyaW5nKTogVHJhbnNhY3Rpb24ge1xuICAgIHJldHVybiBzdXBlci5mcm9tSW1wbGVtZW50YXRpb24ocmF3VHJhbnNhY3Rpb24pO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIHByb3RlY3RlZCBzaWduSW1wbGVtZW50YXRpb24oa2V5OiBCYXNlS2V5KTogVHJhbnNhY3Rpb24ge1xuICAgIHJldHVybiBzdXBlci5zaWduSW1wbGVtZW50YXRpb24oa2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgd2l0aGRyYXdhbCB0byBhZGQgdG8gb3VyIHRyYW5zYWN0aW9uIGJvZHkgc28gd2UgY2FuIHdpdGhkcmF3IGZyb20gb3VyIHJld2FyZHMvc3Rha2UgYWRkcmVzc1xuICAgKlxuICAgKiBAcGFyYW0gc3Rha2luZ1B1YktleSBVc2VyJ3MgcHVibGljIHN0YWtlIGtleVxuICAgKiBAcGFyYW0gdmFsdWUgQW1vdW50IGZyb20gdGhlIHJld2FyZHMgYWRkcmVzcyB3ZSdyZSB3aXRoZHJhd2luZ1xuICAgKi9cbiAgYWRkV2l0aGRyYXdhbChzdGFraW5nUHViS2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpIHtcbiAgICBjb25zdCBjb2luTmFtZSA9IHRoaXMuX2NvaW5Db25maWcubmFtZTtcbiAgICBjb25zdCByZXdhcmRBZGRyZXNzID0gVXRpbHMuZGVmYXVsdC5nZXRSZXdhcmRBZGRyZXNzKHN0YWtpbmdQdWJLZXksIGNvaW5OYW1lKTtcbiAgICB0aGlzLl93aXRoZHJhd2Fscy5wdXNoKHtcbiAgICAgIHN0YWtlQWRkcmVzczogcmV3YXJkQWRkcmVzcyxcbiAgICAgIHZhbHVlLFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG4iXX0=