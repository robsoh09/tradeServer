"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilderFactory = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const transferBuilder_1 = require("./transferBuilder");
const walletInitializationBuilder_1 = require("./walletInitializationBuilder");
const transaction_1 = require("./transaction");
const stakingActivateBuilder_1 = require("./stakingActivateBuilder");
const stakingDeactivateBuilder_1 = require("./stakingDeactivateBuilder");
const stakingWithdrawBuilder_1 = require("./stakingWithdrawBuilder");
const stakingPledgeBuilder_1 = require("./stakingPledgeBuilder");
const stakingClaimRewardsBuilder_1 = require("./stakingClaimRewardsBuilder");
class TransactionBuilderFactory extends sdk_core_1.BaseTransactionBuilderFactory {
    constructor(_coinConfig) {
        super(_coinConfig);
    }
    /** @inheritdoc */
    from(raw) {
        if (raw instanceof Uint8Array) {
            return this.from(Buffer.from(raw).toString('hex'));
        }
        try {
            const tx = new transaction_1.Transaction(this._coinConfig);
            tx.fromRawTransaction(raw);
            switch (tx.type) {
                case sdk_core_1.TransactionType.Send:
                    return this.getTransferBuilder(tx);
                case sdk_core_1.TransactionType.StakingActivate:
                    return this.getStakingActivateBuilder(tx);
                case sdk_core_1.TransactionType.StakingClaim:
                    return this.getStakingClaimRewardsBuilder(tx);
                case sdk_core_1.TransactionType.StakingDeactivate:
                    return this.getStakingDeactivateBuilder(tx);
                case sdk_core_1.TransactionType.StakingWithdraw:
                    return this.getStakingWithdrawBuilder(tx);
                case sdk_core_1.TransactionType.WalletInitialization:
                    return this.getWalletInitializationBuilder(tx);
                case sdk_core_1.TransactionType.StakingPledge:
                    return this.getStakingPledgeBuilder(tx);
                default:
                    throw new sdk_core_1.InvalidTransactionError('unsupported transaction');
            }
        }
        catch (e) {
            throw e;
        }
    }
    /** @inheritdoc */
    getWalletInitializationBuilder(tx) {
        return TransactionBuilderFactory.initializeBuilder(tx, new walletInitializationBuilder_1.WalletInitializationBuilder(this._coinConfig));
    }
    /** @inheritdoc */
    getTransferBuilder(tx) {
        return TransactionBuilderFactory.initializeBuilder(tx, new transferBuilder_1.TransferBuilder(this._coinConfig));
    }
    getStakingActivateBuilder(tx) {
        return TransactionBuilderFactory.initializeBuilder(tx, new stakingActivateBuilder_1.StakingActivateBuilder(this._coinConfig));
    }
    getStakingClaimRewardsBuilder(tx) {
        return TransactionBuilderFactory.initializeBuilder(tx, new stakingClaimRewardsBuilder_1.StakingClaimRewardsBuilder(this._coinConfig));
    }
    getStakingDeactivateBuilder(tx) {
        return TransactionBuilderFactory.initializeBuilder(tx, new stakingDeactivateBuilder_1.StakingDeactivateBuilder(this._coinConfig));
    }
    getStakingWithdrawBuilder(tx) {
        return TransactionBuilderFactory.initializeBuilder(tx, new stakingWithdrawBuilder_1.StakingWithdrawBuilder(this._coinConfig));
    }
    getStakingPledgeBuilder(tx) {
        return TransactionBuilderFactory.initializeBuilder(tx, new stakingPledgeBuilder_1.StakingPledgeBuilder(this._coinConfig));
    }
    /**
     * Initialize the builder with the given transaction
     *
     * @param {Transaction | undefined} tx - the transaction used to initialize the builder
     * @param {TransactionBuilder} builder - the builder to be initialized
     * @returns {TransactionBuilder} the builder initialized
     */
    static initializeBuilder(tx, builder) {
        if (tx) {
            builder.initBuilder(tx);
        }
        return builder;
    }
}
exports.TransactionBuilderFactory = TransactionBuilderFactory;
//# sourceMappingURL=data:application/json;base64,