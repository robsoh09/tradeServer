"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const transaction_1 = require("./transaction");
const keyPair_1 = require("./keyPair");
const utils_1 = __importStar(require("./utils"));
const CardanoWasm = __importStar(require("@emurgo/cardano-serialization-lib-nodejs"));
const cardano_serialization_lib_nodejs_1 = require("@emurgo/cardano-serialization-lib-nodejs");
class TransactionBuilder extends sdk_core_1.BaseTransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._signers = [];
        this._transactionInputs = [];
        this._transactionOutputs = [];
        this._initSignatures = [];
        this._signatures = [];
        this._ttl = 0;
        this._certs = [];
        this._withdrawals = [];
        this._multiAssets = [];
        this.transaction = new transaction_1.Transaction(_coinConfig);
        this._fee = cardano_serialization_lib_nodejs_1.BigNum.zero();
    }
    input(i) {
        this._transactionInputs.push(i);
        return this;
    }
    output(o) {
        this._transactionOutputs.push(o);
        return this;
    }
    assets(a) {
        this._multiAssets.push(a);
        return this;
    }
    ttl(t) {
        this._ttl = t;
        return this;
    }
    changeAddress(addr, totalInputBalance) {
        this._changeAddress = addr;
        this._senderBalance = totalInputBalance;
        return this;
    }
    fee(fee) {
        this._fee = cardano_serialization_lib_nodejs_1.BigNum.from_str(fee);
        return this;
    }
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     *
     * @param {Transaction} tx the transaction data
     */
    initBuilder(tx) {
        this._transaction = tx;
        const txnBody = tx.transaction.body();
        for (let i = 0; i < txnBody.inputs().len(); i++) {
            const input = txnBody.inputs().get(i);
            this.input({
                transaction_id: Buffer.from(input.transaction_id().to_bytes()).toString('hex'),
                transaction_index: input.index(),
            });
        }
        for (let i = 0; i < txnBody.outputs().len(); i++) {
            const output = txnBody.outputs().get(i);
            this.output({
                address: output.address().to_bech32(),
                amount: output.amount().coin().to_str(),
                multiAssets: output.amount().multiasset() || undefined,
            });
        }
        if (txnBody.certs() !== undefined) {
            const certs = txnBody.certs();
            for (let i = 0; i < certs.len(); i++) {
                this._certs.push(certs.get(i));
            }
        }
        if (txnBody.withdrawals() !== undefined) {
            const withdrawals = txnBody.withdrawals();
            const keys = withdrawals.keys();
            for (let i = 0; i < keys.len(); i++) {
                const rewardAddress = keys.get(i);
                const reward = withdrawals.get(rewardAddress);
                this._withdrawals.push({ stakeAddress: rewardAddress.to_address().to_bech32(), value: reward.to_str() });
            }
        }
        this._ttl = tx.transaction.body().ttl();
        this._fee = tx.transaction.body().fee();
        if (tx.transaction.witness_set().vkeys()) {
            const vkeys = tx.transaction.witness_set().vkeys();
            for (let i = 0; i < vkeys.len(); i++) {
                const vkey = vkeys.get(i);
                this._initSignatures.push({
                    publicKey: { pub: vkey.vkey().public_key().to_hex() },
                    signature: Buffer.from(vkey.signature().to_hex(), 'hex'),
                });
            }
        }
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        this.validateRawTransaction(rawTransaction);
        this.buildImplementation();
        return this.transaction;
    }
    /** @inheritdoc */
    async buildImplementation() {
        const inputs = CardanoWasm.TransactionInputs.new();
        this._transactionInputs.forEach((input) => {
            inputs.add(CardanoWasm.TransactionInput.new(CardanoWasm.TransactionHash.from_bytes(Buffer.from(input.transaction_id, 'hex')), input.transaction_index));
        });
        let outputs = CardanoWasm.TransactionOutputs.new();
        let totalAmountToSend = CardanoWasm.BigNum.zero();
        this._transactionOutputs.forEach((output) => {
            const amount = CardanoWasm.BigNum.from_str(output.amount);
            outputs.add(CardanoWasm.TransactionOutput.new(CardanoWasm.Address.from_bech32(output.address), CardanoWasm.Value.new(amount)));
            totalAmountToSend = totalAmountToSend.checked_add(amount);
        });
        if (this._fee.is_zero()) {
            // estimate fee
            // add extra output for the change
            if (this._changeAddress && this._senderBalance) {
                const changeAddress = CardanoWasm.Address.from_bech32(this._changeAddress);
                const utxoBalance = CardanoWasm.BigNum.from_str(this._senderBalance);
                const adjustment = cardano_serialization_lib_nodejs_1.BigNum.from_str('2000000');
                let change = utxoBalance.checked_sub(this._fee).checked_sub(totalAmountToSend);
                if (this._type === sdk_core_1.TransactionType.StakingActivate) {
                    change = change.checked_sub(adjustment);
                }
                else if (this._type === sdk_core_1.TransactionType.StakingDeactivate) {
                    change = change.checked_add(adjustment);
                }
                else if (this._type === sdk_core_1.TransactionType.StakingWithdraw || this._type === sdk_core_1.TransactionType.StakingClaim) {
                    this._withdrawals.forEach((withdrawal) => {
                        change = change.checked_add(CardanoWasm.BigNum.from_str(withdrawal.value));
                    });
                }
                // If totalAmountToSend is 0, its consolidation
                if (totalAmountToSend.to_str() == '0') {
                    // support for multi-asset consolidation
                    if (this._multiAssets !== undefined) {
                        const totalNumberOfAssets = CardanoWasm.BigNum.from_str(this._multiAssets.length.toString());
                        const minAmountNeededForOneAssetOutput = CardanoWasm.BigNum.from_str(utils_1.MIN_ADA_FOR_ONE_ASSET);
                        const minAmountNeededForTotalAssetOutputs = minAmountNeededForOneAssetOutput.checked_mul(totalNumberOfAssets);
                        if (!change.less_than(minAmountNeededForTotalAssetOutputs)) {
                            this._multiAssets.forEach((asset) => {
                                let txOutputBuilder = CardanoWasm.TransactionOutputBuilder.new();
                                // changeAddress is the root address, which is where we want the tokens assets to be sent to
                                const toAddress = CardanoWasm.Address.from_bech32(this._changeAddress);
                                txOutputBuilder = txOutputBuilder.with_address(toAddress);
                                let txOutputAmountBuilder = txOutputBuilder.next();
                                const assetName = CardanoWasm.AssetName.new(Buffer.from(asset.asset_name, 'hex'));
                                const policyId = CardanoWasm.ScriptHash.from_bytes(Buffer.from(asset.policy_id, 'hex'));
                                const multiAsset = CardanoWasm.MultiAsset.new();
                                const assets = CardanoWasm.Assets.new();
                                assets.insert(assetName, CardanoWasm.BigNum.from_str(asset.quantity));
                                multiAsset.insert(policyId, assets);
                                txOutputAmountBuilder = txOutputAmountBuilder.with_coin_and_asset(minAmountNeededForOneAssetOutput, multiAsset);
                                const txOutput = txOutputAmountBuilder.build();
                                outputs.add(txOutput);
                            });
                            // finally send the remaining ADA in its own output
                            const remainingOutputAmount = change.checked_sub(minAmountNeededForTotalAssetOutputs);
                            const changeOutput = CardanoWasm.TransactionOutput.new(changeAddress, CardanoWasm.Value.new(remainingOutputAmount));
                            outputs.add(changeOutput);
                        }
                    }
                    else {
                        // If there are no tokens to consolidate, you only have 1 output which is ADA alone
                        const changeOutput = CardanoWasm.TransactionOutput.new(changeAddress, CardanoWasm.Value.new(change));
                        outputs.add(changeOutput);
                    }
                }
                else {
                    // If this isn't a consolidate request, whatever change that needs to be sent back to the rootaddress is added as a separate output here
                    const changeOutput = CardanoWasm.TransactionOutput.new(changeAddress, CardanoWasm.Value.new(change));
                    outputs.add(changeOutput);
                }
            }
            const txBody = CardanoWasm.TransactionBody.new_tx_body(inputs, outputs, this._fee);
            txBody.set_ttl(CardanoWasm.BigNum.from_str(this._ttl.toString()));
            const txHash = CardanoWasm.hash_transaction(txBody);
            // we add witnesses once so that we can get the appropriate amount of signers for calculating the fee
            const witnessSet = CardanoWasm.TransactionWitnessSet.new();
            const vkeyWitnesses = CardanoWasm.Vkeywitnesses.new();
            this._signers.forEach((keyPair) => {
                const prv = keyPair.getKeys().prv;
                const vkeyWitness = CardanoWasm.make_vkey_witness(txHash, CardanoWasm.PrivateKey.from_normal_bytes(Buffer.from(prv, 'hex')));
                vkeyWitnesses.add(vkeyWitness);
            });
            this.getAllSignatures().forEach((signature) => {
                const vkey = CardanoWasm.Vkey.new(CardanoWasm.PublicKey.from_bytes(Buffer.from(signature.publicKey.pub, 'hex')));
                const ed255Sig = CardanoWasm.Ed25519Signature.from_bytes(signature.signature);
                vkeyWitnesses.add(CardanoWasm.Vkeywitness.new(vkey, ed255Sig));
            });
            if (vkeyWitnesses.len() === 0) {
                const prv = CardanoWasm.PrivateKey.generate_ed25519();
                const vkeyWitness = CardanoWasm.make_vkey_witness(txHash, prv);
                vkeyWitnesses.add(vkeyWitness);
                if (this._type !== sdk_core_1.TransactionType.Send) {
                    vkeyWitnesses.add(vkeyWitness);
                }
            }
            witnessSet.set_vkeys(vkeyWitnesses);
            // add in withdrawal if this is a withdrawal tx
            if (this._withdrawals.length > 0) {
                const withdrawals = CardanoWasm.Withdrawals.new();
                this._withdrawals.forEach((withdrawal) => {
                    const rewardAddress = CardanoWasm.RewardAddress.from_address(CardanoWasm.Address.from_bech32(withdrawal.stakeAddress));
                    withdrawals.insert(rewardAddress, CardanoWasm.BigNum.from_str(withdrawal.value));
                });
                txBody.set_withdrawals(withdrawals);
            }
            // add in certificates to get mock size
            const draftCerts = CardanoWasm.Certificates.new();
            for (const cert of this._certs) {
                draftCerts.add(cert);
            }
            txBody.set_certs(draftCerts);
            const txDraft = CardanoWasm.Transaction.new(txBody, witnessSet);
            const linearFee = CardanoWasm.LinearFee.new(CardanoWasm.BigNum.from_str('44'), CardanoWasm.BigNum.from_str('155381'));
            // calculate the fee based off our dummy transaction
            const fee = CardanoWasm.min_fee(txDraft, linearFee).checked_add(cardano_serialization_lib_nodejs_1.BigNum.from_str('440'));
            this._fee = fee;
        }
        this._transaction.fee(this._fee.to_str());
        // now calculate the change based off of <utxoBalance> - <fee> - <amountToSend>
        // reset the outputs collection because now our last output has changed
        outputs = CardanoWasm.TransactionOutputs.new();
        this._transactionOutputs.forEach((output) => {
            if (output.multiAssets) {
                const policyId = output.multiAssets.keys().get(0);
                const assets = output.multiAssets.get(policyId);
                const assetName = assets.keys().get(0);
                const quantity = assets.get(assetName);
                let txOutputBuilder = CardanoWasm.TransactionOutputBuilder.new();
                const outputAmount = CardanoWasm.BigNum.from_str(output.amount);
                const toAddress = CardanoWasm.Address.from_bech32(output.address);
                txOutputBuilder = txOutputBuilder.with_address(toAddress);
                let txOutputAmountBuilder = txOutputBuilder.next();
                const multiAsset = CardanoWasm.MultiAsset.new();
                const asset = CardanoWasm.Assets.new();
                asset.insert(assetName, quantity);
                multiAsset.insert(policyId, asset);
                txOutputAmountBuilder = txOutputAmountBuilder.with_coin_and_asset(outputAmount, multiAsset);
                const txOutput = txOutputAmountBuilder.build();
                outputs.add(txOutput);
            }
            else {
                outputs.add(CardanoWasm.TransactionOutput.new(CardanoWasm.Address.from_bech32(output.address), CardanoWasm.Value.new(CardanoWasm.BigNum.from_str(output.amount))));
            }
        });
        if (this._changeAddress && this._senderBalance) {
            const changeAddress = CardanoWasm.Address.from_bech32(this._changeAddress);
            const utxoBalance = CardanoWasm.BigNum.from_str(this._senderBalance);
            const adjustment = cardano_serialization_lib_nodejs_1.BigNum.from_str('2000000');
            let change = utxoBalance.checked_sub(this._fee).checked_sub(totalAmountToSend);
            if (this._type === sdk_core_1.TransactionType.StakingActivate) {
                change = change.checked_sub(adjustment);
            }
            else if (this._type === sdk_core_1.TransactionType.StakingDeactivate) {
                change = change.checked_add(adjustment);
            }
            else if (this._type === sdk_core_1.TransactionType.StakingWithdraw || this._type === sdk_core_1.TransactionType.StakingClaim) {
                this._withdrawals.forEach((withdrawal) => {
                    change = change.checked_add(CardanoWasm.BigNum.from_str(withdrawal.value));
                });
            }
            // If totalAmountToSend is 0, its consolidation
            if (totalAmountToSend.to_str() == '0') {
                // support for multi-asset consolidation
                if (this._multiAssets !== undefined) {
                    const totalNumberOfAssets = CardanoWasm.BigNum.from_str(this._multiAssets.length.toString());
                    const minAmountNeededForOneAssetOutput = CardanoWasm.BigNum.from_str('1500000');
                    const minAmountNeededForTotalAssetOutputs = minAmountNeededForOneAssetOutput.checked_mul(totalNumberOfAssets);
                    if (!change.less_than(minAmountNeededForTotalAssetOutputs)) {
                        this._multiAssets.forEach((asset) => {
                            let txOutputBuilder = CardanoWasm.TransactionOutputBuilder.new();
                            // changeAddress is the root address, which is where we want the tokens assets to be sent to
                            const toAddress = CardanoWasm.Address.from_bech32(this._changeAddress);
                            txOutputBuilder = txOutputBuilder.with_address(toAddress);
                            let txOutputAmountBuilder = txOutputBuilder.next();
                            const assetName = CardanoWasm.AssetName.new(Buffer.from(asset.asset_name, 'hex'));
                            const policyId = CardanoWasm.ScriptHash.from_bytes(Buffer.from(asset.policy_id, 'hex'));
                            const multiAsset = CardanoWasm.MultiAsset.new();
                            const assets = CardanoWasm.Assets.new();
                            assets.insert(assetName, CardanoWasm.BigNum.from_str(asset.quantity));
                            multiAsset.insert(policyId, assets);
                            txOutputAmountBuilder = txOutputAmountBuilder.with_coin_and_asset(minAmountNeededForOneAssetOutput, multiAsset);
                            const txOutput = txOutputAmountBuilder.build();
                            outputs.add(txOutput);
                        });
                        // finally send the remaining ADA in its own output
                        const remainingOutputAmount = change.checked_sub(minAmountNeededForTotalAssetOutputs);
                        const changeOutput = CardanoWasm.TransactionOutput.new(changeAddress, CardanoWasm.Value.new(remainingOutputAmount));
                        outputs.add(changeOutput);
                    }
                    else {
                        throw new sdk_core_1.BuildTransactionError('Insufficient funds: need a minimum of 1.5 ADA per output to construct token consolidation');
                    }
                }
                else {
                    // If there are no tokens to consolidate, you only have 1 output which is ADA alone
                    const changeOutput = CardanoWasm.TransactionOutput.new(changeAddress, CardanoWasm.Value.new(change));
                    outputs.add(changeOutput);
                }
            }
            else {
                // If this isn't a consolidate request, whatever change that needs to be sent back to the rootaddress is added as a separate output here
                const changeOutput = CardanoWasm.TransactionOutput.new(changeAddress, CardanoWasm.Value.new(change));
                outputs.add(changeOutput);
            }
        }
        const txRaw = CardanoWasm.TransactionBody.new_tx_body(inputs, outputs, this._fee);
        const certs = CardanoWasm.Certificates.new();
        for (const cert of this._certs) {
            certs.add(cert);
        }
        txRaw.set_certs(certs);
        // add in withdrawal if this is a withdrawal tx
        if (this._withdrawals.length > 0) {
            const withdrawals = CardanoWasm.Withdrawals.new();
            this._withdrawals.forEach((withdrawal) => {
                const rewardAddress = CardanoWasm.RewardAddress.from_address(CardanoWasm.Address.from_bech32(withdrawal.stakeAddress));
                withdrawals.insert(rewardAddress, CardanoWasm.BigNum.from_str(withdrawal.value));
            });
            txRaw.set_withdrawals(withdrawals);
        }
        txRaw.set_ttl(CardanoWasm.BigNum.from_str(this._ttl.toString()));
        const txRawHash = CardanoWasm.hash_transaction(txRaw);
        // now add the witnesses again this time for real. We need to do this again
        // because now that we've added our real fee and change output, we have a difference transaction hash
        const witnessSet = CardanoWasm.TransactionWitnessSet.new();
        const vkeyWitnesses = CardanoWasm.Vkeywitnesses.new();
        this._signers.forEach((keyPair) => {
            const prv = keyPair.getKeys().prv;
            const vkeyWitness = CardanoWasm.make_vkey_witness(txRawHash, CardanoWasm.PrivateKey.from_normal_bytes(Buffer.from(prv, 'hex')));
            vkeyWitnesses.add(vkeyWitness);
        });
        // Clear the cosmetic signature array in native txn wrapper to prevent duplicate when builder is inited from a partially witnessed txn
        this._transaction.signature.length = 0;
        this.getAllSignatures().forEach((signature) => {
            const vkey = CardanoWasm.Vkey.new(CardanoWasm.PublicKey.from_bytes(Buffer.from(signature.publicKey.pub, 'hex')));
            const ed255Sig = CardanoWasm.Ed25519Signature.from_bytes(signature.signature);
            vkeyWitnesses.add(CardanoWasm.Vkeywitness.new(vkey, ed255Sig));
            this._transaction.signature.push(signature.signature.toString('hex'));
        });
        witnessSet.set_vkeys(vkeyWitnesses);
        this._transaction.transaction = CardanoWasm.Transaction.new(txRaw, witnessSet);
        return this.transaction;
    }
    /** @inheritdoc */
    signImplementation(key) {
        this._signers.push(new keyPair_1.KeyPair({ prv: key.key }));
        return this._transaction;
    }
    /** @inheritdoc */
    get transaction() {
        return this._transaction;
    }
    /** @inheritdoc */
    set transaction(transaction) {
        this._transaction = transaction;
    }
    /** @inheritdoc */
    validateAddress(address, addressFormat) {
        if (!utils_1.default.isValidAddress(address.address)) {
            throw new sdk_core_1.UtilsError('invalid address ' + address.address);
        }
    }
    /** @inheritdoc */
    validateKey(key) {
        try {
            new keyPair_1.KeyPair({ prv: key.key });
        }
        catch {
            throw new sdk_core_1.BuildTransactionError(`Key validation failed`);
        }
    }
    /** @inheritdoc */
    validateRawTransaction(rawTransaction) {
        try {
            CardanoWasm.Transaction.from_bytes(rawTransaction);
        }
        catch {
            throw new sdk_core_1.BuildTransactionError('invalid raw transaction');
        }
    }
    /** @inheritdoc */
    validateTransaction(transaction) {
        if (!transaction.transaction) {
            return;
        }
    }
    /** @inheritdoc */
    validateValue(value) {
        if (value.isLessThan(0)) {
            throw new sdk_core_1.BuildTransactionError('Value cannot be less than zero');
        }
    }
    // endregion
    /** @inheritDoc */
    addSignature(publicKey, signature) {
        this._signatures.push({ publicKey, signature });
    }
    getAllSignatures() {
        return this._initSignatures.concat(this._signatures);
    }
}
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,