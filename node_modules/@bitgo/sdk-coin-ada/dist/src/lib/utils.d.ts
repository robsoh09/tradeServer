import { AddressFormat, BaseUtils } from '@bitgo/sdk-core';
import { KeyPair } from './keyPair';
export declare const MIN_ADA_FOR_ONE_ASSET = "1500000";
export declare class Utils implements BaseUtils {
    createBaseAddressWithStakeAndPaymentKey(stakeKeyPair: KeyPair, paymentKeyPair: KeyPair, network: AddressFormat): string;
    validateBlake2b(hash: string): boolean;
    getRewardAddress(stakingPubKey: string, coinName: string): string;
    /** @inheritdoc */
    isValidAddress(address: string): boolean;
    /** @inheritdoc */
    isValidBlockId(hash: string): boolean;
    /** @inheritdoc */
    isValidPrivateKey(key: string): boolean;
    isValidKey(key: string): boolean;
    /** @inheritdoc */
    isValidPublicKey(pubKey: string): boolean;
    /** @inheritdoc */
    isValidSignature(signature: string): boolean;
    /** @inheritdoc */
    isValidTransactionId(txId: string): boolean;
    /**
     * Get the transaction body from a serialized transaction
     * @param {string} serializedTx - serialized transaction in hex or base64 format
     * @returns {string} transaction body in hex format
     */
    getTransactionBody(serializedTx: string): string;
}
declare const utils: Utils;
export default utils;
//# sourceMappingURL=utils.d.ts.map