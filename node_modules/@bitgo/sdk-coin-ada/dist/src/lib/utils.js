"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Utils = exports.MIN_ADA_FOR_ONE_ASSET = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const cardano_serialization_lib_nodejs_1 = require("@emurgo/cardano-serialization-lib-nodejs");
const keyPair_1 = require("./keyPair");
const bech32_1 = require("bech32");
exports.MIN_ADA_FOR_ONE_ASSET = '1500000';
class Utils {
    createBaseAddressWithStakeAndPaymentKey(stakeKeyPair, paymentKeyPair, network) {
        let baseAddr;
        if (network === sdk_core_1.AddressFormat.mainnet) {
            // 1. create stake pubKey
            const key = stakeKeyPair.getKeys().pub;
            const stakePub = cardano_serialization_lib_nodejs_1.PublicKey.from_bytes(Buffer.from(key, 'hex'));
            // 2. create payment pubKey
            const paymentPub = cardano_serialization_lib_nodejs_1.PublicKey.from_bytes(Buffer.from(paymentKeyPair.getKeys().pub, 'hex'));
            // 3. create full base address for staking
            baseAddr = cardano_serialization_lib_nodejs_1.BaseAddress.new(cardano_serialization_lib_nodejs_1.NetworkInfo.mainnet().network_id(), cardano_serialization_lib_nodejs_1.StakeCredential.from_keyhash(paymentPub.hash()), cardano_serialization_lib_nodejs_1.StakeCredential.from_keyhash(stakePub.hash()));
            return baseAddr.to_address().to_bech32();
        }
        else if (network === sdk_core_1.AddressFormat.testnet) {
            // 1. create stake pubKey
            const stakePub = cardano_serialization_lib_nodejs_1.PublicKey.from_bytes(Buffer.from(stakeKeyPair.getKeys().pub, 'hex'));
            // 2. create payment pubKey
            const paymentPub = cardano_serialization_lib_nodejs_1.PublicKey.from_bytes(Buffer.from(paymentKeyPair.getKeys().pub, 'hex'));
            // 3. create full base address for staking
            const baseAddr = cardano_serialization_lib_nodejs_1.BaseAddress.new(cardano_serialization_lib_nodejs_1.NetworkInfo.testnet().network_id(), cardano_serialization_lib_nodejs_1.StakeCredential.from_keyhash(paymentPub.hash()), cardano_serialization_lib_nodejs_1.StakeCredential.from_keyhash(stakePub.hash()));
            return baseAddr.to_address().to_bech32();
        }
        else {
            throw new Error('Improper Network Type!');
        }
    }
    validateBlake2b(hash) {
        if (!hash) {
            return false;
        }
        if (hash.length !== 64) {
            return false;
        }
        return hash.match(/^[a-zA-Z0-9]+$/) !== null;
    }
    getRewardAddress(stakingPubKey, coinName) {
        const stakePub = cardano_serialization_lib_nodejs_1.PublicKey.from_bytes(Buffer.from(stakingPubKey, 'hex'));
        let rewardAddress;
        if (coinName === 'ada') {
            rewardAddress = cardano_serialization_lib_nodejs_1.RewardAddress.new(cardano_serialization_lib_nodejs_1.NetworkInfo.mainnet().network_id(), cardano_serialization_lib_nodejs_1.StakeCredential.from_keyhash(stakePub.hash()));
        }
        else {
            rewardAddress = cardano_serialization_lib_nodejs_1.RewardAddress.new(cardano_serialization_lib_nodejs_1.NetworkInfo.testnet().network_id(), cardano_serialization_lib_nodejs_1.StakeCredential.from_keyhash(stakePub.hash()));
        }
        return rewardAddress.to_address().to_bech32();
    }
    /** @inheritdoc */
    // this will validate both stake and payment addresses
    isValidAddress(address) {
        const bech32PrefixList = ['addr', 'addr_test', 'stake', 'stake_test'];
        const BASE_ADDR_LEN = 92;
        const REWARD_AND_ENTERPRISE_ADDR_LEN = 47;
        const POINTER_ADDR_LEN = 52;
        const VALIDATOR_ADDR_LEN = 56;
        // test if this is a bech32 address first
        if (new RegExp(bech32PrefixList.join('|')).test(address)) {
            try {
                const decodedBech = bech32_1.bech32.decode(address, 108);
                const wordLength = decodedBech.words.length;
                if (!bech32PrefixList.includes(decodedBech.prefix)) {
                    return false;
                }
                return (wordLength === BASE_ADDR_LEN ||
                    wordLength === REWARD_AND_ENTERPRISE_ADDR_LEN ||
                    wordLength === POINTER_ADDR_LEN);
            }
            catch (err) {
                return false;
            }
        }
        else {
            // maybe this is a validator address
            return new RegExp(`^(?!pool)[a-z0-9]\{${VALIDATOR_ADDR_LEN}\}$`).test(address);
        }
    }
    /** @inheritdoc */
    isValidBlockId(hash) {
        return this.validateBlake2b(hash);
    }
    /** @inheritdoc */
    isValidPrivateKey(key) {
        // this will return true for both extended and non-extended ED25519 keys
        return this.isValidKey(key);
    }
    isValidKey(key) {
        try {
            new keyPair_1.KeyPair({ prv: key });
            return true;
        }
        catch {
            return false;
        }
    }
    /** @inheritdoc */
    isValidPublicKey(pubKey) {
        try {
            new keyPair_1.KeyPair({ pub: pubKey });
            return true;
        }
        catch {
            return false;
        }
    }
    /** @inheritdoc */
    isValidSignature(signature) {
        try {
            cardano_serialization_lib_nodejs_1.Ed25519Signature.from_hex(signature);
            return true;
        }
        catch (err) {
            return false;
        }
    }
    /** @inheritdoc */
    isValidTransactionId(txId) {
        return this.validateBlake2b(txId);
    }
    /**
     * Get the transaction body from a serialized transaction
     * @param {string} serializedTx - serialized transaction in hex or base64 format
     * @returns {string} transaction body in hex format
     */
    getTransactionBody(serializedTx) {
        const HEX_REGEX = /^[0-9a-fA-F]+$/;
        const bufferRawTransaction = HEX_REGEX.test(serializedTx)
            ? Buffer.from(serializedTx, 'hex')
            : Buffer.from(serializedTx, 'base64');
        return Buffer.from(cardano_serialization_lib_nodejs_1.Transaction.from_bytes(bufferRawTransaction).body().to_bytes()).toString('hex');
    }
}
exports.Utils = Utils;
const utils = new Utils();
exports.default = utils;
//# sourceMappingURL=data:application/json;base64,