import { BaseKey, TransactionType } from '@bitgo/sdk-core';
import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { TransactionBuilder } from './transactionBuilder';
import { Transaction } from './transaction';
export declare class StakingActivateBuilder extends TransactionBuilder {
    constructor(_coinConfig: Readonly<CoinConfig>);
    protected get transactionType(): TransactionType;
    /** @inheritdoc */
    initBuilder(tx: Transaction): void;
    /**
     * Creates the proper certificates needed to register a user's stake key & then delegate to a given pool.
     *
     * @param stakingPublicKey The user's public stake key
     * @param poolHash Pool ID Hash of the pool we are going to delegate to
     */
    stakingCredential(stakingPublicKey: string, poolHash: string): this;
    /** @inheritdoc */
    protected buildImplementation(): Promise<Transaction>;
    /** @inheritdoc */
    protected fromImplementation(rawTransaction: string): Transaction;
    /** @inheritdoc */
    protected signImplementation(key: BaseKey): Transaction;
}
//# sourceMappingURL=stakingActivateBuilder.d.ts.map