"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Eth = exports.optionalDeps = void 0;
/**
 * @prettier
 */
const utxo_lib_1 = require("@bitgo/utxo-lib");
const lodash_1 = __importDefault(require("lodash"));
const superagent_1 = __importDefault(require("superagent"));
const sdk_core_1 = require("@bitgo/sdk-core");
const abstract_eth_1 = require("@bitgo/abstract-eth");
Object.defineProperty(exports, "optionalDeps", { enumerable: true, get: function () { return abstract_eth_1.optionalDeps; } });
const statics_1 = require("@bitgo/statics");
const bignumber_js_1 = require("bignumber.js");
const transactionBuilder_1 = require("./lib/transactionBuilder");
const erc20Token_1 = require("./erc20Token");
class Eth extends abstract_eth_1.AbstractEthLikeNewCoins {
    constructor(bitgo, staticsCoin) {
        super(bitgo, staticsCoin);
    }
    static createInstance(bitgo, staticsCoin) {
        return new Eth(bitgo, staticsCoin);
    }
    allowsAccountConsolidations() {
        return true;
    }
    /** @inheritDoc */
    supportsTss() {
        return true;
    }
    getMPCAlgorithm() {
        return 'ecdsa';
    }
    /**
     * Gets correct Eth Common object based on params from either recovery or tx building
     * @param eip1559 {EIP1559} configs that specify whether we should construct an eip1559 tx
     * @param replayProtectionOptions {ReplayProtectionOptions} check if chain id supports replay protection
     */
    static getEthCommon(eip1559, replayProtectionOptions) {
        // if eip1559 params are specified, default to london hardfork, otherwise,
        // default to tangerine whistle to avoid replay protection issues
        const defaultHardfork = !!eip1559 ? 'london' : abstract_eth_1.optionalDeps.EthCommon.Hardfork.TangerineWhistle;
        const defaultCommon = new abstract_eth_1.optionalDeps.EthCommon.default({
            chain: abstract_eth_1.optionalDeps.EthCommon.Chain.Mainnet,
            hardfork: defaultHardfork,
        });
        // if replay protection options are set, override the default common setting
        const ethCommon = replayProtectionOptions
            ? abstract_eth_1.optionalDeps.EthCommon.default.isSupportedChainId(new abstract_eth_1.optionalDeps.ethUtil.BN(replayProtectionOptions.chain))
                ? new abstract_eth_1.optionalDeps.EthCommon.default({
                    chain: replayProtectionOptions.chain,
                    hardfork: replayProtectionOptions.hardfork,
                })
                : abstract_eth_1.optionalDeps.EthCommon.default.custom({
                    chainId: new abstract_eth_1.optionalDeps.ethUtil.BN(replayProtectionOptions.chain),
                    defaultHardfork: replayProtectionOptions.hardfork,
                })
            : defaultCommon;
        return ethCommon;
    }
    static buildTransaction(params) {
        // if eip1559 params are specified, default to london hardfork, otherwise,
        // default to tangerine whistle to avoid replay protection issues
        const ethCommon = Eth.getEthCommon(params.eip1559, params.replayProtectionOptions);
        const baseParams = {
            to: params.to,
            nonce: params.nonce,
            value: params.value,
            data: params.data,
            gasLimit: new abstract_eth_1.optionalDeps.ethUtil.BN(params.gasLimit),
        };
        const unsignedEthTx = !!params.eip1559
            ? abstract_eth_1.optionalDeps.EthTx.FeeMarketEIP1559Transaction.fromTxData({
                ...baseParams,
                maxFeePerGas: new abstract_eth_1.optionalDeps.ethUtil.BN(params.eip1559.maxFeePerGas),
                maxPriorityFeePerGas: new abstract_eth_1.optionalDeps.ethUtil.BN(params.eip1559.maxPriorityFeePerGas),
            }, { common: ethCommon })
            : abstract_eth_1.optionalDeps.EthTx.Transaction.fromTxData({
                ...baseParams,
                gasPrice: new abstract_eth_1.optionalDeps.ethUtil.BN(params.gasPrice),
            }, { common: ethCommon });
        return unsignedEthTx;
    }
    /**
     * Make a query to Etherscan for information such as balance, token balance, solidity calls
     * @param query {Object} key-value pairs of parameters to append after /api
     * @returns {Object} response from Etherscan
     */
    async recoveryBlockchainExplorerQuery(query) {
        const token = sdk_core_1.common.Environments[this.bitgo.getEnv()].etherscanApiToken;
        if (token) {
            query.apikey = token;
        }
        const response = await superagent_1.default.get(sdk_core_1.common.Environments[this.bitgo.getEnv()].etherscanBaseUrl + '/api').query(query);
        if (!response.ok) {
            throw new Error('could not reach Etherscan');
        }
        if (response.body.status === '0' && response.body.message === 'NOTOK') {
            throw new Error('Etherscan rate limit reached');
        }
        return response.body;
    }
    /**
     * Recovers a tx with non-TSS keys
     * same expected arguments as recover method (original logic before adding TSS recover path)
     */
    async recoverEthLike(params) {
        // bitgoFeeAddress is only defined when it is a evm cross chain recovery
        // as we use fee from this wrong chain address for the recovery txn on the correct chain.
        if (params.bitgoFeeAddress) {
            return this.recoverEthLikeforEvmBasedRecovery(params);
        }
        this.validateRecoveryParams(params);
        const isKrsRecovery = (0, sdk_core_1.getIsKrsRecovery)(params);
        const isUnsignedSweep = (0, sdk_core_1.getIsUnsignedSweep)(params);
        if (isKrsRecovery) {
            (0, sdk_core_1.checkKrsProvider)(this, params.krsProvider, { checkCoinFamilySupport: false });
        }
        // Clean up whitespace from entered values
        let userKey = params.userKey.replace(/\s/g, '');
        const backupKey = params.backupKey.replace(/\s/g, '');
        // Set new eth tx fees (using default config values from platform)
        const gasLimit = new abstract_eth_1.optionalDeps.ethUtil.BN(this.setGasLimit(params.gasLimit));
        const gasPrice = params.eip1559
            ? new abstract_eth_1.optionalDeps.ethUtil.BN(params.eip1559.maxFeePerGas)
            : new abstract_eth_1.optionalDeps.ethUtil.BN(this.setGasPrice(params.gasPrice));
        if (!userKey.startsWith('xpub') && !userKey.startsWith('xprv')) {
            try {
                userKey = this.bitgo.decrypt({
                    input: userKey,
                    password: params.walletPassphrase,
                });
            }
            catch (e) {
                throw new Error(`Error decrypting user keychain: ${e.message}`);
            }
        }
        let backupKeyAddress;
        let backupSigningKey;
        if (isKrsRecovery || isUnsignedSweep) {
            const backupHDNode = utxo_lib_1.bip32.fromBase58(backupKey);
            backupSigningKey = backupHDNode.publicKey;
            backupKeyAddress = `0x${abstract_eth_1.optionalDeps.ethUtil.publicToAddress(backupSigningKey, true).toString('hex')}`;
        }
        else {
            // Decrypt backup private key and get address
            let backupPrv;
            try {
                backupPrv = this.bitgo.decrypt({
                    input: backupKey,
                    password: params.walletPassphrase,
                });
            }
            catch (e) {
                throw new Error(`Error decrypting backup keychain: ${e.message}`);
            }
            const backupHDNode = utxo_lib_1.bip32.fromBase58(backupPrv);
            backupSigningKey = backupHDNode.privateKey;
            if (!backupHDNode) {
                throw new Error('no private key');
            }
            backupKeyAddress = `0x${abstract_eth_1.optionalDeps.ethUtil.privateToAddress(backupSigningKey).toString('hex')}`;
        }
        const backupKeyNonce = await this.getAddressNonce(backupKeyAddress);
        // get balance of backupKey to ensure funds are available to pay fees
        const backupKeyBalance = await this.queryAddressBalance(backupKeyAddress);
        const totalGasNeeded = gasPrice.mul(gasLimit);
        const weiToGwei = 10 ** 9;
        if (backupKeyBalance.lt(totalGasNeeded)) {
            throw new Error(`Backup key address ${backupKeyAddress} has balance ${(backupKeyBalance / weiToGwei).toString()} Gwei.` +
                `This address must have a balance of at least ${(totalGasNeeded / weiToGwei).toString()}` +
                ` Gwei to perform recoveries. Try sending some ETH to this address then retry.`);
        }
        // get balance of wallet and deduct fees to get transaction amount
        const txAmount = await this.queryAddressBalance(params.walletContractAddress);
        if (new bignumber_js_1.BigNumber(txAmount).isLessThanOrEqualTo(0)) {
            throw new Error('Wallet does not have enough funds to recover');
        }
        // build recipients object
        const recipients = [
            {
                address: params.recoveryDestination,
                amount: txAmount.toString(10),
            },
        ];
        // Get sequence ID using contract call
        // we need to wait between making two etherscan calls to avoid getting banned
        await new Promise((resolve) => setTimeout(resolve, 1000));
        const sequenceId = await this.querySequenceId(params.walletContractAddress);
        let operationHash, signature;
        // Get operation hash and sign it
        if (!isUnsignedSweep) {
            operationHash = this.getOperationSha3ForExecuteAndConfirm(recipients, this.getDefaultExpireTime(), sequenceId);
            signature = sdk_core_1.Util.ethSignMsgHash(operationHash, sdk_core_1.Util.xprvToEthPrivateKey(userKey));
            try {
                sdk_core_1.Util.ecRecoverEthAddress(operationHash, signature);
            }
            catch (e) {
                throw new Error('Invalid signature');
            }
        }
        const txInfo = {
            recipient: recipients[0],
            expireTime: this.getDefaultExpireTime(),
            contractSequenceId: sequenceId,
            operationHash: operationHash,
            signature: signature,
            gasLimit: gasLimit.toString(10),
        };
        // calculate send data
        const sendMethodArgs = this.getSendMethodArgs(txInfo);
        const methodSignature = abstract_eth_1.optionalDeps.ethAbi.methodID(this.sendMethodName, lodash_1.default.map(sendMethodArgs, 'type'));
        const encodedArgs = abstract_eth_1.optionalDeps.ethAbi.rawEncode(lodash_1.default.map(sendMethodArgs, 'type'), lodash_1.default.map(sendMethodArgs, 'value'));
        const sendData = Buffer.concat([methodSignature, encodedArgs]);
        const txParams = {
            to: params.walletContractAddress,
            nonce: backupKeyNonce,
            value: 0,
            gasPrice: gasPrice,
            gasLimit: gasLimit,
            data: sendData,
            eip1559: params.eip1559,
            replayProtectionOptions: params.replayProtectionOptions,
        };
        // Build contract call and sign it
        let tx = Eth.buildTransaction(txParams);
        if (isUnsignedSweep) {
            return this.formatForOfflineVault(txInfo, tx, userKey, backupKey, gasPrice, gasLimit, params.eip1559, params.replayProtectionOptions);
        }
        if (!isKrsRecovery) {
            tx = tx.sign(backupSigningKey);
        }
        const signedTx = {
            id: abstract_eth_1.optionalDeps.ethUtil.bufferToHex(tx.hash()),
            tx: tx.serialize().toString('hex'),
        };
        if (isKrsRecovery) {
            signedTx.backupKey = backupKey;
            signedTx.coin = this.getChain();
        }
        return signedTx;
    }
    /**
     * Return boolean indicating whether input is valid public key for the coin.
     *
     * @param {String} pub the pub to be checked
     * @returns {Boolean} is it valid?
     */
    isValidPub(pub) {
        try {
            return utxo_lib_1.bip32.fromBase58(pub).isNeutered();
        }
        catch (e) {
            return false;
        }
    }
    /**
     * Helper function for signTransaction for the rare case that SDK is doing the second signature
     * Note: we are expecting this to be called from the offline vault
     * @param params.txPrebuild
     * @param params.signingKeyNonce
     * @param params.walletContractAddress
     * @param params.prv
     * @returns {{txHex: *}}
     */
    signFinal(params) {
        var _a, _b, _c, _d, _e;
        const txPrebuild = params.txPrebuild;
        if (!lodash_1.default.isNumber(params.signingKeyNonce) && !lodash_1.default.isNumber((_a = params.txPrebuild.halfSigned) === null || _a === void 0 ? void 0 : _a.backupKeyNonce)) {
            throw new Error('must have at least one of signingKeyNonce and backupKeyNonce as a parameter, and it must be a number');
        }
        if (lodash_1.default.isUndefined(params.walletContractAddress)) {
            throw new Error('params must include walletContractAddress, but got undefined');
        }
        const signingNode = utxo_lib_1.bip32.fromBase58(params.prv);
        const signingKey = signingNode.privateKey;
        if (lodash_1.default.isUndefined(signingKey)) {
            throw new Error('missing private key');
        }
        let recipient;
        let txInfo;
        if (txPrebuild.recipients) {
            recipient = txPrebuild.recipients[0];
            txInfo = {
                recipient,
                expireTime: (_b = txPrebuild.halfSigned) === null || _b === void 0 ? void 0 : _b.expireTime,
                contractSequenceId: (_c = txPrebuild.halfSigned) === null || _c === void 0 ? void 0 : _c.contractSequenceId,
                signature: (_d = txPrebuild.halfSigned) === null || _d === void 0 ? void 0 : _d.signature,
            };
        }
        const sendMethodArgs = this.getSendMethodArgs(txInfo);
        const methodSignature = abstract_eth_1.optionalDeps.ethAbi.methodID(this.sendMethodName, lodash_1.default.map(sendMethodArgs, 'type'));
        const encodedArgs = abstract_eth_1.optionalDeps.ethAbi.rawEncode(lodash_1.default.map(sendMethodArgs, 'type'), lodash_1.default.map(sendMethodArgs, 'value'));
        const sendData = Buffer.concat([methodSignature, encodedArgs]);
        const ethTxParams = {
            to: params.walletContractAddress,
            nonce: params.signingKeyNonce !== undefined ? params.signingKeyNonce : (_e = params.txPrebuild.halfSigned) === null || _e === void 0 ? void 0 : _e.backupKeyNonce,
            value: 0,
            gasPrice: new abstract_eth_1.optionalDeps.ethUtil.BN(txPrebuild.gasPrice),
            gasLimit: new abstract_eth_1.optionalDeps.ethUtil.BN(txPrebuild.gasLimit),
            data: sendData,
        };
        const unsignedEthTx = Eth.buildTransaction({
            ...ethTxParams,
            eip1559: params.txPrebuild.eip1559,
            replayProtectionOptions: params.txPrebuild.replayProtectionOptions,
        });
        const ethTx = unsignedEthTx.sign(signingKey);
        return { txHex: ethTx.serialize().toString('hex') };
    }
    /**
     * Assemble keychain and half-sign prebuilt transaction
     * @param params
     * - txPrebuild
     * - prv
     * @returns {Promise<SignedTransaction>}
     */
    async signTransaction(params) {
        if (params.isEvmBasedCrossChainRecovery) {
            return super.signTransaction(params);
        }
        const txPrebuild = params.txPrebuild;
        const userPrv = params.prv;
        const EXPIRETIME_DEFAULT = 60 * 60 * 24 * 7; // This signature will be valid for 1 week
        if (lodash_1.default.isUndefined(txPrebuild) || !lodash_1.default.isObject(txPrebuild)) {
            if (!lodash_1.default.isUndefined(txPrebuild) && !lodash_1.default.isObject(txPrebuild)) {
                throw new Error(`txPrebuild must be an object, got type ${typeof txPrebuild}`);
            }
            throw new Error('missing txPrebuild parameter');
        }
        if (lodash_1.default.isUndefined(userPrv) || !lodash_1.default.isString(userPrv)) {
            if (!lodash_1.default.isUndefined(userPrv) && !lodash_1.default.isString(userPrv)) {
                throw new Error(`prv must be a string, got type ${typeof userPrv}`);
            }
            throw new Error('missing prv parameter to sign transaction');
        }
        params.recipients = txPrebuild.recipients || params.recipients;
        // if no recipients in either params or txPrebuild, then throw an error
        if (!params.recipients || !Array.isArray(params.recipients)) {
            throw new Error('recipients missing or not array');
        }
        if (params.recipients.length == 0) {
            throw new Error('recipients empty');
        }
        // Normally the SDK provides the first signature for an ETH tx, but occasionally it provides the second and final one.
        if (params.isLastSignature) {
            // In this case when we're doing the second (final) signature, the logic is different.
            return this.signFinal(params);
        }
        const secondsSinceEpoch = Math.floor(new Date().getTime() / 1000);
        const expireTime = params.expireTime || secondsSinceEpoch + EXPIRETIME_DEFAULT;
        const sequenceId = txPrebuild.nextContractSequenceId;
        if (lodash_1.default.isUndefined(sequenceId)) {
            throw new Error('transaction prebuild missing required property nextContractSequenceId');
        }
        const operationHash = this.getOperationSha3ForExecuteAndConfirm(params.recipients, expireTime, sequenceId);
        const signature = sdk_core_1.Util.ethSignMsgHash(operationHash, sdk_core_1.Util.xprvToEthPrivateKey(userPrv));
        const txParams = {
            eip1559: params.txPrebuild.eip1559,
            isBatch: params.txPrebuild.isBatch,
            recipients: params.recipients,
            expireTime: expireTime,
            contractSequenceId: sequenceId,
            sequenceId: params.sequenceId,
            operationHash: operationHash,
            signature: signature,
            gasLimit: params.gasLimit,
            gasPrice: params.gasPrice,
            hopTransaction: txPrebuild.hopTransaction,
            backupKeyNonce: txPrebuild.backupKeyNonce,
            custodianTransactionId: params.custodianTransactionId,
        };
        return { halfSigned: txParams };
    }
    /**
     * Modify prebuild before sending it to the server. Add things like hop transaction params
     * @param buildParams The whitelisted parameters for this prebuild
     * @param buildParams.hop True if this should prebuild a hop tx, else false
     * @param buildParams.recipients The recipients array of this transaction
     * @param buildParams.wallet The wallet sending this tx
     * @param buildParams.walletPassphrase the passphrase for this wallet
     */
    async getExtraPrebuildParams(buildParams) {
        if (!lodash_1.default.isUndefined(buildParams.hop) &&
            buildParams.hop &&
            !lodash_1.default.isUndefined(buildParams.wallet) &&
            !lodash_1.default.isUndefined(buildParams.recipients) &&
            !lodash_1.default.isUndefined(buildParams.walletPassphrase)) {
            if (this instanceof erc20Token_1.Erc20Token) {
                throw new Error(`Hop transactions are not enabled for ERC-20 tokens, nor are they necessary. Please remove the 'hop' parameter and try again.`);
            }
            return (await this.createHopTransactionParams({
                wallet: buildParams.wallet,
                recipients: buildParams.recipients,
                walletPassphrase: buildParams.walletPassphrase,
            }));
        }
        return {};
    }
    /**
     * Create a new transaction builder for the current chain
     * @return a new transaction builder
     */
    getTransactionBuilder() {
        return new transactionBuilder_1.TransactionBuilder(statics_1.coins.get(this.getBaseChain()));
    }
    /** @inheritDoc */
    supportsMessageSigning() {
        return true;
    }
    /** @inheritDoc */
    supportsSigningTypedData() {
        return true;
    }
}
exports.Eth = Eth;
//# sourceMappingURL=data:application/json;base64,