/**
 * @prettier
 */
import { BitGoBase, CoinConstructor, MPCAlgorithm, NamedCoinConstructor } from '@bitgo/sdk-core';
import { EthLikeTokenConfig, Erc20TokenConfig } from '@bitgo/statics';
import { CoinNames } from '@bitgo/abstract-eth';
import { Eth, RecoverOptions, RecoveryInfo, TransactionPrebuild } from './eth';
import { TransactionBuilder } from './lib';
export { Erc20TokenConfig };
export declare class Erc20Token extends Eth {
    readonly tokenConfig: EthLikeTokenConfig;
    protected readonly sendMethodName: 'sendMultiSig' | 'sendMultiSigToken';
    static coinNames: CoinNames;
    constructor(bitgo: BitGoBase, tokenConfig: Erc20TokenConfig);
    static createTokenConstructor(config: Erc20TokenConfig): CoinConstructor;
    static createTokenConstructors(): NamedCoinConstructor[];
    get type(): string;
    get name(): string;
    get coin(): string;
    get network(): string;
    get tokenContractAddress(): string;
    get decimalPlaces(): number;
    getChain(): string;
    getFullName(): string;
    getBaseFactor(): number;
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    valuelessTransferAllowed(): boolean;
    /**
     * Flag for sending data along with transactions
     * @returns {boolean} True if okay to send tx data (ETH), false otherwise
     */
    transactionDataAllowed(): boolean;
    /** @inheritDoc */
    supportsTss(): boolean;
    /** @inheritDoc */
    getMPCAlgorithm(): MPCAlgorithm;
    protected getTransactionBuilder(): TransactionBuilder;
    /**
     * Builds a token recovery transaction without BitGo
     * @param params
     * @param params.userKey {String} [encrypted] xprv
     * @param params.backupKey {String} [encrypted] xprv or xpub if the xprv is held by a KRS providers
     * @param params.walletPassphrase {String} used to decrypt userKey and backupKey
     * @param params.walletContractAddress {String} the ETH address of the wallet contract
     * @param params.recoveryDestination {String} target address to send recovered funds to
     * @param params.krsProvider {String} necessary if backup key is held by KRS
     */
    recover(params: RecoverOptions): Promise<RecoveryInfo>;
    getOperation(recipient: any, expireTime: any, contractSequenceId: any): any[][];
    getSendMethodArgs(txInfo: any): {
        name: string;
        type: string;
        value: any;
    }[];
    verifyCoin(txPrebuild: TransactionPrebuild): boolean;
}
//# sourceMappingURL=erc20Token.d.ts.map