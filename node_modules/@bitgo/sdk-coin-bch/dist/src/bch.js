"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bch = void 0;
const abstract_utxo_1 = require("@bitgo/abstract-utxo");
const utxolib = __importStar(require("@bitgo/utxo-lib"));
class Bch extends abstract_utxo_1.AbstractUtxoCoin {
    constructor(bitgo, network) {
        super(bitgo, network || utxolib.networks.bitcoincash);
    }
    static createInstance(bitgo) {
        return new Bch(bitgo);
    }
    getChain() {
        return 'bch';
    }
    getFamily() {
        return 'bch';
    }
    getFullName() {
        return 'Bitcoin Cash';
    }
    supportsBlockTarget() {
        return false;
    }
    /**
     * Canonicalize a Bitcoin Cash address for a specific version
     *
     * Starting on January 14th, 2018 Bitcoin Cash's bitcoin-abc node switched over to using cashaddr
     * encoding for all of their addresses in order to distinguish them from Bitcoin Core's.
     * https://www.bitcoinabc.org/cashaddr. We're sticking with the old base58 format because
     * migrating over to the new format will be laborious, and we want to see how the space evolves
     *
     * @param address may or may not be prefixed with the network, example bitcoincash:pppkt7q2axpsm2cajyjtu6x8fsh6ywauzgxmsru962 or pppkt7q2axpsm2cajyjtu6x8fsh6ywauzgxmsru962
     * @param version the version of the desired address, 'base58' or 'cashaddr', defaulting to 'base58'
     * @returns {*} address string
     */
    canonicalAddress(address, version = 'base58') {
        if (version === 'base58') {
            return utxolib.addressFormat.toCanonicalFormat(address, this.network);
        }
        if (version === 'cashaddr') {
            const script = utxolib.addressFormat.toOutputScriptTryFormats(address, this.network);
            return utxolib.addressFormat.fromOutputScriptWithFormat(script, version, this.network);
        }
        throw new Error(`invalid version ${version}`);
    }
}
exports.Bch = Bch;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2JjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHdEQUFxRTtBQUVyRSx5REFBMkM7QUFFM0MsTUFBYSxHQUFJLFNBQVEsZ0NBQWdCO0lBQ3ZDLFlBQXNCLEtBQWdCLEVBQUUsT0FBcUI7UUFDM0QsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFnQjtRQUNwQyxPQUFPLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsU0FBUztRQUNQLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELFdBQVc7UUFDVCxPQUFPLGNBQWMsQ0FBQztJQUN4QixDQUFDO0lBRUQsbUJBQW1CO1FBQ2pCLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVEOzs7Ozs7Ozs7OztPQVdHO0lBQ0gsZ0JBQWdCLENBQUMsT0FBZSxFQUFFLFVBQW1CLFFBQVE7UUFDM0QsSUFBSSxPQUFPLEtBQUssUUFBUSxFQUFFO1lBQ3hCLE9BQU8sT0FBTyxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3ZFO1FBRUQsSUFBSSxPQUFPLEtBQUssVUFBVSxFQUFFO1lBQzFCLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNyRixPQUFPLE9BQU8sQ0FBQyxhQUFhLENBQUMsMEJBQTBCLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDeEY7UUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQ2hELENBQUM7Q0FDRjtBQWpERCxrQkFpREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBYnN0cmFjdFV0eG9Db2luLCBVdHhvTmV0d29yayB9IGZyb20gJ0BiaXRnby9hYnN0cmFjdC11dHhvJztcbmltcG9ydCB7IEJpdEdvQmFzZSwgQmFzZUNvaW4gfSBmcm9tICdAYml0Z28vc2RrLWNvcmUnO1xuaW1wb3J0ICogYXMgdXR4b2xpYiBmcm9tICdAYml0Z28vdXR4by1saWInO1xuXG5leHBvcnQgY2xhc3MgQmNoIGV4dGVuZHMgQWJzdHJhY3RVdHhvQ29pbiB7XG4gIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihiaXRnbzogQml0R29CYXNlLCBuZXR3b3JrPzogVXR4b05ldHdvcmspIHtcbiAgICBzdXBlcihiaXRnbywgbmV0d29yayB8fCB1dHhvbGliLm5ldHdvcmtzLmJpdGNvaW5jYXNoKTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVJbnN0YW5jZShiaXRnbzogQml0R29CYXNlKTogQmFzZUNvaW4ge1xuICAgIHJldHVybiBuZXcgQmNoKGJpdGdvKTtcbiAgfVxuXG4gIGdldENoYWluKCkge1xuICAgIHJldHVybiAnYmNoJztcbiAgfVxuXG4gIGdldEZhbWlseSgpIHtcbiAgICByZXR1cm4gJ2JjaCc7XG4gIH1cblxuICBnZXRGdWxsTmFtZSgpIHtcbiAgICByZXR1cm4gJ0JpdGNvaW4gQ2FzaCc7XG4gIH1cblxuICBzdXBwb3J0c0Jsb2NrVGFyZ2V0KCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYW5vbmljYWxpemUgYSBCaXRjb2luIENhc2ggYWRkcmVzcyBmb3IgYSBzcGVjaWZpYyB2ZXJzaW9uXG4gICAqXG4gICAqIFN0YXJ0aW5nIG9uIEphbnVhcnkgMTR0aCwgMjAxOCBCaXRjb2luIENhc2gncyBiaXRjb2luLWFiYyBub2RlIHN3aXRjaGVkIG92ZXIgdG8gdXNpbmcgY2FzaGFkZHJcbiAgICogZW5jb2RpbmcgZm9yIGFsbCBvZiB0aGVpciBhZGRyZXNzZXMgaW4gb3JkZXIgdG8gZGlzdGluZ3Vpc2ggdGhlbSBmcm9tIEJpdGNvaW4gQ29yZSdzLlxuICAgKiBodHRwczovL3d3dy5iaXRjb2luYWJjLm9yZy9jYXNoYWRkci4gV2UncmUgc3RpY2tpbmcgd2l0aCB0aGUgb2xkIGJhc2U1OCBmb3JtYXQgYmVjYXVzZVxuICAgKiBtaWdyYXRpbmcgb3ZlciB0byB0aGUgbmV3IGZvcm1hdCB3aWxsIGJlIGxhYm9yaW91cywgYW5kIHdlIHdhbnQgdG8gc2VlIGhvdyB0aGUgc3BhY2UgZXZvbHZlc1xuICAgKlxuICAgKiBAcGFyYW0gYWRkcmVzcyBtYXkgb3IgbWF5IG5vdCBiZSBwcmVmaXhlZCB3aXRoIHRoZSBuZXR3b3JrLCBleGFtcGxlIGJpdGNvaW5jYXNoOnBwcGt0N3EyYXhwc20yY2FqeWp0dTZ4OGZzaDZ5d2F1emd4bXNydTk2MiBvciBwcHBrdDdxMmF4cHNtMmNhanlqdHU2eDhmc2g2eXdhdXpneG1zcnU5NjJcbiAgICogQHBhcmFtIHZlcnNpb24gdGhlIHZlcnNpb24gb2YgdGhlIGRlc2lyZWQgYWRkcmVzcywgJ2Jhc2U1OCcgb3IgJ2Nhc2hhZGRyJywgZGVmYXVsdGluZyB0byAnYmFzZTU4J1xuICAgKiBAcmV0dXJucyB7Kn0gYWRkcmVzcyBzdHJpbmdcbiAgICovXG4gIGNhbm9uaWNhbEFkZHJlc3MoYWRkcmVzczogc3RyaW5nLCB2ZXJzaW9uOiB1bmtub3duID0gJ2Jhc2U1OCcpOiBzdHJpbmcge1xuICAgIGlmICh2ZXJzaW9uID09PSAnYmFzZTU4Jykge1xuICAgICAgcmV0dXJuIHV0eG9saWIuYWRkcmVzc0Zvcm1hdC50b0Nhbm9uaWNhbEZvcm1hdChhZGRyZXNzLCB0aGlzLm5ldHdvcmspO1xuICAgIH1cblxuICAgIGlmICh2ZXJzaW9uID09PSAnY2FzaGFkZHInKSB7XG4gICAgICBjb25zdCBzY3JpcHQgPSB1dHhvbGliLmFkZHJlc3NGb3JtYXQudG9PdXRwdXRTY3JpcHRUcnlGb3JtYXRzKGFkZHJlc3MsIHRoaXMubmV0d29yayk7XG4gICAgICByZXR1cm4gdXR4b2xpYi5hZGRyZXNzRm9ybWF0LmZyb21PdXRwdXRTY3JpcHRXaXRoRm9ybWF0KHNjcmlwdCwgdmVyc2lvbiwgdGhpcy5uZXR3b3JrKTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgdmVyc2lvbiAke3ZlcnNpb259YCk7XG4gIH1cbn1cbiJdfQ==