"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const coinModules = __importStar(require(".."));
const sdk_core_1 = require("@bitgo/sdk-core");
const statics_1 = require("@bitgo/statics");
/**
 * Register the factory method for coin utils methods
 * throw if coin not supported
 * @param {String} coinName
 * @returns {BaseUtils}
 */
function register(coinName) {
    const sanitizedCoinName = statics_1.coins.get(coinName.trim().toLowerCase()).family;
    const key = Object.keys(coinModules)
        .filter((k) => coinModules[k].Utils)
        .find((k) => k.trim().toLowerCase() === sanitizedCoinName);
    if (key) {
        return new coinModules[key].Utils();
    }
    throw new sdk_core_1.NotSupported(`${coinName} util factory not supported`);
}
exports.register = register;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxnREFBa0M7QUFDbEMsOENBQTBEO0FBQzFELDRDQUF1QztBQUV2Qzs7Ozs7R0FLRztBQUNILFNBQWdCLFFBQVEsQ0FBQyxRQUFnQjtJQUN2QyxNQUFNLGlCQUFpQixHQUFHLGVBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQzFFLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQ2pDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztTQUNuQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsS0FBSyxpQkFBaUIsQ0FBQyxDQUFDO0lBQzdELElBQUksR0FBRyxFQUFFO1FBQ1AsT0FBTyxJQUFJLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztLQUNyQztJQUNELE1BQU0sSUFBSSx1QkFBWSxDQUFDLEdBQUcsUUFBUSw2QkFBNkIsQ0FBQyxDQUFDO0FBQ25FLENBQUM7QUFURCw0QkFTQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNvaW5Nb2R1bGVzIGZyb20gJy4uJztcbmltcG9ydCB7IEJhc2VVdGlscywgTm90U3VwcG9ydGVkIH0gZnJvbSAnQGJpdGdvL3Nkay1jb3JlJztcbmltcG9ydCB7IGNvaW5zIH0gZnJvbSAnQGJpdGdvL3N0YXRpY3MnO1xuXG4vKipcbiAqIFJlZ2lzdGVyIHRoZSBmYWN0b3J5IG1ldGhvZCBmb3IgY29pbiB1dGlscyBtZXRob2RzXG4gKiB0aHJvdyBpZiBjb2luIG5vdCBzdXBwb3J0ZWRcbiAqIEBwYXJhbSB7U3RyaW5nfSBjb2luTmFtZVxuICogQHJldHVybnMge0Jhc2VVdGlsc31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyKGNvaW5OYW1lOiBzdHJpbmcpOiBCYXNlVXRpbHMge1xuICBjb25zdCBzYW5pdGl6ZWRDb2luTmFtZSA9IGNvaW5zLmdldChjb2luTmFtZS50cmltKCkudG9Mb3dlckNhc2UoKSkuZmFtaWx5O1xuICBjb25zdCBrZXkgPSBPYmplY3Qua2V5cyhjb2luTW9kdWxlcylcbiAgICAuZmlsdGVyKChrKSA9PiBjb2luTW9kdWxlc1trXS5VdGlscylcbiAgICAuZmluZCgoaykgPT4gay50cmltKCkudG9Mb3dlckNhc2UoKSA9PT0gc2FuaXRpemVkQ29pbk5hbWUpO1xuICBpZiAoa2V5KSB7XG4gICAgcmV0dXJuIG5ldyBjb2luTW9kdWxlc1trZXldLlV0aWxzKCk7XG4gIH1cbiAgdGhyb3cgbmV3IE5vdFN1cHBvcnRlZChgJHtjb2luTmFtZX0gdXRpbCBmYWN0b3J5IG5vdCBzdXBwb3J0ZWRgKTtcbn1cbiJdfQ==