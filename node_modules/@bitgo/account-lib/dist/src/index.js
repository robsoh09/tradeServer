"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = exports.getBuilder = exports.supportedCoins = exports.zkEth = exports.Ton = exports.Sui = exports.Opeth = exports.Polygon = exports.Bsc = exports.Near = exports.Dot = exports.Sol = exports.Coreum = exports.Zeta = exports.Islm = exports.Injective = exports.Sei = exports.Hash = exports.Bld = exports.Bera = exports.Tia = exports.AvaxP = exports.Osmo = exports.Atom = exports.Arbeth = exports.Algo = exports.Stx = exports.Cspr = exports.Hbar = exports.Celo = exports.Rbtc = exports.AvaxC = exports.Etc = exports.Eth2 = exports.Eth = exports.Xtz = exports.Trx = exports.BaseCoin = exports.Ed25519KeyDeriver = exports.crypto = exports.Eddsa = exports.Ed25519BIP32 = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
Object.defineProperty(exports, "Ed25519KeyDeriver", { enumerable: true, get: function () { return sdk_core_1.Ed25519KeyDeriver; } });
Object.defineProperty(exports, "Ed25519BIP32", { enumerable: true, get: function () { return sdk_core_1.Ed25519BIP32; } });
Object.defineProperty(exports, "Eddsa", { enumerable: true, get: function () { return sdk_core_1.Eddsa; } });
const statics_1 = require("@bitgo/statics");
/**
 * Deprecated after version 2.19.0
 * Retained for short term backwards compatibility - migrate to: @bitgo/sdk-api and @bitgo/sdk-core
 */
exports.crypto = sdk_core_1.acountLibCrypto;
/**
 * Deprecated after version 2.19.0
 * Retained for short term backwards compatibility - migrate to: @bitgo/sdk-api and @bitgo/sdk-core
 */
exports.BaseCoin = sdk_core_1.accountLibBaseCoin;
// coins
const Trx = __importStar(require("@bitgo/sdk-coin-trx"));
exports.Trx = Trx;
const sdk_coin_xtz_1 = require("@bitgo/sdk-coin-xtz");
Object.defineProperty(exports, "Xtz", { enumerable: true, get: function () { return sdk_coin_xtz_1.XtzLib; } });
const Eth = __importStar(require("@bitgo/sdk-coin-eth"));
exports.Eth = Eth;
const Eth2 = __importStar(require("@bitgo/sdk-coin-eth2"));
exports.Eth2 = Eth2;
const Etc = __importStar(require("@bitgo/sdk-coin-etc"));
exports.Etc = Etc;
const AvaxC = __importStar(require("@bitgo/sdk-coin-avaxc"));
exports.AvaxC = AvaxC;
const Rbtc = __importStar(require("@bitgo/sdk-coin-rbtc"));
exports.Rbtc = Rbtc;
const Celo = __importStar(require("@bitgo/sdk-coin-celo"));
exports.Celo = Celo;
const Hbar = __importStar(require("@bitgo/sdk-coin-hbar"));
exports.Hbar = Hbar;
const sdk_coin_cspr_1 = require("@bitgo/sdk-coin-cspr");
Object.defineProperty(exports, "Cspr", { enumerable: true, get: function () { return sdk_coin_cspr_1.CsprLib; } });
const sdk_coin_stx_1 = require("@bitgo/sdk-coin-stx");
Object.defineProperty(exports, "Stx", { enumerable: true, get: function () { return sdk_coin_stx_1.StxLib; } });
const sdk_coin_algo_1 = require("@bitgo/sdk-coin-algo");
Object.defineProperty(exports, "Algo", { enumerable: true, get: function () { return sdk_coin_algo_1.AlgoLib; } });
const Arbeth = __importStar(require("@bitgo/sdk-coin-arbeth"));
exports.Arbeth = Arbeth;
const Atom = __importStar(require("@bitgo/sdk-coin-atom"));
exports.Atom = Atom;
const Osmo = __importStar(require("@bitgo/sdk-coin-osmo"));
exports.Osmo = Osmo;
const sdk_coin_avaxp_1 = require("@bitgo/sdk-coin-avaxp");
Object.defineProperty(exports, "AvaxP", { enumerable: true, get: function () { return sdk_coin_avaxp_1.AvaxpLib; } });
const Tia = __importStar(require("@bitgo/sdk-coin-tia"));
exports.Tia = Tia;
const Bera = __importStar(require("@bitgo/sdk-coin-bera"));
exports.Bera = Bera;
const Bld = __importStar(require("@bitgo/sdk-coin-bld"));
exports.Bld = Bld;
const Hash = __importStar(require("@bitgo/sdk-coin-hash"));
exports.Hash = Hash;
const Sei = __importStar(require("@bitgo/sdk-coin-sei"));
exports.Sei = Sei;
const Injective = __importStar(require("@bitgo/sdk-coin-injective"));
exports.Injective = Injective;
const Islm = __importStar(require("@bitgo/sdk-coin-islm"));
exports.Islm = Islm;
const Zeta = __importStar(require("@bitgo/sdk-coin-zeta"));
exports.Zeta = Zeta;
const Coreum = __importStar(require("@bitgo/sdk-coin-coreum"));
exports.Coreum = Coreum;
const Sol = __importStar(require("@bitgo/sdk-coin-sol"));
exports.Sol = Sol;
const Dot = __importStar(require("@bitgo/sdk-coin-dot"));
exports.Dot = Dot;
const Near = __importStar(require("@bitgo/sdk-coin-near"));
exports.Near = Near;
const Bsc = __importStar(require("@bitgo/sdk-coin-bsc"));
exports.Bsc = Bsc;
const Polygon = __importStar(require("@bitgo/sdk-coin-polygon"));
exports.Polygon = Polygon;
const Opeth = __importStar(require("@bitgo/sdk-coin-opeth"));
exports.Opeth = Opeth;
const Sui = __importStar(require("@bitgo/sdk-coin-sui"));
exports.Sui = Sui;
const Ton = __importStar(require("@bitgo/sdk-coin-ton"));
exports.Ton = Ton;
const zkEth = __importStar(require("@bitgo/sdk-coin-zketh"));
exports.zkEth = zkEth;
const coinBuilderMap = {
    trx: Trx.WrappedBuilder,
    ttrx: Trx.WrappedBuilder,
    xtz: sdk_coin_xtz_1.XtzLib.TransactionBuilder,
    txtz: sdk_coin_xtz_1.XtzLib.TransactionBuilder,
    etc: Etc.TransactionBuilder,
    tetc: Etc.TransactionBuilder,
    eth: Eth.TransactionBuilder,
    teth: Eth.TransactionBuilder,
    gteth: Eth.TransactionBuilder,
    hteth: Eth.TransactionBuilder,
    rbtc: Rbtc.TransactionBuilder,
    trbtc: Rbtc.TransactionBuilder,
    celo: Celo.TransactionBuilder,
    tcelo: Celo.TransactionBuilder,
    avaxc: AvaxC.TransactionBuilder,
    tavaxc: AvaxC.TransactionBuilder,
    bsc: Bsc.TransactionBuilder,
    tbsc: Bsc.TransactionBuilder,
    avaxp: sdk_coin_avaxp_1.AvaxpLib.TransactionBuilderFactory,
    tavaxp: sdk_coin_avaxp_1.AvaxpLib.TransactionBuilderFactory,
    hbar: Hbar.TransactionBuilderFactory,
    thbar: Hbar.TransactionBuilderFactory,
    cspr: sdk_coin_cspr_1.CsprLib.TransactionBuilderFactory,
    tcspr: sdk_coin_cspr_1.CsprLib.TransactionBuilderFactory,
    stx: sdk_coin_stx_1.StxLib.TransactionBuilderFactory,
    tstx: sdk_coin_stx_1.StxLib.TransactionBuilderFactory,
    algo: sdk_coin_algo_1.AlgoLib.TransactionBuilderFactory,
    talgo: sdk_coin_algo_1.AlgoLib.TransactionBuilderFactory,
    sol: Sol.TransactionBuilderFactory,
    tsol: Sol.TransactionBuilderFactory,
    dot: Dot.TransactionBuilderFactory,
    tdot: Dot.TransactionBuilderFactory,
    near: Near.TransactionBuilderFactory,
    polygon: Polygon.TransactionBuilder,
    tpolygon: Polygon.TransactionBuilder,
    sui: Sui.TransactionBuilderFactory,
    tsui: Sui.TransactionBuilderFactory,
    tia: Tia.TransactionBuilderFactory,
    ttia: Tia.TransactionBuilderFactory,
    atom: Atom.TransactionBuilderFactory,
    tatom: Atom.TransactionBuilderFactory,
    osmo: Osmo.TransactionBuilderFactory,
    tosmo: Osmo.TransactionBuilderFactory,
    bld: Bld.TransactionBuilderFactory,
    tbld: Bld.TransactionBuilderFactory,
    hash: Hash.TransactionBuilderFactory,
    thash: Hash.TransactionBuilderFactory,
    sei: Sei.TransactionBuilderFactory,
    tsei: Sei.TransactionBuilderFactory,
    injective: Injective.TransactionBuilderFactory,
    tinjective: Injective.TransactionBuilderFactory,
    bera: Bera.TransactionBuilderFactory,
    tbera: Bera.TransactionBuilderFactory,
    zeta: Zeta.TransactionBuilderFactory,
    tzeta: Zeta.TransactionBuilderFactory,
    islm: Islm.TransactionBuilderFactory,
    tislm: Islm.TransactionBuilderFactory,
    coreum: Coreum.TransactionBuilderFactory,
    tcoreum: Coreum.TransactionBuilderFactory,
    arbeth: Arbeth.TransactionBuilder,
    tarbeth: Arbeth.TransactionBuilder,
    opeth: Opeth.TransactionBuilder,
    topeth: Opeth.TransactionBuilder,
    ton: Ton.TransactionBuilder,
    tton: Ton.TransactionBuilder,
    zketh: zkEth.TransactionBuilder,
    tzketh: zkEth.TransactionBuilder,
};
/**
 * Get the list of coin tickers supported by this library.
 */
exports.supportedCoins = Object.keys(coinBuilderMap);
/**
 * Get a transaction builder for the given coin.
 *
 * @param {string} coinName One of the {@code supportedCoins}
 * @returns {any} An instance of a {@code TransactionBuilder}
 */
function getBuilder(coinName) {
    const builderClass = coinBuilderMap[coinName];
    if (!builderClass) {
        throw new sdk_core_1.BuildTransactionError(`Coin ${coinName} not supported`);
    }
    return new builderClass(statics_1.coins.get(coinName));
}
exports.getBuilder = getBuilder;
/**
 * Register a new coin instance with its builder factory
 *
 * @param {string} coinName coin name as it was registered in @bitgo/statics
 * @param {any} builderFactory the builder factory class for that coin
 * @returns {any} the factory instance for the registered coin
 */
function register(coinName, builderFactory) {
    const coinConfig = statics_1.coins.get(coinName);
    const factory = new builderFactory(coinConfig);
    // coinBuilderMap[coinName] = factory;
    coinBuilderMap[coinName] = builderFactory; // For now register the constructor function until reimplement getBuilder method
    return factory;
}
exports.register = register;
//# sourceMappingURL=data:application/json;base64,