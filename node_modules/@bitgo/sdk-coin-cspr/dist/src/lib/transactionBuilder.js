"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = exports.DEFAULT_N = exports.DEFAULT_M = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const casper_js_sdk_1 = require("casper-js-sdk");
const lodash_1 = __importDefault(require("lodash"));
const sdk_core_1 = require("@bitgo/sdk-core");
const transaction_1 = require("./transaction");
const keyPair_1 = require("./keyPair");
const utils_1 = require("./utils");
const constants_1 = require("./constants");
exports.DEFAULT_M = 3;
exports.DEFAULT_N = 2;
class TransactionBuilder extends sdk_core_1.BaseTransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this.transaction = new transaction_1.Transaction(_coinConfig);
        this._multiSignerKeyPairs = [];
        this._signatures = [];
        this._chainName = this.coinName() === 'cspr' ? constants_1.DEFAULT_CHAIN_NAMES.mainnet : constants_1.DEFAULT_CHAIN_NAMES.testnet;
    }
    // region Base Builder
    /** @inheritdoc */
    async buildImplementation() {
        const deployParams = this.getDeployParams();
        const session = this.getSession();
        const payment = casper_js_sdk_1.DeployUtil.standardPayment(lodash_1.default.parseInt(this._fee.gasLimit));
        let cTransaction = this.transaction.casperTx || casper_js_sdk_1.DeployUtil.makeDeploy(deployParams, session, payment);
        // Cannot add arguments to an already signed deploy.
        if (cTransaction.approvals.length === 0) {
            this._session.extraArguments.forEach((extraArgument, extraArgumentName) => {
                if (!cTransaction.session.getArgByName(extraArgumentName)) {
                    cTransaction = casper_js_sdk_1.DeployUtil.addArgToDeploy(cTransaction, extraArgumentName, extraArgument);
                }
            });
        }
        this.transaction.casperTx = cTransaction;
        this.processSigning();
        return this.transaction;
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        const tx = new transaction_1.Transaction(this._coinConfig);
        const jsonTransaction = JSON.parse(rawTransaction);
        tx.casperTx = casper_js_sdk_1.DeployUtil.deployFromJson(jsonTransaction).unwrap();
        this.initBuilder(tx);
        return this.transaction;
    }
    /** @inheritdoc */
    signImplementation(key) {
        this.checkDuplicatedKeys(key);
        const signer = new keyPair_1.KeyPair({ prv: key.key });
        // Signing the transaction is an operation that relies on all the data being set,
        // so we set the source here and leave the actual signing for the build step
        this._multiSignerKeyPairs.push(signer);
        return this.transaction;
    }
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     *
     * @param {Transaction} tx the transaction data
     */
    initBuilder(tx) {
        this.transaction = tx;
        this.transaction.loadPreviousSignatures();
        const txData = tx.toJson();
        this.fee(txData.fee);
        this.source({ address: txData.from });
        this.expiration(txData.expiration || constants_1.TRANSACTION_EXPIRATION);
    }
    // endregion
    // region Common builder methods
    /**
     * Set the transaction fees
     *
     * @param {BaseFee} fee The maximum gas to pay
     * @returns {TransactionBuilder} This transaction builder
     */
    fee(fee) {
        this.validateValue(new bignumber_js_1.default(fee.gasLimit));
        this._fee = fee;
        return this;
    }
    /**
     * Set the transaction source
     *
     * @param {BaseAddress} address The source account
     * @returns {TransactionBuilder} This transaction builder
     */
    source(address) {
        this.validateAddress(address);
        this._source = address;
        return this;
    }
    /**
     * Set the transaction expirationTime
     *
     * @param {string} expirationTime The transaction expirationTime
     * @returns {TransactionBuilder} This transaction builder
     */
    expiration(expirationTime) {
        const transactionExpiration = new bignumber_js_1.default(expirationTime);
        if (transactionExpiration.isNaN() || transactionExpiration.isGreaterThan(constants_1.TRANSACTION_EXPIRATION)) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction expiration');
        }
        this.validateValue(transactionExpiration);
        this._expiration = transactionExpiration.toNumber();
        return this;
    }
    /**
     * Set an external transaction signature
     *
     * @param {string} signature Hex encoded signature string
     * @param {KeyPair} keyPair The public key keypair that was used to create the signature
     * @returns {TransactionBuilder} This transaction builder
     */
    signature(signature, keyPair) {
        // if we already have a signature for this key pair, just update it
        for (const oldSignature of this._signatures) {
            if (oldSignature.keyPair.getKeys().pub === keyPair.getKeys().pub) {
                oldSignature.signature = signature;
                return this;
            }
        }
        // otherwise add the new signature
        this._signatures.push({ signature, keyPair });
        return this;
    }
    nodeChainName(chainName) {
        this._chainName = chainName;
        return this;
    }
    // endregion
    // region Validators
    /** @inheritdoc */
    validateAddress(address) {
        if (!(0, utils_1.isValidAddress)(address.address)) {
            throw new sdk_core_1.BuildTransactionError('Invalid address ' + address.address);
        }
    }
    /** @inheritdoc */
    validateKey(key) {
        if (!new keyPair_1.KeyPair({ prv: key.key })) {
            throw new sdk_core_1.BuildTransactionError('Invalid key');
        }
    }
    /** @inheritdoc */
    validateRawTransaction(rawTransaction) {
        if (!rawTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Raw transaction is empty');
        }
        try {
            casper_js_sdk_1.DeployUtil.deployFromJson(JSON.parse(rawTransaction));
        }
        catch (e) {
            throw new sdk_core_1.ParseTransactionError('There was an error parsing the JSON string');
        }
    }
    /** @inheritdoc */
    validateTransaction(transaction) {
        this.validateMandatoryFields();
    }
    /** @inheritdoc */
    validateValue(value) {
        if (value.isLessThan(0)) {
            throw new sdk_core_1.BuildTransactionError('Value cannot be less than zero');
        }
    }
    /**
     * Validates that the mandatory fields are defined
     */
    validateMandatoryFields() {
        this.validateFee();
        this.validateSource();
    }
    /**
     * Validates that the fee field is defined
     */
    validateFee() {
        if (this._fee === undefined) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing fee');
        }
        if (!this._fee.gasLimit) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing gas limit');
        }
        try {
            this.validateValue(new bignumber_js_1.default(this._fee.gasLimit));
        }
        catch (e) {
            throw new sdk_core_1.BuildTransactionError('Invalid gas limit');
        }
    }
    /**
     * Validates that the source field is defined
     */
    validateSource() {
        if (this._source === undefined) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing source');
        }
        this.validateAddress(this._source);
    }
    /**
     * Validates that the given key is not already in this._multiSignerKeyPairs
     *
     * @param {BaseKey} key - The key to check
     */
    checkDuplicatedKeys(key) {
        this._multiSignerKeyPairs.forEach((_sourceKeyPair) => {
            if (_sourceKeyPair.getKeys().prv === key.key) {
                throw new sdk_core_1.SigningError('Repeated sign: ' + key.key);
            }
            // Try to get extended keys in order to validate them
            let xprv;
            try {
                xprv = _sourceKeyPair.getExtendedKeys().xprv;
            }
            catch (err) {
                return;
            }
            if (xprv && xprv === key.key) {
                throw new sdk_core_1.SigningError('Repeated sign: ' + key.key);
            }
        });
    }
    // endregion
    // region Getters and Setters
    /** @inheritdoc */
    get transaction() {
        return this._transaction;
    }
    /** @inheritdoc */
    set transaction(transaction) {
        this._transaction = transaction;
    }
    /**
     * Get the chain name for the coin environment
     */
    get chainName() {
        return this._chainName;
    }
    // endregion
    // region auxiliaryMethods
    /**
     * Generate a DeployParams instance with the transaction data
     *
     * @returns {DeployUtil.DeployParams}
     */
    getDeployParams() {
        const gasPrice = this._fee.gasPrice ? lodash_1.default.parseInt(this._fee.gasPrice) : undefined;
        return new casper_js_sdk_1.DeployUtil.DeployParams(casper_js_sdk_1.CLPublicKey.fromHex(this._source.address), this._chainName, gasPrice, this._expiration || constants_1.TRANSACTION_EXPIRATION);
    }
    /**
     * Generate the session for the Deploy according to the transactionType.
     *
     * @returns {DeployUtil.ExecutableDeployItem}
     */
    getSession() {
        let session;
        switch (this.transaction.type) {
            case sdk_core_1.TransactionType.Send:
                const transferSession = this._session;
                session = casper_js_sdk_1.DeployUtil.ExecutableDeployItem.newTransferWithOptionalTransferId(transferSession.amount, transferSession.target, undefined, transferSession.id);
                break;
            case sdk_core_1.TransactionType.WalletInitialization:
            case sdk_core_1.TransactionType.StakingLock:
            case sdk_core_1.TransactionType.StakingUnlock:
                const moduleBytesSession = this._session;
                session = casper_js_sdk_1.DeployUtil.ExecutableDeployItem.newModuleBytes(moduleBytesSession.moduleBytes, moduleBytesSession.args);
                break;
            default:
                throw new sdk_core_1.BuildTransactionError('Transaction Type error');
        }
        return session;
    }
    /**
     * Checks whether the transaction has the owner signature
     *
     * @param {string} pub - public key of the signer
     * @returns {boolean} true if the pub key already signed th transaction
     * @private
     */
    isTransactionSignedByPub(pub) {
        return (lodash_1.default.findIndex(this.transaction.casperTx.approvals, (approval) => {
            const approvalSigner = (0, utils_1.removeAlgoPrefixFromHexValue)(approval.signer);
            return approvalSigner === pub;
        }) !== -1);
    }
    /**
     * Add signatures to the transaction
     *
     * @private
     */
    processSigning() {
        for (const keyPair of this._multiSignerKeyPairs) {
            // Add signature if it's not already in the deploy
            if (!this.isTransactionSignedByPub(keyPair.getKeys().pub)) {
                this.transaction.sign(keyPair);
            }
        }
        for (const { signature, keyPair } of this._signatures) {
            // Add signature if it's not already in the deploy
            if (!this.isTransactionSignedByPub(keyPair.getKeys().pub)) {
                this.transaction.addSignature(signature, keyPair);
            }
        }
    }
}
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,