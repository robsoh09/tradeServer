"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletInitializationBuilder = void 0;
const casper_js_sdk_1 = require("casper-js-sdk");
const sdk_core_1 = require("@bitgo/sdk-core");
const transactionBuilder_1 = require("./transactionBuilder");
const utils_1 = require("./utils");
const constants_1 = require("./constants");
const keyPair_1 = require("./keyPair");
const DEFAULT_OWNER_WEIGHT = 1;
class WalletInitializationBuilder extends transactionBuilder_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._owners = [];
        this._contract = Uint8Array.from(Buffer.from(utils_1.casperContractHexCode, 'hex'));
    }
    // region Base Builder
    /** @inheritdoc */
    async buildImplementation() {
        const args = this.buildWalletParameters();
        const extraArguments = new Map();
        extraArguments.set(constants_1.TRANSACTION_TYPE, casper_js_sdk_1.CLValueBuilder.string(sdk_core_1.TransactionType[sdk_core_1.TransactionType.WalletInitialization]));
        for (let index = 0; index < this._owners.length; index++) {
            const ownerPublicKey = Buffer.from(this._owners[index].address.value()).toString('hex');
            const ownerAddress = new keyPair_1.KeyPair({ pub: ownerPublicKey }).getAddress();
            extraArguments.set(constants_1.OWNER_PREFIX + index, casper_js_sdk_1.CLValueBuilder.string(ownerAddress));
        }
        this._session = { moduleBytes: this._contract, args: casper_js_sdk_1.RuntimeArgs.fromMap(args), extraArguments: extraArguments };
        this.transaction.setTransactionType(sdk_core_1.TransactionType.WalletInitialization);
        return await super.buildImplementation();
    }
    /**
     * Build args needed to create a session, then we can send this session with the contract
     *
     * @returns {WalletInitContractArgs} contracts args to create a session
     */
    buildWalletParameters() {
        const accounts = this._owners.map((owner) => casper_js_sdk_1.CLValueBuilder.byteArray(owner.address.toAccountHash()));
        const weights = this._owners.map((owner) => casper_js_sdk_1.CLValueBuilder.u8(owner.weight));
        // set source address weight to zero to disable the master private key from signing.
        accounts.push(casper_js_sdk_1.CLValueBuilder.byteArray(casper_js_sdk_1.CLPublicKey.fromHex(this._source.address).toAccountHash()));
        weights.push(casper_js_sdk_1.CLValueBuilder.u8(0));
        return {
            action: casper_js_sdk_1.CLValueBuilder.string(constants_1.WALLET_INITIALIZATION_CONTRACT_ACTION),
            // This typo is on purpose since the contract we use for multisig wallet initialization expect this argument to be written like this.
            deployment_thereshold: casper_js_sdk_1.CLValueBuilder.u8(transactionBuilder_1.DEFAULT_N),
            key_management_threshold: casper_js_sdk_1.CLValueBuilder.u8(transactionBuilder_1.DEFAULT_M),
            accounts: casper_js_sdk_1.CLValueBuilder.list(accounts),
            weights: casper_js_sdk_1.CLValueBuilder.list(weights),
        };
    }
    /** @inheritdoc */
    initBuilder(tx) {
        super.initBuilder(tx);
        this.transaction.setTransactionType(sdk_core_1.TransactionType.WalletInitialization);
        for (let ownerIndex = 0; ownerIndex < transactionBuilder_1.DEFAULT_M; ownerIndex++) {
            const ownerCLValue = tx.casperTx.session.getArgByName(constants_1.OWNER_PREFIX + ownerIndex);
            this.owner(ownerCLValue.value());
        }
    }
    // endregion
    // region Common builder methods
    /**
     * Set one of the owners of the multisig wallet.
     *
     * @param {string} address The public key of the owner's account
     * @returns {WalletInitializationBuilder} This wallet initialization builder
     */
    owner(address) {
        if (this._owners.length >= transactionBuilder_1.DEFAULT_M) {
            throw new sdk_core_1.BuildTransactionError('A maximum of ' + transactionBuilder_1.DEFAULT_M + ' owners can be set for a multisig wallet');
        }
        this.validateAddress({ address: address });
        for (const _owner of this._owners) {
            if (address.substr(0, 2) + Buffer.from(_owner.address.value()).toString('hex') === address) {
                throw new sdk_core_1.BuildTransactionError('Duplicated owner: ' + address);
            }
        }
        this._owners.push({ address: casper_js_sdk_1.CLPublicKey.fromHex(address), weight: DEFAULT_OWNER_WEIGHT });
        return this;
    }
    // endregion
    // region Validators
    validateMandatoryFields() {
        if (this._owners.length === 0) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing wallet owners');
        }
        if (this._owners.length !== transactionBuilder_1.DEFAULT_M) {
            throw new sdk_core_1.BuildTransactionError(`Invalid transaction: wrong number of owners -- required: ${transactionBuilder_1.DEFAULT_M}, found: ${this._owners.length}`);
        }
        super.validateMandatoryFields();
    }
}
exports.WalletInitializationBuilder = WalletInitializationBuilder;
//# sourceMappingURL=data:application/json;base64,