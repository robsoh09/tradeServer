"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferBuilder = void 0;
const casper_js_sdk_1 = require("casper-js-sdk");
const sdk_core_1 = require("@bitgo/sdk-core");
const transactionBuilder_1 = require("./transactionBuilder");
const constants_1 = require("./constants");
const utils_1 = require("./utils");
class TransferBuilder extends transactionBuilder_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
    }
    /** @inheritdoc */
    async buildImplementation() {
        const extraArguments = new Map();
        if (this._toAddress) {
            extraArguments.set(constants_1.TRANSACTION_TYPE, casper_js_sdk_1.CLValueBuilder.string(sdk_core_1.TransactionType[sdk_core_1.TransactionType.Send]));
            extraArguments.set(constants_1.TRANSFER_TO_ADDRESS, casper_js_sdk_1.CLValueBuilder.string(this._toAddress));
        }
        this._session = {
            amount: this._amount,
            target: casper_js_sdk_1.CLPublicKey.fromHex(this._toAddress),
            id: this._transferId,
            extraArguments: extraArguments,
        };
        this.transaction.setTransactionType(sdk_core_1.TransactionType.Send);
        return await super.buildImplementation();
    }
    /** @inheritdoc */
    initBuilder(tx) {
        super.initBuilder(tx);
        this.transaction.setTransactionType(sdk_core_1.TransactionType.Send);
        this.to((0, utils_1.getTransferDestinationAddress)(tx.casperTx.session));
        this.amount((0, utils_1.getTransferAmount)(tx.casperTx.session));
        const transferId = (0, utils_1.getTransferId)(tx.casperTx.session);
        if (transferId !== undefined) {
            this.transferId(transferId);
        }
    }
    /** @inheritdoc */
    signImplementation(key) {
        if (this._multiSignerKeyPairs.length >= transactionBuilder_1.DEFAULT_M) {
            throw new sdk_core_1.SigningError('A maximum of ' + transactionBuilder_1.DEFAULT_M + ' can sign the transaction.');
        }
        return super.signImplementation(key);
    }
    // region Transfer fields
    /**
     * Set the destination address where the funds will be sent,
     *
     * @param {string} address the address to transfer funds to
     * @returns {TransferBuilder} the builder with the new parameter set
     */
    to(address) {
        if (!(0, utils_1.isValidAddress)(address)) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid address');
        }
        this._toAddress = address;
        return this;
    }
    /**
     * Set the amount to be transferred
     *
     * @param {string} amount amount to transfer in motes (1 Cspr equals 1,000,000,000 motes)
     * @returns {TransferBuilder} the builder with the new parameter set
     */
    amount(amount) {
        if (!(0, utils_1.isValidTransferAmount)(amount)) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid amount');
        }
        this._amount = amount;
        return this;
    }
    /**
     * Set transfer id that acts as a transaction identifier (similar to memo id for Stellar)
     *
     * @param {number} id transfer id
     * @returns {TransferBuilder} the builder with the new parameter set
     */
    transferId(id) {
        if (!(0, utils_1.isValidTransferId)(id)) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid transfer id');
        }
        this._transferId = id.toString();
        return this;
    }
    // endregion
    // region Validators
    validateMandatoryFields() {
        if (!this._toAddress) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing to');
        }
        if (!(0, utils_1.isValidAddress)(this._toAddress)) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid to address');
        }
        if (!this._amount) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing amount');
        }
        if (!(0, utils_1.isValidTransferAmount)(this._amount)) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid amount');
        }
        super.validateMandatoryFields();
    }
}
exports.TransferBuilder = TransferBuilder;
//# sourceMappingURL=data:application/json;base64,