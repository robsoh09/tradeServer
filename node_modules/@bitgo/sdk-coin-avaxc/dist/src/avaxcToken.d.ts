/**
 * @prettier
 */
import { AvaxC } from './avaxc';
import { BitGoBase, CoinConstructor, NamedCoinConstructor } from '@bitgo/sdk-core';
import { AvaxcTokenConfig } from '@bitgo/statics';
import { TransactionPrebuild } from '@bitgo/sdk-coin-eth';
export { AvaxcTokenConfig };
export declare class AvaxCToken extends AvaxC {
    readonly tokenConfig: AvaxcTokenConfig;
    constructor(bitgo: BitGoBase, tokenConfig: AvaxcTokenConfig);
    static createTokenConstructor(config: AvaxcTokenConfig): CoinConstructor;
    static createTokenConstructors(): NamedCoinConstructor[];
    get type(): string;
    get name(): string;
    get coin(): string;
    get network(): string;
    get tokenContractAddress(): string;
    get decimalPlaces(): number;
    getChain(): string;
    getBaseChain(): string;
    getFullName(): string;
    getBaseFactor(): number;
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    valuelessTransferAllowed(): boolean;
    /**
     * Flag for sending data along with transactions
     * @returns {boolean} True if okay to send tx data (AVAXC), false otherwise
     */
    transactionDataAllowed(): boolean;
    isToken(): boolean;
    verifyCoin(txPrebuild: TransactionPrebuild): boolean;
}
//# sourceMappingURL=avaxcToken.d.ts.map