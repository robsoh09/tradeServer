/**
 * @prettier
 */
import { AbstractEthLikeNewCoins } from '@bitgo/abstract-eth';
import { BaseCoin, BitGoBase, MPCAlgorithm } from '@bitgo/sdk-core';
import { BaseCoin as StaticsBaseCoin } from '@bitgo/statics';
import { TransactionBuilder } from './lib';
export declare class Polygon extends AbstractEthLikeNewCoins {
    protected constructor(bitgo: BitGoBase, staticsCoin?: Readonly<StaticsBaseCoin>);
    static createInstance(bitgo: BitGoBase, staticsCoin?: Readonly<StaticsBaseCoin>): BaseCoin;
    /**
     * Create a new transaction builder for the current chain
     * @return a new transaction builder
     */
    protected getTransactionBuilder(): TransactionBuilder;
    /**
     * Make a query to Polygon explorer for information such as balance, token balance, solidity calls
     * @param {Object} query key-value pairs of parameters to append after /api
     * @returns {Promise<Object>} response from Polygon
     */
    recoveryBlockchainExplorerQuery(query: Record<string, string>): Promise<Record<string, unknown>>;
    /** @inheritDoc */
    supportsMessageSigning(): boolean;
    /** @inheritDoc */
    supportsSigningTypedData(): boolean;
    /** @inheritDoc */
    supportsTss(): boolean;
    /** @inheritDoc */
    getMPCAlgorithm(): MPCAlgorithm;
}
//# sourceMappingURL=polygon.d.ts.map