"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseNFTTransferBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const utils_1 = require("../utils");
const utils_2 = require("ethers/lib/utils");
class BaseNFTTransferBuilder {
    constructor(serializedData) {
        this._EMPTY_HEX_VALUE = '0x';
        if (serializedData === undefined) {
            // initialize with default values for non mandatory fields
            this._expirationTime = BaseNFTTransferBuilder.getExpirationTime();
            this._data = this._EMPTY_HEX_VALUE;
            this._signature = this._EMPTY_HEX_VALUE;
        }
    }
    expirationTime(date) {
        if (date > 0) {
            this._signature = this._EMPTY_HEX_VALUE;
            this._expirationTime = date;
            return this;
        }
        throw new sdk_core_1.InvalidParameterValueError('Invalid expiration time');
    }
    walletVersion(version) {
        this._walletVersion = version;
        return this;
    }
    key(signKey) {
        this._signKey = signKey;
        return this;
    }
    contractSequenceId(counter) {
        if (counter >= 0) {
            this._signature = this._EMPTY_HEX_VALUE;
            this._sequenceId = counter;
            return this;
        }
        throw new sdk_core_1.InvalidParameterValueError('Invalid contract sequence id');
    }
    to(address) {
        if ((0, utils_1.isValidEthAddress)(address)) {
            this._signature = this._EMPTY_HEX_VALUE;
            this._toAddress = address;
            return this;
        }
        throw new sdk_core_1.InvalidParameterValueError('Invalid address');
    }
    from(address) {
        if ((0, utils_1.isValidEthAddress)(address)) {
            this._signature = this._EMPTY_HEX_VALUE;
            this._fromAddress = address;
            return this;
        }
        throw new sdk_core_1.InvalidParameterValueError('Invalid address');
    }
    /** Return an expiration time, in seconds, set to one hour from now
     *
     * @returns {number} expiration time
     */
    static getExpirationTime() {
        const currentDate = new Date();
        currentDate.setHours(currentDate.getHours() + 1);
        return currentDate.getTime() / 1000;
    }
    /**
     * If a signing key is set for this builder, recalculates the signature
     *
     * @returns {string} the signature value
     */
    getSignature() {
        if (this._signKey) {
            this._signature = this.ethSignMsgHash();
        }
        if (this._signature === null) {
            throw new sdk_core_1.InvalidSignatureError('Null signature value');
        }
        return this._signature;
    }
    /**
     * Get the prefix used in generating an operation hash for sending native coins
     *
     * @returns the string prefix
     */
    getNativeOperationHashPrefix() {
        var _a, _b, _c;
        if (this._walletVersion === 4) {
            return (_a = this._chainId) !== null && _a !== void 0 ? _a : 'ETHER';
        }
        return (_c = (_b = this._nativeCoinOperationHashPrefix) !== null && _b !== void 0 ? _b : this._chainId) !== null && _c !== void 0 ? _c : 'ETHER';
    }
    /**
     * Obtains the proper operation hash to sign either a sendMultiSig data
     * or a sendMultiSigToken data
     *
     * @returns {string} the operation hash
     */
    getOperationHash() {
        const hash = (0, utils_2.solidityKeccak256)(['string', 'address', 'uint', 'bytes', 'uint', 'uint'], [
            this.getNativeOperationHashPrefix(),
            this._toAddress,
            '0',
            this._data,
            this._expirationTime,
            this._sequenceId,
        ]);
        return hash;
    }
    /**
     * Signs the Message with the given private key
     * @returns {string} 65 byte long raw signature
     */
    ethSignMsgHash() {
        const signKey = new utils_2.SigningKey('0x'.concat(this._signKey));
        const digest = signKey.signDigest(this.getOperationHash());
        const rawSignature = (0, utils_2.joinSignature)(digest);
        return rawSignature;
    }
}
exports.BaseNFTTransferBuilder = BaseNFTTransferBuilder;
//# sourceMappingURL=data:application/json;base64,