"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ERC1155TransferBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const utils_1 = require("ethers/lib/utils");
const contractCall_1 = require("../contractCall");
const utils_2 = require("../utils");
const walletUtil_1 = require("../walletUtil");
const baseNFTTransferBuilder_1 = require("./baseNFTTransferBuilder");
const statics_1 = require("@bitgo/statics");
class ERC1155TransferBuilder extends baseNFTTransferBuilder_1.BaseNFTTransferBuilder {
    constructor(serializedData) {
        super(serializedData);
        this.bytes(0);
        if (serializedData) {
            this.decodeTransferData(serializedData);
        }
        else {
            this._tokenIds = [];
            this._values = [];
        }
    }
    coin(coin) {
        this._coin = statics_1.coins.get(coin);
        this._nativeCoinOperationHashPrefix = this._coin.network.nativeCoinOperationHashPrefix;
        return this;
    }
    tokenContractAddress(address) {
        if ((0, utils_2.isValidEthAddress)(address)) {
            this._tokenContractAddress = address;
            return this;
        }
        throw new sdk_core_1.InvalidParameterValueError('Invalid address');
    }
    entry(tokenId, value) {
        this._tokenIds.push(tokenId.toString());
        this._values.push(value.toString());
        return this;
    }
    bytes(bytesInNumber) {
        this._bytes = (0, utils_1.hexZeroPad)((0, utils_1.hexlify)(bytesInNumber), 32);
        return this;
    }
    signAndBuild(chainId) {
        this._chainId = chainId;
        const hasMandatoryFields = this.hasMandatoryFields();
        if (hasMandatoryFields) {
            this._data = this.build();
            return (0, utils_2.sendMultiSigData)(this._tokenContractAddress, '0', // dummy amount value
            this._data, this._expirationTime, this._sequenceId, this.getSignature());
        }
        throw new sdk_core_1.BuildTransactionError(`Missing transfer mandatory fields. 
       Destination (to) address, source (from) address, sequenceID, the token contract address, tokenIDs and their values are mandatory`);
    }
    hasMandatoryFields() {
        return (this._tokenIds !== undefined &&
            this._tokenIds.length !== 0 &&
            this._values.length !== 0 &&
            this._tokenIds.length === this._values.length &&
            this._toAddress !== undefined &&
            this._fromAddress !== undefined &&
            this._tokenContractAddress !== undefined &&
            this._sequenceId !== undefined);
    }
    decodeTransferData(data) {
        const transferData = (0, utils_2.decodeERC1155TransferData)(data);
        this._toAddress = transferData.to;
        this._fromAddress = transferData.from;
        this._expirationTime = transferData.expireTime;
        this._sequenceId = transferData.sequenceId;
        this._signature = transferData.signature;
        this._tokenContractAddress = transferData.tokenContractAddress;
        this._tokenIds = transferData.tokenIds;
        this._values = transferData.values;
        if (transferData.data) {
            this._data = transferData.data;
        }
    }
    build() {
        if (this._tokenIds.length === 1) {
            const values = [this._fromAddress, this._toAddress, this._tokenIds[0], this._values[0], this._bytes];
            const contractCall = new contractCall_1.ContractCall(walletUtil_1.ERC1155SafeTransferTypeMethodId, walletUtil_1.ERC1155SafeTransferTypes, values);
            return contractCall.serialize();
        }
        else {
            const values = [this._fromAddress, this._toAddress, this._tokenIds, this._values, this._bytes];
            const contractCall = new contractCall_1.ContractCall(walletUtil_1.ERC1155BatchTransferTypeMethodId, walletUtil_1.ERC1155BatchTransferTypes, values);
            return contractCall.serialize();
        }
    }
}
exports.ERC1155TransferBuilder = ERC1155TransferBuilder;
//# sourceMappingURL=data:application/json;base64,