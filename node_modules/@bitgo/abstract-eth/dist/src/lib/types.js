"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthTransactionData = void 0;
const assert_1 = __importDefault(require("assert"));
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const tx_1 = require("@ethereumjs/tx");
const ethereumjs_util_1 = require("ethereumjs-util");
const iface_1 = require("./iface");
// https://github.com/ethereumjs/ethereumjs-monorepo/blob/master/packages/tx/src/transactionFactory.ts#L31
const LEGACY_TX_TYPE = 0;
const EIP1559_TX_TYPE = 2;
/**
 * An Ethereum transaction with helpers for serialization and deserialization.
 */
class EthTransactionData {
    constructor(tx, args) {
        this.tx = tx;
        this.args = args;
    }
    /**
     * Build an thereum transaction from its JSON representation
     *
     * @param {TxData} tx The JSON representation of the transaction
     * @param {EthereumCommon} common Class to access chain and hardfork parameters
     * @returns {EthTransactionData} a new ethereum transaction object
     */
    static fromJson(tx, common) {
        const nonce = (0, ethereumjs_util_1.addHexPrefix)(new bignumber_js_1.default(tx.nonce).toString(16));
        const value = (0, ethereumjs_util_1.addHexPrefix)(new bignumber_js_1.default(tx.value).toString(16));
        const gasLimit = (0, ethereumjs_util_1.addHexPrefix)(new bignumber_js_1.default(tx.gasLimit).toString(16));
        const chainId = tx.chainId ? (0, ethereumjs_util_1.addHexPrefix)(new bignumber_js_1.default(tx.chainId).toString(16)) : undefined;
        const gasPrice = isLegacyTx(tx) ? (0, ethereumjs_util_1.addHexPrefix)(new bignumber_js_1.default(tx.gasPrice).toString(16)) : undefined;
        const maxFeePerGas = isEIP1559Txn(tx) ? (0, ethereumjs_util_1.addHexPrefix)(new bignumber_js_1.default(tx.maxFeePerGas).toString(16)) : undefined;
        const maxPriorityFeePerGas = isEIP1559Txn(tx)
            ? (0, ethereumjs_util_1.addHexPrefix)(new bignumber_js_1.default(tx.maxPriorityFeePerGas).toString(16))
            : undefined;
        return new EthTransactionData(tx_1.TransactionFactory.fromTxData({
            type: isLegacyTx(tx) ? LEGACY_TX_TYPE : EIP1559_TX_TYPE,
            chainId,
            nonce,
            to: tx.to,
            gasPrice,
            gasLimit,
            maxFeePerGas,
            maxPriorityFeePerGas,
            value,
            data: tx.data,
            v: tx.v,
            r: tx.r,
            s: tx.s,
        }, { common: common }), {
            deployedAddress: tx.deployedAddress,
            chainId: (0, ethereumjs_util_1.addHexPrefix)(new bignumber_js_1.default(Number(tx.chainId)).toString(16)),
        });
    }
    /**
     * Build an ethereum transaction from its string serialization
     *
     * @param tx The string serialization of the ethereum transaction
     * @param common
     */
    static fromSerialized(tx, common) {
        return new EthTransactionData(tx_1.TransactionFactory.fromSerializedData((0, ethereumjs_util_1.toBuffer)((0, ethereumjs_util_1.addHexPrefix)(tx)), { common: common }));
    }
    sign(keyPair) {
        const privateKey = Buffer.from(keyPair.getKeys().prv, 'hex');
        this.tx = this.tx.sign(privateKey);
    }
    /** @inheritdoc */
    toJson() {
        const result = {
            nonce: (0, ethereumjs_util_1.bufferToInt)((0, ethereumjs_util_1.toUnsigned)(this.tx.nonce)),
            gasLimit: new bignumber_js_1.default((0, ethereumjs_util_1.bufferToHex)((0, ethereumjs_util_1.toUnsigned)(this.tx.gasLimit)), 16).toString(10),
            value: this.tx.value.toString(10),
            data: (0, ethereumjs_util_1.bufferToHex)(this.tx.data),
        };
        if (this.tx.isSigned()) {
            result.id = (0, ethereumjs_util_1.addHexPrefix)((0, ethereumjs_util_1.bufferToHex)(this.tx.hash()));
        }
        else {
            result.id = (0, ethereumjs_util_1.addHexPrefix)((0, ethereumjs_util_1.bufferToHex)(this.tx.getMessageToSign()));
        }
        if (this.tx.to) {
            result.to = (0, ethereumjs_util_1.bufferToHex)(this.tx.to.toBuffer());
        }
        if (this.tx.verifySignature()) {
            result.from = (0, ethereumjs_util_1.bufferToHex)(this.tx.getSenderAddress().toBuffer());
            (0, assert_1.default)(this.tx.r != undefined);
            result.r = (0, ethereumjs_util_1.bufferToHex)((0, ethereumjs_util_1.toUnsigned)(this.tx.r));
            (0, assert_1.default)(this.tx.s != undefined);
            result.s = (0, ethereumjs_util_1.bufferToHex)((0, ethereumjs_util_1.toUnsigned)(this.tx.s));
        }
        if (this.tx.v) {
            result.v = (0, ethereumjs_util_1.bufferToHex)((0, ethereumjs_util_1.toUnsigned)(this.tx.v));
        }
        result.chainId = (0, ethereumjs_util_1.addHexPrefix)(this.tx.common.chainIdBN().toString(16));
        if (this.args && this.args.deployedAddress) {
            result.deployedAddress = this.args.deployedAddress;
        }
        if (this.tx instanceof tx_1.Transaction) {
            const gasPrice = new bignumber_js_1.default((0, ethereumjs_util_1.bufferToHex)((0, ethereumjs_util_1.toUnsigned)(this.tx.gasPrice)), 16).toString(10);
            return {
                ...result,
                _type: iface_1.ETHTransactionType.LEGACY,
                gasPrice,
            };
        }
        else if (this.tx instanceof tx_1.FeeMarketEIP1559Transaction) {
            const maxFeePerGas = new bignumber_js_1.default((0, ethereumjs_util_1.bufferToHex)((0, ethereumjs_util_1.toUnsigned)(this.tx.maxFeePerGas)), 16).toString(10);
            const maxPriorityFeePerGas = new bignumber_js_1.default((0, ethereumjs_util_1.bufferToHex)((0, ethereumjs_util_1.toUnsigned)(this.tx.maxPriorityFeePerGas)), 16).toString(10);
            return {
                ...result,
                _type: iface_1.ETHTransactionType.EIP1559,
                maxFeePerGas,
                maxPriorityFeePerGas,
            };
        }
        else {
            throw new Error(`Unsupported tx type: ${tx_1.AccessListEIP2930Transaction.name}`);
        }
    }
    /** @inheritdoc */
    toSerialized() {
        return (0, ethereumjs_util_1.addHexPrefix)(this.tx.serialize().toString('hex'));
    }
}
exports.EthTransactionData = EthTransactionData;
function isLegacyTx(tx) {
    return tx._type === iface_1.ETHTransactionType.LEGACY;
}
function isEIP1559Txn(tx) {
    return tx._type === iface_1.ETHTransactionType.EIP1559;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3R5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLG9EQUE0QjtBQUM1QixnRUFBcUM7QUFDckMsdUNBTXdCO0FBRXhCLHFEQUErRjtBQUMvRixtQ0FBc0g7QUFHdEgsMEdBQTBHO0FBQzFHLE1BQU0sY0FBYyxHQUFHLENBQUMsQ0FBQztBQUN6QixNQUFNLGVBQWUsR0FBRyxDQUFDLENBQUM7QUFFMUI7O0dBRUc7QUFDSCxNQUFhLGtCQUFrQjtJQUk3QixZQUFZLEVBQW9CLEVBQUUsSUFBcUQ7UUFDckYsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNuQixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ksTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFVLEVBQUUsTUFBc0I7UUFDdkQsTUFBTSxLQUFLLEdBQUcsSUFBQSw4QkFBWSxFQUFDLElBQUksc0JBQVMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDakUsTUFBTSxLQUFLLEdBQUcsSUFBQSw4QkFBWSxFQUFDLElBQUksc0JBQVMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDakUsTUFBTSxRQUFRLEdBQUcsSUFBQSw4QkFBWSxFQUFDLElBQUksc0JBQVMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdkUsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBQSw4QkFBWSxFQUFDLElBQUksc0JBQVMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FB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QUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNuRyxNQUFNLG9CQUFvQixHQUFHLElBQUksc0JBQVMsQ0FBQyxJQUFBLDZCQUFXLEVBQUMsSUFBQSw0QkFBVSxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FDNUcsRUFBRSxDQUNILENBQUM7WUFFRixPQUFPO2dCQUNMLEdBQUcsTUFBTTtnQkFDVCxLQUFLLEVBQUUsMEJBQWtCLENBQUMsT0FBTztnQkFDakMsWUFBWTtnQkFDWixvQkFBb0I7YUFDckIsQ0FBQztTQUNIO2FBQU07WUFDTCxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixpQ0FBNEIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQzlFO0lBQ0gsQ0FBQztJQUVELGtCQUFrQjtJQUNsQixZQUFZO1FBQ1YsT0FBTyxJQUFBLDhCQUFZLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUMzRCxDQUFDO0NBQ0Y7QUF4SUQsZ0RBd0lDO0FBRUQsU0FBUyxVQUFVLENBQUMsRUFBVTtJQUM1QixPQUFPLEVBQUUsQ0FBQyxLQUFLLEtBQUssMEJBQWtCLENBQUMsTUFBTSxDQUFDO0FBQ2hELENBQUM7QUFFRCxTQUFTLFlBQVksQ0FBQyxFQUFVO0lBQzlCLE9BQU8sRUFBRSxDQUFDLEtBQUssS0FBSywwQkFBa0IsQ0FBQyxPQUFPLENBQUM7QUFDakQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcbmltcG9ydCBCaWdOdW1iZXIgZnJvbSAnYmlnbnVtYmVyLmpzJztcbmltcG9ydCB7XG4gIFRyYW5zYWN0aW9uRmFjdG9yeSxcbiAgVHlwZWRUcmFuc2FjdGlvbixcbiAgVHJhbnNhY3Rpb24gYXMgTGVnYWN5VHJhbnNhY3Rpb24sXG4gIEZlZU1hcmtldEVJUDE1NTlUcmFuc2FjdGlvbixcbiAgQWNjZXNzTGlzdEVJUDI5MzBUcmFuc2FjdGlvbixcbn0gZnJvbSAnQGV0aGVyZXVtanMvdHgnO1xuaW1wb3J0IEV0aGVyZXVtQ29tbW9uIGZyb20gJ0BldGhlcmV1bWpzL2NvbW1vbic7XG5pbXBvcnQgeyBidWZmZXJUb0hleCwgYnVmZmVyVG9JbnQsIHRvQnVmZmVyLCB0b1Vuc2lnbmVkLCBhZGRIZXhQcmVmaXggfSBmcm9tICdldGhlcmV1bWpzLXV0aWwnO1xuaW1wb3J0IHsgQmFzZVR4RGF0YSwgRUlQMTU1OVR4RGF0YSwgRXRoTGlrZVRyYW5zYWN0aW9uRGF0YSwgTGVnYWN5VHhEYXRhLCBFVEhUcmFuc2FjdGlvblR5cGUsIFR4RGF0YSB9IGZyb20gJy4vaWZhY2UnO1xuaW1wb3J0IHsgS2V5UGFpciB9IGZyb20gJy4va2V5UGFpcic7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bWpzL2V0aGVyZXVtanMtbW9ub3JlcG8vYmxvYi9tYXN0ZXIvcGFja2FnZXMvdHgvc3JjL3RyYW5zYWN0aW9uRmFjdG9yeS50cyNMMzFcbmNvbnN0IExFR0FDWV9UWF9UWVBFID0gMDtcbmNvbnN0IEVJUDE1NTlfVFhfVFlQRSA9IDI7XG5cbi8qKlxuICogQW4gRXRoZXJldW0gdHJhbnNhY3Rpb24gd2l0aCBoZWxwZXJzIGZvciBzZXJpYWxpemF0aW9uIGFuZCBkZXNlcmlhbGl6YXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBFdGhUcmFuc2FjdGlvbkRhdGEgaW1wbGVtZW50cyBFdGhMaWtlVHJhbnNhY3Rpb25EYXRhIHtcbiAgcHJpdmF0ZSB0eDogVHlwZWRUcmFuc2FjdGlvbjtcbiAgcHJvdGVjdGVkIGFyZ3M/OiB7IGRlcGxveWVkQWRkcmVzcz86IHN0cmluZzsgY2hhaW5JZD86IHN0cmluZyB9O1xuXG4gIGNvbnN0cnVjdG9yKHR4OiBUeXBlZFRyYW5zYWN0aW9uLCBhcmdzPzogeyBkZXBsb3llZEFkZHJlc3M/OiBzdHJpbmc7IGNoYWluSWQ/OiBzdHJpbmcgfSkge1xuICAgIHRoaXMudHggPSB0eDtcbiAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1aWxkIGFuIHRoZXJldW0gdHJhbnNhY3Rpb24gZnJvbSBpdHMgSlNPTiByZXByZXNlbnRhdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge1R4RGF0YX0gdHggVGhlIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7RXRoZXJldW1Db21tb259IGNvbW1vbiBDbGFzcyB0byBhY2Nlc3MgY2hhaW4gYW5kIGhhcmRmb3JrIHBhcmFtZXRlcnNcbiAgICogQHJldHVybnMge0V0aFRyYW5zYWN0aW9uRGF0YX0gYSBuZXcgZXRoZXJldW0gdHJhbnNhY3Rpb24gb2JqZWN0XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZyb21Kc29uKHR4OiBUeERhdGEsIGNvbW1vbjogRXRoZXJldW1Db21tb24pOiBFdGhUcmFuc2FjdGlvbkRhdGEge1xuICAgIGNvbnN0IG5vbmNlID0gYWRkSGV4UHJlZml4KG5ldyBCaWdOdW1iZXIodHgubm9uY2UpLnRvU3RyaW5nKDE2KSk7XG4gICAgY29uc3QgdmFsdWUgPSBhZGRIZXhQcmVmaXgobmV3IEJpZ051bWJlcih0eC52YWx1ZSkudG9TdHJpbmcoMTYpKTtcbiAgICBjb25zdCBnYXNMaW1pdCA9IGFkZEhleFByZWZpeChuZXcgQmlnTnVtYmVyKHR4Lmdhc0xpbWl0KS50b1N0cmluZygxNikpO1xuICAgIGNvbnN0IGNoYWluSWQgPSB0eC5jaGFpbklkID8gYWRkSGV4UHJlZml4KG5ldyBCaWdOdW1iZXIodHguY2hhaW5JZCkudG9TdHJpbmcoMTYpKSA6IHVuZGVmaW5lZDtcblxuICAgIGNvbnN0IGdhc1ByaWNlID0gaXNMZWdhY3lUeCh0eCkgPyBhZGRIZXhQcmVmaXgobmV3IEJpZ051bWJlcih0eC5nYXNQcmljZSkudG9TdHJpbmcoMTYpKSA6IHVuZGVmaW5lZDtcblxuICAgIGNvbnN0IG1heEZlZVBlckdhcyA9IGlzRUlQMTU1OVR4bih0eCkgPyBhZGRIZXhQcmVmaXgobmV3IEJpZ051bWJlcih0eC5tYXhGZWVQZXJHYXMpLnRvU3RyaW5nKDE2KSkgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgbWF4UHJpb3JpdHlGZWVQZXJHYXMgPSBpc0VJUDE1NTlUeG4odHgpXG4gICAgICA/IGFkZEhleFByZWZpeChuZXcgQmlnTnVtYmVyKHR4Lm1heFByaW9yaXR5RmVlUGVyR2FzKS50b1N0cmluZygxNikpXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIHJldHVybiBuZXcgRXRoVHJhbnNhY3Rpb25EYXRhKFxuICAgICAgVHJhbnNhY3Rpb25GYWN0b3J5LmZyb21UeERhdGEoXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBpc0xlZ2FjeVR4KHR4KSA/IExFR0FDWV9UWF9UWVBFIDogRUlQMTU1OV9UWF9UWVBFLFxuICAgICAgICAgIGNoYWluSWQsXG4gICAgICAgICAgbm9uY2UsXG4gICAgICAgICAgdG86IHR4LnRvLFxuICAgICAgICAgIGdhc1ByaWNlLFxuICAgICAgICAgIGdhc0xpbWl0LFxuICAgICAgICAgIG1heEZlZVBlckdhcyxcbiAgICAgICAgICBtYXhQcmlvcml0eUZlZVBlckdhcyxcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBkYXRhOiB0eC5kYXRhLFxuICAgICAgICAgIHY6IHR4LnYsXG4gICAgICAgICAgcjogdHgucixcbiAgICAgICAgICBzOiB0eC5zLFxuICAgICAgICB9LFxuICAgICAgICB7IGNvbW1vbjogY29tbW9uIH1cbiAgICAgICksXG4gICAgICB7XG4gICAgICAgIGRlcGxveWVkQWRkcmVzczogdHguZGVwbG95ZWRBZGRyZXNzLFxuICAgICAgICBjaGFpbklkOiBhZGRIZXhQcmVmaXgobmV3IEJpZ051bWJlcihOdW1iZXIodHguY2hhaW5JZCkpLnRvU3RyaW5nKDE2KSksXG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdWlsZCBhbiBldGhlcmV1bSB0cmFuc2FjdGlvbiBmcm9tIGl0cyBzdHJpbmcgc2VyaWFsaXphdGlvblxuICAgKlxuICAgKiBAcGFyYW0gdHggVGhlIHN0cmluZyBzZXJpYWxpemF0aW9uIG9mIHRoZSBldGhlcmV1bSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0gY29tbW9uXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZyb21TZXJpYWxpemVkKHR4OiBzdHJpbmcsIGNvbW1vbjogRXRoZXJldW1Db21tb24pOiBFdGhUcmFuc2FjdGlvbkRhdGEge1xuICAgIHJldHVybiBuZXcgRXRoVHJhbnNhY3Rpb25EYXRhKFxuICAgICAgVHJhbnNhY3Rpb25GYWN0b3J5LmZyb21TZXJpYWxpemVkRGF0YSh0b0J1ZmZlcihhZGRIZXhQcmVmaXgodHgpKSwgeyBjb21tb246IGNvbW1vbiB9KVxuICAgICk7XG4gIH1cblxuICBzaWduKGtleVBhaXI6IEtleVBhaXIpIHtcbiAgICBjb25zdCBwcml2YXRlS2V5ID0gQnVmZmVyLmZyb20oa2V5UGFpci5nZXRLZXlzKCkucHJ2IGFzIHN0cmluZywgJ2hleCcpO1xuICAgIHRoaXMudHggPSB0aGlzLnR4LnNpZ24ocHJpdmF0ZUtleSk7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgdG9Kc29uKCk6IFR4RGF0YSB7XG4gICAgY29uc3QgcmVzdWx0OiBCYXNlVHhEYXRhID0ge1xuICAgICAgbm9uY2U6IGJ1ZmZlclRvSW50KHRvVW5zaWduZWQodGhpcy50eC5ub25jZSkpLFxuICAgICAgZ2FzTGltaXQ6IG5ldyBCaWdOdW1iZXIoYnVmZmVyVG9IZXgodG9VbnNpZ25lZCh0aGlzLnR4Lmdhc0xpbWl0KSksIDE2KS50b1N0cmluZygxMCksXG4gICAgICB2YWx1ZTogdGhpcy50eC52YWx1ZS50b1N0cmluZygxMCksXG4gICAgICBkYXRhOiBidWZmZXJUb0hleCh0aGlzLnR4LmRhdGEpLFxuICAgIH07XG5cbiAgICBpZiAodGhpcy50eC5pc1NpZ25lZCgpKSB7XG4gICAgICByZXN1bHQuaWQgPSBhZGRIZXhQcmVmaXgoYnVmZmVyVG9IZXgodGhpcy50eC5oYXNoKCkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LmlkID0gYWRkSGV4UHJlZml4KGJ1ZmZlclRvSGV4KHRoaXMudHguZ2V0TWVzc2FnZVRvU2lnbigpKSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudHgudG8pIHtcbiAgICAgIHJlc3VsdC50byA9IGJ1ZmZlclRvSGV4KHRoaXMudHgudG8udG9CdWZmZXIoKSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudHgudmVyaWZ5U2lnbmF0dXJlKCkpIHtcbiAgICAgIHJlc3VsdC5mcm9tID0gYnVmZmVyVG9IZXgodGhpcy50eC5nZXRTZW5kZXJBZGRyZXNzKCkudG9CdWZmZXIoKSk7XG4gICAgICBhc3NlcnQodGhpcy50eC5yICE9IHVuZGVmaW5lZCk7XG4gICAgICByZXN1bHQuciA9IGJ1ZmZlclRvSGV4KHRvVW5zaWduZWQodGhpcy50eC5yKSk7XG4gICAgICBhc3NlcnQodGhpcy50eC5zICE9IHVuZGVmaW5lZCk7XG4gICAgICByZXN1bHQucyA9IGJ1ZmZlclRvSGV4KHRvVW5zaWduZWQodGhpcy50eC5zKSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnR4LnYpIHtcbiAgICAgIHJlc3VsdC52ID0gYnVmZmVyVG9IZXgodG9VbnNpZ25lZCh0aGlzLnR4LnYpKTtcbiAgICB9XG4gICAgcmVzdWx0LmNoYWluSWQgPSBhZGRIZXhQcmVmaXgodGhpcy50eC5jb21tb24uY2hhaW5JZEJOKCkudG9TdHJpbmcoMTYpKTtcblxuICAgIGlmICh0aGlzLmFyZ3MgJiYgdGhpcy5hcmdzLmRlcGxveWVkQWRkcmVzcykge1xuICAgICAgcmVzdWx0LmRlcGxveWVkQWRkcmVzcyA9IHRoaXMuYXJncy5kZXBsb3llZEFkZHJlc3M7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudHggaW5zdGFuY2VvZiBMZWdhY3lUcmFuc2FjdGlvbikge1xuICAgICAgY29uc3QgZ2FzUHJpY2UgPSBuZXcgQmlnTnVtYmVyKGJ1ZmZlclRvSGV4KHRvVW5zaWduZWQodGhpcy50eC5nYXNQcmljZSkpLCAxNikudG9TdHJpbmcoMTApO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgIF90eXBlOiBFVEhUcmFuc2FjdGlvblR5cGUuTEVHQUNZLFxuICAgICAgICBnYXNQcmljZSxcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICh0aGlzLnR4IGluc3RhbmNlb2YgRmVlTWFya2V0RUlQMTU1OVRyYW5zYWN0aW9uKSB7XG4gICAgICBjb25zdCBtYXhGZWVQZXJHYXMgPSBuZXcgQmlnTnVtYmVyKGJ1ZmZlclRvSGV4KHRvVW5zaWduZWQodGhpcy50eC5tYXhGZWVQZXJHYXMpKSwgMTYpLnRvU3RyaW5nKDEwKTtcbiAgICAgIGNvbnN0IG1heFByaW9yaXR5RmVlUGVyR2FzID0gbmV3IEJpZ051bWJlcihidWZmZXJUb0hleCh0b1Vuc2lnbmVkKHRoaXMudHgubWF4UHJpb3JpdHlGZWVQZXJHYXMpKSwgMTYpLnRvU3RyaW5nKFxuICAgICAgICAxMFxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4ucmVzdWx0LFxuICAgICAgICBfdHlwZTogRVRIVHJhbnNhY3Rpb25UeXBlLkVJUDE1NTksXG4gICAgICAgIG1heEZlZVBlckdhcyxcbiAgICAgICAgbWF4UHJpb3JpdHlGZWVQZXJHYXMsXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIHR4IHR5cGU6ICR7QWNjZXNzTGlzdEVJUDI5MzBUcmFuc2FjdGlvbi5uYW1lfWApO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICB0b1NlcmlhbGl6ZWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYWRkSGV4UHJlZml4KHRoaXMudHguc2VyaWFsaXplKCkudG9TdHJpbmcoJ2hleCcpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0xlZ2FjeVR4KHR4OiBUeERhdGEpOiB0eCBpcyBMZWdhY3lUeERhdGEge1xuICByZXR1cm4gdHguX3R5cGUgPT09IEVUSFRyYW5zYWN0aW9uVHlwZS5MRUdBQ1k7XG59XG5cbmZ1bmN0aW9uIGlzRUlQMTU1OVR4bih0eDogVHhEYXRhKTogdHggaXMgRUlQMTU1OVR4RGF0YSB7XG4gIHJldHVybiB0eC5fdHlwZSA9PT0gRVRIVHJhbnNhY3Rpb25UeXBlLkVJUDE1NTk7XG59XG4iXX0=