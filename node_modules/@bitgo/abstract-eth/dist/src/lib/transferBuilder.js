"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferBuilder = void 0;
const ethUtil = __importStar(require("ethereumjs-util"));
const ethereumjs_abi_1 = __importDefault(require("ethereumjs-abi"));
const bn_js_1 = __importDefault(require("bn.js"));
const statics_1 = require("@bitgo/statics");
const sdk_core_1 = require("@bitgo/sdk-core");
const utils_1 = require("./utils");
const utils_2 = require("ethers/lib/utils");
/** ETH transfer builder */
class TransferBuilder {
    constructor(serializedData) {
        this._EMPTY_HEX_VALUE = '0x';
        if (serializedData) {
            this.decodeTransferData(serializedData);
        }
        else {
            // initialize with default values for non mandatory fields
            this._expirationTime = this.getExpirationTime();
            this._data = this._EMPTY_HEX_VALUE;
            this._signature = this._EMPTY_HEX_VALUE;
        }
    }
    /**
     * A method to set the native coin or ERC20 token to be transferred.
     * This ERC20 token may not be compatible with the network.
     *
     * @param {string} coin - the native coin or ERC20 token to be set
     * @returns {TransferBuilder} the transfer builder instance modified
     */
    coin(coin) {
        this._coin = statics_1.coins.get(coin);
        if (this._coin instanceof statics_1.ContractAddressDefinedToken) {
            this._tokenContractAddress = this._coin.contractAddress.toString();
        }
        return this;
    }
    walletVersion(version) {
        this._walletVersion = version;
        return this;
    }
    data(additionalData) {
        this._signature = this._EMPTY_HEX_VALUE;
        this._data = additionalData;
        return this;
    }
    amount(amount) {
        if (!(0, utils_1.isValidAmount)(amount)) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid amount');
        }
        this._signature = this._EMPTY_HEX_VALUE;
        this._amount = amount;
        return this;
    }
    to(address) {
        if ((0, utils_1.isValidEthAddress)(address)) {
            this._signature = this._EMPTY_HEX_VALUE;
            this._toAddress = address;
            return this;
        }
        throw new sdk_core_1.InvalidParameterValueError('Invalid address');
    }
    contractSequenceId(counter) {
        if (counter >= 0) {
            this._signature = this._EMPTY_HEX_VALUE;
            this._sequenceId = counter;
            return this;
        }
        throw new sdk_core_1.InvalidParameterValueError('Invalid contract sequence id');
    }
    key(signKey) {
        this._signKey = signKey;
        return this;
    }
    expirationTime(date) {
        if (date > 0) {
            this._signature = this._EMPTY_HEX_VALUE;
            this._expirationTime = date;
            return this;
        }
        throw new sdk_core_1.InvalidParameterValueError('Invalid expiration time');
    }
    tokenContractAddress(tokenContractAddress) {
        this._tokenContractAddress = tokenContractAddress;
        return this;
    }
    signAndBuild(chainId, coinUsesNonPackedEncodingForTxData) {
        this._chainId = chainId;
        // If the coin uses non-packed encoding for tx data, the operation hash is calculated differently
        // This new encoding type is applicable only for native coins and not tokens
        this._coinUsesNonPackedEncodingForTxData =
            coinUsesNonPackedEncodingForTxData && this._tokenContractAddress === undefined;
        if (this.hasMandatoryFields()) {
            if (this._tokenContractAddress !== undefined) {
                return (0, utils_1.sendMultiSigTokenData)(this._toAddress, this._amount, this._tokenContractAddress, this._expirationTime, this._sequenceId, this.getSignature());
            }
            else {
                return (0, utils_1.sendMultiSigData)(this._toAddress, this._amount, this._data, this._expirationTime, this._sequenceId, this.getSignature());
            }
        }
        throw new sdk_core_1.BuildTransactionError('Missing transfer mandatory fields. Amount, destination (to) address and sequenceID are mandatory');
    }
    hasMandatoryFields() {
        return this._amount !== undefined && this._toAddress !== undefined && this._sequenceId !== undefined;
    }
    /**
     * Obtains the proper operation hash to sign either a sendMultiSig data
     * or a sendMultiSigToken data
     *
     * @returns {string} the operation hash
     */
    getOperationHash() {
        const operationData = this.getOperationData();
        let operationHash;
        if (this._coinUsesNonPackedEncodingForTxData) {
            const types = operationData[0];
            const values = operationData[1].map((item) => item instanceof Buffer ? '0x' + item.toString('hex') : item);
            operationHash = (0, utils_2.keccak256)(utils_2.defaultAbiCoder.encode(types, values));
        }
        else {
            // If the coin uses packed encoding for tx data or it is a token, the operation hash is calculated using the Ethereum ABI
            operationHash = ethUtil.bufferToHex(ethereumjs_abi_1.default.soliditySHA3(...operationData));
        }
        return operationHash;
    }
    getOperationData() {
        let operationData;
        const prefix = this.getOperationHashPrefix();
        if (this._tokenContractAddress !== undefined) {
            operationData = [
                ['string', 'address', 'uint', 'address', 'uint', 'uint'],
                [
                    prefix,
                    new bn_js_1.default(ethUtil.stripHexPrefix(this._toAddress), 16),
                    this._amount,
                    new bn_js_1.default(ethUtil.stripHexPrefix(this._tokenContractAddress), 16),
                    this._expirationTime,
                    this._sequenceId,
                ],
            ];
        }
        else {
            const toAddress = this._coinUsesNonPackedEncodingForTxData
                ? this._toAddress
                : new bn_js_1.default(ethUtil.stripHexPrefix(this._toAddress), 16);
            operationData = [
                ['string', 'address', 'uint', 'bytes', 'uint', 'uint'],
                [
                    prefix,
                    toAddress,
                    this._amount,
                    Buffer.from(ethUtil.padToEven(ethUtil.stripHexPrefix(this._data)) || '', 'hex'),
                    this._expirationTime,
                    this._sequenceId,
                ],
            ];
        }
        return operationData;
    }
    getOperationHashPrefix() {
        if (this._walletVersion === 4) {
            return this._tokenContractAddress ? `${this._chainId}-ERC20` : `${this._chainId}`;
        }
        return this._tokenContractAddress ? this.getTokenOperationHashPrefix() : this.getNativeOperationHashPrefix();
    }
    /**
     * Get the prefix used in generating an operation hash for sending tokens
     *
     * @returns the string prefix
     */
    getTokenOperationHashPrefix() {
        var _a, _b, _c, _d;
        return (_d = (_c = (_b = (_a = this._coin) === null || _a === void 0 ? void 0 : _a.network) === null || _b === void 0 ? void 0 : _b.tokenOperationHashPrefix) !== null && _c !== void 0 ? _c : `${this._chainId}-ERC20`) !== null && _d !== void 0 ? _d : 'ERC20';
    }
    /**
     * Get the prefix used in generating an operation hash for sending native coins
     *
     * @returns the string prefix
     */
    getNativeOperationHashPrefix() {
        var _a, _b, _c, _d;
        return (_d = (_c = (_b = (_a = this._coin) === null || _a === void 0 ? void 0 : _a.network) === null || _b === void 0 ? void 0 : _b.nativeCoinOperationHashPrefix) !== null && _c !== void 0 ? _c : `${this._chainId}`) !== null && _d !== void 0 ? _d : 'ETHER';
    }
    /** Return an expiration time, in seconds, set to one hour from now
     *
     * @returns {number} expiration time
     */
    getExpirationTime() {
        const currentDate = new Date();
        currentDate.setHours(currentDate.getHours() + 1);
        return currentDate.getTime() / 1000;
    }
    /**
     * If a signing key is set for this builder, recalculates the signature
     *
     * @returns {string} the signature value
     */
    getSignature() {
        if (this._signKey) {
            this._signature = this.ethSignMsgHash();
        }
        return this._signature;
    }
    ethSignMsgHash() {
        const data = this.getOperationHash();
        const keyBuffer = Buffer.from(ethUtil.padToEven(this._signKey), 'hex');
        if (keyBuffer.length !== 32) {
            throw new Error('private key length is invalid');
        }
        const signatureInParts = ethUtil.ecsign(Buffer.from(ethUtil.padToEven(ethUtil.stripHexPrefix(data)), 'hex'), keyBuffer);
        // Assemble strings from r, s and v
        const r = ethUtil.setLengthLeft(signatureInParts.r, 32).toString('hex');
        const s = ethUtil.setLengthLeft(signatureInParts.s, 32).toString('hex');
        const v = ethUtil.stripHexPrefix(ethUtil.intToHex(signatureInParts.v));
        // Concatenate the r, s and v parts to make the signature string
        return ethUtil.addHexPrefix(r.concat(s, v));
    }
    decodeTransferData(data) {
        const transferData = (0, utils_1.decodeTransferData)(data);
        this._toAddress = transferData.to;
        this._amount = transferData.amount;
        this._expirationTime = transferData.expireTime;
        this._sequenceId = transferData.sequenceId;
        this._signature = transferData.signature;
        if (transferData.data) {
            this._data = transferData.data;
        }
        if (transferData.tokenContractAddress) {
            this._tokenContractAddress = transferData.tokenContractAddress;
        }
    }
}
exports.TransferBuilder = TransferBuilder;
//# sourceMappingURL=data:application/json;base64,