"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = void 0;
const statics_1 = require("@bitgo/statics");
const ethereumjs_abi_1 = __importDefault(require("ethereumjs-abi"));
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const ethUtil = __importStar(require("ethereumjs-util"));
const tx_1 = require("@ethereumjs/tx");
const sdk_core_1 = require("@bitgo/sdk-core");
const keyPair_1 = require("./keyPair");
const iface_1 = require("./iface");
const utils_1 = require("./utils");
const walletUtil_1 = require("./walletUtil");
const transaction_1 = require("./transaction");
const DEFAULT_M = 3;
/**
 * EthereumLike transaction builder.
 */
class TransactionBuilder extends sdk_core_1.BaseTransactionBuilder {
    /**
     * Public constructor.
     *
     * @param _coinConfig
     */
    constructor(_coinConfig) {
        super(_coinConfig);
        this._common = (0, utils_1.getCommon)(this._coinConfig.network);
        this._type = sdk_core_1.TransactionType.Send;
        this._counter = 0;
        this._value = '0';
        this._walletOwnerAddresses = [];
        this._forwarderVersion = 0;
        this._walletVersion = 0;
        this.transaction = new transaction_1.Transaction(this._coinConfig, this._common);
        this._walletSimpleByteCode = '';
    }
    /** @inheritdoc */
    async buildImplementation() {
        const transactionData = this.getTransactionData();
        if (this._txSignature) {
            Object.assign(transactionData, this._txSignature);
        }
        this.transaction.setTransactionType(this._type);
        transactionData.from = this._sourceKeyPair ? this._sourceKeyPair.getAddress() : undefined;
        this.transaction.setTransactionData(transactionData);
        // Build and sign a new transaction based on the latest changes
        if (this._sourceKeyPair && this._sourceKeyPair.getKeys().prv) {
            await this.transaction.sign(this._sourceKeyPair);
        }
        return this.transaction;
    }
    getTransactionData() {
        switch (this._type) {
            case sdk_core_1.TransactionType.WalletInitialization:
                return this.buildWalletInitializationTransaction(this._walletVersion);
            case sdk_core_1.TransactionType.RecoveryWalletDeployment:
                return this.buildBase(this._data);
            case sdk_core_1.TransactionType.Send:
            case sdk_core_1.TransactionType.SendERC721:
            case sdk_core_1.TransactionType.SendERC1155:
                return this.buildSendTransaction();
            case sdk_core_1.TransactionType.AddressInitialization:
                return this.buildAddressInitializationTransaction();
            case sdk_core_1.TransactionType.FlushTokens:
                return this.buildFlushTokensTransaction();
            case sdk_core_1.TransactionType.FlushCoins:
                return this.buildFlushCoinsTransaction();
            case sdk_core_1.TransactionType.SingleSigSend:
                return this.buildBase('0x');
            case sdk_core_1.TransactionType.ContractCall:
                return this.buildGenericContractCallTransaction();
            default:
                throw new sdk_core_1.BuildTransactionError('Unsupported transaction type');
        }
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        let tx;
        if (/^0x?[0-9a-f]{1,}$/.test(rawTransaction.toLowerCase())) {
            tx = transaction_1.Transaction.fromSerialized(this._coinConfig, this._common, rawTransaction);
            this.loadBuilderInput(tx.toJson());
        }
        else {
            const txData = JSON.parse(rawTransaction);
            tx = new transaction_1.Transaction(this._coinConfig, txData);
        }
        return tx;
    }
    /**
     * Load the builder data using the deserialized transaction
     *
     * @param {TxData} transactionJson the deserialized transaction json
     */
    loadBuilderInput(transactionJson) {
        const decodedType = (0, utils_1.classifyTransaction)(transactionJson.data);
        this.type(decodedType);
        this.counter(transactionJson.nonce);
        this.value(transactionJson.value);
        if (transactionJson._type === iface_1.ETHTransactionType.LEGACY) {
            this.fee({
                fee: transactionJson.gasPrice,
                gasPrice: transactionJson.gasPrice,
                gasLimit: transactionJson.gasLimit,
            });
        }
        else {
            this.fee({
                gasLimit: transactionJson.gasLimit,
                fee: transactionJson.maxFeePerGas,
                eip1559: {
                    maxFeePerGas: transactionJson.maxFeePerGas,
                    maxPriorityFeePerGas: transactionJson.maxPriorityFeePerGas,
                },
            });
        }
        if ((0, utils_1.hasSignature)(transactionJson)) {
            this._txSignature = { v: transactionJson.v, r: transactionJson.r, s: transactionJson.s };
        }
        this.setTransactionTypeFields(decodedType, transactionJson);
    }
    setTransactionTypeFields(decodedType, transactionJson) {
        switch (decodedType) {
            case sdk_core_1.TransactionType.WalletInitialization:
                const { owners, salt } = (0, utils_1.decodeWalletCreationData)(transactionJson.data);
                owners.forEach((element) => {
                    this.owner(element);
                });
                if (salt) {
                    this.salt(salt);
                    this.walletVersion(1);
                    this.setContract(transactionJson.to);
                }
                break;
            case sdk_core_1.TransactionType.RecoveryWalletDeployment:
                this.data(transactionJson.data);
                break;
            case sdk_core_1.TransactionType.FlushTokens:
                this.setContract(transactionJson.to);
                const { forwarderAddress, tokenAddress, forwarderVersion } = (0, utils_1.decodeFlushTokensData)(transactionJson.data, transactionJson.to);
                if (forwarderVersion === 4) {
                    this.forwarderVersion(4);
                }
                this.forwarderAddress(forwarderAddress);
                this.tokenAddress(tokenAddress);
                break;
            case sdk_core_1.TransactionType.FlushCoins:
                this.setContract(transactionJson.to);
                break;
            case sdk_core_1.TransactionType.Send:
            case sdk_core_1.TransactionType.SendERC1155:
            case sdk_core_1.TransactionType.SendERC721:
                this.setContract(transactionJson.to);
                this._transfer = this.transfer(transactionJson.data);
                break;
            case sdk_core_1.TransactionType.AddressInitialization:
                this.setContract(transactionJson.to);
                const { baseAddress, addressCreationSalt, feeAddress } = (0, utils_1.decodeForwarderCreationData)(transactionJson.data);
                if (baseAddress && addressCreationSalt) {
                    this.baseAddress(baseAddress);
                    this.salt(addressCreationSalt);
                    if (feeAddress) {
                        this.feeAddress(feeAddress);
                        this.forwarderVersion(4);
                    }
                    else {
                        this.forwarderVersion(1);
                    }
                    const forwarderImplementationAddress = this._coinConfig.network
                        .forwarderImplementationAddress;
                    if (forwarderImplementationAddress) {
                        this.initCode(forwarderImplementationAddress);
                    }
                }
                break;
            case sdk_core_1.TransactionType.SingleSigSend:
                this.setContract(transactionJson.to);
                break;
            case sdk_core_1.TransactionType.ContractCall:
                this.setContract(transactionJson.to);
                this.data(transactionJson.data);
                break;
            default:
                throw new sdk_core_1.BuildTransactionError('Unsupported transaction type');
            // TODO: Add other cases of deserialization
        }
    }
    /** @inheritdoc */
    signImplementation(key) {
        const signer = new keyPair_1.KeyPair({ prv: key.key });
        if (this._type === sdk_core_1.TransactionType.WalletInitialization && this._walletOwnerAddresses.length === 0) {
            throw new sdk_core_1.SigningError('Cannot sign an wallet initialization transaction without owners');
        }
        if (this._sourceKeyPair) {
            throw new sdk_core_1.SigningError('Cannot sign multiple times a non send-type transaction');
        }
        // Signing the transaction is an async operation, so save the source and leave the actual
        // signing for the build step
        this._sourceKeyPair = signer;
        return this.transaction;
    }
    /** @inheritdoc */
    validateAddress(address) {
        if (!(0, utils_1.isValidEthAddress)(address.address)) {
            throw new sdk_core_1.BuildTransactionError('Invalid address ' + address.address);
        }
    }
    /** @inheritdoc */
    validateKey(key) {
        if (!((0, sdk_core_1.isValidXprv)(key.key) || (0, sdk_core_1.isValidPrv)(key.key))) {
            throw new sdk_core_1.BuildTransactionError('Invalid key');
        }
    }
    /**
     * Validate the raw transaction is either a JSON or
     * a hex encoded transaction
     *
     * @param {any} rawTransaction The raw transaction to be validated
     */
    validateRawTransaction(rawTransaction) {
        if (!rawTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Raw transaction is empty');
        }
        if (typeof rawTransaction === 'string') {
            if (/^0x?[0-9a-f]{1,}$/.test(rawTransaction.toLowerCase())) {
                const txBytes = ethUtil.toBuffer(ethUtil.addHexPrefix(rawTransaction.toLowerCase()));
                if (!this.isEip1559Txn(txBytes) && !this.isRLPDecodable(txBytes)) {
                    throw new sdk_core_1.ParseTransactionError('There was error in decoding the hex string');
                }
            }
            else {
                try {
                    JSON.parse(rawTransaction);
                }
                catch (e) {
                    throw new sdk_core_1.ParseTransactionError('There was error in parsing the JSON string');
                }
            }
        }
        else {
            throw new sdk_core_1.InvalidTransactionError('Transaction is not a hex string or stringified json');
        }
    }
    isEip1559Txn(txn) {
        try {
            tx_1.FeeMarketEIP1559Transaction.fromSerializedTx(txn);
            return true;
        }
        catch (_) {
            return false;
        }
    }
    isRLPDecodable(bytes) {
        try {
            ethUtil.rlp.decode(bytes);
            return true;
        }
        catch (_) {
            return false;
        }
    }
    validateBaseTransactionFields() {
        if (this._fee === undefined || (!this._fee.fee && !this._fee.gasPrice && !this._fee.eip1559)) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing fee');
        }
        if (this._common === undefined) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: network common');
        }
        if (this._counter === undefined) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing address counter');
        }
    }
    /** @inheritdoc */
    validateTransaction(transaction) {
        this.validateBaseTransactionFields();
        switch (this._type) {
            case sdk_core_1.TransactionType.WalletInitialization:
                this.validateWalletInitializationFields();
                break;
            case sdk_core_1.TransactionType.RecoveryWalletDeployment:
                this.validateDataField();
                break;
            case sdk_core_1.TransactionType.Send:
            case sdk_core_1.TransactionType.SendERC721:
            case sdk_core_1.TransactionType.SendERC1155:
                this.validateContractAddress();
                break;
            case sdk_core_1.TransactionType.AddressInitialization:
                this.validateContractAddress();
                break;
            case sdk_core_1.TransactionType.FlushCoins:
                this.validateContractAddress();
                break;
            case sdk_core_1.TransactionType.FlushTokens:
                this.validateContractAddress();
                this.validateForwarderAddress();
                this.validateTokenAddress();
                break;
            case sdk_core_1.TransactionType.SingleSigSend:
                // for single sig sends, the contract address is actually the recipient
                this.validateContractAddress();
                break;
            case sdk_core_1.TransactionType.StakingLock:
            case sdk_core_1.TransactionType.StakingUnlock:
            case sdk_core_1.TransactionType.StakingVote:
            case sdk_core_1.TransactionType.StakingUnvote:
            case sdk_core_1.TransactionType.StakingActivate:
            case sdk_core_1.TransactionType.StakingWithdraw:
                break;
            case sdk_core_1.TransactionType.ContractCall:
                this.validateContractAddress();
                this.validateDataField();
                break;
            default:
                throw new sdk_core_1.BuildTransactionError('Unsupported transaction type');
        }
    }
    /**
     * Check wallet owner addresses for wallet initialization transactions are valid or throw.
     */
    validateWalletInitializationFields() {
        if (this._walletOwnerAddresses === undefined) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing wallet owners');
        }
        if (this._walletOwnerAddresses.length !== 3) {
            throw new sdk_core_1.BuildTransactionError(`Invalid transaction: wrong number of owners -- required: 3, found: ${this._walletOwnerAddresses.length}`);
        }
    }
    /**
     * Check if a token address for the tx was defined or throw.
     */
    validateTokenAddress() {
        if (this._tokenAddress === undefined) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing token address');
        }
    }
    /**
     * Check if a forwarder address for the tx was defined or throw.
     */
    validateForwarderAddress() {
        if (this._forwarderAddress === undefined) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing forwarder address');
        }
    }
    /**
     * Check if a contract address for the wallet was defined or throw.
     */
    validateContractAddress() {
        if (this._contractAddress === undefined) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing contract address');
        }
    }
    /**
     * Checks if a contract call data field was defined or throws otherwise
     */
    validateDataField() {
        if (!this._data) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing contract call data field');
        }
    }
    setContract(address) {
        if (address === undefined) {
            throw new sdk_core_1.BuildTransactionError('Undefined recipient address');
        }
        this.contract(address);
    }
    validateValue(value) {
        if (value.isLessThan(0)) {
            throw new sdk_core_1.BuildTransactionError('Value cannot be below less than zero');
        }
        // TODO: validate the amount is not bigger than the max amount in each Eth family coin
    }
    // region Common builder methods
    /**
     * The type of transaction being built.
     *
     * @param {TransactionType} type
     */
    type(type) {
        this._type = type;
    }
    /**
     * Set the transaction fees. Low fees may get a transaction rejected or never picked up by bakers.
     *
     * @param {Fee} fee Baker fees. May also include the maximum gas to pay
     */
    fee(fee) {
        this.validateValue(new bignumber_js_1.default(fee.fee));
        if (fee.gasLimit) {
            this.validateValue(new bignumber_js_1.default(fee.gasLimit));
        }
        if (fee.eip1559) {
            this.validateValue(new bignumber_js_1.default(fee.eip1559.maxFeePerGas));
            this.validateValue(new bignumber_js_1.default(fee.eip1559.maxPriorityFeePerGas));
        }
        if (fee.gasPrice) {
            this.validateValue(new bignumber_js_1.default(fee.gasPrice));
        }
        this._fee = fee;
    }
    /**
     * Set the transaction counter to prevent submitting repeated transactions.
     *
     * @param {number} counter The counter to use
     */
    counter(counter) {
        if (counter < 0) {
            throw new sdk_core_1.BuildTransactionError(`Invalid counter: ${counter}`);
        }
        this._counter = counter;
    }
    /**
     * The value to send along with this transaction. 0 by default
     *
     * @param {string} value The value to send along with this transaction
     */
    value(value) {
        this._value = value;
    }
    // set args that are required for all types of eth transactions
    buildBase(data) {
        var _a, _b;
        const baseParams = {
            gasLimit: this._fee.gasLimit,
            nonce: this._counter,
            data: data,
            chainId: this._common.chainIdBN().toString(),
            value: this._value,
            to: this._contractAddress,
        };
        if (this._fee.eip1559) {
            return {
                ...baseParams,
                _type: iface_1.ETHTransactionType.EIP1559,
                maxFeePerGas: this._fee.eip1559.maxFeePerGas,
                maxPriorityFeePerGas: this._fee.eip1559.maxPriorityFeePerGas,
            };
        }
        else {
            return {
                ...baseParams,
                _type: iface_1.ETHTransactionType.LEGACY,
                gasPrice: (_b = (_a = this._fee) === null || _a === void 0 ? void 0 : _a.gasPrice) !== null && _b !== void 0 ? _b : this._fee.fee,
                v: this.getFinalV(),
            };
        }
    }
    // endregion
    // region WalletInitialization builder methods
    /**
     * Set one of the owners of the multisig wallet.
     *
     * @param {string} address An Ethereum address
     */
    owner(address) {
        if (this._type !== sdk_core_1.TransactionType.WalletInitialization) {
            throw new sdk_core_1.BuildTransactionError('Multisig wallet owner can only be set for initialization transactions');
        }
        if (this._walletOwnerAddresses.length >= DEFAULT_M) {
            throw new sdk_core_1.BuildTransactionError('A maximum of ' + DEFAULT_M + ' owners can be set for a multisig wallet');
        }
        if (!(0, utils_1.isValidEthAddress)(address)) {
            throw new sdk_core_1.BuildTransactionError('Invalid address: ' + address);
        }
        if (this._walletOwnerAddresses.includes(address)) {
            throw new sdk_core_1.BuildTransactionError('Repeated owner address: ' + address);
        }
        this._walletOwnerAddresses.push(address);
    }
    /**
     * Build a transaction for a generic multisig contract.
     *
     * @returns {TxData} The Ethereum transaction data
     */
    buildWalletInitializationTransaction(walletVersion) {
        const walletInitData = walletVersion === walletUtil_1.defaultWalletVersion
            ? this.getContractData(this._walletOwnerAddresses)
            : (0, utils_1.getV1WalletInitializationData)(this._walletOwnerAddresses, this._salt);
        return this.buildBase(walletInitData);
    }
    /**
     * Returns the smart contract encoded data
     *
     * @param {string[]} addresses - the contract signers
     * @returns {string} - the smart contract encoded data
     */
    getContractData(addresses) {
        const params = [addresses];
        const resultEncodedParameters = ethereumjs_abi_1.default.rawEncode(walletUtil_1.walletSimpleConstructor, params)
            .toString('hex')
            .replace('0x', '');
        return this._walletSimpleByteCode + resultEncodedParameters;
    }
    // endregion
    // region Send builder methods
    contract(address) {
        if (!(0, utils_1.isValidEthAddress)(address)) {
            throw new sdk_core_1.BuildTransactionError('Invalid address: ' + address);
        }
        this._contractAddress = address;
    }
    /**
     * Returns the serialized sendMultiSig contract method data
     *
     * @returns {string} serialized sendMultiSig data
     */
    getSendData() {
        if (!this._transfer) {
            throw new sdk_core_1.BuildTransactionError('Missing transfer information');
        }
        const chainId = this._common.chainIdBN().toString();
        this._transfer.walletVersion(this._walletVersion);
        // This change is made to support new contracts with different encoding type
        return this._transfer.signAndBuild(chainId, this.coinUsesNonPackedEncodingForTxData());
    }
    /**
     * Decide if the coin uses non-packed encoding for tx data
     *
     * @returns {boolean} true if the coin uses non-packed encoding for tx data
     */
    coinUsesNonPackedEncodingForTxData() {
        return (this._walletVersion === 4 || this._coinConfig.features.includes(statics_1.CoinFeature.USES_NON_PACKED_ENCODING_FOR_TXDATA));
    }
    buildSendTransaction() {
        const sendData = this.getSendData();
        const tx = this.buildBase(sendData);
        tx.to = this._contractAddress;
        return tx;
    }
    // endregion
    // region AddressInitialization builder methods
    /**
     * Set the contract transaction nonce to calculate the forwarder address.
     *
     * @param {number} contractCounter The counter to use
     */
    contractCounter(contractCounter) {
        if (contractCounter < 0) {
            throw new sdk_core_1.BuildTransactionError(`Invalid contract counter: ${contractCounter}`);
        }
        this._contractCounter = contractCounter;
    }
    /**
     * Build a transaction to create a forwarder.
     *
     * @returns {TxData} The Ethereum transaction data
     */
    buildAddressInitializationTransaction() {
        const addressInitData = (0, utils_1.getAddressInitDataAllForwarderVersions)(this._forwarderVersion, this._baseAddress, this._salt, this._feeAddress);
        const tx = this.buildBase(addressInitData);
        tx.to = this._contractAddress;
        if (this._contractCounter) {
            tx.deployedAddress = (0, utils_1.calculateForwarderAddress)(this._contractAddress, this._contractCounter);
        }
        if (this._salt && this._initCode) {
            const saltBuffer = ethUtil.setLengthLeft(ethUtil.toBuffer(this._salt), 32);
            const { createForwarderParams, createForwarderTypes } = (0, utils_1.getCreateForwarderParamsAndTypes)(this._baseAddress, saltBuffer, this._feeAddress);
            // Hash the wallet base address and fee address if present with the given salt, so the address directly relies on the base address and fee address
            const calculationSalt = ethUtil.bufferToHex(ethereumjs_abi_1.default.soliditySHA3(createForwarderTypes, createForwarderParams));
            tx.deployedAddress = (0, utils_1.calculateForwarderV1Address)(this._contractAddress, calculationSalt, this._initCode);
        }
        return tx;
    }
    // endregion
    // region flush methods
    /**
     * Set the forwarder address to flush
     *
     * @param {string} address The address to flush
     */
    forwarderAddress(address) {
        if (!(0, utils_1.isValidEthAddress)(address)) {
            throw new sdk_core_1.BuildTransactionError('Invalid address: ' + address);
        }
        this._forwarderAddress = address;
    }
    /**
     * Set the address of the ERC20 token contract that we are flushing tokens for
     *
     * @param {string} address the contract address of the token to flush
     */
    tokenAddress(address) {
        if (!(0, utils_1.isValidEthAddress)(address)) {
            throw new sdk_core_1.BuildTransactionError('Invalid address: ' + address);
        }
        this._tokenAddress = address;
    }
    /**
     * Build a transaction to flush tokens from a forwarder.
     *
     * @returns {TxData} The Ethereum transaction data
     */
    buildFlushTokensTransaction() {
        if (this._forwarderVersion >= 4 && this._contractAddress !== this._forwarderAddress) {
            throw new sdk_core_1.BuildTransactionError('Invalid contract address: ' + this._contractAddress);
        }
        return this.buildBase((0, utils_1.flushTokensData)(this._forwarderAddress, this._tokenAddress, this._forwarderVersion));
    }
    /**
     * Build a transaction to flush tokens from a forwarder.
     *
     * @returns {TxData} The Ethereum transaction data
     */
    buildFlushCoinsTransaction() {
        return this.buildBase((0, utils_1.flushCoinsData)());
    }
    // endregion
    // region generic contract call
    data(encodedCall) {
        const supportedTransactionTypes = [sdk_core_1.TransactionType.ContractCall, sdk_core_1.TransactionType.RecoveryWalletDeployment];
        if (!supportedTransactionTypes.includes(this._type)) {
            throw new sdk_core_1.BuildTransactionError('data can only be set for contract call transaction types');
        }
        this._data = encodedCall;
    }
    buildGenericContractCallTransaction() {
        return this.buildBase(this._data);
    }
    // endregion
    /** @inheritdoc */
    get transaction() {
        return this._transaction;
    }
    /** @inheritdoc */
    set transaction(transaction) {
        this._transaction = transaction;
    }
    /**
     * Get the final v value. Final v is described in EIP-155.
     *
     * @protected for internal use when the enableFinalVField flag is true.
     */
    getFinalV() {
        return ethUtil.addHexPrefix(this._common.chainIdBN().muln(2).addn(35).toString(16));
    }
    /**
     * Set the forwarder version for address to be initialized
     *
     * @param {number} version forwarder version
     */
    forwarderVersion(version) {
        if (version < 0 || version > 4 || version === 3) {
            throw new sdk_core_1.BuildTransactionError(`Invalid forwarder version: ${version}`);
        }
        this._forwarderVersion = version;
    }
    /**
     * Set the salt to create the address using create2
     *
     * @param {string} salt The salt to create the address using create2, hex string
     */
    salt(salt) {
        this._salt = salt;
    }
    /**
     * Take the implementation address for the proxy contract, and get the binary initcode for the associated proxy
     *
     * @param {string} implementationAddress The address of the implementation contract
     */
    initCode(implementationAddress) {
        if (!(0, utils_1.isValidEthAddress)(implementationAddress)) {
            throw new sdk_core_1.BuildTransactionError('Invalid address: ' + implementationAddress);
        }
        this._initCode = (0, utils_1.getProxyInitcode)(implementationAddress);
    }
    /**
     * Set the wallet version for wallet to be initialized
     *
     * @param {number} version wallet version
     */
    walletVersion(version) {
        if (version < 0 || version > 4 || version === 3) {
            throw new sdk_core_1.BuildTransactionError(`Invalid wallet version: ${version}`);
        }
        this._walletVersion = version;
    }
    /**
     * Set the base address of the wallet
     *
     * @param {string} address The wallet contract address
     */
    baseAddress(address) {
        if (!(0, utils_1.isValidEthAddress)(address)) {
            throw new sdk_core_1.BuildTransactionError('Invalid address: ' + address);
        }
        this._baseAddress = address;
    }
    /**
     * Set the fee address of the wallet
     *
     * @param {string} address The fee address of the wallet
     */
    feeAddress(address) {
        if (!(0, utils_1.isValidEthAddress)(address)) {
            throw new sdk_core_1.BuildTransactionError('Invalid address: ' + address);
        }
        this._feeAddress = address;
    }
}
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,