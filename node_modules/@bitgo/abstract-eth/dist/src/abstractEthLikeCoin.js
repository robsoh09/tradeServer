"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractEthLikeCoin = void 0;
const utxo_lib_1 = require("@bitgo/utxo-lib");
const crypto_1 = require("crypto");
const sdk_core_1 = require("@bitgo/sdk-core");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const lib_1 = require("./lib");
class AbstractEthLikeCoin extends sdk_core_1.BaseCoin {
    constructor(bitgo, staticsCoin) {
        super(bitgo);
        if (!staticsCoin) {
            throw new Error('missing required constructor parameter staticsCoin');
        }
        this._staticsCoin = staticsCoin;
    }
    getChain() {
        return this._staticsCoin.name;
    }
    /**
     * Get the base chain that the coin exists on.
     */
    getBaseChain() {
        return this.getChain();
    }
    getFamily() {
        return this._staticsCoin.family;
    }
    getFullName() {
        return this._staticsCoin.fullName;
    }
    getBaseFactor() {
        return Math.pow(10, this._staticsCoin.decimalPlaces);
    }
    /** @inheritDoc */
    isEVM() {
        return true;
    }
    valuelessTransferAllowed() {
        return true;
    }
    /**
     * Check if the address is a valid eth address.
     */
    isValidAddress(address) {
        if (!address) {
            return false;
        }
        return (0, lib_1.isValidEthAddress)(address);
    }
    generateKeyPair(seed) {
        const extendedKey = utxo_lib_1.bip32.fromSeed(seed || (0, crypto_1.randomBytes)(32));
        const xpub = extendedKey.neutered().toBase58();
        return {
            pub: xpub,
            prv: extendedKey.toBase58(),
        };
    }
    async parseTransaction(params) {
        return {};
    }
    async isWalletAddress(params) {
        throw new sdk_core_1.MethodNotImplementedError();
    }
    async verifyTransaction(params) {
        return true;
    }
    async signTransaction(params) {
        const txBuilder = this.getTransactionBuilder();
        txBuilder.from(params.txPrebuild.txHex);
        txBuilder.transfer().key(new lib_1.KeyPair({ prv: params.prv }).getKeys().prv);
        const transaction = await txBuilder.build();
        const recipients = transaction.outputs.map((output) => ({ address: output.address, amount: output.value }));
        return {
            halfSigned: {
                txHex: transaction.toBroadcastFormat(),
                recipients: recipients,
                expiration: params.txPrebuild.expireTime,
            },
        };
    }
    isValidPub(pub) {
        let valid = true;
        try {
            new lib_1.KeyPair({ pub });
        }
        catch (e) {
            valid = false;
        }
        return valid;
    }
    /**
     * Builds a funds recovery transaction without BitGo.
     * We need to do three queries during this:
     * 1) Node query - how much money is in the account
     * 2) Build transaction - build our transaction for the amount
     * 3) Send signed build - send our signed build to a public node
     * @param params The options with which to recover
     */
    async recover(params) {
        throw new sdk_core_1.MethodNotImplementedError();
    }
    /**
     * Explain a transaction from txHex
     * @param params The options with which to explain the transaction
     */
    async explainTransaction(params) {
        const txHex = params.txHex || (params.halfSigned && params.halfSigned.txHex);
        if (!txHex || !params.feeInfo) {
            throw new Error('missing explain tx parameters');
        }
        const txBuilder = this.getTransactionBuilder();
        txBuilder.from(txHex);
        const tx = await txBuilder.build();
        const outputs = tx.outputs.map((output) => {
            return {
                address: output.address,
                amount: output.value,
            };
        });
        const displayOrder = ['id', 'outputAmount', 'changeAmount', 'outputs', 'changeOutputs', 'fee'];
        return {
            displayOrder,
            id: tx.id,
            outputs: outputs,
            outputAmount: outputs
                .reduce((accumulator, output) => accumulator.plus(output.amount), new bignumber_js_1.default('0'))
                .toFixed(0),
            changeOutputs: [],
            changeAmount: '0',
            fee: params.feeInfo,
        };
    }
}
exports.AbstractEthLikeCoin = AbstractEthLikeCoin;
//# sourceMappingURL=data:application/json;base64,