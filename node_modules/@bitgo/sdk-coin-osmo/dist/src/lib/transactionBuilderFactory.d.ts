import { ContractCallBuilder, CosmosTransaction, CosmosTransactionBuilder, CosmosTransferBuilder, StakingActivateBuilder, StakingDeactivateBuilder, StakingRedelegateBuilder, StakingWithdrawRewardsBuilder } from '@bitgo/abstract-cosmos';
import { BaseTransactionBuilderFactory } from '@bitgo/sdk-core';
import { BaseCoin as CoinConfig } from '@bitgo/statics';
export declare class TransactionBuilderFactory extends BaseTransactionBuilderFactory {
    constructor(_coinConfig: Readonly<CoinConfig>);
    /** @inheritdoc */
    from(raw: string): CosmosTransactionBuilder;
    /** @inheritdoc */
    getTransferBuilder(tx?: CosmosTransaction): CosmosTransferBuilder;
    /** @inheritdoc */
    getStakingActivateBuilder(tx?: CosmosTransaction): StakingActivateBuilder;
    /** @inheritdoc */
    getStakingDeactivateBuilder(tx?: CosmosTransaction): StakingDeactivateBuilder;
    /** @inheritdoc */
    getStakingWithdrawRewardsBuilder(tx?: CosmosTransaction): StakingWithdrawRewardsBuilder;
    getContractCallBuilder(tx?: CosmosTransaction): ContractCallBuilder;
    getStakingRedelegateBuilder(tx?: CosmosTransaction): StakingRedelegateBuilder;
    /** @inheritdoc */
    getWalletInitializationBuilder(): void;
    /**
     * Initialize the builder with the given transaction
     *
     * @param {CosmosTransaction | undefined} tx - the transaction used to initialize the builder
     * @param {CosmosTransactionBuilder} builder - the builder to be initialized
     * @returns {CosmosTransactionBuilder} the builder initialized
     */
    protected initializeBuilder<T extends CosmosTransactionBuilder>(tx: CosmosTransaction | undefined, builder: T): T;
}
//# sourceMappingURL=transactionBuilderFactory.d.ts.map