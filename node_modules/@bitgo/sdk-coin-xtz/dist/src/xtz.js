"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Xtz = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const statics_1 = require("@bitgo/statics");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const utxo_lib_1 = require("@bitgo/utxo-lib");
const lib_1 = require("./lib");
class Xtz extends sdk_core_1.BaseCoin {
    constructor(bitgo, staticsCoin) {
        super(bitgo);
        if (!staticsCoin) {
            throw new Error('missing required constructor parameter staticsCoin');
        }
        this._staticsCoin = staticsCoin;
    }
    static createInstance(bitgo, staticsCoin) {
        return new Xtz(bitgo, staticsCoin);
    }
    getChain() {
        return this._staticsCoin.name;
    }
    getFamily() {
        return this._staticsCoin.family;
    }
    getFullName() {
        return this._staticsCoin.fullName;
    }
    getBaseFactor() {
        return Math.pow(10, this._staticsCoin.decimalPlaces);
    }
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    valuelessTransferAllowed() {
        return true;
    }
    /**
     * Xtz supports transfers to consolidate balance from receive address to the wallet contract
     */
    allowsAccountConsolidations() {
        return true;
    }
    /**
     * Checks if this is a valid base58 or hex address
     * @param address
     */
    isValidAddress(address) {
        if (!address) {
            return false;
        }
        return lib_1.Utils.isValidAddress(address);
    }
    /**
     * Generate Tezos key pair - BitGo xpub format
     *
     * @param seed
     * @returns {Object} object with generated xpub, xprv
     */
    generateKeyPair(seed) {
        const keyPair = seed ? new lib_1.KeyPair({ seed }) : new lib_1.KeyPair();
        const keys = keyPair.getExtendedKeys();
        if (!keys.xprv) {
            throw new Error('Missing xprv in key generation.');
        }
        return {
            pub: keys.xpub,
            prv: keys.xprv,
        };
    }
    async parseTransaction(params) {
        return {};
    }
    async isWalletAddress(params) {
        throw new sdk_core_1.MethodNotImplementedError();
    }
    async verifyTransaction(params) {
        return true;
    }
    /**
     * Derive a user key using the chain path of the address
     * @param key
     * @param path
     * @returns {string} derived private key
     */
    deriveKeyWithPath({ key, path }) {
        const keychain = utxo_lib_1.bip32.fromBase58(key);
        const derivedKeyNode = keychain.derivePath(path);
        return derivedKeyNode.toBase58();
    }
    /**
     * Assemble keychain and half-sign prebuilt transaction
     *
     * @param params
     * @param params.txPrebuild {Object} prebuild object returned by platform
     * @param params.prv {String} user prv
     * @param params.wallet.addressVersion {String} this is the version of the Algorand multisig address generation format
     * @returns Bluebird<SignedTransaction>
     */
    async signTransaction(params) {
        const txBuilder = new lib_1.TransactionBuilder(statics_1.coins.get(this.getChain()));
        txBuilder.from(params.txPrebuild.txHex);
        txBuilder.source(params.txPrebuild.source);
        if (params.txPrebuild.dataToSign) {
            txBuilder.overrideDataToSign({ dataToSign: params.txPrebuild.dataToSign });
        }
        // The path /0/0/0/0 is used by the wallet base address
        // Derive the user key only if the transaction is sent from a receive address
        let key;
        const { chain, index } = params.txPrebuild.addressInfo;
        if (chain === 0 && index === 0) {
            key = params.prv;
        }
        else {
            const derivationPath = `0/0/${chain}/${index}`;
            key = this.deriveKeyWithPath({ key: params.prv, path: derivationPath });
        }
        txBuilder.sign({ key });
        const transaction = await txBuilder.build();
        if (!transaction) {
            throw new Error('Invalid messaged passed to signMessage');
        }
        const response = {
            txHex: transaction.toBroadcastFormat(),
        };
        return transaction.signature.length >= 2 ? response : { halfSigned: response };
    }
    /**
     * Sign message with private key
     *
     * @param key
     * @param message
     */
    async signMessage(key, message) {
        const keyPair = new lib_1.KeyPair({ prv: key.prv });
        const messageHex = message instanceof Buffer ? message.toString('hex') : Buffer.from(message).toString('hex');
        const signatureData = await lib_1.Utils.sign(keyPair, messageHex);
        return Buffer.from(signatureData.sig);
    }
    /**
     * Builds a funds recovery transaction without BitGo.
     * We need to do three queries during this:
     * 1) Node query - how much money is in the account
     * 2) Build transaction - build our transaction for the amount
     * 3) Send signed build - send our signed build to a public node
     * @param params
     */
    async recover(params) {
        throw new sdk_core_1.MethodNotImplementedError();
    }
    /**
     * Explain a Tezos transaction from txHex
     * @param params
     */
    async explainTransaction(params) {
        const txHex = params.txHex || (params.halfSigned && params.halfSigned.txHex);
        if (!txHex || !params.feeInfo) {
            throw new Error('missing explain tx parameters');
        }
        const txBuilder = new lib_1.TransactionBuilder(statics_1.coins.get(this.getChain()));
        // Newer coins can return BaseTransactionBuilderFactory instead of BaseTransactionBuilder
        if (!(txBuilder instanceof sdk_core_1.BaseTransactionBuilder)) {
            throw new Error('getBuilder() did not return an BaseTransactionBuilder object. Has it been updated?');
        }
        txBuilder.from(txHex);
        const tx = await txBuilder.build();
        const displayOrder = ['id', 'outputAmount', 'changeAmount', 'outputs', 'changeOutputs', 'fee'];
        return {
            displayOrder,
            id: tx.id,
            outputs: tx.outputs,
            outputAmount: tx.outputs
                .reduce((accumulator, output) => accumulator.plus(output.value), new bignumber_js_1.default('0'))
                .toFixed(0),
            changeOutputs: [],
            changeAmount: '0',
            fee: params.feeInfo,
        };
    }
    isValidPub(pub) {
        return lib_1.Utils.isValidPublicKey(pub);
    }
}
exports.Xtz = Xtz;
//# sourceMappingURL=data:application/json;base64,