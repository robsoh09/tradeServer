"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const local_forging_1 = require("@taquito/local-forging");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const multisigUtils_1 = require("./multisigUtils");
const Utils = __importStar(require("./utils"));
/**
 * Tezos transaction model.
 */
class Transaction extends sdk_core_1.BaseTransaction {
    /**
     * Public constructor.
     *
     * @param {Readonly<CoinConfig>} coinConfig
     */
    constructor(coinConfig) {
        super(coinConfig);
        this._owners = [];
    }
    /**
     * Initialize the transaction fields based on another serialized transaction.
     *
     * @param serializedTransaction Transaction in broadcast format.
     */
    async initFromSerializedTransaction(serializedTransaction) {
        this._encodedTransaction = serializedTransaction;
        try {
            const parsedTransaction = await local_forging_1.localForger.parse(serializedTransaction);
            await this.initFromParsedTransaction(parsedTransaction);
        }
        catch (e) {
            // If it throws, it is possible the serialized transaction is signed, which is not supported
            // by local-forging. Try extracting the last 64 bytes and parse it again.
            const unsignedSerializedTransaction = serializedTransaction.slice(0, -128);
            const signature = serializedTransaction.slice(-128);
            if (Utils.isValidSignature(signature)) {
                throw new sdk_core_1.ParseTransactionError('Invalid transaction');
            }
            // TODO: encode the signature and save it in _signature
            const parsedTransaction = await local_forging_1.localForger.parse(unsignedSerializedTransaction);
            const transactionId = await Utils.calculateTransactionId(serializedTransaction);
            await this.initFromParsedTransaction(parsedTransaction, transactionId);
        }
    }
    /**
     * Initialize the transaction fields based on another parsed transaction.
     *
     * @param {ParsedTransaction} parsedTransaction A Tezos transaction object
     * @param {string} transactionId The transaction id of the parsedTransaction if it is signed
     */
    async initFromParsedTransaction(parsedTransaction, transactionId) {
        if (!this._encodedTransaction) {
            this._encodedTransaction = await local_forging_1.localForger.forge(parsedTransaction);
        }
        if (transactionId) {
            // If the transaction id is passed, save it and clean up the entries since they will be
            // recalculated
            this._id = transactionId;
            this._inputs = [];
            this._outputs = [];
        }
        else {
            this._id = '';
        }
        this._parsedTransaction = parsedTransaction;
        let operationIndex = 0;
        for (const operation of parsedTransaction.contents) {
            if (this._source && this._source !== operation.source) {
                throw new sdk_core_1.InvalidTransactionError('Source must be the same for every operation but it changed from ' + this._source + ' to ' + operation.source);
            }
            else {
                this._source = operation.source;
            }
            switch (operation.kind) {
                case local_forging_1.CODEC.OP_ORIGINATION:
                    await this.recordOriginationOpFields(operation, operationIndex);
                    operationIndex++;
                    break;
                case local_forging_1.CODEC.OP_REVEAL:
                    this.recordRevealOpFields(operation);
                    break;
                case local_forging_1.CODEC.OP_TRANSACTION:
                    this.recordTransactionOpFields(operation);
                    break;
                default:
                    break;
            }
        }
    }
    /**
     * Record the most important fields from an origination operation.
     *
     * @param {Operation} operation An operation object from a Tezos transaction
     * @param {number} index The origination operation index in the transaction. Used to calculate the
     *      originated address
     */
    async recordOriginationOpFields(operation, index) {
        const originationData = (0, multisigUtils_1.getOriginationDataFromOperation)(operation);
        if (originationData.forwarderDestination) {
            this._type = sdk_core_1.TransactionType.AddressInitialization;
            this._forwarderDestination = originationData.forwarderDestination;
        }
        else {
            this._type = sdk_core_1.TransactionType.WalletInitialization;
            this._owners = (0, multisigUtils_1.getOwnersPublicKeys)(operation);
        }
        this._delegate = operation.delegate;
        this._outputs.push({
            // Kt addresses can only be calculated for signed transactions with an id
            address: this._id ? await Utils.calculateOriginatedAddress(this._id, index) : '',
            // Balance
            value: operation.balance,
        });
        this._inputs.push({
            address: operation.source,
            // Balance + fees + max gas + max storage are paid by the source account
            value: new bignumber_js_1.default(operation.balance).plus(operation.fee).toString(),
        });
    }
    /**
     * Record the most important fields from a reveal operation.
     *
     * @param {RevealOp} operation A reveal operation object from a Tezos transaction
     */
    recordRevealOpFields(operation) {
        this._type = sdk_core_1.TransactionType.AccountUpdate;
        this._publicKeyToReveal = operation.public_key;
        this._inputs.push({
            address: operation.source,
            // Balance + fees + max gas + max storage are paid by the source account
            value: operation.fee,
        });
    }
    /**
     * Record the most important fields for a Transaction operation.
     *
     * @param {TransactionOp} operation A transaction object from a Tezos operation
     */
    recordTransactionOpFields(operation) {
        if (operation.parameters) {
            this._type = sdk_core_1.TransactionType.Send;
        }
        else {
            this._type = sdk_core_1.TransactionType.SingleSigSend;
        }
        const transferData = (0, multisigUtils_1.getMultisigTransferDataFromOperation)(operation);
        // Fees are paid by the source account, along with the amount in the transaction
        this._inputs.push({
            address: operation.source,
            value: new bignumber_js_1.default(transferData.fee.fee).toFixed(0),
        });
        if (transferData.coin === 'mutez') {
            this._outputs.push({
                // Kt addresses can only be calculated for signed transactions with an id
                address: transferData.to,
                // Balance
                value: transferData.amount,
            });
            // The funds being transferred from the wallet
            this._inputs.push({
                address: transferData.from,
                // Balance + fees + max gas + max storage are paid by the source account
                value: transferData.amount,
            });
        }
    }
    /**
     * Sign the transaction with the provided key. It does not check if the signer is allowed to sign
     * it or not.
     *
     * @param {KeyPair} keyPair The key to sign the transaction with
     */
    async sign(keyPair) {
        // TODO: fail if the transaction is already signed
        // Check if there is a transaction to sign
        if (!this._parsedTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction');
        }
        // Get the transaction body to sign
        const encodedTransaction = await local_forging_1.localForger.forge(this._parsedTransaction);
        const signedTransaction = await Utils.sign(keyPair, encodedTransaction);
        this._encodedTransaction = signedTransaction.sbytes;
        // The transaction id can only be calculated for signed transactions
        this._id = await Utils.calculateTransactionId(this._encodedTransaction);
        await this.initFromParsedTransaction(this._parsedTransaction, this._id);
        this._signatures.push(signedTransaction.sig);
    }
    /**
     * Update the list of signatures for a multisig transaction operation.
     *
     * @param {IndexedSignature[]} signatures List of signatures and the index they should be put on
     *    in the multisig transfer
     * @param {number} index The transfer index to add the signatures to
     */
    async addTransferSignature(signatures, index) {
        if (!this._parsedTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction');
        }
        (0, multisigUtils_1.updateMultisigTransferSignatures)(this._parsedTransaction.contents[index], signatures);
        this._encodedTransaction = await local_forging_1.localForger.forge(this._parsedTransaction);
    }
    /** @inheritdoc */
    canSign(key) {
        // TODO: check the key belongs to the _source account in _parsedTransaction
        return true;
    }
    /** @inheritdoc */
    toJson() {
        if (!this._parsedTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction');
        }
        return this._parsedTransaction;
    }
    /** @inheritdoc */
    toBroadcastFormat() {
        if (!this._encodedTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Missing encoded transaction');
        }
        return this._encodedTransaction;
    }
    /**
     * Get the transaction source if it is available.
     *
     * @returns {string} Source of the transaction
     */
    get source() {
        if (!this._source) {
            throw new sdk_core_1.InvalidTransactionError('Transaction not initialized');
        }
        return this._source;
    }
    /**
     * Get the transaction delegation address if it is available.
     *
     * @returns {string} transaction delegation address
     */
    get delegate() {
        return this._delegate;
    }
    /**
     * Get the public key revealed by the transaction if it exists
     *
     * @returns {string} public key
     */
    get publicKeyToReveal() {
        return this._publicKeyToReveal;
    }
    /**
     * Get the destination of an address initialization transaction if it exists
     *
     * @returns {string} forwarder destination
     */
    get forwarderDestination() {
        return this._forwarderDestination;
    }
    get owners() {
        return this._owners;
    }
    /**
     * Get the signatures for the given multisig transfer,
     *
     * @param {number} transferIndex The transfer script index in the Tezos transaction
     * @returns {IndexedSignature[]} A list of signatures with their index inside the multisig transfer
     *      script
     */
    getTransferSignatures(transferIndex = 0) {
        if (!this._parsedTransaction) {
            return [];
        }
        return (0, multisigUtils_1.getMultisigTransferSignatures)(this._parsedTransaction.contents[transferIndex]);
    }
    /**
     * Get the list of index per tezos transaction type. This is useful to locate specific operations
     * within the transaction and verify or sign them.
     *
     * @returns {{[p: string]: number[]}} List of indexes where the key is the transaction kind
     */
    getIndexesByTransactionType() {
        if (!this._parsedTransaction) {
            return {};
        }
        const indexes = {};
        for (let i = 0; i < this._parsedTransaction.contents.length; i++) {
            const kind = this._parsedTransaction.contents[i].kind;
            indexes[kind] = indexes[kind] ? indexes[kind].concat([i]) : [i];
        }
        return indexes;
    }
}
exports.Transaction = Transaction;
//# sourceMappingURL=data:application/json;base64,