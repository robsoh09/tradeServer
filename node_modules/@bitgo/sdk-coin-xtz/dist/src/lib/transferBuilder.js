"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
/** Tezos transfer builder. */
// TODO: implement BaseTransferBuilder
class TransferBuilder {
    amount(amount) {
        this._amount = amount;
        return this;
    }
    coin(coin) {
        this._coin = coin;
        return this;
    }
    from(address) {
        this._fromAddress = address;
        return this;
    }
    to(address) {
        this._toAddress = address;
        return this;
    }
    fee(fee) {
        this._fee = fee;
        return this;
    }
    gasLimit(gasLimit) {
        this._gasLimit = gasLimit;
        return this;
    }
    storageLimit(storageLimit) {
        this._storageLimit = storageLimit;
        return this;
    }
    dataToSign(dataToSign) {
        this._dataToSign = dataToSign;
        return this;
    }
    counter(counter) {
        this._counter = counter;
        return this;
    }
    build() {
        if (!this._amount || !this._fromAddress || !this._toAddress || !this._fee) {
            throw new sdk_core_1.BuildTransactionError('Missing transfer mandatory fields. Amount, from address, destination (to) address and fee are mandatory');
        }
        return {
            amount: this._amount,
            coin: this._coin,
            from: this._fromAddress,
            to: this._toAddress,
            fee: {
                fee: this._fee,
                gasLimit: this._gasLimit,
                storageLimit: this._storageLimit,
            },
            dataToSign: this._dataToSign,
            counter: this._counter,
        };
    }
}
exports.TransferBuilder = TransferBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmZXJCdWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi90cmFuc2ZlckJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQXdEO0FBR3hELDhCQUE4QjtBQUM5QixzQ0FBc0M7QUFDdEMsTUFBYSxlQUFlO0lBVzFCLE1BQU0sQ0FBQyxNQUFjO1FBQ25CLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELElBQUksQ0FBQyxJQUFZO1FBQ2YsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbEIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsSUFBSSxDQUFDLE9BQWU7UUFDbEIsSUFBSSxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUM7UUFDNUIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsRUFBRSxDQUFDLE9BQWU7UUFDaEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUM7UUFDMUIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQVc7UUFDYixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxRQUFRLENBQUMsUUFBZ0I7UUFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7UUFDMUIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsWUFBWSxDQUFDLFlBQW9CO1FBQy9CLElBQUksQ0FBQyxhQUFhLEdBQUcsWUFBWSxDQUFDO1FBQ2xDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELFVBQVUsQ0FBQyxVQUFrQjtRQUMzQixJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztRQUM5QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxPQUFPLENBQUMsT0FBZTtRQUNyQixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztRQUN4QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDekUsTUFBTSxJQUFJLGdDQUFxQixDQUM3Qix5R0FBeUcsQ0FDMUcsQ0FBQztTQUNIO1FBQ0QsT0FBTztZQUNMLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTztZQUNwQixJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDaEIsSUFBSSxFQUFFLElBQUksQ0FBQyxZQUFZO1lBQ3ZCLEVBQUUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUNuQixHQUFHLEVBQUU7Z0JBQ0gsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJO2dCQUNkLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUztnQkFDeEIsWUFBWSxFQUFFLElBQUksQ0FBQyxhQUFhO2FBQ2pDO1lBQ0QsVUFBVSxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQzVCLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUTtTQUN2QixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBNUVELDBDQTRFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1aWxkVHJhbnNhY3Rpb25FcnJvciB9IGZyb20gJ0BiaXRnby9zZGstY29yZSc7XG5pbXBvcnQgeyBUcmFuc2ZlckRhdGEgfSBmcm9tICcuL2lmYWNlJztcblxuLyoqIFRlem9zIHRyYW5zZmVyIGJ1aWxkZXIuICovXG4vLyBUT0RPOiBpbXBsZW1lbnQgQmFzZVRyYW5zZmVyQnVpbGRlclxuZXhwb3J0IGNsYXNzIFRyYW5zZmVyQnVpbGRlciB7XG4gIHByaXZhdGUgX2Ftb3VudDogc3RyaW5nO1xuICBwcml2YXRlIF9jb2luOiBzdHJpbmc7XG4gIHByaXZhdGUgX3RvQWRkcmVzczogc3RyaW5nO1xuICBwcml2YXRlIF9mcm9tQWRkcmVzczogc3RyaW5nO1xuICBwcml2YXRlIF9mZWU6IHN0cmluZztcbiAgcHJpdmF0ZSBfZ2FzTGltaXQ6IHN0cmluZztcbiAgcHJpdmF0ZSBfc3RvcmFnZUxpbWl0OiBzdHJpbmc7XG4gIHByaXZhdGUgX2RhdGFUb1NpZ246IHN0cmluZztcbiAgcHJpdmF0ZSBfY291bnRlcjogc3RyaW5nO1xuXG4gIGFtb3VudChhbW91bnQ6IHN0cmluZyk6IFRyYW5zZmVyQnVpbGRlciB7XG4gICAgdGhpcy5fYW1vdW50ID0gYW1vdW50O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY29pbihjb2luOiBzdHJpbmcpOiBUcmFuc2ZlckJ1aWxkZXIge1xuICAgIHRoaXMuX2NvaW4gPSBjb2luO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnJvbShhZGRyZXNzOiBzdHJpbmcpOiBUcmFuc2ZlckJ1aWxkZXIge1xuICAgIHRoaXMuX2Zyb21BZGRyZXNzID0gYWRkcmVzcztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHRvKGFkZHJlc3M6IHN0cmluZyk6IFRyYW5zZmVyQnVpbGRlciB7XG4gICAgdGhpcy5fdG9BZGRyZXNzID0gYWRkcmVzcztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZlZShmZWU6IHN0cmluZyk6IFRyYW5zZmVyQnVpbGRlciB7XG4gICAgdGhpcy5fZmVlID0gZmVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2FzTGltaXQoZ2FzTGltaXQ6IHN0cmluZyk6IFRyYW5zZmVyQnVpbGRlciB7XG4gICAgdGhpcy5fZ2FzTGltaXQgPSBnYXNMaW1pdDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHN0b3JhZ2VMaW1pdChzdG9yYWdlTGltaXQ6IHN0cmluZyk6IFRyYW5zZmVyQnVpbGRlciB7XG4gICAgdGhpcy5fc3RvcmFnZUxpbWl0ID0gc3RvcmFnZUxpbWl0O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZGF0YVRvU2lnbihkYXRhVG9TaWduOiBzdHJpbmcpOiBUcmFuc2ZlckJ1aWxkZXIge1xuICAgIHRoaXMuX2RhdGFUb1NpZ24gPSBkYXRhVG9TaWduO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY291bnRlcihjb3VudGVyOiBzdHJpbmcpOiBUcmFuc2ZlckJ1aWxkZXIge1xuICAgIHRoaXMuX2NvdW50ZXIgPSBjb3VudGVyO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgYnVpbGQoKTogVHJhbnNmZXJEYXRhIHtcbiAgICBpZiAoIXRoaXMuX2Ftb3VudCB8fCAhdGhpcy5fZnJvbUFkZHJlc3MgfHwgIXRoaXMuX3RvQWRkcmVzcyB8fCAhdGhpcy5fZmVlKSB7XG4gICAgICB0aHJvdyBuZXcgQnVpbGRUcmFuc2FjdGlvbkVycm9yKFxuICAgICAgICAnTWlzc2luZyB0cmFuc2ZlciBtYW5kYXRvcnkgZmllbGRzLiBBbW91bnQsIGZyb20gYWRkcmVzcywgZGVzdGluYXRpb24gKHRvKSBhZGRyZXNzIGFuZCBmZWUgYXJlIG1hbmRhdG9yeSdcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBhbW91bnQ6IHRoaXMuX2Ftb3VudCxcbiAgICAgIGNvaW46IHRoaXMuX2NvaW4sXG4gICAgICBmcm9tOiB0aGlzLl9mcm9tQWRkcmVzcyxcbiAgICAgIHRvOiB0aGlzLl90b0FkZHJlc3MsXG4gICAgICBmZWU6IHtcbiAgICAgICAgZmVlOiB0aGlzLl9mZWUsXG4gICAgICAgIGdhc0xpbWl0OiB0aGlzLl9nYXNMaW1pdCxcbiAgICAgICAgc3RvcmFnZUxpbWl0OiB0aGlzLl9zdG9yYWdlTGltaXQsXG4gICAgICB9LFxuICAgICAgZGF0YVRvU2lnbjogdGhpcy5fZGF0YVRvU2lnbixcbiAgICAgIGNvdW50ZXI6IHRoaXMuX2NvdW50ZXIsXG4gICAgfTtcbiAgfVxufVxuIl19