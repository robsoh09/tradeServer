import { Trx } from './trx';
import { BitGoBase, CoinConstructor, NamedCoinConstructor, VerifyTransactionOptions } from '@bitgo/sdk-core';
import { TrxTokenConfig } from '@bitgo/statics';
import { Recipient } from '../../sdk-core/src/bitgo/baseCoin/iBaseCoin';
export { TrxTokenConfig };
export declare type TronTxInfo = {
    recipients?: Recipient[];
    from?: string;
    txid?: string;
};
export declare class TrxToken extends Trx {
    readonly tokenConfig: TrxTokenConfig;
    constructor(bitgo: BitGoBase, tokenConfig: TrxTokenConfig);
    static createTokenConstructor(config: TrxTokenConfig): CoinConstructor;
    static createTokenConstructors(): NamedCoinConstructor[];
    get type(): string;
    get name(): string;
    get coin(): string;
    get network(): string;
    get tokenContractAddress(): string;
    get decimalPlaces(): number;
    getChain(): string;
    getBaseChain(): string;
    getFullName(): string;
    getBaseFactor(): number;
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    valuelessTransferAllowed(): boolean;
    /**
     * Flag for sending data along with transactions
     * @returns {boolean} True if okay to send tx data (ETH), false otherwise
     */
    transactionDataAllowed(): boolean;
    verifyTransaction(params: VerifyTransactionOptions): Promise<boolean>;
}
//# sourceMappingURL=trxToken.d.ts.map