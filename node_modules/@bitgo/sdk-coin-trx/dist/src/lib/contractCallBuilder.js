"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractCallBuilder = exports.MAX_FEE = void 0;
const crypto_1 = require("crypto");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const tron_1 = require("../../resources/protobuf/tron");
const sdk_core_1 = require("@bitgo/sdk-core");
const transactionBuilder_1 = require("./transactionBuilder");
const transaction_1 = require("./transaction");
const utils_1 = require("./utils");
var ContractType = tron_1.protocol.Transaction.Contract.ContractType;
const DEFAULT_EXPIRATION = 3600000; // one hour
const MAX_DURATION = 31536000000; // one year
exports.MAX_FEE = 5000000000; // 5e9 = 5000 TRX acording https://developers.tron.network/docs/setting-a-fee-limit-on-deployexecution
class ContractCallBuilder extends transactionBuilder_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._signingKeys = [];
        this.transaction = new transaction_1.Transaction(_coinConfig);
    }
    /** @inheritdoc */
    async buildImplementation() {
        this.createTransaction();
        /** @inheritdoc */
        // This method must be extended on child classes
        if (this._signingKeys.length > 0) {
            this.applySignatures();
        }
        if (!this.transaction.id) {
            throw new sdk_core_1.BuildTransactionError('A valid transaction must have an id');
        }
        return Promise.resolve(this.transaction);
    }
    /** @inheritdoc */
    signImplementation(key) {
        if (this._signingKeys.some((signingKey) => signingKey.key === key.key)) {
            throw new sdk_core_1.SigningError('Duplicated key');
        }
        this._signingKeys.push(key);
        // We keep this return for compatibility but is not meant to be use
        return this.transaction;
    }
    /**
     * Initialize the transaction builder fields using the transaction data
     *
     * @param {any} rawTransaction the transaction data in a string or JSON format
     * @returns {ContractCallBuilder} the builder with the transaction data set
     */
    initBuilder(rawTransaction) {
        this.validateRawTransaction(rawTransaction);
        const tx = this.fromImplementation(rawTransaction);
        this.transaction = tx;
        this._signingKeys = [];
        const rawData = tx.toJson().raw_data;
        this._refBlockBytes = rawData.ref_block_bytes;
        this._refBlockHash = rawData.ref_block_hash;
        this._expiration = rawData.expiration;
        this._timestamp = rawData.timestamp;
        this._fee = { feeLimit: rawData.fee_limit.toString() };
        this.transaction.setTransactionType(sdk_core_1.TransactionType.ContractCall);
        const contractCall = rawData.contract[0];
        this.initContractCall(contractCall);
        return this;
    }
    /**
     * Initialize the contract call specific data
     *
     * @param {TriggerSmartContract} contractCall object with transfer data
     */
    initContractCall(contractCall) {
        const { data, owner_address, contract_address } = contractCall.parameter.value;
        if (data) {
            this.data(data);
        }
        if (contract_address) {
            this.to({ address: (0, utils_1.getBase58AddressFromHex)(contract_address) });
        }
        if (owner_address) {
            this.source({ address: (0, utils_1.getBase58AddressFromHex)(owner_address) });
        }
    }
    // region Contract Call fields
    /**
     * Set the source address,
     *
     * @param {Address} address source account
     * @returns {ContractCallBuilder} the builder with the new parameter set
     */
    source(address) {
        this.validateAddress(address);
        this._ownerAddress = (0, utils_1.getHexAddressFromBase58Address)(address.address);
        return this;
    }
    /**
     * Set the address of the contract to be called,
     *
     * @param {Address} contractAddress the contract address
     * @returns {ContractCallBuilder} the builder with the new parameter set
     */
    to(contractAddress) {
        this.validateAddress(contractAddress);
        this._toContractAddress = (0, utils_1.getHexAddressFromBase58Address)(contractAddress.address);
        return this;
    }
    /**
     * Set the data with the method call and parameters
     *
     * @param {string} data data encoded on hexa
     * @returns {ContractCallBuilder} the builder with the new parameter set
     */
    data(data) {
        if (!(0, utils_1.isValidHex)(data)) {
            throw new sdk_core_1.InvalidParameterValueError(data + ' is not a valid hex string.');
        }
        this._data = data;
        return this;
    }
    /**
     * Set the block values,
     *
     * @param {Block} block the object containing number and hash of the block
     * @returns {ContractCallBuilder} the builder with the new parameter set
     */
    block(block) {
        const blockBytes = Buffer.alloc(8);
        blockBytes.writeInt32BE(block.number, 4);
        this._refBlockBytes = blockBytes.slice(6, 8).toString('hex');
        this._refBlockHash = Buffer.from(block.hash, 'hex').slice(8, 16).toString('hex');
        return this;
    }
    /**
     * Set the expiration time for the transaction, set also timestamp if it was not set previously
     *
     * @param {number} time the expiration time in milliseconds
     * @returns {ContractCallBuilder} the builder with the new parameter set
     */
    expiration(time) {
        if (this.transaction.id) {
            throw new sdk_core_1.ExtendTransactionError('Expiration is already set, it can only be extended');
        }
        this._timestamp = this._timestamp || Date.now();
        this.validateExpirationTime(time);
        this._expiration = time;
        return this;
    }
    /** @inheritdoc */
    extendValidTo(extensionMs) {
        if (this.transaction.signature && this.transaction.signature.length > 0) {
            throw new sdk_core_1.ExtendTransactionError('Cannot extend a signed transaction');
        }
        if (extensionMs <= 0) {
            throw new Error('Value cannot be below zero');
        }
        if (extensionMs > MAX_DURATION) {
            throw new sdk_core_1.ExtendTransactionError('The expiration cannot be extended more than one year');
        }
        if (this._expiration) {
            this._expiration = this._expiration + extensionMs;
        }
        else {
            throw new Error('There is not expiration to extend');
        }
    }
    /**
     * Set the timestamp for the transaction
     *
     * @param {number} time the timestamp in milliseconds
     * @returns {ContractCallBuilder} the builder with the new parameter set
     */
    timestamp(time) {
        this._timestamp = time;
        return this;
    }
    /**
     * Set the fee limit for the transaction
     *
     * @param {Fee} fee the fee limit for the transaction
     * @returns {ContractCallBuilder} the builder with the new parameter set
     */
    fee(fee) {
        const feeLimit = new bignumber_js_1.default(fee.feeLimit);
        const tronNetwork = this._coinConfig.network;
        if (feeLimit.isNaN() || feeLimit.isLessThan(0) || feeLimit.isGreaterThan(tronNetwork.maxFeeLimit)) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid fee limit value');
        }
        this._fee = fee;
        return this;
    }
    // endregion
    createTransaction() {
        const rawDataHex = this.getRawDataHex();
        const rawData = (0, utils_1.decodeTransaction)(rawDataHex);
        const contract = rawData.contract[0];
        const contractParameter = contract.parameter;
        contractParameter.value.contract_address = this._toContractAddress.toLocaleLowerCase();
        contractParameter.value.owner_address = this._ownerAddress.toLocaleLowerCase();
        contractParameter.value.data = this._data.toLocaleLowerCase();
        contractParameter.type_url = 'type.googleapis.com/protocol.TriggerSmartContract';
        contract.type = 'TriggerSmartContract';
        const hexBuffer = Buffer.from(rawDataHex, 'hex');
        const id = (0, crypto_1.createHash)('sha256').update(hexBuffer).digest('hex');
        const txRecip = {
            raw_data: rawData,
            raw_data_hex: rawDataHex,
            txID: id,
            signature: this.transaction.signature,
        };
        this.transaction = new transaction_1.Transaction(this._coinConfig, txRecip);
    }
    getRawDataHex() {
        const rawContract = {
            ownerAddress: (0, utils_1.getByteArrayFromHexAddress)(this._ownerAddress),
            contractAddress: (0, utils_1.getByteArrayFromHexAddress)(this._toContractAddress),
            data: (0, utils_1.getByteArrayFromHexAddress)(this._data),
        };
        const contractCall = tron_1.protocol.TriggerSmartContract.fromObject(rawContract);
        const contractBytes = tron_1.protocol.TriggerSmartContract.encode(contractCall).finish();
        const txContract = {
            type: ContractType.TriggerSmartContract,
            parameter: {
                value: contractBytes,
                type_url: 'type.googleapis.com/protocol.TriggerSmartContract',
            },
        };
        const raw = {
            refBlockBytes: Buffer.from(this._refBlockBytes, 'hex'),
            refBlockHash: Buffer.from(this._refBlockHash, 'hex'),
            expiration: this._expiration || Date.now() + DEFAULT_EXPIRATION,
            timestamp: this._timestamp || Date.now(),
            contract: [txContract],
            feeLimit: parseInt(this._fee.feeLimit, 10),
        };
        const rawTx = tron_1.protocol.Transaction.raw.create(raw);
        return Buffer.from(tron_1.protocol.Transaction.raw.encode(rawTx).finish()).toString('hex');
    }
    applySignatures() {
        if (!this.transaction.inputs) {
            throw new sdk_core_1.SigningError('Transaction has no inputs');
        }
        this._signingKeys.forEach((key) => this.applySignature(key));
    }
    /** @inheritdoc */
    // Specifically, checks hex underlying transaction hashes to correct transaction ID.
    validateTransaction(transaction) {
        this.validateMandatoryFields();
    }
    /** @inheritdoc */
    validateMandatoryFields() {
        if (!this._data) {
            throw new sdk_core_1.BuildTransactionError('Missing parameter: data');
        }
        if (!this._ownerAddress) {
            throw new sdk_core_1.BuildTransactionError('Missing parameter: source');
        }
        if (!this._toContractAddress) {
            throw new sdk_core_1.BuildTransactionError('Missing parameter: contract address');
        }
        if (!this._refBlockBytes || !this._refBlockHash) {
            throw new sdk_core_1.BuildTransactionError('Missing block reference information');
        }
        if (!this._fee) {
            throw new sdk_core_1.BuildTransactionError('Missing fee');
        }
    }
    validateExpirationTime(value) {
        if (value < this._timestamp) {
            throw new sdk_core_1.InvalidParameterValueError('Expiration must be greater than timestamp');
        }
        if (value < Date.now()) {
            throw new sdk_core_1.InvalidParameterValueError('Expiration must be greater than current time');
        }
        if (value - this._timestamp > MAX_DURATION) {
            throw new sdk_core_1.InvalidParameterValueError('Expiration must not be greater than one year');
        }
    }
}
exports.ContractCallBuilder = ContractCallBuilder;
//# sourceMappingURL=data:application/json;base64,