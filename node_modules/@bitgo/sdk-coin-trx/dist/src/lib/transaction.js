"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
const crypto_1 = require("crypto");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const tron_1 = require("../../resources/protobuf/tron");
const sdk_core_1 = require("@bitgo/sdk-core");
const enum_1 = require("./enum");
const utils_1 = require("./utils");
/**
 * Tron transaction model.
 */
class Transaction extends sdk_core_1.BaseTransaction {
    /**
     * Public constructor.
     *
     * @param coinConfig
     * @param rawTransaction
     */
    constructor(coinConfig, rawTransaction) {
        super(coinConfig);
        if (rawTransaction) {
            if (!rawTransaction.txID) {
                throw new sdk_core_1.ParseTransactionError('Transaction has no id');
            }
            this._id = rawTransaction.txID;
            this._transaction = rawTransaction;
            this._decodedRawDataHex = (0, utils_1.decodeTransaction)(rawTransaction.raw_data_hex);
            // Destination depends on the contract type
            this.recordRawDataFields(this._decodedRawDataHex);
        }
    }
    /**
     * Parse the transaction raw data and record the most important fields.
     *
     * @param rawData Object from a tron transaction
     */
    recordRawDataFields(rawData) {
        // Contract-agnostic fields
        this._validFrom = rawData.timestamp;
        this._validTo = rawData.expiration;
        let output, input;
        // Contract-specific fields
        switch (rawData.contractType) {
            case enum_1.ContractType.Transfer:
                this._type = sdk_core_1.TransactionType.Send;
                const value = new bignumber_js_1.default(rawData.contract[0].parameter.value.amount).toFixed(0);
                output = {
                    address: rawData.contract[0].parameter.value.to_address,
                    value,
                };
                input = {
                    address: rawData.contract[0].parameter.value.owner_address,
                    value,
                };
                break;
            case enum_1.ContractType.AccountPermissionUpdate:
                this._type = sdk_core_1.TransactionType.WalletInitialization;
                output = {
                    address: rawData.contract.owner_address,
                    value: '0',
                };
                input = {
                    address: rawData.contract.owner_address,
                    value: '0',
                };
                break;
            case enum_1.ContractType.TriggerSmartContract:
                this._type = sdk_core_1.TransactionType.ContractCall;
                const contractCallValues = rawData.contract[0].parameter.value;
                const contractAddress = contractCallValues.contract_address;
                if (utils_1.tokenMainnetContractAddresses.includes(contractAddress) ||
                    utils_1.tokenTestnetContractAddresses.includes(contractAddress)) {
                    // this is then a token smart contract transaction and the data must be decoded
                    const types = ['address', 'uint256'];
                    const data = Buffer.from(contractCallValues.data, 'base64').toString('hex');
                    const decodedData = (0, utils_1.decodeDataParams)(types, data);
                    const recipient_address = (0, utils_1.getBase58AddressFromHex)(decodedData[0]);
                    const value = decodedData[1].toString();
                    output = {
                        address: recipient_address,
                        value,
                    };
                    input = {
                        address: contractCallValues.owner_address,
                        contractAddress,
                        data,
                        value,
                    };
                    break;
                }
                output = {
                    address: contractCallValues.owner_address,
                    value: '0',
                };
                input = {
                    address: contractCallValues.owner_address,
                    contractAddress,
                    data: contractCallValues.data,
                    value: '0',
                };
                break;
            default:
                throw new sdk_core_1.ParseTransactionError('Unsupported contract type');
        }
        this._inputs = [input];
        this._outputs = [output];
    }
    /**
     * Recalculate and update the transaction id. This should be done after changing any transaction
     * field since the the id is a hash of the transaction body.
     */
    updateId() {
        if (!this._transaction) {
            throw new sdk_core_1.ParseTransactionError('Empty transaction');
        }
        const hexBuffer = Buffer.from(this._transaction.raw_data_hex, 'hex');
        const newTxid = (0, crypto_1.createHash)('sha256').update(hexBuffer).digest('hex');
        this._transaction.txID = newTxid;
        this._id = newTxid;
    }
    /**
     * Extend the expiration date by the given number of milliseconds.
     *
     * @param extensionMs The number of milliseconds to extend the expiration by
     */
    extendExpiration(extensionMs) {
        if (extensionMs < 0) {
            throw new sdk_core_1.ExtendTransactionError('Invalid extension range. Must be positive a integer');
        }
        if (!this._transaction) {
            throw new sdk_core_1.ExtendTransactionError('Empty transaction');
        }
        if (this._transaction.signature && this._transaction.signature.length > 0) {
            throw new sdk_core_1.ExtendTransactionError('Cannot extend a signed transaction');
        }
        const rawDataHex = this._transaction.raw_data_hex;
        const bytes = Buffer.from(rawDataHex, 'hex');
        let raw;
        try {
            raw = tron_1.protocol.Transaction.raw.decode(bytes);
            const newExpiration = new bignumber_js_1.default(raw.expiration).plus(extensionMs).toNumber();
            raw.expiration = newExpiration;
            const newRawDataHex = Buffer.from(tron_1.protocol.Transaction.raw.encode(raw).finish()).toString('hex');
            // Set the internal variables to account for the new expiration date
            this._transaction.raw_data_hex = newRawDataHex;
            this._transaction.raw_data.expiration = newExpiration;
            this._decodedRawDataHex = (0, utils_1.decodeTransaction)(newRawDataHex);
            this.recordRawDataFields(this._decodedRawDataHex);
            this.updateId();
        }
        catch (e) {
            throw new sdk_core_1.ExtendTransactionError('There was an error decoding the initial raw_data_hex from the serialized tx.');
        }
    }
    /**
     * Get the signatures associated with this transaction.
     */
    get signature() {
        if (this._transaction && this._transaction.signature) {
            return this._transaction.signature;
        }
        return [];
    }
    /**
     * Get the time in milliseconds this transaction becomes valid and can be broadcasted to the
     * network.
     */
    get validFrom() {
        return this._validFrom;
    }
    /**
     * Get the expiration time in milliseconds.
     */
    get validTo() {
        return this._validTo;
    }
    /** @inheritdoc */
    get outputs() {
        return this._outputs;
    }
    /** @inheritdoc */
    get inputs() {
        return this._inputs;
    }
    /** @inheritdoc */
    canSign(key) {
        // Tron transaction do not contain the owners account address so it is not possible to check the
        // private key with any but the account main address. This is not enough to fail this check, so
        // it is a no-op.
        return true;
    }
    /**
     * Sets this transaction
     *
     * @param {Transaction} tx transaction
     */
    setTransactionReceipt(tx) {
        this._transaction = tx;
        this.updateId();
    }
    /**
     * Set the transaction type
     *
     * @param {TransactionType} transactionType The transaction type to be set
     */
    setTransactionType(transactionType) {
        this._type = transactionType;
    }
    /** @inheritdoc */
    toJson() {
        if (!this._transaction) {
            throw new sdk_core_1.ParseTransactionError('Empty transaction');
        }
        return this._transaction;
    }
    /** @inheritdoc */
    toBroadcastFormat() {
        return JSON.stringify(this.toJson());
    }
}
exports.Transaction = Transaction;
//# sourceMappingURL=data:application/json;base64,