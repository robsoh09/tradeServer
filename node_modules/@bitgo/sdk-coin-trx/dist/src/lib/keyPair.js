"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyPair = void 0;
const utxo_lib_1 = require("@bitgo/utxo-lib");
const crypto_1 = require("crypto");
const sdk_core_1 = require("@bitgo/sdk-core");
const Utils = __importStar(require("./utils"));
const DEFAULT_SEED_SIZE_BYTES = 16;
/**
 * Tron keys and address management.
 */
class KeyPair extends sdk_core_1.Secp256k1ExtendedKeyPair {
    /**
     * Public constructor. By default, creates a key pair with a random master seed.
     *
     * @param {KeyPairOptions} source Either a master seed, a private key (extended or raw), or a public key
     *     (extended, compressed, or uncompressed)
     */
    constructor(source) {
        super(source);
        if (!source) {
            const seed = (0, crypto_1.randomBytes)(DEFAULT_SEED_SIZE_BYTES);
            this.hdNode = utxo_lib_1.bip32.fromSeed(seed);
        }
        else if ((0, sdk_core_1.isSeed)(source)) {
            this.hdNode = utxo_lib_1.bip32.fromSeed(source.seed);
        }
        else if ((0, sdk_core_1.isPrivateKey)(source)) {
            super.recordKeysFromPrivateKey(source.prv);
        }
        else if ((0, sdk_core_1.isPublicKey)(source)) {
            super.recordKeysFromPublicKey(source.pub);
        }
        else {
            throw new Error('Invalid key pair options');
        }
        if (this.hdNode) {
            this.keyPair = sdk_core_1.Secp256k1ExtendedKeyPair.toKeyPair(this.hdNode);
        }
    }
    /**
     * Tron default keys format is raw private and uncompressed public key
     *
     * @returns {DefaultKeys} The keys in the protocol default key format
     */
    getKeys() {
        var _a;
        return {
            pub: this.getPublicKey({ compressed: false }).toString('hex').toUpperCase(),
            prv: (_a = this.getPrivateKey()) === null || _a === void 0 ? void 0 : _a.toString('hex').toUpperCase(),
        };
    }
    /**
     * Get a public address in the specified format, or in base58 if none is provided.
     *
     * @param {AddressFormat} format The address specified format
     * @returns {string} The public address in the specified format
     */
    getAddress(format) {
        const { pub } = this.getKeys();
        // These are custom Tron methods. They can probably be replaced with other methods or libraries
        const addressBytes = Utils.getRawAddressFromPubKey(Buffer.from(pub, 'hex'));
        if (!format || format === sdk_core_1.AddressFormat.base58) {
            // Default address are in hex
            return Utils.getBase58AddressFromByteArray(addressBytes);
        }
        else if (format === sdk_core_1.AddressFormat.hex) {
            return Utils.getHexAddressFromByteArray(addressBytes);
        }
        throw new Error('Unsupported address format');
    }
    /**
     * Generates a signature for an arbitrary string with the current private key using keccak256
     * hashing algorithm. Throws if there is no private key.
     *
     * @param {string} message to produce a signature for
     * @returns {Buffer} The signature as a buffer
     */
    signMessage(message) {
        const messageToSign = Buffer.from(message).toString('hex');
        const { prv } = this.getKeys();
        if (!prv) {
            throw new Error('Missing private key');
        }
        const signature = Utils.signString(messageToSign, prv, true).replace(/^0x/, '');
        return Buffer.from(signature, 'hex');
    }
    /**
     * Verifies a message signature using the current public key.
     *
     * @param {string} message signed
     * @param {Buffer} signature to verify
     * @returns {boolean} True if the message was signed with the current key pair
     */
    verifySignature(message, signature) {
        const messageToVerify = Buffer.from(message).toString('hex');
        const address = this.getAddress(sdk_core_1.AddressFormat.base58);
        return Utils.verifySignature(messageToVerify, address, signature.toString('hex'), true);
    }
}
exports.KeyPair = KeyPair;
//# sourceMappingURL=data:application/json;base64,