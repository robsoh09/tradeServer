"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendmanyBuilder = void 0;
const statics_1 = require("@bitgo/statics");
const bn_js_1 = __importDefault(require("bn.js"));
const transactions_1 = require("@stacks/transactions");
const sdk_core_1 = require("@bitgo/sdk-core");
const utils_1 = require("./utils");
const constants_1 = require("./constants");
const abstractContractBuilder_1 = require("./abstractContractBuilder");
class SendmanyBuilder extends abstractContractBuilder_1.AbstractContractBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._sendParams = [];
        this.sendParamsToFunctionArgs = (sendParams) => [
            (0, transactions_1.listCV)(sendParams.map((recipient) => (0, transactions_1.tupleCV)({
                to: (0, transactions_1.standardPrincipalCV)(recipient.address),
                ustx: (0, transactions_1.uintCV)(recipient.amount),
                memo: (0, transactions_1.bufferCVFromString)(recipient.memo || ''),
            }))),
        ];
    }
    static isValidContractCall(coinConfig, payload) {
        return (coinConfig.network.sendmanymemoContractAddress ===
            (0, transactions_1.addressToString)(payload.contractAddress) &&
            constants_1.CONTRACT_NAME_SENDMANY === payload.contractName.content &&
            constants_1.FUNCTION_NAME_SENDMANY === payload.functionName.content);
    }
    sendParamsToPostcondition(sendParams) {
        const sum = sendParams.reduce((current, next) => current.add(new bn_js_1.default(next.amount)), new bn_js_1.default(0));
        return [
            (0, transactions_1.makeStandardSTXPostCondition)((0, utils_1.getSTXAddressFromPubKeys)(this._fromPubKeys, this._coinConfig.network.type === statics_1.NetworkType.MAINNET
                ? transactions_1.AddressVersion.MainnetMultiSig
                : transactions_1.AddressVersion.TestnetMultiSig, this._fromPubKeys.length > 1 ? transactions_1.AddressHashMode.SerializeP2SH : transactions_1.AddressHashMode.SerializeP2PKH, this._numberSignatures).address, transactions_1.FungibleConditionCode.Equal, sum),
        ];
    }
    initBuilder(tx) {
        super.initBuilder(tx);
        this._sendParams = (0, utils_1.functionArgsToSendParams)(tx.stxTransaction.payload.functionArgs);
    }
    /**
     *  Set a transfer
     *
     * @param {SendParams} sendParams - the sender address
     * @returns {TransactionBuilder} This transaction builder
     */
    send({ address, amount, memo }) {
        if (!address || !(0, utils_1.isValidAddress)(address)) {
            throw new sdk_core_1.BuildTransactionError('Invalid or missing address, got: ' + address);
        }
        if (!amount || !(0, utils_1.isValidAmount)(amount)) {
            throw new sdk_core_1.BuildTransactionError('Invalid or missing amount, got: ' + amount);
        }
        if (!!memo && !(0, utils_1.isValidMemo)(memo)) {
            throw new sdk_core_1.BuildTransactionError('Invalid memo, got: ' + memo);
        }
        this._sendParams.push({ address, amount, memo });
        return this;
    }
    /** @inheritdoc */
    async buildImplementation() {
        this._contractAddress = this._coinConfig.network.sendmanymemoContractAddress;
        this._contractName = constants_1.CONTRACT_NAME_SENDMANY;
        this._functionName = constants_1.FUNCTION_NAME_SENDMANY;
        this._functionArgs = this.sendParamsToFunctionArgs(this._sendParams);
        this._postConditionMode = transactions_1.PostConditionMode.Deny;
        this._postConditions = this.sendParamsToPostcondition(this._sendParams);
        return await super.buildImplementation();
    }
}
exports.SendmanyBuilder = SendmanyBuilder;
//# sourceMappingURL=data:application/json;base64,