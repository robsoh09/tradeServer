"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractContractBuilder = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
const transactions_1 = require("@stacks/transactions");
const sdk_core_1 = require("@bitgo/sdk-core");
const transactionBuilder_1 = require("./transactionBuilder");
class AbstractContractBuilder extends transactionBuilder_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
    }
    initBuilder(tx) {
        const txData = tx.toJson();
        if (txData.payload === undefined) {
            throw new sdk_core_1.InvalidTransactionError('payload must not be undefined');
        }
        if (txData.payload.payloadType === transactions_1.PayloadType.ContractCall) {
            this._contractAddress = txData.payload.contractAddress;
            this._contractName = txData.payload.contractName;
            this._functionName = txData.payload.functionName;
            this._functionArgs = txData.payload.functionArgs;
            super.initBuilder(tx);
        }
        else {
            throw new sdk_core_1.BuildTransactionError('Transaction should be contract call');
        }
    }
    /** @inheritdoc */
    async buildImplementation() {
        this._options = this.buildContractCallOptions();
        this.transaction.setTransactionType(sdk_core_1.TransactionType.ContractCall);
        this.transaction.stxTransaction = await (0, transactions_1.makeUnsignedContractCall)(this._options);
        return await super.buildImplementation();
    }
    buildContractCallOptions() {
        const defaultOpts = {
            contractAddress: this._contractAddress,
            contractName: this._contractName,
            functionName: this._functionName,
            functionArgs: this._functionArgs,
            postConditionMode: this._postConditionMode,
            postConditions: this._postConditions,
            anchorMode: this._anchorMode,
            network: this._network,
            fee: new bn_js_1.default(this._fee.fee),
            nonce: new bn_js_1.default(this._nonce),
        };
        if (this._fromPubKeys.length === 1) {
            return {
                ...defaultOpts,
                publicKey: this._fromPubKeys[0],
            };
        }
        else if (this._fromPubKeys.length > 1) {
            return {
                ...defaultOpts,
                publicKeys: this._fromPubKeys,
                numSignatures: this._numberSignatures,
            };
        }
        else {
            throw new sdk_core_1.InvalidParameterValueError('supply at least 1 public key');
        }
    }
}
exports.AbstractContractBuilder = AbstractContractBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3RDb250cmFjdEJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2Fic3RyYWN0Q29udHJhY3RCdWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLGtEQUEyQjtBQUMzQix1REFTOEI7QUFDOUIsOENBS3lCO0FBRXpCLDZEQUEwRDtBQUUxRCxNQUFzQix1QkFBd0IsU0FBUSx1Q0FBa0I7SUFTdEUsWUFBWSxXQUFpQztRQUMzQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDckIsQ0FBQztJQUVELFdBQVcsQ0FBQyxFQUFlO1FBQ3pCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUMzQixJQUFJLE1BQU0sQ0FBQyxPQUFPLEtBQUssU0FBUyxFQUFFO1lBQ2hDLE1BQU0sSUFBSSxrQ0FBdUIsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1NBQ3BFO1FBQ0QsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsS0FBSywwQkFBVyxDQUFDLFlBQVksRUFBRTtZQUMzRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUM7WUFDdkQsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQztZQUNqRCxJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO1lBQ2pELElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7WUFDakQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wsTUFBTSxJQUFJLGdDQUFxQixDQUFDLHFDQUFxQyxDQUFDLENBQUM7U0FDeEU7SUFDSCxDQUFDO0lBRUQsa0JBQWtCO0lBQ1IsS0FBSyxDQUFDLG1CQUFtQjtRQUNqQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1FBQ2hELElBQUksQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsMEJBQWUsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsR0FBRyxNQUFNLElBQUEsdUNBQXdCLEVBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hGLE9BQU8sTUFBTSxLQUFLLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUMzQyxDQUFDO0lBRU8sd0JBQXdCO1FBQzlCLE1BQU0sV0FBVyxHQUF3QjtZQUN2QyxlQUFlLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjtZQUN0QyxZQUFZLEVBQUUsSUFBSSxDQUFDLGFBQWE7WUFDaEMsWUFBWSxFQUFFLElBQUksQ0FBQyxhQUFhO1lBQ2hDLFlBQVksRUFBRSxJQUFJLENBQUMsYUFBYTtZQUNoQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsa0JBQWtCO1lBQzFDLGNBQWMsRUFBRSxJQUFJLENBQUMsZUFBZTtZQUNwQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFdBQVc7WUFDNUIsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3RCLEdBQUcsRUFBRSxJQUFJLGVBQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztZQUM5QixLQUFLLEVBQUUsSUFBSSxlQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUMvQixDQUFDO1FBQ0YsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDbEMsT0FBTztnQkFDTCxHQUFHLFdBQVc7Z0JBQ2QsU0FBUyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO2FBQ2hDLENBQUM7U0FDSDthQUFNLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZDLE9BQU87Z0JBQ0wsR0FBRyxXQUFXO2dCQUNkLFVBQVUsRUFBRSxJQUFJLENBQUMsWUFBWTtnQkFDN0IsYUFBYSxFQUFFLElBQUksQ0FBQyxpQkFBaUI7YUFDdEMsQ0FBQztTQUNIO2FBQU07WUFDTCxNQUFNLElBQUkscUNBQTBCLENBQUMsOEJBQThCLENBQUMsQ0FBQztTQUN0RTtJQUNILENBQUM7Q0FDRjtBQWpFRCwwREFpRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlQ29pbiBhcyBDb2luQ29uZmlnIH0gZnJvbSAnQGJpdGdvL3N0YXRpY3MnO1xuaW1wb3J0IEJpZ051bSBmcm9tICdibi5qcyc7XG5pbXBvcnQge1xuICBDbGFyaXR5VmFsdWUsXG4gIENvbnRyYWN0Q2FsbE9wdGlvbnMsXG4gIG1ha2VVbnNpZ25lZENvbnRyYWN0Q2FsbCxcbiAgUGF5bG9hZFR5cGUsXG4gIFBvc3RDb25kaXRpb24sXG4gIFBvc3RDb25kaXRpb25Nb2RlLFxuICBVbnNpZ25lZENvbnRyYWN0Q2FsbE9wdGlvbnMsXG4gIFVuc2lnbmVkTXVsdGlTaWdDb250cmFjdENhbGxPcHRpb25zLFxufSBmcm9tICdAc3RhY2tzL3RyYW5zYWN0aW9ucyc7XG5pbXBvcnQge1xuICBCdWlsZFRyYW5zYWN0aW9uRXJyb3IsXG4gIEludmFsaWRQYXJhbWV0ZXJWYWx1ZUVycm9yLFxuICBJbnZhbGlkVHJhbnNhY3Rpb25FcnJvcixcbiAgVHJhbnNhY3Rpb25UeXBlLFxufSBmcm9tICdAYml0Z28vc2RrLWNvcmUnO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb24gfSBmcm9tICcuL3RyYW5zYWN0aW9uJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uQnVpbGRlciB9IGZyb20gJy4vdHJhbnNhY3Rpb25CdWlsZGVyJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0Q29udHJhY3RCdWlsZGVyIGV4dGVuZHMgVHJhbnNhY3Rpb25CdWlsZGVyIHtcbiAgcHJpdmF0ZSBfb3B0aW9uczogVW5zaWduZWRDb250cmFjdENhbGxPcHRpb25zIHwgVW5zaWduZWRNdWx0aVNpZ0NvbnRyYWN0Q2FsbE9wdGlvbnM7XG4gIHByb3RlY3RlZCBfY29udHJhY3RBZGRyZXNzOiBzdHJpbmc7XG4gIHByb3RlY3RlZCBfY29udHJhY3ROYW1lOiBzdHJpbmc7XG4gIHByb3RlY3RlZCBfZnVuY3Rpb25OYW1lOiBzdHJpbmc7XG4gIHByb3RlY3RlZCBfcG9zdENvbmRpdGlvbk1vZGU/OiBQb3N0Q29uZGl0aW9uTW9kZTtcbiAgcHJvdGVjdGVkIF9wb3N0Q29uZGl0aW9ucz86IFBvc3RDb25kaXRpb25bXTtcbiAgcHJvdGVjdGVkIF9mdW5jdGlvbkFyZ3M6IENsYXJpdHlWYWx1ZVtdO1xuXG4gIGNvbnN0cnVjdG9yKF9jb2luQ29uZmlnOiBSZWFkb25seTxDb2luQ29uZmlnPikge1xuICAgIHN1cGVyKF9jb2luQ29uZmlnKTtcbiAgfVxuXG4gIGluaXRCdWlsZGVyKHR4OiBUcmFuc2FjdGlvbik6IHZvaWQge1xuICAgIGNvbnN0IHR4RGF0YSA9IHR4LnRvSnNvbigpO1xuICAgIGlmICh0eERhdGEucGF5bG9hZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZFRyYW5zYWN0aW9uRXJyb3IoJ3BheWxvYWQgbXVzdCBub3QgYmUgdW5kZWZpbmVkJyk7XG4gICAgfVxuICAgIGlmICh0eERhdGEucGF5bG9hZC5wYXlsb2FkVHlwZSA9PT0gUGF5bG9hZFR5cGUuQ29udHJhY3RDYWxsKSB7XG4gICAgICB0aGlzLl9jb250cmFjdEFkZHJlc3MgPSB0eERhdGEucGF5bG9hZC5jb250cmFjdEFkZHJlc3M7XG4gICAgICB0aGlzLl9jb250cmFjdE5hbWUgPSB0eERhdGEucGF5bG9hZC5jb250cmFjdE5hbWU7XG4gICAgICB0aGlzLl9mdW5jdGlvbk5hbWUgPSB0eERhdGEucGF5bG9hZC5mdW5jdGlvbk5hbWU7XG4gICAgICB0aGlzLl9mdW5jdGlvbkFyZ3MgPSB0eERhdGEucGF5bG9hZC5mdW5jdGlvbkFyZ3M7XG4gICAgICBzdXBlci5pbml0QnVpbGRlcih0eCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBCdWlsZFRyYW5zYWN0aW9uRXJyb3IoJ1RyYW5zYWN0aW9uIHNob3VsZCBiZSBjb250cmFjdCBjYWxsJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIHByb3RlY3RlZCBhc3luYyBidWlsZEltcGxlbWVudGF0aW9uKCk6IFByb21pc2U8VHJhbnNhY3Rpb24+IHtcbiAgICB0aGlzLl9vcHRpb25zID0gdGhpcy5idWlsZENvbnRyYWN0Q2FsbE9wdGlvbnMoKTtcbiAgICB0aGlzLnRyYW5zYWN0aW9uLnNldFRyYW5zYWN0aW9uVHlwZShUcmFuc2FjdGlvblR5cGUuQ29udHJhY3RDYWxsKTtcbiAgICB0aGlzLnRyYW5zYWN0aW9uLnN0eFRyYW5zYWN0aW9uID0gYXdhaXQgbWFrZVVuc2lnbmVkQ29udHJhY3RDYWxsKHRoaXMuX29wdGlvbnMpO1xuICAgIHJldHVybiBhd2FpdCBzdXBlci5idWlsZEltcGxlbWVudGF0aW9uKCk7XG4gIH1cblxuICBwcml2YXRlIGJ1aWxkQ29udHJhY3RDYWxsT3B0aW9ucygpOiBVbnNpZ25lZENvbnRyYWN0Q2FsbE9wdGlvbnMgfCBVbnNpZ25lZE11bHRpU2lnQ29udHJhY3RDYWxsT3B0aW9ucyB7XG4gICAgY29uc3QgZGVmYXVsdE9wdHM6IENvbnRyYWN0Q2FsbE9wdGlvbnMgPSB7XG4gICAgICBjb250cmFjdEFkZHJlc3M6IHRoaXMuX2NvbnRyYWN0QWRkcmVzcyxcbiAgICAgIGNvbnRyYWN0TmFtZTogdGhpcy5fY29udHJhY3ROYW1lLFxuICAgICAgZnVuY3Rpb25OYW1lOiB0aGlzLl9mdW5jdGlvbk5hbWUsXG4gICAgICBmdW5jdGlvbkFyZ3M6IHRoaXMuX2Z1bmN0aW9uQXJncyxcbiAgICAgIHBvc3RDb25kaXRpb25Nb2RlOiB0aGlzLl9wb3N0Q29uZGl0aW9uTW9kZSxcbiAgICAgIHBvc3RDb25kaXRpb25zOiB0aGlzLl9wb3N0Q29uZGl0aW9ucyxcbiAgICAgIGFuY2hvck1vZGU6IHRoaXMuX2FuY2hvck1vZGUsXG4gICAgICBuZXR3b3JrOiB0aGlzLl9uZXR3b3JrLFxuICAgICAgZmVlOiBuZXcgQmlnTnVtKHRoaXMuX2ZlZS5mZWUpLFxuICAgICAgbm9uY2U6IG5ldyBCaWdOdW0odGhpcy5fbm9uY2UpLFxuICAgIH07XG4gICAgaWYgKHRoaXMuX2Zyb21QdWJLZXlzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uZGVmYXVsdE9wdHMsXG4gICAgICAgIHB1YmxpY0tleTogdGhpcy5fZnJvbVB1YktleXNbMF0sXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAodGhpcy5fZnJvbVB1YktleXMubGVuZ3RoID4gMSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uZGVmYXVsdE9wdHMsXG4gICAgICAgIHB1YmxpY0tleXM6IHRoaXMuX2Zyb21QdWJLZXlzLFxuICAgICAgICBudW1TaWduYXR1cmVzOiB0aGlzLl9udW1iZXJTaWduYXR1cmVzLFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRQYXJhbWV0ZXJWYWx1ZUVycm9yKCdzdXBwbHkgYXQgbGVhc3QgMSBwdWJsaWMga2V5Jyk7XG4gICAgfVxuICB9XG59XG4iXX0=