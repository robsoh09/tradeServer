/// <reference types="node" />
import { AbstractUtxoCoin } from '@bitgo/abstract-utxo';
import { IInscriptionBuilder, IWallet, PrebuildTransactionResult, PreparedInscriptionRevealData, SubmitTransactionResponse } from '@bitgo/sdk-core';
import * as utxolib from '@bitgo/utxo-lib';
export declare class InscriptionBuilder implements IInscriptionBuilder {
    private readonly wallet;
    private readonly coin;
    constructor(wallet: IWallet, coin: AbstractUtxoCoin);
    prepareReveal(inscriptionData: Buffer, contentType: string): Promise<PreparedInscriptionRevealData>;
    private prepareTransferWithExtraInputs;
    /**
     * Build a transaction to send an inscription
     * @param satPoint Satpoint you want to send
     * @param recipient Address you want to send to
     * @param feeRateSatKB Fee rate for transaction
     * @param signer first signer of the transaction
     * @param cosigner second signer of the transaction
     * @param inscriptionConstraints.minChangeOutput (optional) the minimum size of the change output
     * @param inscriptionConstraints.minInscriptionOutput (optional) the minimum number of sats of the output containing the inscription
     * @param inscriptionConstraints.maxInscriptionOutput (optional) the maximum number of sats of the output containing the inscription
     * @param changeAddressType Address type of the change address
     */
    prepareTransfer(satPoint: string, recipient: string, feeRateSatKB: number, { signer, cosigner, inscriptionConstraints, changeAddressType, }: {
        signer?: utxolib.bitgo.KeyName;
        cosigner?: utxolib.bitgo.KeyName;
        inscriptionConstraints?: {
            minChangeOutput?: bigint;
            minInscriptionOutput?: bigint;
            maxInscriptionOutput?: bigint;
        };
        changeAddressType?: utxolib.bitgo.outputScripts.ScriptType2Of3;
    }): Promise<PrebuildTransactionResult>;
    /**
     *
     * @param walletPassphrase
     * @param tapLeafScript
     * @param commitAddress
     * @param unsignedCommitTx
     * @param commitTransactionUnspents
     * @param recipientAddress
     * @param inscriptionData
     */
    signAndSendReveal(walletPassphrase: string, tapLeafScript: utxolib.bitgo.TapLeafScript, commitAddress: string, unsignedCommitTx: Buffer, commitTransactionUnspents: utxolib.bitgo.WalletUnspent[], recipientAddress: string, inscriptionData: Buffer): Promise<SubmitTransactionResponse>;
    /**
     * Sign and send a transaction that transfers an inscription
     * @param walletPassphrase passphrase to unlock your keys
     * @param txPrebuild this is the output of `inscription.prepareTransfer`
     */
    signAndSendTransfer(walletPassphrase: string, txPrebuild: PrebuildTransactionResult): Promise<SubmitTransactionResponse>;
}
//# sourceMappingURL=inscriptionBuilder.d.ts.map