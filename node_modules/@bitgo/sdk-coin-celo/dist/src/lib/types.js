"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CeloTransactionData = exports.CeloTransaction = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const wallet_local_1 = require("@celo/wallet-local");
const ethereumjs_util_1 = require("ethereumjs-util");
const sdk_coin_eth_1 = require("@bitgo/sdk-coin-eth");
class CeloTransaction {
    constructor(tx) {
        this._feeCurrency = (0, ethereumjs_util_1.toBuffer)('0x');
        this._gatewayFeeRecipient = (0, ethereumjs_util_1.toBuffer)('0x');
        this._gatewayFee = (0, ethereumjs_util_1.toBuffer)('0x');
        this.to = (0, ethereumjs_util_1.toBuffer)([]);
        this.v = (0, ethereumjs_util_1.toBuffer)([]);
        this.r = (0, ethereumjs_util_1.toBuffer)([]);
        this.s = (0, ethereumjs_util_1.toBuffer)([]);
        this.nonce = (0, ethereumjs_util_1.unpadBuffer)((0, ethereumjs_util_1.toBuffer)(tx.nonce));
        this.gasLimit = (0, ethereumjs_util_1.toBuffer)(this.sanitizeHexString(tx.gasLimit));
        this.gasPrice = (0, ethereumjs_util_1.toBuffer)(this.sanitizeHexString(tx.gasPrice));
        this.data = (0, ethereumjs_util_1.toBuffer)(this.sanitizeHexString(tx.data));
        this.value = (0, ethereumjs_util_1.toBuffer)(this.sanitizeHexString(tx.value));
        if (tx.to) {
            this.to = (0, ethereumjs_util_1.toBuffer)(tx.to);
        }
        if (tx.v) {
            this.v = (0, ethereumjs_util_1.toBuffer)(tx.v);
        }
        if (tx.r) {
            this.r = (0, ethereumjs_util_1.toBuffer)(tx.r);
        }
        if (tx.s) {
            this.s = (0, ethereumjs_util_1.toBuffer)(tx.s);
        }
        if (tx.from) {
            this._from = (0, ethereumjs_util_1.toBuffer)(tx.from);
        }
        this.initRaw();
    }
    // TODO: validate if this needs to be moved to Utils class
    /**
     * Clean hex formatted values ensuring they have an even length
     *
     * @param numberValue Hex formatted number value. Example '0x01'
     * @returns sanitized value
     */
    sanitizeHexString(numberValue) {
        if (numberValue === '0x0' || numberValue == '') {
            return '0x';
        }
        else if (numberValue.length % 2 === 0) {
            return numberValue;
        }
        return '0x0' + numberValue.slice(2);
    }
    initRaw() {
        this.raw = [
            this.nonce,
            this.gasPrice,
            this.gasLimit,
            this._feeCurrency,
            this._gatewayFeeRecipient,
            this._gatewayFee,
            this.to,
            this.value,
            this.data,
            this.v,
            this.r,
            this.s,
        ];
    }
    hash(includeSignature) {
        let items;
        if (includeSignature) {
            items = this.raw;
        }
        else {
            items = this.raw
                .slice(0, 9)
                .concat([(0, ethereumjs_util_1.toBuffer)(this.getChainId()), (0, ethereumjs_util_1.unpadBuffer)((0, ethereumjs_util_1.toBuffer)(0)), (0, ethereumjs_util_1.unpadBuffer)((0, ethereumjs_util_1.toBuffer)(0))]);
        }
        return (0, ethereumjs_util_1.rlphash)(items);
    }
    getSenderAddress() {
        if (this._from) {
            return this._from;
        }
        const pubKey = this.getSenderPublicKey();
        this._from = (0, ethereumjs_util_1.publicToAddress)(pubKey);
        return this._from;
    }
    getSenderPublicKey() {
        if (this.verifySignature()) {
            // If the signature was verified successfully the _senderPubKey field is defined
            return this._senderPubKey;
        }
        throw new Error('Invalid Signature');
    }
    serialize() {
        return ethereumjs_util_1.rlp.encode(this.raw);
    }
    sign(privateKey) {
        this._signatures = [this.v, this.r, this.s, privateKey];
    }
    verifySignature() {
        const msgHash = this.hash(false);
        try {
            const chainId = this.getChainId();
            const v = (0, ethereumjs_util_1.bufferToInt)(this.v) - (2 * chainId + 35);
            this._senderPubKey = (0, ethereumjs_util_1.ecrecover)(msgHash, v + 27, this.r, this.s);
        }
        catch (e) {
            return false;
        }
        return !!this._senderPubKey;
    }
    getChainId() {
        let chainId = (0, ethereumjs_util_1.bufferToInt)(this.v);
        if (this.r.length && this.s.length) {
            chainId = (chainId - 35) >> 1;
        }
        return chainId;
    }
}
exports.CeloTransaction = CeloTransaction;
class CeloTransactionData {
    constructor(tx, deployedAddress) {
        this.tx = tx;
        this.deployedAddress = deployedAddress;
    }
    static fromJson(tx) {
        const chainId = (0, ethereumjs_util_1.addHexPrefix)(new bignumber_js_1.default(Number(tx.chainId)).toString(16));
        return new CeloTransactionData(new CeloTransaction({
            _type: sdk_coin_eth_1.ETHTransactionType.LEGACY,
            nonce: tx.nonce,
            to: tx.to,
            gasPrice: (0, ethereumjs_util_1.addHexPrefix)(new bignumber_js_1.default(tx.gasPrice).toString(16)),
            gasLimit: (0, ethereumjs_util_1.addHexPrefix)(new bignumber_js_1.default(tx.gasLimit).toString(16)),
            value: (0, ethereumjs_util_1.addHexPrefix)(new bignumber_js_1.default(tx.value).toString(16)),
            data: tx.data === '0x' ? '' : tx.data,
            from: tx.from,
            s: tx.s,
            r: tx.r,
            v: tx.v || chainId,
        }), tx.deployedAddress);
    }
    async sign(keyPair) {
        const privateKey = (0, ethereumjs_util_1.addHexPrefix)(keyPair.getKeys().prv);
        const data = CeloTransactionData.txJsonToCeloTx(this.toJson(), keyPair.getAddress());
        const celoLocalWallet = new wallet_local_1.LocalWallet();
        celoLocalWallet.addAccount(privateKey);
        const rawTransaction = await celoLocalWallet.signTransaction(data);
        const nonceBigNumber = new bignumber_js_1.default(rawTransaction.tx.nonce);
        rawTransaction.tx.nonce = (0, ethereumjs_util_1.addHexPrefix)(nonceBigNumber.toString(16));
        rawTransaction.raw = data.data === undefined ? '' : data.data;
        rawTransaction.tx.gas = rawTransaction.tx.gas;
        this.tx = new CeloTransaction(CeloTransactionData.encodedTxToJson(rawTransaction));
        this.tx.sign((0, ethereumjs_util_1.toBuffer)(privateKey));
    }
    /** @inheritdoc */
    toJson() {
        const result = {
            _type: sdk_coin_eth_1.ETHTransactionType.LEGACY,
            nonce: (0, ethereumjs_util_1.bufferToInt)(this.tx.nonce),
            gasPrice: new bignumber_js_1.default((0, ethereumjs_util_1.bufferToHex)(this.tx.gasPrice), 16).toString(10),
            gasLimit: new bignumber_js_1.default((0, ethereumjs_util_1.bufferToHex)(this.tx.gasLimit), 16).toString(10),
            value: this.tx.value.length === 0 ? '0' : new bignumber_js_1.default((0, ethereumjs_util_1.bufferToHex)(this.tx.value), 16).toString(10),
            data: (0, ethereumjs_util_1.bufferToHex)(this.tx.data),
            id: (0, ethereumjs_util_1.addHexPrefix)((0, ethereumjs_util_1.bufferToHex)(this.tx.hash(true))),
        };
        if (this.tx.to && this.tx.to.length) {
            result.to = (0, ethereumjs_util_1.bufferToHex)(this.tx.to);
        }
        if (this.tx.verifySignature()) {
            result.from = (0, ethereumjs_util_1.bufferToHex)(this.tx.getSenderAddress());
        }
        const chainId = this.tx.getChainId();
        if (chainId) {
            result.chainId = chainId.toString();
        }
        if (this.deployedAddress) {
            result.deployedAddress = this.deployedAddress;
        }
        this.setSignatureFields(result);
        return result;
    }
    setSignatureFields(result) {
        if (this.tx.v && this.tx.v.length) {
            result.v = (0, ethereumjs_util_1.bufferToHex)(this.tx.v);
        }
        if (this.tx.r && this.tx.r.length) {
            result.r = (0, ethereumjs_util_1.bufferToHex)(this.tx.r);
        }
        if (this.tx.s && this.tx.s.length) {
            result.s = (0, ethereumjs_util_1.bufferToHex)(this.tx.s);
        }
    }
    /** @inheritdoc */
    toSerialized() {
        return (0, ethereumjs_util_1.addHexPrefix)(this.tx.serialize().toString('hex'));
    }
    static txJsonToCeloTx(txJson, signer) {
        // the celo library requires you to specify the signer address with the from field
        return Object.assign({}, txJson, {
            chainId: txJson.chainId === undefined ? 0 : parseInt(txJson.chainId, 10),
            gas: txJson.gasLimit,
            from: signer,
        });
    }
    static encodedTxToJson(encodedTx) {
        return {
            ...encodedTx.tx,
            _type: sdk_coin_eth_1.ETHTransactionType.LEGACY,
            nonce: parseInt(encodedTx.tx.nonce, 16),
            gasLimit: encodedTx.tx.gas,
            data: encodedTx.raw,
        };
    }
}
exports.CeloTransactionData = CeloTransactionData;
//# sourceMappingURL=data:application/json;base64,