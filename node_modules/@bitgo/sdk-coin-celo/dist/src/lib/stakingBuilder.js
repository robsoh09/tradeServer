"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StakingBuilder = void 0;
const ethUtil = __importStar(require("ethereumjs-util"));
const sdk_coin_eth_1 = require("@bitgo/sdk-coin-eth");
const sdk_core_1 = require("@bitgo/sdk-core");
const stakingCall_1 = require("./stakingCall");
class StakingBuilder {
    constructor(coinConfig, serializedData) {
        this.DEFAULT_ADDRESS = '0x0000000000000000000000000000000000000000';
        this._lesser = this.DEFAULT_ADDRESS;
        this._greater = this.DEFAULT_ADDRESS;
        this._coinConfig = coinConfig;
        if (serializedData) {
            this.decodeStakingData(serializedData);
        }
    }
    // region Staking properties
    type(type) {
        this._type = type;
        return this;
    }
    amount(value) {
        if (!(0, sdk_coin_eth_1.isValidAmount)(value)) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid value for stake transaction');
        }
        this._amount = value;
        return this;
    }
    group(validatorGroup) {
        if (!(0, sdk_coin_eth_1.isValidEthAddress)(validatorGroup)) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid validator group address');
        }
        this._validatorGroup = validatorGroup;
        return this;
    }
    lesser(lesser) {
        if (!(0, sdk_coin_eth_1.isValidEthAddress)(lesser)) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid address for lesser');
        }
        this._lesser = lesser;
        return this;
    }
    greater(greater) {
        if (!(0, sdk_coin_eth_1.isValidEthAddress)(greater)) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid address for greater');
        }
        this._greater = greater;
        return this;
    }
    index(index) {
        if (index < 0) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid index for staking transaction');
        }
        this._index = index;
        return this;
    }
    // endregion
    // region Staking building
    build() {
        this.validateMandatoryFields();
        switch (this._type) {
            case sdk_core_1.StakingOperationTypes.LOCK:
                this.validateAmount();
                return this.buildLockStaking();
            case sdk_core_1.StakingOperationTypes.VOTE:
                this.validateElectionFields();
                return this.buildVoteStaking();
            case sdk_core_1.StakingOperationTypes.ACTIVATE:
                this.validateGroup();
                return this.buildActivateStaking();
            case sdk_core_1.StakingOperationTypes.UNVOTE:
                this.validateUnvoteFields();
                return this.buildUnvoteStaking();
            case sdk_core_1.StakingOperationTypes.UNLOCK:
                this.validateAmount();
                return this.buildUnlockStaking();
            case sdk_core_1.StakingOperationTypes.WITHDRAW:
                this.validateIndex();
                return this.buildWithdrawStaking();
            default:
                throw new sdk_core_1.InvalidTransactionError('Invalid staking operation: ' + this._type);
        }
    }
    /**
     * Builds a lock gold operation sending the amount on the transaction value field
     *
     * @returns {StakingCall} a lock gold operation using the LockedGold contract
     */
    buildLockStaking() {
        const operation = (0, sdk_core_1.getOperationConfig)(this._type, this._coinConfig.network.type);
        return new stakingCall_1.StakingCall(this._amount, operation.contractAddress, operation.methodId, operation.types, []);
    }
    /**
     * Builds an unlock gold operation sending the amount encoded on the data field
     *
     * params
     * amount: amount of locked gold to be unlocked
     *
     * @returns {StakingCall} an unlock gold operation using the LockedGold contract
     */
    buildUnlockStaking() {
        const operation = (0, sdk_core_1.getOperationConfig)(this._type, this._coinConfig.network.type);
        const params = [this._amount];
        return new stakingCall_1.StakingCall('0', operation.contractAddress, operation.methodId, operation.types, params);
    }
    /**
     * Builds a vote operation that uses locked gold to add pending votes for a validator group.
     *
     * params
     * validatorGroup: group to vote for
     * amount: amount of votes (locked gold) for the group
     * lesser: validator group that has less votes than the validatorGroup
     * greater: validator group that has more vots than the validatorGroup
     *
     * @returns {StakingCall} an vote operation using the Election contract
     */
    buildVoteStaking() {
        const operation = (0, sdk_core_1.getOperationConfig)(this._type, this._coinConfig.network.type);
        const params = [this._validatorGroup, this._amount, this._lesser, this._greater];
        return new stakingCall_1.StakingCall('0', operation.contractAddress, operation.methodId, operation.types, params);
    }
    /**
     * Builds an unvote operation to revoke active votes for a validator group.
     *
     * params
     * validatorGroup: group whose votes will be revoked
     * amount: amount of votes (locked gold) that will be revoked
     * lesser: validator group that has less votes than the validatorGroup
     * greater: validator group that has more vots than the validatorGroup
     * index: index of the validatorGroup on the list of groups the address has voted for
     *
     * @returns {StakingCall} an vote operation using the Election contract
     */
    buildUnvoteStaking() {
        const operation = (0, sdk_core_1.getOperationConfig)(this._type, this._coinConfig.network.type);
        const params = [this._validatorGroup, this._amount, this._lesser, this._greater, this._index.toString()];
        return new stakingCall_1.StakingCall('0', operation.contractAddress, operation.methodId, operation.types, params);
    }
    /**
     * Builds an activate vote operation to change all the votes casted for a validator
     * from 'pending' to 'active'
     *
     * params
     * validatorGroup: group whose votes will be activated
     *
     * @returns {StakingCall} an activate votes operation
     */
    buildActivateStaking() {
        const operation = (0, sdk_core_1.getOperationConfig)(this._type, this._coinConfig.network.type);
        const params = [this._validatorGroup];
        return new stakingCall_1.StakingCall('0', operation.contractAddress, operation.methodId, operation.types, params);
    }
    /**
     * Builds a withdraw operation for locked gold that has been unlocked
     * after the unlocking period has passed.
     *
     * params
     * index: index of the unlock operation whose unlocking period has passed.
     *
     * @returns {StakingCall} an activate votes operation
     */
    buildWithdrawStaking() {
        const operation = (0, sdk_core_1.getOperationConfig)(this._type, this._coinConfig.network.type);
        const params = [this._index.toString()];
        return new stakingCall_1.StakingCall('0', operation.contractAddress, operation.methodId, operation.types, params);
    }
    // endregion
    // region Validation methods
    validateMandatoryFields() {
        if (!(this._type !== undefined && this._coinConfig)) {
            throw new sdk_core_1.BuildTransactionError('Missing staking mandatory fields. Type and coin are required');
        }
    }
    validateElectionFields() {
        this.validateGroup();
        this.validateAmount();
        if (this._lesser === this._greater) {
            throw new sdk_core_1.BuildTransactionError('Greater and lesser values should not be the same');
        }
    }
    validateIndex() {
        if (this._index === undefined) {
            throw new sdk_core_1.BuildTransactionError('Missing index for staking transaction');
        }
    }
    validateAmount() {
        if (this._amount === undefined) {
            throw new sdk_core_1.BuildTransactionError('Missing amount for staking transaction');
        }
    }
    validateUnvoteFields() {
        this.validateElectionFields();
        this.validateIndex();
    }
    validateGroup() {
        if (!this._validatorGroup) {
            throw new sdk_core_1.BuildTransactionError('Missing validator group for staking transaction');
        }
    }
    // endregion
    // region Deserialization methods
    decodeStakingData(data) {
        this.classifyStakingType(data);
        const operation = (0, sdk_core_1.getOperationConfig)(this._type, this._coinConfig.network.type);
        const decoded = (0, sdk_coin_eth_1.getRawDecoded)(operation.types, (0, sdk_coin_eth_1.getBufferedByteCode)(operation.methodId, data));
        switch (this._type) {
            case sdk_core_1.StakingOperationTypes.VOTE:
                this.validateDecodedDataLength(decoded.length, 4, data);
                const [groupToVote, amount, lesser, greater] = decoded;
                this._amount = ethUtil.bufferToHex(amount);
                this._validatorGroup = ethUtil.addHexPrefix(groupToVote);
                this._lesser = ethUtil.addHexPrefix(lesser);
                this._greater = ethUtil.addHexPrefix(greater);
                break;
            case sdk_core_1.StakingOperationTypes.UNVOTE:
                this.validateDecodedDataLength(decoded.length, 5, data);
                const [groupToUnvote, amountUnvote, lesserUnvote, greaterUnvote, indexUnvote] = decoded;
                this._validatorGroup = ethUtil.addHexPrefix(groupToUnvote);
                this._amount = ethUtil.bufferToHex(amountUnvote);
                this._lesser = ethUtil.addHexPrefix(lesserUnvote);
                this._greater = ethUtil.addHexPrefix(greaterUnvote);
                this._index = (0, sdk_coin_eth_1.hexStringToNumber)(ethUtil.bufferToHex(indexUnvote));
                break;
            case sdk_core_1.StakingOperationTypes.ACTIVATE:
                this.validateDecodedDataLength(decoded.length, 1, data);
                const [groupToActivate] = decoded;
                this._validatorGroup = ethUtil.addHexPrefix(groupToActivate);
                break;
            case sdk_core_1.StakingOperationTypes.UNLOCK:
                if (decoded.length !== 1) {
                    throw new sdk_core_1.BuildTransactionError(`Invalid unlock decoded data: ${data}`);
                }
                const [decodedAmount] = decoded;
                this._amount = ethUtil.bufferToHex(decodedAmount);
                break;
            case sdk_core_1.StakingOperationTypes.WITHDRAW:
                this.validateDecodedDataLength(decoded.length, 1, data);
                const [index] = decoded;
                this._index = (0, sdk_coin_eth_1.hexStringToNumber)(ethUtil.bufferToHex(index));
                break;
            default:
                throw new sdk_core_1.BuildTransactionError(`Invalid staking data: ${this._type}`);
        }
    }
    validateDecodedDataLength(actual, expected, data) {
        if (actual !== expected) {
            throw new sdk_core_1.BuildTransactionError(`Invalid staking decoded data: ${data}`);
        }
    }
    classifyStakingType(data) {
        if (data.startsWith(sdk_core_1.VoteMethodId)) {
            this._type = sdk_core_1.StakingOperationTypes.VOTE;
        }
        else if (data.startsWith(sdk_core_1.UnvoteMethodId)) {
            this._type = sdk_core_1.StakingOperationTypes.UNVOTE;
        }
        else if (data.startsWith(sdk_core_1.ActivateMethodId)) {
            this._type = sdk_core_1.StakingOperationTypes.ACTIVATE;
        }
        else if (data.startsWith(sdk_core_1.UnlockMethodId)) {
            this._type = sdk_core_1.StakingOperationTypes.UNLOCK;
        }
        else if (data.startsWith(sdk_core_1.WithdrawMethodId)) {
            this._type = sdk_core_1.StakingOperationTypes.WITHDRAW;
        }
        else {
            throw new sdk_core_1.BuildTransactionError(`Invalid staking bytecode: ${data}`);
        }
    }
}
exports.StakingBuilder = StakingBuilder;
//# sourceMappingURL=data:application/json;base64,