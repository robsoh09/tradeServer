"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const crypto_1 = __importDefault(require("crypto"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const decrypt_rsa_1 = require("../../../../../src/bitgo/trading/network/decrypt-rsa");
const encrypt_rsa_1 = require("../../../../../src/bitgo/trading/network/encrypt-rsa");
const encrypt_rsa_browser_1 = require("../../../../../src/bitgo/trading/network/encrypt-rsa-browser");
const decrypt_aes_gcm_1 = require("../../../../../src/bitgo/trading/network/decrypt-aes-gcm");
const encrypt_aes_gcm_1 = require("../../../../../src/bitgo/trading/network/encrypt-aes-gcm");
const network_1 = require("../../../../../src/bitgo/trading/network");
describe('network encrypt', () => {
    const privateKey = fs_1.default.readFileSync(path_1.default.resolve(__dirname, './private-key.pem'));
    const publicKey = fs_1.default.readFileSync(path_1.default.resolve(__dirname, './public-key.pub'));
    const password = 'password';
    let encryptedRsa;
    let decryptedRsa;
    let encryptedBrowserRsa;
    it('should encrypt the string with a rsa public key', async () => {
        encryptedRsa = await (0, encrypt_rsa_1._encryptRsa)(publicKey.toString(), password);
        (0, assert_1.default)(encryptedRsa);
    });
    it('should decrypt the string with a rsa public key', async () => {
        decryptedRsa = await (0, decrypt_rsa_1._decryptRsa)(privateKey.toString(), encryptedRsa);
        (0, assert_1.default)(decryptedRsa);
        assert_1.default.strictEqual(decryptedRsa, password);
    });
    it('should encrypt the string with a rsa public key for the browser', async () => {
        encryptedBrowserRsa = await (0, encrypt_rsa_browser_1._encryptBrowserRsa)(publicKey.toString(), password);
        (0, assert_1.default)(encryptedBrowserRsa);
    });
    it('should encrypt and decrypt aes-gcm', async () => {
        // Use encryptAesGcm and decryptAesGcm
        const text = 'secret';
        const gcmKey = crypto_1.default.randomBytes(32).toString('base64');
        const encrypted = await (0, encrypt_aes_gcm_1._encryptAesGcm)(gcmKey, text);
        const decrypted = await (0, decrypt_aes_gcm_1._decryptAesGcm)(gcmKey, encrypted);
        assert_1.default.strictEqual(decrypted, text);
    });
    let encryptedRsaWithAesGcm;
    let decryptedRsaWithAesGcm;
    let encryptedBrowserRsaWithAesGcm;
    let decryptedBrowserRsaWithAesGcm;
    it('should encrypt and decrypt RsaWithAesGcm', async () => {
        encryptedRsaWithAesGcm = await (0, network_1.encryptRsaWithAesGcm)(publicKey.toString(), password);
        decryptedRsaWithAesGcm = await (0, network_1.decryptRsaWithAesGcm)(privateKey.toString(), encryptedRsaWithAesGcm);
        (0, assert_1.default)(encryptedRsaWithAesGcm);
        (0, assert_1.default)(decryptedRsaWithAesGcm);
    });
    it('should encrypt and decrypt RsaWithAesGcm for the browser', async () => {
        encryptedBrowserRsaWithAesGcm = await (0, network_1.encryptBrowserRsaWithAesGcm)(publicKey.toString(), password);
        decryptedBrowserRsaWithAesGcm = await (0, network_1.decryptRsaWithAesGcm)(privateKey.toString(), encryptedBrowserRsaWithAesGcm);
        assert_1.default.strictEqual(decryptedBrowserRsaWithAesGcm, password);
        assert_1.default.strictEqual(decryptedRsaWithAesGcm, decryptedBrowserRsaWithAesGcm);
    });
    it('should check that the encryptions for node and browser work with each other', async () => {
        // We only care about browser and node encryption working with node decryption
        // We will never decrypt in the browser
        const browserEncrypted = await (0, encrypt_rsa_browser_1._encryptBrowserRsa)(publicKey.toString(), password);
        const nodeDecrypted = await (0, decrypt_rsa_1._decryptRsa)(privateKey.toString(), browserEncrypted);
        assert_1.default.strictEqual(nodeDecrypted, password);
        const browserEncryptedWithAesGcm = await (0, network_1.encryptBrowserRsaWithAesGcm)(publicKey.toString(), password);
        const nodeDecryptedWithAesGcm = await (0, network_1.decryptRsaWithAesGcm)(privateKey.toString(), browserEncryptedWithAesGcm);
        assert_1.default.strictEqual(nodeDecryptedWithAesGcm, password);
    });
});
//# sourceMappingURL=data:application/json;base64,