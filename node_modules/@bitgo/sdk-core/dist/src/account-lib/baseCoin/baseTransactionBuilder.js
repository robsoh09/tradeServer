"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseTransactionBuilder = void 0;
const errors_1 = require("./errors");
/**
 * Generic transaction builder to be extended with coin specific logic.
 * Provide a set of default steps (i.e. from, sign, build) and enforces mandatory validations.
 */
class BaseTransactionBuilder {
    /**
     * Base constructor.
     *
     * @param _coinConfig BaseCoin from statics library
     */
    constructor(_coinConfig) {
        this._coinConfig = _coinConfig;
    }
    /**
     * Parse a transaction based on existing data. The input format is determined by the coin
     * extending this class. Some examples are hex, base64, or JSON.
     *
     * @param rawTransaction A raw transaction to be parsed
     */
    from(rawTransaction) {
        this.validateRawTransaction(rawTransaction);
        this.transaction = this.fromImplementation(rawTransaction);
    }
    /**
     * Validate keys and sign the transaction.
     *
     * @param key One of the keys associated with this transaction
     */
    sign(key) {
        this.validateKey(key);
        if (!this.transaction.canSign(key)) {
            throw new errors_1.SigningError('Private key cannot sign the transaction');
        }
        this.transaction = this.signImplementation(key);
    }
    /**
     * Adds a signature to the transaction.
     *
     * @param publicKey public key that produced the signature
     * @param signature raw signature as a hex encoded Buffer
     */
    addSignature(publicKey, signature) {
        throw new errors_1.SigningError(`${this.coinName()} does not support adding signatures directly.`);
    }
    /**
     * Finalize the transaction by performing any extra step like calculating hashes, verifying
     * integrity, or adding default values.
     *
     * @returns valid coin specific transaction (signed or unsigned)
     */
    async build() {
        this.validateTransaction(this.transaction);
        return this.buildImplementation();
    }
    /**
     * Get the underlying coin full name as specified in the statics library.
     */
    displayName() {
        return this._coinConfig.fullName;
    }
    /**
     * Get the underlying coin full name as specified in the statics library.
     */
    coinName() {
        return this._coinConfig.name;
    }
    /**
     * Verified validity windows params if them exist and return a valid validity windows.
     * Unit param must be specified
     * If params are not consistent, default params will be return based on firstValid and minDuration
     * @param {ValidityWindow} params validity windows parameters to validate.
     * @param {String} params.unit Parameter that could be 'blockheight' or 'timestamp'
     * @param {Number} [params.minDuration] Optional - Minimum duration of the window
     * @param {Number} [params.maxDuration] Optional - Maximum duration of the window
     * @param {Number} [params.firstValid] Optional - First valid value
     * @param {Number} [params.lastValid] Optional - Last valid value
     * @returns {ValidityWindow} verified validity windows or default values
     */
    getValidityWindow(params) {
        if (!params.unit || (params.unit !== 'timestamp' && params.unit !== 'blockheight')) {
            throw new Error('Unit parameter must be specified as blockheight or timestamp');
        }
        const unit = params.unit;
        let defaultMinDuration;
        let defaultMaxDuration;
        let defaultFirstValid;
        let defaultLastValid;
        /* Set Default Params
          minimum duration is set as 1 hr (3600000 msec) if unit is timestamp or 20 blocks if it is blockheight
          maximum duration is set as 1 year (31536000000 msec) if unit is timestamp or 1000000 blocks if it is blockheight.
         */
        if (unit === 'timestamp') {
            defaultMinDuration = 0;
            defaultMaxDuration = 31536000000;
            defaultFirstValid = Date.now();
            defaultLastValid = defaultFirstValid + defaultMaxDuration;
        }
        else {
            defaultMinDuration = 0;
            defaultMaxDuration = 1000000;
            defaultFirstValid = 0;
            defaultLastValid = defaultFirstValid + defaultMaxDuration;
        }
        // If any params exist, they will be used, otherwise it will be used default params.
        let firstValid = params.firstValid || defaultFirstValid;
        let lastValid = params.lastValid || defaultLastValid;
        let minDuration = params.minDuration || defaultMinDuration;
        let maxDuration = params.maxDuration || defaultMaxDuration;
        /* Validate Params:
          minDuration < maxDuration
          firstValid < lastValid
          firstValid + minDuration <= lastValid <= firstValid + maxDuration
         */
        if (minDuration >= maxDuration) {
            throw new Error(`Expected maxDuration (${maxDuration}) to be grather than minDuration (${minDuration})`);
        }
        firstValid = firstValid >= 0 ? firstValid : defaultFirstValid;
        minDuration = minDuration >= 0 ? minDuration : defaultMinDuration;
        maxDuration = maxDuration > minDuration ? maxDuration : defaultMaxDuration;
        lastValid =
            lastValid >= firstValid + minDuration && lastValid <= firstValid + maxDuration
                ? lastValid
                : firstValid + maxDuration;
        return {
            firstValid,
            lastValid,
            minDuration,
            maxDuration,
            unit,
        };
    }
}
exports.BaseTransactionBuilder = BaseTransactionBuilder;
//# sourceMappingURL=data:application/json;base64,