"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StakingOperationTypes = exports.DotAddressFormat = exports.AddressFormat = exports.TransactionType = void 0;
/**
 * Internal metadata. Defines the type of transaction.
 */
var TransactionType;
(function (TransactionType) {
    TransactionType[TransactionType["Send"] = 0] = "Send";
    // Send ERC721 compliant tokens
    TransactionType[TransactionType["SendERC721"] = 1] = "SendERC721";
    // Send ERC1155 compliant tokens
    TransactionType[TransactionType["SendERC1155"] = 2] = "SendERC1155";
    // Initialize a wallet on-chain (e.g. Multi-sig contract deployment)
    TransactionType[TransactionType["WalletInitialization"] = 3] = "WalletInitialization";
    // Initialize an address on-chain(e.g. Forwarder contract deployment)
    TransactionType[TransactionType["AddressInitialization"] = 4] = "AddressInitialization";
    // Initialized an associated token account
    TransactionType[TransactionType["AssociatedTokenAccountInitialization"] = 5] = "AssociatedTokenAccountInitialization";
    // Flush tokens from a forwarder address to its base address
    TransactionType[TransactionType["FlushTokens"] = 6] = "FlushTokens";
    // Flush native coins (eg. ETH) from a forwarder address to base address
    TransactionType[TransactionType["FlushCoins"] = 7] = "FlushCoins";
    // Send a raw single-sig transaction
    TransactionType[TransactionType["SingleSigSend"] = 8] = "SingleSigSend";
    // Update an account on-chain (e.g. Public key revelation operation for Tezos)
    TransactionType[TransactionType["AccountUpdate"] = 9] = "AccountUpdate";
    // Lock
    TransactionType[TransactionType["StakingLock"] = 10] = "StakingLock";
    // Vote
    TransactionType[TransactionType["StakingVote"] = 11] = "StakingVote";
    // Unvote
    TransactionType[TransactionType["StakingUnvote"] = 12] = "StakingUnvote";
    // Activate
    TransactionType[TransactionType["StakingActivate"] = 13] = "StakingActivate";
    // Unlock
    TransactionType[TransactionType["StakingUnlock"] = 14] = "StakingUnlock";
    // Withdraw
    TransactionType[TransactionType["StakingWithdraw"] = 15] = "StakingWithdraw";
    // Handle smart contract calls
    TransactionType[TransactionType["ContractCall"] = 16] = "ContractCall";
    // Deactivate
    TransactionType[TransactionType["StakingDeactivate"] = 17] = "StakingDeactivate";
    // Batch of multiple transactions broadcast as a single transaction
    TransactionType[TransactionType["Batch"] = 18] = "Batch";
    // Claim the staking rewards
    TransactionType[TransactionType["StakingClaim"] = 19] = "StakingClaim";
    // Add delegator to p-chain
    // @deprecated
    TransactionType[TransactionType["AddDelegator"] = 20] = "AddDelegator";
    // Add validator to p-chain
    // @deprecated
    TransactionType[TransactionType["AddValidator"] = 21] = "AddValidator";
    // Cross chain transfer at Avax
    TransactionType[TransactionType["Export"] = 22] = "Export";
    TransactionType[TransactionType["Import"] = 23] = "Import";
    // Cross chain Recovery for evm like chains
    TransactionType[TransactionType["RecoveryWalletDeployment"] = 24] = "RecoveryWalletDeployment";
    // Add staking
    TransactionType[TransactionType["StakingAdd"] = 25] = "StakingAdd";
    // Staking pledge (e.g. ADA)
    TransactionType[TransactionType["StakingPledge"] = 26] = "StakingPledge";
    // Staking Authorize (e.g. SOL)
    TransactionType[TransactionType["StakingAuthorize"] = 27] = "StakingAuthorize";
    // Staking Authorize from raw message (e.g. SOL)
    TransactionType[TransactionType["StakingAuthorizeRaw"] = 28] = "StakingAuthorizeRaw";
    // Delegate
    TransactionType[TransactionType["StakingDelegate"] = 29] = "StakingDelegate";
    // Custom transaction (e.g. SUI)
    TransactionType[TransactionType["CustomTx"] = 30] = "CustomTx";
    TransactionType[TransactionType["StakingRedelegate"] = 31] = "StakingRedelegate";
    TransactionType[TransactionType["AddPermissionlessDelegator"] = 32] = "AddPermissionlessDelegator";
    TransactionType[TransactionType["AddPermissionlessValidator"] = 33] = "AddPermissionlessValidator";
    // Closing an associated token account (e.g. SOL)
    TransactionType[TransactionType["CloseAssociatedTokenAccount"] = 34] = "CloseAssociatedTokenAccount";
})(TransactionType = exports.TransactionType || (exports.TransactionType = {}));
/**
 * Generic list of encoding formats. Can be used as arguments for methods inputs.
 */
var AddressFormat;
(function (AddressFormat) {
    AddressFormat["hex"] = "hex";
    AddressFormat["base58"] = "base58";
    AddressFormat["mainnet"] = "mainnet";
    AddressFormat["testnet"] = "testnet";
})(AddressFormat = exports.AddressFormat || (exports.AddressFormat = {}));
// TODO(): create union type of all address formats enums
// list of ss58 format encoding types for Dot ecosystem
var DotAddressFormat;
(function (DotAddressFormat) {
    // format for westend (generic substrate) addresses
    DotAddressFormat[DotAddressFormat["substrate"] = 42] = "substrate";
    // format for polkadot mainnet addresses
    DotAddressFormat[DotAddressFormat["polkadot"] = 0] = "polkadot";
})(DotAddressFormat = exports.DotAddressFormat || (exports.DotAddressFormat = {}));
var StakingOperationTypes;
(function (StakingOperationTypes) {
    StakingOperationTypes[StakingOperationTypes["LOCK"] = 0] = "LOCK";
    StakingOperationTypes[StakingOperationTypes["VOTE"] = 1] = "VOTE";
    StakingOperationTypes[StakingOperationTypes["UNVOTE"] = 2] = "UNVOTE";
    StakingOperationTypes[StakingOperationTypes["ACTIVATE"] = 3] = "ACTIVATE";
    StakingOperationTypes[StakingOperationTypes["UNLOCK"] = 4] = "UNLOCK";
    StakingOperationTypes[StakingOperationTypes["WITHDRAW"] = 5] = "WITHDRAW";
})(StakingOperationTypes = exports.StakingOperationTypes || (exports.StakingOperationTypes = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW51bS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hY2NvdW50LWxpYi9iYXNlQ29pbi9lbnVtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBOztHQUVHO0FBQ0gsSUFBWSxlQW9FWDtBQXBFRCxXQUFZLGVBQWU7SUFDekIscURBQUksQ0FBQTtJQUNKLCtCQUErQjtJQUMvQixpRUFBVSxDQUFBO0lBQ1YsZ0NBQWdDO0lBQ2hDLG1FQUFXLENBQUE7SUFDWCxvRUFBb0U7SUFDcEUscUZBQW9CLENBQUE7SUFDcEIscUVBQXFFO0lBQ3JFLHVGQUFxQixDQUFBO0lBQ3JCLDBDQUEwQztJQUMxQyxxSEFBb0MsQ0FBQTtJQUNwQyw0REFBNEQ7SUFDNUQsbUVBQVcsQ0FBQTtJQUNYLHdFQUF3RTtJQUN4RSxpRUFBVSxDQUFBO0lBQ1Ysb0NBQW9DO0lBQ3BDLHVFQUFhLENBQUE7SUFDYiw4RUFBOEU7SUFDOUUsdUVBQWEsQ0FBQTtJQUNiLE9BQU87SUFDUCxvRUFBVyxDQUFBO0lBQ1gsT0FBTztJQUNQLG9FQUFXLENBQUE7SUFDWCxTQUFTO0lBQ1Qsd0VBQWEsQ0FBQTtJQUNiLFdBQVc7SUFDWCw0RUFBZSxDQUFBO0lBQ2YsU0FBUztJQUNULHdFQUFhLENBQUE7SUFDYixXQUFXO0lBQ1gsNEVBQWUsQ0FBQTtJQUNmLDhCQUE4QjtJQUM5QixzRUFBWSxDQUFBO0lBQ1osYUFBYTtJQUNiLGdGQUFpQixDQUFBO0lBQ2pCLG1FQUFtRTtJQUNuRSx3REFBSyxDQUFBO0lBQ0wsNEJBQTRCO0lBQzVCLHNFQUFZLENBQUE7SUFDWiwyQkFBMkI7SUFDM0IsY0FBYztJQUNkLHNFQUFZLENBQUE7SUFDWiwyQkFBMkI7SUFDM0IsY0FBYztJQUNkLHNFQUFZLENBQUE7SUFDWiwrQkFBK0I7SUFDL0IsMERBQU0sQ0FBQTtJQUNOLDBEQUFNLENBQUE7SUFDTiwyQ0FBMkM7SUFDM0MsOEZBQXdCLENBQUE7SUFDeEIsY0FBYztJQUNkLGtFQUFVLENBQUE7SUFDViw0QkFBNEI7SUFDNUIsd0VBQWEsQ0FBQTtJQUNiLCtCQUErQjtJQUMvQiw4RUFBZ0IsQ0FBQTtJQUNoQixnREFBZ0Q7SUFDaEQsb0ZBQW1CLENBQUE7SUFDbkIsV0FBVztJQUNYLDRFQUFlLENBQUE7SUFDZixnQ0FBZ0M7SUFDaEMsOERBQVEsQ0FBQTtJQUNSLGdGQUFpQixDQUFBO0lBQ2pCLGtHQUEwQixDQUFBO0lBQzFCLGtHQUEwQixDQUFBO0lBQzFCLGlEQUFpRDtJQUNqRCxvR0FBMkIsQ0FBQTtBQUM3QixDQUFDLEVBcEVXLGVBQWUsR0FBZix1QkFBZSxLQUFmLHVCQUFlLFFBb0UxQjtBQUVEOztHQUVHO0FBQ0gsSUFBWSxhQUtYO0FBTEQsV0FBWSxhQUFhO0lBQ3ZCLDRCQUFXLENBQUE7SUFDWCxrQ0FBaUIsQ0FBQTtJQUNqQixvQ0FBbUIsQ0FBQTtJQUNuQixvQ0FBbUIsQ0FBQTtBQUNyQixDQUFDLEVBTFcsYUFBYSxHQUFiLHFCQUFhLEtBQWIscUJBQWEsUUFLeEI7QUFFRCx5REFBeUQ7QUFDekQsdURBQXVEO0FBQ3ZELElBQVksZ0JBS1g7QUFMRCxXQUFZLGdCQUFnQjtJQUMxQixtREFBbUQ7SUFDbkQsa0VBQWMsQ0FBQTtJQUNkLHdDQUF3QztJQUN4QywrREFBWSxDQUFBO0FBQ2QsQ0FBQyxFQUxXLGdCQUFnQixHQUFoQix3QkFBZ0IsS0FBaEIsd0JBQWdCLFFBSzNCO0FBSUQsSUFBWSxxQkFPWDtBQVBELFdBQVkscUJBQXFCO0lBQy9CLGlFQUFJLENBQUE7SUFDSixpRUFBSSxDQUFBO0lBQ0oscUVBQU0sQ0FBQTtJQUNOLHlFQUFRLENBQUE7SUFDUixxRUFBTSxDQUFBO0lBQ04seUVBQVEsQ0FBQTtBQUNWLENBQUMsRUFQVyxxQkFBcUIsR0FBckIsNkJBQXFCLEtBQXJCLDZCQUFxQixRQU9oQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSW50ZXJuYWwgbWV0YWRhdGEuIERlZmluZXMgdGhlIHR5cGUgb2YgdHJhbnNhY3Rpb24uXG4gKi9cbmV4cG9ydCBlbnVtIFRyYW5zYWN0aW9uVHlwZSB7XG4gIFNlbmQsXG4gIC8vIFNlbmQgRVJDNzIxIGNvbXBsaWFudCB0b2tlbnNcbiAgU2VuZEVSQzcyMSxcbiAgLy8gU2VuZCBFUkMxMTU1IGNvbXBsaWFudCB0b2tlbnNcbiAgU2VuZEVSQzExNTUsXG4gIC8vIEluaXRpYWxpemUgYSB3YWxsZXQgb24tY2hhaW4gKGUuZy4gTXVsdGktc2lnIGNvbnRyYWN0IGRlcGxveW1lbnQpXG4gIFdhbGxldEluaXRpYWxpemF0aW9uLFxuICAvLyBJbml0aWFsaXplIGFuIGFkZHJlc3Mgb24tY2hhaW4oZS5nLiBGb3J3YXJkZXIgY29udHJhY3QgZGVwbG95bWVudClcbiAgQWRkcmVzc0luaXRpYWxpemF0aW9uLFxuICAvLyBJbml0aWFsaXplZCBhbiBhc3NvY2lhdGVkIHRva2VuIGFjY291bnRcbiAgQXNzb2NpYXRlZFRva2VuQWNjb3VudEluaXRpYWxpemF0aW9uLFxuICAvLyBGbHVzaCB0b2tlbnMgZnJvbSBhIGZvcndhcmRlciBhZGRyZXNzIHRvIGl0cyBiYXNlIGFkZHJlc3NcbiAgRmx1c2hUb2tlbnMsXG4gIC8vIEZsdXNoIG5hdGl2ZSBjb2lucyAoZWcuIEVUSCkgZnJvbSBhIGZvcndhcmRlciBhZGRyZXNzIHRvIGJhc2UgYWRkcmVzc1xuICBGbHVzaENvaW5zLFxuICAvLyBTZW5kIGEgcmF3IHNpbmdsZS1zaWcgdHJhbnNhY3Rpb25cbiAgU2luZ2xlU2lnU2VuZCxcbiAgLy8gVXBkYXRlIGFuIGFjY291bnQgb24tY2hhaW4gKGUuZy4gUHVibGljIGtleSByZXZlbGF0aW9uIG9wZXJhdGlvbiBmb3IgVGV6b3MpXG4gIEFjY291bnRVcGRhdGUsXG4gIC8vIExvY2tcbiAgU3Rha2luZ0xvY2ssXG4gIC8vIFZvdGVcbiAgU3Rha2luZ1ZvdGUsXG4gIC8vIFVudm90ZVxuICBTdGFraW5nVW52b3RlLFxuICAvLyBBY3RpdmF0ZVxuICBTdGFraW5nQWN0aXZhdGUsXG4gIC8vIFVubG9ja1xuICBTdGFraW5nVW5sb2NrLFxuICAvLyBXaXRoZHJhd1xuICBTdGFraW5nV2l0aGRyYXcsXG4gIC8vIEhhbmRsZSBzbWFydCBjb250cmFjdCBjYWxsc1xuICBDb250cmFjdENhbGwsXG4gIC8vIERlYWN0aXZhdGVcbiAgU3Rha2luZ0RlYWN0aXZhdGUsXG4gIC8vIEJhdGNoIG9mIG11bHRpcGxlIHRyYW5zYWN0aW9ucyBicm9hZGNhc3QgYXMgYSBzaW5nbGUgdHJhbnNhY3Rpb25cbiAgQmF0Y2gsXG4gIC8vIENsYWltIHRoZSBzdGFraW5nIHJld2FyZHNcbiAgU3Rha2luZ0NsYWltLFxuICAvLyBBZGQgZGVsZWdhdG9yIHRvIHAtY2hhaW5cbiAgLy8gQGRlcHJlY2F0ZWRcbiAgQWRkRGVsZWdhdG9yLFxuICAvLyBBZGQgdmFsaWRhdG9yIHRvIHAtY2hhaW5cbiAgLy8gQGRlcHJlY2F0ZWRcbiAgQWRkVmFsaWRhdG9yLFxuICAvLyBDcm9zcyBjaGFpbiB0cmFuc2ZlciBhdCBBdmF4XG4gIEV4cG9ydCxcbiAgSW1wb3J0LFxuICAvLyBDcm9zcyBjaGFpbiBSZWNvdmVyeSBmb3IgZXZtIGxpa2UgY2hhaW5zXG4gIFJlY292ZXJ5V2FsbGV0RGVwbG95bWVudCxcbiAgLy8gQWRkIHN0YWtpbmdcbiAgU3Rha2luZ0FkZCxcbiAgLy8gU3Rha2luZyBwbGVkZ2UgKGUuZy4gQURBKVxuICBTdGFraW5nUGxlZGdlLFxuICAvLyBTdGFraW5nIEF1dGhvcml6ZSAoZS5nLiBTT0wpXG4gIFN0YWtpbmdBdXRob3JpemUsXG4gIC8vIFN0YWtpbmcgQXV0aG9yaXplIGZyb20gcmF3IG1lc3NhZ2UgKGUuZy4gU09MKVxuICBTdGFraW5nQXV0aG9yaXplUmF3LFxuICAvLyBEZWxlZ2F0ZVxuICBTdGFraW5nRGVsZWdhdGUsXG4gIC8vIEN1c3RvbSB0cmFuc2FjdGlvbiAoZS5nLiBTVUkpXG4gIEN1c3RvbVR4LFxuICBTdGFraW5nUmVkZWxlZ2F0ZSxcbiAgQWRkUGVybWlzc2lvbmxlc3NEZWxlZ2F0b3IsXG4gIEFkZFBlcm1pc3Npb25sZXNzVmFsaWRhdG9yLFxuICAvLyBDbG9zaW5nIGFuIGFzc29jaWF0ZWQgdG9rZW4gYWNjb3VudCAoZS5nLiBTT0wpXG4gIENsb3NlQXNzb2NpYXRlZFRva2VuQWNjb3VudCxcbn1cblxuLyoqXG4gKiBHZW5lcmljIGxpc3Qgb2YgZW5jb2RpbmcgZm9ybWF0cy4gQ2FuIGJlIHVzZWQgYXMgYXJndW1lbnRzIGZvciBtZXRob2RzIGlucHV0cy5cbiAqL1xuZXhwb3J0IGVudW0gQWRkcmVzc0Zvcm1hdCB7XG4gIGhleCA9ICdoZXgnLFxuICBiYXNlNTggPSAnYmFzZTU4JyxcbiAgbWFpbm5ldCA9ICdtYWlubmV0JyxcbiAgdGVzdG5ldCA9ICd0ZXN0bmV0Jyxcbn1cblxuLy8gVE9ETygpOiBjcmVhdGUgdW5pb24gdHlwZSBvZiBhbGwgYWRkcmVzcyBmb3JtYXRzIGVudW1zXG4vLyBsaXN0IG9mIHNzNTggZm9ybWF0IGVuY29kaW5nIHR5cGVzIGZvciBEb3QgZWNvc3lzdGVtXG5leHBvcnQgZW51bSBEb3RBZGRyZXNzRm9ybWF0IHtcbiAgLy8gZm9ybWF0IGZvciB3ZXN0ZW5kIChnZW5lcmljIHN1YnN0cmF0ZSkgYWRkcmVzc2VzXG4gIHN1YnN0cmF0ZSA9IDQyLFxuICAvLyBmb3JtYXQgZm9yIHBvbGthZG90IG1haW5uZXQgYWRkcmVzc2VzXG4gIHBvbGthZG90ID0gMCxcbn1cblxuZXhwb3J0IHR5cGUgRG90QXNzZXRUeXBlcyA9ICdkb3QnIHwgJ3Rkb3QnO1xuXG5leHBvcnQgZW51bSBTdGFraW5nT3BlcmF0aW9uVHlwZXMge1xuICBMT0NLLFxuICBWT1RFLFxuICBVTlZPVEUsXG4gIEFDVElWQVRFLFxuICBVTkxPQ0ssXG4gIFdJVEhEUkFXLFxufVxuIl19