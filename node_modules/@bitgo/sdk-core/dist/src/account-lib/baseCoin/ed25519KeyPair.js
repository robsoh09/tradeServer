"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ed25519KeyPair = void 0;
const nacl = __importStar(require("tweetnacl"));
const crypto_1 = require("../util/crypto");
const ed25519KeyDeriver_1 = require("../util/ed25519KeyDeriver");
const iface_1 = require("./iface");
const DEFAULT_SEED_SIZE_BYTES = 32;
class Ed25519KeyPair {
    /**
     * Public constructor. By default, creates a key pair with a random master seed.
     *
     * @param {KeyPairOptions} source Either a master seed, a private key, or a public key
     */
    constructor(source) {
        let naclKeyPair;
        if (!source) {
            const seed = nacl.randomBytes(DEFAULT_SEED_SIZE_BYTES);
            naclKeyPair = nacl.sign.keyPair.fromSeed(seed);
            this.setKeyPair(naclKeyPair);
        }
        else if ((0, iface_1.isSeed)(source)) {
            naclKeyPair = nacl.sign.keyPair.fromSeed(source.seed);
            this.setKeyPair(naclKeyPair);
        }
        else if ((0, iface_1.isPrivateKey)(source)) {
            this.recordKeysFromPrivateKey(source.prv);
        }
        else if ((0, iface_1.isPublicKey)(source)) {
            this.recordKeysFromPublicKey(source.pub);
        }
        else {
            throw new Error('Invalid key pair options');
        }
    }
    getKeyPair(naclKeyPair) {
        return {
            prv: (0, crypto_1.toHex)(naclKeyPair.secretKey.slice(0, 32)),
            pub: (0, crypto_1.toHex)(naclKeyPair.publicKey),
        };
    }
    setKeyPair(naclKeyPair) {
        this.keyPair = this.getKeyPair(naclKeyPair);
    }
    /** @inheritdoc */
    recordKeysFromPrivateKey(prv) {
        if ((0, crypto_1.isValidEd25519Seed)(prv)) {
            const decodedPrv = (0, crypto_1.toUint8Array)(prv);
            const naclKeyPair = nacl.sign.keyPair.fromSeed(decodedPrv);
            this.setKeyPair(naclKeyPair);
        }
        else if ((0, crypto_1.isValidEd25519SecretKey)(prv)) {
            const decodedPrv = (0, crypto_1.toUint8Array)(prv);
            const naclKeyPair = nacl.sign.keyPair.fromSecretKey(decodedPrv);
            this.setKeyPair(naclKeyPair);
        }
        else {
            this.keyPair = this.recordKeysFromPrivateKeyInProtocolFormat(prv);
        }
    }
    /** @inheritdoc */
    recordKeysFromPublicKey(pub) {
        if ((0, crypto_1.isValidEd25519PublicKey)(pub)) {
            this.keyPair = { pub };
        }
        else {
            this.keyPair = this.recordKeysFromPublicKeyInProtocolFormat(pub);
        }
    }
    /**
     * Generates a signature for an arbitrary string with the current private key using the ed25519 public-key signature
     * system.
     *
     * @param {string} message to produce a signature for
     * @returns {Uint8Array} The signature produced for the message
     * @throws if there is no private key
     */
    signMessage(message) {
        var _a;
        const messageToSign = (0, crypto_1.toUint8Array)(Buffer.from(message).toString('hex'));
        const prv = (_a = this.keyPair) === null || _a === void 0 ? void 0 : _a.prv;
        if (!prv) {
            throw new Error('Missing private key');
        }
        return nacl.sign.detached(messageToSign, nacl.sign.keyPair.fromSeed((0, crypto_1.toUint8Array)(prv)).secretKey);
    }
    /**
     * Verifies a message signature using the current public key.
     *
     * @param {string} message signed
     * @param {Uint8Array} signature to verify
     * @returns {boolean} True if the message was signed with the current key pair
     */
    verifySignature(message, signature) {
        var _a;
        let messageToVerify;
        if (typeof message === 'string') {
            messageToVerify = (0, crypto_1.toUint8Array)(Buffer.from(message).toString('hex'));
        }
        else {
            messageToVerify = message;
        }
        if (!((_a = this.keyPair) === null || _a === void 0 ? void 0 : _a.pub)) {
            return false;
        }
        const publicKey = (0, crypto_1.toUint8Array)(this.keyPair.pub);
        return nacl.sign.detached.verify(messageToVerify, signature, publicKey);
    }
    /**
     * Derives a hardened child key pair using this key pair's secret key
     * as the seed.
     *
     * @param path derivation path
     * @deprecated
     */
    deriveHardened(path) {
        var _a;
        if (!((_a = this.keyPair) === null || _a === void 0 ? void 0 : _a.prv)) {
            throw new Error('need private key to derive hardened keypair');
        }
        const seed = ed25519KeyDeriver_1.Ed25519KeyDeriver.derivePath(path, this.keyPair.prv).key;
        const derivedKeyPair = nacl.sign.keyPair.fromSeed(seed);
        return this.getKeyPair(derivedKeyPair);
    }
}
exports.Ed25519KeyPair = Ed25519KeyPair;
//# sourceMappingURL=data:application/json;base64,