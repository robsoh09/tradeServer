"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DuplicateMethodError = exports.UnsupportedTokenError = exports.InvalidKey = exports.NotSupported = exports.NotImplementedError = exports.InvalidSignatureError = exports.InvalidParameterValueError = exports.ExtendTransactionError = exports.UtilsError = exports.BuildTransactionError = exports.SigningError = exports.ParseTransactionError = exports.ExtendableError = void 0;
/**
 * This base class ensures that our stack trace is captured properly but also that we have classes of errors
 * that can be found in a switch.
 */
class ExtendableError extends Error {
    constructor(message) {
        super(message);
        this.name = this.constructor.name;
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, this.constructor);
        }
        else {
            this.stack = new Error(message).stack;
        }
    }
}
exports.ExtendableError = ExtendableError;
class ParseTransactionError extends ExtendableError {
    constructor(message) {
        super(message);
    }
}
exports.ParseTransactionError = ParseTransactionError;
class SigningError extends ExtendableError {
    constructor(message) {
        super(message);
    }
}
exports.SigningError = SigningError;
class BuildTransactionError extends ExtendableError {
    constructor(message) {
        super(message);
    }
}
exports.BuildTransactionError = BuildTransactionError;
class UtilsError extends ExtendableError {
    constructor(message) {
        super(message);
    }
}
exports.UtilsError = UtilsError;
class ExtendTransactionError extends ExtendableError {
    constructor(message) {
        super(message);
    }
}
exports.ExtendTransactionError = ExtendTransactionError;
/**
 * Error for an invalid value for a contract method parameter
 */
class InvalidParameterValueError extends ExtendableError {
    constructor(message) {
        super(message);
    }
}
exports.InvalidParameterValueError = InvalidParameterValueError;
/**
 * Error produced by not truthy signature values
 */
class InvalidSignatureError extends ExtendableError {
    constructor(message) {
        super(message);
    }
}
exports.InvalidSignatureError = InvalidSignatureError;
/**
 * Error for a method that needs to be implemented
 */
class NotImplementedError extends ExtendableError {
    constructor(message) {
        super(message);
    }
}
exports.NotImplementedError = NotImplementedError;
/**
 * Error for not supported features
 */
class NotSupported extends ExtendableError {
    constructor(message) {
        super(message);
    }
}
exports.NotSupported = NotSupported;
/**
 * Error for invalid seed, public, or private keys
 */
class InvalidKey extends ExtendableError {
    constructor(message) {
        super(message);
    }
}
exports.InvalidKey = InvalidKey;
/**
 * Error for invalid mint/token
 */
class UnsupportedTokenError extends ExtendableError {
    constructor(message) {
        super(message);
    }
}
exports.UnsupportedTokenError = UnsupportedTokenError;
class DuplicateMethodError extends ExtendableError {
    constructor(message) {
        super(message);
    }
}
exports.DuplicateMethodError = DuplicateMethodError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FjY291bnQtbGliL2Jhc2VDb2luL2Vycm9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7O0dBR0c7QUFDSCxNQUFhLGVBQWdCLFNBQVEsS0FBSztJQUN4QyxZQUFZLE9BQU87UUFDakIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztRQUNsQyxJQUFJLE9BQU8sS0FBSyxDQUFDLGlCQUFpQixLQUFLLFVBQVUsRUFBRTtZQUNqRCxLQUFLLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNqRDthQUFNO1lBQ0wsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUM7U0FDdkM7SUFDSCxDQUFDO0NBQ0Y7QUFWRCwwQ0FVQztBQUVELE1BQWEscUJBQXNCLFNBQVEsZUFBZTtJQUN4RCxZQUFZLE9BQWU7UUFDekIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pCLENBQUM7Q0FDRjtBQUpELHNEQUlDO0FBRUQsTUFBYSxZQUFhLFNBQVEsZUFBZTtJQUMvQyxZQUFZLE9BQWU7UUFDekIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pCLENBQUM7Q0FDRjtBQUpELG9DQUlDO0FBRUQsTUFBYSxxQkFBc0IsU0FBUSxlQUFlO0lBQ3hELFlBQVksT0FBZTtRQUN6QixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakIsQ0FBQztDQUNGO0FBSkQsc0RBSUM7QUFFRCxNQUFhLFVBQVcsU0FBUSxlQUFlO0lBQzdDLFlBQVksT0FBZTtRQUN6QixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakIsQ0FBQztDQUNGO0FBSkQsZ0NBSUM7QUFFRCxNQUFhLHNCQUF1QixTQUFRLGVBQWU7SUFDekQsWUFBWSxPQUFlO1FBQ3pCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNqQixDQUFDO0NBQ0Y7QUFKRCx3REFJQztBQUVEOztHQUVHO0FBQ0gsTUFBYSwwQkFBMkIsU0FBUSxlQUFlO0lBQzdELFlBQVksT0FBZTtRQUN6QixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakIsQ0FBQztDQUNGO0FBSkQsZ0VBSUM7QUFFRDs7R0FFRztBQUNILE1BQWEscUJBQXNCLFNBQVEsZUFBZTtJQUN4RCxZQUFZLE9BQWU7UUFDekIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pCLENBQUM7Q0FDRjtBQUpELHNEQUlDO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLG1CQUFvQixTQUFRLGVBQWU7SUFDdEQsWUFBWSxPQUFlO1FBQ3pCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNqQixDQUFDO0NBQ0Y7QUFKRCxrREFJQztBQUVEOztHQUVHO0FBQ0gsTUFBYSxZQUFhLFNBQVEsZUFBZTtJQUMvQyxZQUFZLE9BQWU7UUFDekIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pCLENBQUM7Q0FDRjtBQUpELG9DQUlDO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLFVBQVcsU0FBUSxlQUFlO0lBQzdDLFlBQVksT0FBZTtRQUN6QixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakIsQ0FBQztDQUNGO0FBSkQsZ0NBSUM7QUFFRDs7R0FFRztBQUNILE1BQWEscUJBQXNCLFNBQVEsZUFBZTtJQUN4RCxZQUFZLE9BQWU7UUFDekIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pCLENBQUM7Q0FDRjtBQUpELHNEQUlDO0FBRUQsTUFBYSxvQkFBcUIsU0FBUSxlQUFlO0lBQ3ZELFlBQVksT0FBZTtRQUN6QixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakIsQ0FBQztDQUNGO0FBSkQsb0RBSUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgYmFzZSBjbGFzcyBlbnN1cmVzIHRoYXQgb3VyIHN0YWNrIHRyYWNlIGlzIGNhcHR1cmVkIHByb3Blcmx5IGJ1dCBhbHNvIHRoYXQgd2UgaGF2ZSBjbGFzc2VzIG9mIGVycm9yc1xuICogdGhhdCBjYW4gYmUgZm91bmQgaW4gYSBzd2l0Y2guXG4gKi9cbmV4cG9ydCBjbGFzcyBFeHRlbmRhYmxlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLm5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgaWYgKHR5cGVvZiBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RhY2sgPSBuZXcgRXJyb3IobWVzc2FnZSkuc3RhY2s7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQYXJzZVRyYW5zYWN0aW9uRXJyb3IgZXh0ZW5kcyBFeHRlbmRhYmxlRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU2lnbmluZ0Vycm9yIGV4dGVuZHMgRXh0ZW5kYWJsZUVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJ1aWxkVHJhbnNhY3Rpb25FcnJvciBleHRlbmRzIEV4dGVuZGFibGVFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVdGlsc0Vycm9yIGV4dGVuZHMgRXh0ZW5kYWJsZUVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEV4dGVuZFRyYW5zYWN0aW9uRXJyb3IgZXh0ZW5kcyBFeHRlbmRhYmxlRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgfVxufVxuXG4vKipcbiAqIEVycm9yIGZvciBhbiBpbnZhbGlkIHZhbHVlIGZvciBhIGNvbnRyYWN0IG1ldGhvZCBwYXJhbWV0ZXJcbiAqL1xuZXhwb3J0IGNsYXNzIEludmFsaWRQYXJhbWV0ZXJWYWx1ZUVycm9yIGV4dGVuZHMgRXh0ZW5kYWJsZUVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBFcnJvciBwcm9kdWNlZCBieSBub3QgdHJ1dGh5IHNpZ25hdHVyZSB2YWx1ZXNcbiAqL1xuZXhwb3J0IGNsYXNzIEludmFsaWRTaWduYXR1cmVFcnJvciBleHRlbmRzIEV4dGVuZGFibGVFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICB9XG59XG5cbi8qKlxuICogRXJyb3IgZm9yIGEgbWV0aG9kIHRoYXQgbmVlZHMgdG8gYmUgaW1wbGVtZW50ZWRcbiAqL1xuZXhwb3J0IGNsYXNzIE5vdEltcGxlbWVudGVkRXJyb3IgZXh0ZW5kcyBFeHRlbmRhYmxlRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgfVxufVxuXG4vKipcbiAqIEVycm9yIGZvciBub3Qgc3VwcG9ydGVkIGZlYXR1cmVzXG4gKi9cbmV4cG9ydCBjbGFzcyBOb3RTdXBwb3J0ZWQgZXh0ZW5kcyBFeHRlbmRhYmxlRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgfVxufVxuXG4vKipcbiAqIEVycm9yIGZvciBpbnZhbGlkIHNlZWQsIHB1YmxpYywgb3IgcHJpdmF0ZSBrZXlzXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnZhbGlkS2V5IGV4dGVuZHMgRXh0ZW5kYWJsZUVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBFcnJvciBmb3IgaW52YWxpZCBtaW50L3Rva2VuXG4gKi9cbmV4cG9ydCBjbGFzcyBVbnN1cHBvcnRlZFRva2VuRXJyb3IgZXh0ZW5kcyBFeHRlbmRhYmxlRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRHVwbGljYXRlTWV0aG9kRXJyb3IgZXh0ZW5kcyBFeHRlbmRhYmxlRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgfVxufVxuIl19