"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isBlsKey = exports.isDkg = exports.isPublicKey = exports.isPrivateKey = exports.isSeed = void 0;
/**
 * @param source
 */
function isSeed(source) {
    return source.seed !== undefined;
}
exports.isSeed = isSeed;
/**
 * @param source
 */
function isPrivateKey(source) {
    return source.prv !== undefined;
}
exports.isPrivateKey = isPrivateKey;
/**
 * @param source
 */
function isPublicKey(source) {
    return source.pub !== undefined;
}
exports.isPublicKey = isPublicKey;
/**
 * @param source
 */
function isDkg(source) {
    const dkg = source;
    return dkg.threshold !== undefined && dkg.participants !== undefined;
}
exports.isDkg = isDkg;
/**
 * Checks if the provided source is of type `BlsKeys`.
 * @param source
 */
function isBlsKey(source) {
    const bls = source;
    return bls.publicShare !== undefined && bls.secretShares !== undefined;
}
exports.isBlsKey = isBlsKey;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWZhY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYWNjb3VudC1saWIvYmFzZUNvaW4vaWZhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBbURBOztHQUVHO0FBQ0gsU0FBZ0IsTUFBTSxDQUFDLE1BQXNCO0lBQzNDLE9BQVEsTUFBZSxDQUFDLElBQUksS0FBSyxTQUFTLENBQUM7QUFDN0MsQ0FBQztBQUZELHdCQUVDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixZQUFZLENBQUMsTUFBc0I7SUFDakQsT0FBUSxNQUFxQixDQUFDLEdBQUcsS0FBSyxTQUFTLENBQUM7QUFDbEQsQ0FBQztBQUZELG9DQUVDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixXQUFXLENBQUMsTUFBc0I7SUFDaEQsT0FBUSxNQUFvQixDQUFDLEdBQUcsS0FBSyxTQUFTLENBQUM7QUFDakQsQ0FBQztBQUZELGtDQUVDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixLQUFLLENBQUMsTUFBc0I7SUFDMUMsTUFBTSxHQUFHLEdBQUcsTUFBb0IsQ0FBQztJQUNqQyxPQUFPLEdBQUcsQ0FBQyxTQUFTLEtBQUssU0FBUyxJQUFJLEdBQUcsQ0FBQyxZQUFZLEtBQUssU0FBUyxDQUFDO0FBQ3ZFLENBQUM7QUFIRCxzQkFHQztBQUVEOzs7R0FHRztBQUNILFNBQWdCLFFBQVEsQ0FBQyxNQUFzQjtJQUM3QyxNQUFNLEdBQUcsR0FBRyxNQUFpQixDQUFDO0lBQzlCLE9BQU8sR0FBRyxDQUFDLFdBQVcsS0FBSyxTQUFTLElBQUksR0FBRyxDQUFDLFlBQVksS0FBSyxTQUFTLENBQUM7QUFDekUsQ0FBQztBQUhELDRCQUdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVRyYW5zYWN0aW9uRXhwbGFuYXRpb24gfSBmcm9tICcuLi8uLi9iaXRnbyc7XG5pbXBvcnQgeyBCYXNlVHJhbnNhY3Rpb25CdWlsZGVyIH0gZnJvbSAnLi9iYXNlVHJhbnNhY3Rpb25CdWlsZGVyJztcbmltcG9ydCB7IEJhc2VUcmFuc2FjdGlvbkJ1aWxkZXJGYWN0b3J5IH0gZnJvbSAnLi9iYXNlVHJhbnNhY3Rpb25CdWlsZGVyRmFjdG9yeSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUtleSB7XG4gIGtleTogYW55O1xufVxuXG4vKipcbiAqIEEgcHJpdmF0ZSBrZXkgaW4gZXh0ZW5kZWQgb3IgcmF3IGZvcm1hdFxuICovXG5leHBvcnQgdHlwZSBQcml2YXRlS2V5ID0ge1xuICBwcnY6IHN0cmluZztcbn07XG5cbi8qKlxuICogQSBwdWJsaWMga2V5IGluIGV4dGVuZGVkLCBjb21wcmVzc2VkLCBvciB1bmNvbXByZXNzZWQgZm9ybWF0XG4gKi9cbmV4cG9ydCB0eXBlIFB1YmxpY0tleSA9IHtcbiAgcHViOiBzdHJpbmc7XG59O1xuXG4vKipcbiAqIEEgc2VlZCB0byBjcmVhdGUga2V5IHBhaXJzLiBNdXN0IGJlIGJldHdlZW4gMTYgYW5kIDY0IEJ5dGVzIGxvbmdcbiAqL1xuZXhwb3J0IHR5cGUgU2VlZCA9IHtcbiAgc2VlZDogQnVmZmVyO1xufTtcblxuLyoqXG4gKiBUaGUgbnVtYmVyIG9mIHBhcnRpY2lwYW50cyBmb3Igd2hpY2ggdG8gZ2VuZXJhdGUgc2hhcmVzIGFuZCBhIHRocmVzaG9sZCBvZiB0aG9zZSB0aGF0IHdvdWxkIGJlIHJlcXVpcmVkIHdoZW4gc2lnbmluZ1xuICovXG5leHBvcnQgdHlwZSBEa2dPcHRpb25zID0ge1xuICB0aHJlc2hvbGQ6IG51bWJlcjtcbiAgcGFydGljaXBhbnRzOiBudW1iZXI7XG59O1xuXG4vKipcbiAqIFJlcHJlc2VudGF0aW9uIG9mIGEgU2lnbmF0dXJlIHRvIGJlIGFkZGVkIHRvIGEgVHJhbnNhY3Rpb24uXG4gKi9cbmV4cG9ydCB0eXBlIFNpZ25hdHVyZSA9IHtcbiAgcHVibGljS2V5OiBQdWJsaWNLZXk7XG4gIHNpZ25hdHVyZTogQnVmZmVyO1xufTtcblxuZXhwb3J0IHR5cGUgQmxzS2V5UGFpck9wdGlvbnMgPSBEa2dPcHRpb25zIHwgQmxzS2V5cztcblxuZXhwb3J0IHR5cGUgS2V5UGFpck9wdGlvbnMgPSBTZWVkIHwgUHJpdmF0ZUtleSB8IFB1YmxpY0tleSB8IEJsc0tleVBhaXJPcHRpb25zO1xuXG5leHBvcnQgdHlwZSBCYXNlQnVpbGRlciA9IEJhc2VUcmFuc2FjdGlvbkJ1aWxkZXIgfCBCYXNlVHJhbnNhY3Rpb25CdWlsZGVyRmFjdG9yeTtcblxuLyoqXG4gKiBAcGFyYW0gc291cmNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1NlZWQoc291cmNlOiBLZXlQYWlyT3B0aW9ucyk6IHNvdXJjZSBpcyBTZWVkIHtcbiAgcmV0dXJuIChzb3VyY2UgYXMgU2VlZCkuc2VlZCAhPT0gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEBwYXJhbSBzb3VyY2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJpdmF0ZUtleShzb3VyY2U6IEtleVBhaXJPcHRpb25zKTogc291cmNlIGlzIFByaXZhdGVLZXkge1xuICByZXR1cm4gKHNvdXJjZSBhcyBQcml2YXRlS2V5KS5wcnYgIT09IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBAcGFyYW0gc291cmNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1B1YmxpY0tleShzb3VyY2U6IEtleVBhaXJPcHRpb25zKTogc291cmNlIGlzIFB1YmxpY0tleSB7XG4gIHJldHVybiAoc291cmNlIGFzIFB1YmxpY0tleSkucHViICE9PSB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHNvdXJjZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNEa2coc291cmNlOiBLZXlQYWlyT3B0aW9ucyk6IHNvdXJjZSBpcyBEa2dPcHRpb25zIHtcbiAgY29uc3QgZGtnID0gc291cmNlIGFzIERrZ09wdGlvbnM7XG4gIHJldHVybiBka2cudGhyZXNob2xkICE9PSB1bmRlZmluZWQgJiYgZGtnLnBhcnRpY2lwYW50cyAhPT0gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgcHJvdmlkZWQgc291cmNlIGlzIG9mIHR5cGUgYEJsc0tleXNgLlxuICogQHBhcmFtIHNvdXJjZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNCbHNLZXkoc291cmNlOiBLZXlQYWlyT3B0aW9ucyk6IHNvdXJjZSBpcyBCbHNLZXlzIHtcbiAgY29uc3QgYmxzID0gc291cmNlIGFzIEJsc0tleXM7XG4gIHJldHVybiBibHMucHVibGljU2hhcmUgIT09IHVuZGVmaW5lZCAmJiBibHMuc2VjcmV0U2hhcmVzICE9PSB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogS2V5IHBhaXIgaW4gdGhlIHByb3RvY29sIGRlZmF1bHQgZm9ybWF0LlxuICovXG5leHBvcnQgdHlwZSBEZWZhdWx0S2V5cyA9IHtcbiAgcHJ2Pzogc3RyaW5nO1xuICBwdWI6IHN0cmluZztcbn07XG5cbi8qKlxuICogS2V5IHBhaXIgaW4gVWludDhBcnJheSBmb3JtYXQuXG4gKi9cbmV4cG9ydCB0eXBlIEJ5dGVLZXlzID0ge1xuICBwcnY/OiBVaW50OEFycmF5O1xuICBwdWI6IFVpbnQ4QXJyYXk7XG59O1xuXG4vKipcbiAqIEtleSBwYWlyIGluIGV4dGVuZGVkIGZvcm1hdC4gVXNlZCBmb3IgY29pbnMgc3VwcG9ydGluZyBzZWNwMjU2azEgZWxsaXB0aWMgY3VydmUuXG4gKi9cbmV4cG9ydCB0eXBlIEV4dGVuZGVkS2V5cyA9IHtcbiAgeHBydj86IHN0cmluZztcbiAgeHB1Yjogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBCTFMgc2lnbmF0dXJlIGtleXMuXG4gKi9cbmV4cG9ydCB0eXBlIEJsc0tleXMgPSB7XG4gIHBydj86IHN0cmluZztcbiAgc2VjcmV0U2hhcmVzOiBzdHJpbmdbXTtcbiAgcHVibGljU2hhcmU6IHN0cmluZztcbiAgc2VlZDogc3RyaW5nO1xuICBjaGFpbmNvZGU6IHN0cmluZztcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUFkZHJlc3Mge1xuICBhZGRyZXNzOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW50cnkgZXh0ZW5kcyBCYXNlQWRkcmVzcyB7XG4gIGNvaW4/OiBzdHJpbmc7XG4gIHZhbHVlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUZlZSB7XG4gIGZlZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zYWN0aW9uUmVjaXBpZW50IHtcbiAgYWRkcmVzczogc3RyaW5nO1xuICBhbW91bnQ6IHN0cmluZyB8IG51bWJlcjtcbiAgbWVtbz86IHN0cmluZztcbiAgdG9rZW5OYW1lPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zYWN0aW9uRmVlIHtcbiAgZmVlOiBzdHJpbmc7XG4gIGZlZVJhdGU/OiBudW1iZXI7XG4gIHNpemU/OiBudW1iZXI7XG4gIHR5cGU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNhY3Rpb25PdXRwdXRzIHtcbiAgb3V0cHV0czogVHJhbnNhY3Rpb25SZWNpcGllbnRbXTtcbiAgb3V0cHV0QW1vdW50OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNhY3Rpb25DaGFuZ2VzIHtcbiAgY2hhbmdlT3V0cHV0czogVHJhbnNhY3Rpb25SZWNpcGllbnRbXTtcbiAgY2hhbmdlQW1vdW50OiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIFRyYW5zYWN0aW9uRXhwbGFuYXRpb24gPSBJVHJhbnNhY3Rpb25FeHBsYW5hdGlvbjxUcmFuc2FjdGlvbkZlZT47XG4vKipcbiAqIEZlZSBvcHRpb25zLlxuICovXG5leHBvcnQgdHlwZSBGZWVPcHRpb25zID0ge1xuICBhbW91bnQ6IG51bWJlciB8IHN0cmluZztcbiAgdW5pdD86ICdiYXNlVW5pdCcgfCAnY3B1JyB8ICdyYW0nO1xuICBmb3JtdWxhPzogJ2ZpeGVkJyB8ICdmZWVSYXRlJyB8ICdwZXJLQicgfCAnY3VzdG9tJztcbiAgdHlwZT86ICdiYXNlJyB8ICdtYXgnIHwgJ3RpcCc7XG59O1xuXG4vKipcbiAqIFRoZSB2YWxpZGl0eSB3aW5kb3cgc2lnbmFscyB3aGVuIGEgdHJhbnNhY3Rpb24gY2FuIGJlIGluY2x1ZGVkIGluIHRoZSBuZXR3b3JrLlxuICogIFZhbGlkaXR5V2luZG93IGluZm9ybWF0aW9uIGlzIHN0b3JlZCBhcyBwYXJ0IG9mIHRoZSB0cmFuc2FjdGlvbiBkYXRhIGluIHRoZSBpbmRleGVyIGFuZCB3YWxsZXQgcGxhdGZvcm0sIHVubGVzcyBpdCBpcyBhYnNvbHV0ZWx5IG5lY2Vzc2FyeS5cbiAqIGZpcnN0VmFsaWQ6IHRoZSBhYnNvbHV0ZSBibG9jay90aW1lIGFmdGVyIHdoaWNoIHRoZSB0cmFuc2FjdGlvbiBpcyB2YWxpZFxuICogbGFzdFZhbGlkOiB0aGUgYWJzb2x1dGUgYmxvY2svdGltZSBiZWZvcmUgd2hpY2ggdGhlIHRyYW5zYWN0aW9uIGlzIHZhbGlkXG4gKiBtaW5EdXJhdGlvbjogbWluaW11bSBkdXJhdGlvbiBhIHRyYW5zYWN0aW9uIGZvciB0aGlzIGNvaW4gaXMgdmFsaWRcbiAqIG1heER1cmF0aW9uOiBtYXhpbXVtIGR1cmF0aW9uIGEgdHJhbnNhY3Rpb24gZm9yIHRoaXMgY29pbiBpcyB2YWxpZFxuICogbWluRHVyYXRpb24gYW5kIG1heER1cmF0aW9uIGFyZSBkZWZpbmVkIHBlciBibG9ja2NoYWluLCB3aGVyZWFzIGZpcnN0VmFsaWQgYW5kIGxhc3RWYWxpZCBhcmUgZGVmaW5lZCBwZXIgdHJhbnNhY3Rpb25cbiAqIHVuaXQ6IHZhbGlkaXR5IHdpbmRvdyB3aWxsIGJlIG1lYXN1cmUgaW4gYmxvY2toZWlnaCBvciB0aW1lc3RhbXBcbiAqIFRPRE86IHZhbGlkaXR5V2luZG93IGNvbnN0cmFpbnQgbWV0aG9kcyB3aWxsIGJlIHRha2VuIG9uOiBodHRwczovL2JpdGdvaW5jLmF0bGFzc2lhbi5uZXQvYnJvd3NlL1NUTFgtMTA4MDBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBWYWxpZGl0eVdpbmRvdyB7XG4gIGZpcnN0VmFsaWQ/OiBudW1iZXI7XG4gIGxhc3RWYWxpZD86IG51bWJlcjtcbiAgbWluRHVyYXRpb24/OiBudW1iZXI7XG4gIG1heER1cmF0aW9uPzogbnVtYmVyO1xuICB1bml0PzogJ2Jsb2NraGVpZ2h0JyB8ICd0aW1lc3RhbXAnO1xufVxuXG4vKipcbiAqIFNlcXVlbmNlIElkcyBhcmUgdXNlZCB0byBkaWZmZXJlbnRpYXRlIHBheW1lbnRzIGNvbWluZyBmcm9tIHRoZSBzYW1lIGFjY291bnQgYW5kIHRvIHByZXZlbnQgYWNjaWRlbnRhbCBkb3VibGUgc3BlbmRzIGFuZCByZXBsYXkgYXR0YWNrcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTZXF1ZW5jZUlkIHtcbiAgbmFtZTogJ05vbmNlJyB8ICdTZXF1ZW5jZSBJZCcgfCAnQ291bnRlcic7XG4gIGtleXdvcmQ6ICdub25jZScgfCAnc2VxdWVuY2VJZCcgfCAnY291bnRlcic7XG4gIHZhbHVlOiBzdHJpbmcgfCBudW1iZXI7XG59XG4iXX0=