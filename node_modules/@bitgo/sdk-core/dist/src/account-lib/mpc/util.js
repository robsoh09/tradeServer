"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPaillierPublicKey = exports.clamp = exports.bigIntToBufferBE = exports.bigIntFromBufferBE = exports.bigIntFromU8ABE = exports.bigIntToBufferLE = exports.bigIntFromBufferLE = exports.combineRound4DklsDsgMessages = void 0;
const sdk_lib_mpc_1 = require("@bitgo/sdk-lib-mpc");
Object.defineProperty(exports, "bigIntFromBufferLE", { enumerable: true, get: function () { return sdk_lib_mpc_1.bigIntFromBufferLE; } });
Object.defineProperty(exports, "bigIntToBufferLE", { enumerable: true, get: function () { return sdk_lib_mpc_1.bigIntToBufferLE; } });
Object.defineProperty(exports, "bigIntFromU8ABE", { enumerable: true, get: function () { return sdk_lib_mpc_1.bigIntFromU8ABE; } });
Object.defineProperty(exports, "bigIntFromBufferBE", { enumerable: true, get: function () { return sdk_lib_mpc_1.bigIntFromBufferBE; } });
Object.defineProperty(exports, "bigIntToBufferBE", { enumerable: true, get: function () { return sdk_lib_mpc_1.bigIntToBufferBE; } });
Object.defineProperty(exports, "clamp", { enumerable: true, get: function () { return sdk_lib_mpc_1.clamp; } });
Object.defineProperty(exports, "getPaillierPublicKey", { enumerable: true, get: function () { return sdk_lib_mpc_1.getPaillierPublicKey; } });
/**
 * Combines serialized partial signatures from parties participating in DSG.
 * @param round4DsgMessages - round 4 serialized broadcast messages payloads from participating parties
 * @returns {DklsTypes.SerializedDklsSignature} - serialized final signature
 */
function combineRound4DklsDsgMessages(round4DsgMessages) {
    var _a;
    const round4DsgMessagesDeser = round4DsgMessages.map(sdk_lib_mpc_1.DklsTypes.deserializeBroadcastMessage);
    const signatureR = (_a = round4DsgMessagesDeser.find((m) => m.signatureR !== undefined)) === null || _a === void 0 ? void 0 : _a.signatureR;
    if (!signatureR) {
        throw Error('None of the round 4 Dkls messages contain a Signature.R value.');
    }
    const signatureDeser = sdk_lib_mpc_1.DklsUtils.combinePartialSignatures(round4DsgMessagesDeser.map((m) => m.payload), Buffer.from(signatureR).toString('hex'));
    return {
        R: Buffer.from(signatureDeser.R).toString('hex'),
        S: Buffer.from(signatureDeser.S).toString('hex'),
    };
}
exports.combineRound4DklsDsgMessages = combineRound4DklsDsgMessages;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hY2NvdW50LWxpYi9tcGMvdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvREFVNEI7QUE2QjFCLG1HQXRDQSxnQ0FBa0IsT0FzQ0E7QUFDbEIsaUdBdENBLDhCQUFnQixPQXNDQTtBQUNoQixnR0F0Q0EsNkJBQWUsT0FzQ0E7QUFDZixtR0F0Q0EsZ0NBQWtCLE9Bc0NBO0FBQ2xCLGlHQXRDQSw4QkFBZ0IsT0FzQ0E7QUFDaEIsc0ZBdENBLG1CQUFLLE9Bc0NBO0FBQ0wscUdBdENBLGtDQUFvQixPQXNDQTtBQWpDdEI7Ozs7R0FJRztBQUNILFNBQWdCLDRCQUE0QixDQUMxQyxpQkFBeUQ7O0lBRXpELE1BQU0sc0JBQXNCLEdBQUcsaUJBQWlCLENBQUMsR0FBRyxDQUFDLHVCQUFTLENBQUMsMkJBQTJCLENBQUMsQ0FBQztJQUM1RixNQUFNLFVBQVUsR0FBRyxNQUFBLHNCQUFzQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsS0FBSyxTQUFTLENBQUMsMENBQUUsVUFBVSxDQUFDO0lBQzlGLElBQUksQ0FBQyxVQUFVLEVBQUU7UUFDZixNQUFNLEtBQUssQ0FBQyxnRUFBZ0UsQ0FBQyxDQUFDO0tBQy9FO0lBQ0QsTUFBTSxjQUFjLEdBQUcsdUJBQVMsQ0FBQyx3QkFBd0IsQ0FDdkQsc0JBQXNCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQzVDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUN4QyxDQUFDO0lBQ0YsT0FBTztRQUNMLENBQUMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1FBQ2hELENBQUMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO0tBQ2pELENBQUM7QUFDSixDQUFDO0FBaEJELG9FQWdCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGJpZ0ludEZyb21CdWZmZXJMRSxcbiAgYmlnSW50VG9CdWZmZXJMRSxcbiAgYmlnSW50RnJvbVU4QUJFLFxuICBiaWdJbnRGcm9tQnVmZmVyQkUsXG4gIGJpZ0ludFRvQnVmZmVyQkUsXG4gIGNsYW1wLFxuICBnZXRQYWlsbGllclB1YmxpY0tleSxcbiAgRGtsc1V0aWxzLFxuICBEa2xzVHlwZXMsXG59IGZyb20gJ0BiaXRnby9zZGstbGliLW1wYyc7XG5cbi8qKlxuICogQ29tYmluZXMgc2VyaWFsaXplZCBwYXJ0aWFsIHNpZ25hdHVyZXMgZnJvbSBwYXJ0aWVzIHBhcnRpY2lwYXRpbmcgaW4gRFNHLlxuICogQHBhcmFtIHJvdW5kNERzZ01lc3NhZ2VzIC0gcm91bmQgNCBzZXJpYWxpemVkIGJyb2FkY2FzdCBtZXNzYWdlcyBwYXlsb2FkcyBmcm9tIHBhcnRpY2lwYXRpbmcgcGFydGllc1xuICogQHJldHVybnMge0RrbHNUeXBlcy5TZXJpYWxpemVkRGtsc1NpZ25hdHVyZX0gLSBzZXJpYWxpemVkIGZpbmFsIHNpZ25hdHVyZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tYmluZVJvdW5kNERrbHNEc2dNZXNzYWdlcyhcbiAgcm91bmQ0RHNnTWVzc2FnZXM6IERrbHNUeXBlcy5TZXJpYWxpemVkQnJvYWRjYXN0TWVzc2FnZVtdXG4pOiBEa2xzVHlwZXMuU2VyaWFsaXplZERrbHNTaWduYXR1cmUge1xuICBjb25zdCByb3VuZDREc2dNZXNzYWdlc0Rlc2VyID0gcm91bmQ0RHNnTWVzc2FnZXMubWFwKERrbHNUeXBlcy5kZXNlcmlhbGl6ZUJyb2FkY2FzdE1lc3NhZ2UpO1xuICBjb25zdCBzaWduYXR1cmVSID0gcm91bmQ0RHNnTWVzc2FnZXNEZXNlci5maW5kKChtKSA9PiBtLnNpZ25hdHVyZVIgIT09IHVuZGVmaW5lZCk/LnNpZ25hdHVyZVI7XG4gIGlmICghc2lnbmF0dXJlUikge1xuICAgIHRocm93IEVycm9yKCdOb25lIG9mIHRoZSByb3VuZCA0IERrbHMgbWVzc2FnZXMgY29udGFpbiBhIFNpZ25hdHVyZS5SIHZhbHVlLicpO1xuICB9XG4gIGNvbnN0IHNpZ25hdHVyZURlc2VyID0gRGtsc1V0aWxzLmNvbWJpbmVQYXJ0aWFsU2lnbmF0dXJlcyhcbiAgICByb3VuZDREc2dNZXNzYWdlc0Rlc2VyLm1hcCgobSkgPT4gbS5wYXlsb2FkKSxcbiAgICBCdWZmZXIuZnJvbShzaWduYXR1cmVSKS50b1N0cmluZygnaGV4JylcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICBSOiBCdWZmZXIuZnJvbShzaWduYXR1cmVEZXNlci5SKS50b1N0cmluZygnaGV4JyksXG4gICAgUzogQnVmZmVyLmZyb20oc2lnbmF0dXJlRGVzZXIuUykudG9TdHJpbmcoJ2hleCcpLFxuICB9O1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIC0gdXNlIGV4cG9ydGVkIG1ldGhvZHMgZnJvbSBAYml0Z28vc2RrLWxpYi1tcGMgaW5zdGVhZFxuICovXG5leHBvcnQge1xuICBiaWdJbnRGcm9tQnVmZmVyTEUsXG4gIGJpZ0ludFRvQnVmZmVyTEUsXG4gIGJpZ0ludEZyb21VOEFCRSxcbiAgYmlnSW50RnJvbUJ1ZmZlckJFLFxuICBiaWdJbnRUb0J1ZmZlckJFLFxuICBjbGFtcCxcbiAgZ2V0UGFpbGxpZXJQdWJsaWNLZXksXG59O1xuIl19