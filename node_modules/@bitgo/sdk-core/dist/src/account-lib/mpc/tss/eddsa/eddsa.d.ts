/// <reference types="node" />
import { Ed25519Curve } from '../../curves';
import Shamir from '../../shamir';
import { KeyShare, UShare, YShare, KeyCombine, PShare, SubkeyShare, JShare, SignShare, Signature, XShare, RShare, GShare } from './types';
import { HDTree } from '@bitgo/sdk-lib-mpc';
export default class Eddsa {
    static curve: Ed25519Curve;
    static shamir: Shamir;
    static initialized: boolean;
    static initialize(hdTree?: HDTree): Promise<Eddsa>;
    hdTree?: HDTree;
    constructor(hdTree?: HDTree);
    keyShare(index: number, threshold: number, numShares: number, seed?: Buffer): KeyShare;
    keyCombine(uShare: UShare, yShares: YShare[]): KeyCombine;
    /**
     * Derives a child common keychain from common keychain
     *
     * @param commonKeychain - common keychain as a hex string
     * @param path - bip32 path
     * @return {string} derived common keychain as a hex string
     */
    deriveUnhardened(commonKeychain: string, path: string): string;
    keyDerive(uShare: UShare, yShares: YShare[], path: string): SubkeyShare;
    signShare(message: Buffer, pShare: PShare, jShares: JShare[], seed?: Buffer): SignShare;
    sign(message: Buffer, playerShare: XShare, rShares: RShare[], yShares?: YShare[]): GShare;
    signCombine(shares: GShare[]): Signature;
    verify(message: Buffer, signature: Signature): boolean;
    private validateCommitment;
}
//# sourceMappingURL=eddsa.d.ts.map