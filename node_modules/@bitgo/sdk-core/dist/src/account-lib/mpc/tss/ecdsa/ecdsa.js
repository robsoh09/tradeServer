"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const paillierBigint = __importStar(require("paillier-bigint"));
const bigintCryptoUtils = __importStar(require("bigint-crypto-utils"));
const secp = __importStar(require("@noble/secp256k1"));
const crypto_1 = require("crypto");
const utxo_lib_1 = require("@bitgo/utxo-lib");
const util_1 = require("../../util");
const curves_1 = require("../../curves");
const sdk_lib_mpc_1 = require("@bitgo/sdk-lib-mpc");
const _5n = BigInt(5);
// Size of alpha and mu shares in bytes expected by the implementation of the protocol
const ALPHAMUSIZE = 768;
/**
 * ECDSA TSS implementation supporting 2:n Threshold
 */
class Ecdsa {
    /**
     * Generate shares for participant at index and split keys `(threshold,numShares)` ways.
     * @param {number} index participant index
     * @param {number} threshold Signing threshold
     * @param {number} numShares  Number of shares
     * @param {Buffer} seed optional 64 byte seed to use for key generation
     * @param sync optional sync flag, if true then a synchronous version of Paillier key generation is used that does not spawn Worker threads.
     * @returns {Promise<KeyShare>} Returns the private p-share
     * and n-shares to be distributed to participants at their corresponding index.
     */
    async keyShare(index, threshold, numShares, seed, sync = false) {
        var _a, _b;
        if (!(index > 0 && index <= numShares && threshold <= numShares && threshold === 2)) {
            throw 'Invalid KeyShare Config';
        }
        if (seed && seed.length < 64) {
            throw new Error('Seed must have a length of at least 64 bytes');
        }
        let seedWithValidLength = seed;
        if (seed && seed.length > 64) {
            // if seed length is greater than 64 bytes, hash seed to 64 bytes.
            seedWithValidLength = (0, crypto_1.createHash)('sha512').update(seed).digest();
        }
        // Generate additively homomorphic encryption key.
        let paillierKeyPair;
        if (!sync) {
            paillierKeyPair = await paillierBigint.generateRandomKeys(sdk_lib_mpc_1.minModulusBitLength, true);
        }
        else {
            // eslint-disable-next-line no-sync
            paillierKeyPair = paillierBigint.generateRandomKeysSync(sdk_lib_mpc_1.minModulusBitLength, true);
        }
        const { publicKey, privateKey } = paillierKeyPair;
        // Accept a 64 byte seed and create an extended private key from that seed
        const secretKey = seedWithValidLength && utxo_lib_1.bip32.fromSeed(seedWithValidLength);
        const u = (_a = (secretKey && secretKey.privateKey && (0, util_1.bigIntFromU8ABE)(new Uint8Array(secretKey.privateKey)))) !== null && _a !== void 0 ? _a : Ecdsa.curve.scalarRandom();
        const y = Ecdsa.curve.basePointMult(u);
        const chaincode = (_b = (secretKey && secretKey.chainCode)) !== null && _b !== void 0 ? _b : (0, crypto_1.randomBytes)(32);
        // Compute secret shares of the private key
        const { shares: uShares, v } = Ecdsa.shamir.split(u, threshold, numShares);
        const currentParticipant = {
            i: index,
            t: threshold,
            c: numShares,
            l: (0, util_1.bigIntToBufferBE)(privateKey.lambda, 192).toString('hex'),
            m: (0, util_1.bigIntToBufferBE)(privateKey.mu, 192).toString('hex'),
            n: (0, util_1.bigIntToBufferBE)(publicKey.n, 384).toString('hex'),
            y: (0, util_1.bigIntToBufferBE)(y, 33).toString('hex'),
            u: (0, util_1.bigIntToBufferBE)(uShares[index], 32).toString('hex'),
            uu: u.toString(),
            chaincode: chaincode.toString('hex'),
        };
        const keyShare = {
            pShare: currentParticipant,
            nShares: {},
        };
        for (const share in uShares) {
            const participantIndex = parseInt(share, 10);
            if (participantIndex !== index) {
                keyShare.nShares[participantIndex] = {
                    i: participantIndex,
                    j: currentParticipant['i'],
                    n: publicKey.n.toString(16),
                    y: (0, util_1.bigIntToBufferBE)(y, 33).toString('hex'),
                    v: (0, util_1.bigIntToBufferBE)(v[0], 33).toString('hex'),
                    u: (0, util_1.bigIntToBufferBE)(uShares[participantIndex], 32).toString('hex'),
                    chaincode: chaincode.toString('hex'),
                };
            }
        }
        return keyShare;
    }
    /**
     * Combine data shared during the key generation protocol.
     * @param {KeyShare} participantShares private p-share and
     * n-shares received from all other participants.
     * @returns {KeyCombined} Returns the participant private x-share
     * and y-shares to be used when generating signing shares.
     */
    keyCombine(pShare, nShares) {
        const allShares = [pShare, ...nShares];
        // Compute the public key.
        const y = allShares.map((participant) => (0, sdk_lib_mpc_1.hexToBigInt)(participant['y'])).reduce(Ecdsa.curve.pointAdd);
        // Add secret shares
        const x = allShares.map((participant) => (0, sdk_lib_mpc_1.hexToBigInt)(participant['u'])).reduce(Ecdsa.curve.scalarAdd);
        // Verify shares.
        for (const share of nShares) {
            if (share.v) {
                try {
                    Ecdsa.shamir.verify((0, sdk_lib_mpc_1.hexToBigInt)(share.u), [(0, sdk_lib_mpc_1.hexToBigInt)(share.y), (0, sdk_lib_mpc_1.hexToBigInt)(share.v)], pShare.i);
                }
                catch (err) {
                    throw new Error(`Could not verify share from participant ${share.j}. Verification error: ${err}`);
                }
            }
        }
        // Generate Schnorr proof of knowledge of the discrete log of X = xG.
        const X = Ecdsa.curve.basePointMult(x);
        const proofContext = (0, crypto_1.createHash)('sha256').update((0, util_1.bigIntToBufferBE)(y, Ecdsa.curve.pointBytes)).digest();
        const schnorrProofX = sdk_lib_mpc_1.Schnorr.createSchnorrProof(X, x, Ecdsa.curve, proofContext);
        // Chaincode will be used in future when we add support for key derivation for ecdsa
        const chaincodes = [pShare, ...nShares].map(({ chaincode }) => (0, util_1.bigIntFromBufferBE)(Buffer.from(chaincode, 'hex')));
        const chaincode = chaincodes.reduce((acc, chaincode) => (acc + chaincode) % BigInt('0x010000000000000000000000000000000000000000000000000000000000000000') // 2^256
        );
        const participants = {
            xShare: {
                i: pShare.i,
                l: pShare.l,
                m: pShare.m,
                n: pShare.n,
                y: (0, util_1.bigIntToBufferBE)(y, 33).toString('hex'),
                x: (0, util_1.bigIntToBufferBE)(x, 32).toString('hex'),
                schnorrProofX: schnorrProofX,
                chaincode: (0, util_1.bigIntToBufferBE)(chaincode, 32).toString('hex'),
            },
            yShares: {},
        };
        for (const share in nShares) {
            const participantIndex = nShares[share]['j'];
            participants.yShares[participantIndex] = {
                i: pShare.i,
                j: nShares[share]['j'],
                n: nShares[share]['n'],
            };
        }
        return participants;
    }
    /**
     * Derive shares for a BIP-32 subkey.
     * @param {PShare} The user's p-share.
     * @param {NShare[]} The n-shares received from the other participants.
     * @param {string} The BIP-32 path to derive.
     * @returns {SubkeyShare} Returns the private x-share and n-shares to
     * be distributed to participants at their corresponding index.
     */
    keyDerive(pShare, nShares, path) {
        const yValues = [pShare, ...nShares].map((share) => (0, sdk_lib_mpc_1.hexToBigInt)(share.y));
        const y = yValues.reduce((partial, share) => Ecdsa.curve.pointAdd(partial, share));
        const u = BigInt(pShare.uu);
        let contribChaincode = (0, sdk_lib_mpc_1.hexToBigInt)(pShare.chaincode);
        const chaincodes = [contribChaincode, ...nShares.map(({ chaincode }) => (0, sdk_lib_mpc_1.hexToBigInt)(chaincode))];
        const chaincode = chaincodes.reduce((acc, chaincode) => (acc + chaincode) % sdk_lib_mpc_1.chaincodeBase);
        // Verify shares.
        for (const share of nShares) {
            if (share.v) {
                try {
                    Ecdsa.shamir.verify((0, sdk_lib_mpc_1.hexToBigInt)(share.u), [(0, sdk_lib_mpc_1.hexToBigInt)(share.y), (0, sdk_lib_mpc_1.hexToBigInt)(share.v)], pShare.i);
                }
                catch (err) {
                    throw new Error(`Could not verify share from participant ${share.j}. Verification error: ${err}`);
                }
            }
        }
        // Derive subkey.
        const subkey = Ecdsa.hdTree.privateDerive({ pk: y, sk: u, chaincode }, path);
        // Calculate new public key contribution.
        const contribY = Ecdsa.curve.basePointMult(subkey.sk);
        // Calculate new chaincode contribution.
        const chaincodeDelta = (sdk_lib_mpc_1.chaincodeBase + subkey.chaincode - chaincode) % sdk_lib_mpc_1.chaincodeBase;
        contribChaincode = (contribChaincode + chaincodeDelta) % sdk_lib_mpc_1.chaincodeBase;
        // Calculate new u values.
        const { shares: split_u, v } = Ecdsa.shamir.split(subkey.sk, pShare.t || 2, pShare.c || 3);
        // Calculate new signing key.
        const x = [split_u[pShare.i], ...nShares.map(({ u }) => (0, sdk_lib_mpc_1.hexToBigInt)(u))].reduce(Ecdsa.curve.scalarAdd);
        // Generate Schnorr proof of knowledge of the discrete log of X = xG.
        const X = Ecdsa.curve.basePointMult(x);
        const proofContext = (0, crypto_1.createHash)('sha256').update((0, util_1.bigIntToBufferBE)(subkey.pk, Ecdsa.curve.pointBytes)).digest();
        const schnorrProofX = sdk_lib_mpc_1.Schnorr.createSchnorrProof(X, x, Ecdsa.curve, proofContext);
        const P_i = {
            i: pShare.i,
            l: pShare.l,
            m: pShare.m,
            n: pShare.n,
            y: (0, util_1.bigIntToBufferBE)(subkey.pk, 33).toString('hex'),
            x: (0, util_1.bigIntToBufferBE)(x, 32).toString('hex'),
            schnorrProofX: schnorrProofX,
            chaincode: (0, util_1.bigIntToBufferBE)(subkey.chaincode, 32).toString('hex'),
        };
        const shares = {
            xShare: P_i,
            nShares: {},
        };
        for (let ind = 0; ind < nShares.length; ind++) {
            const P_j = nShares[ind];
            shares.nShares[P_j.j] = {
                i: P_j.j,
                j: P_i.i,
                n: P_i.n,
                u: (0, util_1.bigIntToBufferBE)(split_u[P_j.j], 32).toString('hex'),
                y: (0, util_1.bigIntToBufferBE)(contribY, 32).toString('hex'),
                v: (0, util_1.bigIntToBufferBE)(v[0], 32).toString('hex'),
                chaincode: (0, util_1.bigIntToBufferBE)(contribChaincode, 32).toString('hex'),
            };
        }
        return shares;
    }
    /**
     * Verify Schnorr proof of knowledge of the discrete log of X_i = x_i * G.
     * @param Y The combined public key.
     * @param VSSs The VSS shares received from all participants.
     * @param index The i of X_i.
     * @param proof The schnorr proof.
     * @returns True if it's a valid proof with regards to Y and VSSs.
     */
    verifySchnorrProofX(Y, VSSs, index, proof) {
        if (index < 1 || index > VSSs.length) {
            throw new Error('Invalid value supplied for index');
        }
        // Calculate X_i from public information.
        let X_i = Y;
        VSSs.forEach((VSS) => {
            VSS.forEach((v) => {
                X_i = Ecdsa.curve.pointAdd(X_i, Ecdsa.curve.pointMultiply(v, BigInt(index)));
            });
        });
        const proofContext = (0, crypto_1.createHash)('sha256').update((0, util_1.bigIntToBufferBE)(Y, Ecdsa.curve.pointBytes)).digest();
        return sdk_lib_mpc_1.Schnorr.verifySchnorrProof(X_i, proof, Ecdsa.curve, proofContext);
    }
    /**
     * Derives a child common keychain from common keychain
     *
     * @param {commonKeychain} The common keychain as a hex string.
     * @param {path} The BIP-32 path to derive.
     * @return {string} The derived common keychain as a hex string.
     */
    deriveUnhardened(commonKeychain, path) {
        if (Ecdsa.hdTree === undefined) {
            throw new Error("Can't derive key without HDTree implementation");
        }
        const keychain = Buffer.from(commonKeychain, 'hex');
        const derivedPublicKeychain = Ecdsa.hdTree.publicDerive({
            pk: (0, util_1.bigIntFromBufferBE)(keychain.slice(0, 33)),
            chaincode: (0, util_1.bigIntFromBufferBE)(keychain.slice(33)),
        }, path);
        const derivedPk = (0, util_1.bigIntToBufferBE)(derivedPublicKeychain.pk, 33).toString('hex');
        const derivedChaincode = (0, util_1.bigIntToBufferBE)(derivedPublicKeychain.chaincode, 32).toString('hex');
        return derivedPk + derivedChaincode;
    }
    /**
     * Appends a given range proof challenge to the shares previously created
     * by #keyCombine. Generates a new challenge if not provided.
     * @param {XShare | YShare} share Private xShare or yShare of the signing operation
     * @param rangeProofChallenge - challenge generated via generateNtilde
     * @param paillierProofChallenge
     * @returns {KeyCombined} The share with amended challenge values
     */
    appendChallenge(share, rangeProofChallenge, paillierProofChallenge) {
        const { ntilde, h1, h2 } = rangeProofChallenge;
        return {
            ...share,
            ntilde,
            h1,
            h2,
            p: paillierProofChallenge.p,
        };
    }
    /**
     * Create signing shares.
     * @param {xShare} xShare Private xShare of current participant signer
     * @param {YShare} yShare yShare corresponding to the other participant signer
     * @returns {SignShareRT} Returns the participant private w-share
     * and k-share to be distributed to other participant signer
     */
    async signShare(xShare, yShare) {
        const pk = (0, util_1.getPaillierPublicKey)((0, sdk_lib_mpc_1.hexToBigInt)(xShare.n));
        const k = Ecdsa.curve.scalarRandom();
        const rk = await (0, sdk_lib_mpc_1.randomPositiveCoPrimeTo)(pk.n);
        const ck = pk.encrypt(k, rk);
        const gamma = Ecdsa.curve.scalarRandom();
        const d = Ecdsa.curve.scalarMult(Ecdsa.curve.scalarSub(BigInt(yShare.j), BigInt(xShare.i)), BigInt(xShare.i));
        const w = [
            Ecdsa.curve.scalarMult(BigInt(yShare.j), BigInt(xShare.i)),
            (0, sdk_lib_mpc_1.hexToBigInt)(xShare['x']),
            Ecdsa.curve.scalarInvert(d),
        ].reduce(Ecdsa.curve.scalarMult);
        const { ntilde: ntildea, h1: h1a, h2: h2a } = xShare;
        const wShare = {
            i: xShare.i,
            l: xShare.l,
            m: xShare.m,
            n: xShare.n,
            y: xShare.y,
            ntilde: ntildea,
            h1: h1a,
            h2: h2a,
            p: xShare.p,
            k: (0, util_1.bigIntToBufferBE)(k, 32).toString('hex'),
            ck: (0, util_1.bigIntToBufferBE)(ck, 768).toString('hex'),
            w: (0, util_1.bigIntToBufferBE)(w, 32).toString('hex'),
            gamma: (0, util_1.bigIntToBufferBE)(gamma, 32).toString('hex'),
        };
        const { ntilde: ntildeb, h1: h1b, h2: h2b } = yShare;
        const proof = await sdk_lib_mpc_1.EcdsaRangeProof.prove(Ecdsa.curve, sdk_lib_mpc_1.minModulusBitLength, pk, {
            ntilde: (0, sdk_lib_mpc_1.hexToBigInt)(ntildeb),
            h1: (0, sdk_lib_mpc_1.hexToBigInt)(h1b),
            h2: (0, sdk_lib_mpc_1.hexToBigInt)(h2b),
        }, ck, k, rk);
        // create paillier challenge proof based on the other signers challenge
        // only send sigma if we also send challenge p
        const sigma = sdk_lib_mpc_1.EcdsaPaillierProof.prove((0, sdk_lib_mpc_1.hexToBigInt)(xShare.n), (0, sdk_lib_mpc_1.hexToBigInt)(xShare.l), sdk_lib_mpc_1.EcdsaTypes.deserializePaillierChallenge({ p: yShare.p }).p);
        const proofShare = {
            z: (0, util_1.bigIntToBufferBE)(proof.z, 384).toString('hex'),
            u: (0, util_1.bigIntToBufferBE)(proof.u, 768).toString('hex'),
            w: (0, util_1.bigIntToBufferBE)(proof.w, 384).toString('hex'),
            s: (0, util_1.bigIntToBufferBE)(proof.s, 384).toString('hex'),
            s1: (0, util_1.bigIntToBufferBE)(proof.s1, 96).toString('hex'),
            s2: (0, util_1.bigIntToBufferBE)(proof.s2, 480).toString('hex'),
        };
        const kShare = {
            // this share will be sent to the other participant,
            // so we need to swap the i and j values here
            // so that they know it's their kShare, produced by us
            i: yShare.j,
            j: xShare.i,
            n: pk.n.toString(16),
            ntilde: ntildea,
            h1: h1a,
            h2: h2a,
            p: xShare.p,
            k: (0, util_1.bigIntToBufferBE)(ck, 768).toString('hex'),
            sigma: sdk_lib_mpc_1.EcdsaTypes.serializePaillierChallengeProofs({ sigma: sigma }).sigma,
            proof: proofShare,
        };
        return {
            wShare,
            kShare,
        };
    }
    /**
     * Perform multiplicitive-to-additive (MtA) share conversion with another signer.
     * Connection 1.2 in https://lucid.app/lucidchart/7061785b-bc5c-4002-b546-3f4a3612fc62/edit?page=IAVmvYO4FvKc#
     * If signer A completed signShare initially (input to this fn), then this step is completed by signer B.
     * @param {SignConvert} shares
     * @returns {SignConvertRT}
     */
    async signConvertStep1(shares) {
        const receivedKShare = shares.kShare;
        const xShare = shares.xShare; // currentParticipant secret xShare
        const yShare = {
            ...shares.yShare,
            ntilde: receivedKShare.ntilde,
            h1: receivedKShare.h1,
            h2: receivedKShare.h2,
            p: receivedKShare.p,
        };
        const signShare = await this.signShare(xShare, yShare);
        const shareParticipant = signShare.wShare;
        if (shareParticipant.i !== receivedKShare.i) {
            throw new Error('Shares from same participant');
        }
        if (!receivedKShare.proof) {
            throw new Error('Unexpected missing proof on aShareToBeSent');
        }
        // the other participants paillier public key
        const n = (0, sdk_lib_mpc_1.hexToBigInt)(receivedKShare.n);
        const pka = (0, util_1.getPaillierPublicKey)(n);
        // the other participant's range proof challenge
        const ntildea = (0, sdk_lib_mpc_1.hexToBigInt)(receivedKShare.ntilde);
        const h1a = (0, sdk_lib_mpc_1.hexToBigInt)(receivedKShare.h1);
        const h2a = (0, sdk_lib_mpc_1.hexToBigInt)(receivedKShare.h2);
        // the current participant's range proof challenge
        const ntildeb = (0, sdk_lib_mpc_1.hexToBigInt)(shareParticipant.ntilde);
        const h1b = (0, sdk_lib_mpc_1.hexToBigInt)(shareParticipant.h1);
        const h2b = (0, sdk_lib_mpc_1.hexToBigInt)(shareParticipant.h2);
        const k = (0, sdk_lib_mpc_1.hexToBigInt)(receivedKShare.k);
        // the current participants paillier proof challenge
        const shareParticipantPaillierChallenge = sdk_lib_mpc_1.EcdsaTypes.deserializePaillierChallenge({ p: shareParticipant.p });
        // the other signing parties proof to the current participants paillier proof challenge
        const receivedPaillierChallengeProof = sdk_lib_mpc_1.EcdsaTypes.deserializePaillierChallengeProofs({
            sigma: receivedKShare.sigma,
        });
        if (!(await sdk_lib_mpc_1.EcdsaPaillierProof.verify(n, shareParticipantPaillierChallenge.p, receivedPaillierChallengeProof.sigma))) {
            throw new Error('Could not verify signing A share paillier proof');
        }
        if (!sdk_lib_mpc_1.EcdsaRangeProof.verify(Ecdsa.curve, sdk_lib_mpc_1.minModulusBitLength, pka, {
            ntilde: ntildeb,
            h1: h1b,
            h2: h2b,
        }, {
            z: (0, sdk_lib_mpc_1.hexToBigInt)(receivedKShare.proof.z),
            u: (0, sdk_lib_mpc_1.hexToBigInt)(receivedKShare.proof.u),
            w: (0, sdk_lib_mpc_1.hexToBigInt)(receivedKShare.proof.w),
            s: (0, sdk_lib_mpc_1.hexToBigInt)(receivedKShare.proof.s),
            s1: (0, sdk_lib_mpc_1.hexToBigInt)(receivedKShare.proof.s1),
            s2: (0, sdk_lib_mpc_1.hexToBigInt)(receivedKShare.proof.s2),
        }, k)) {
            throw new Error('Could not verify signing A share proof');
        }
        // MtA $k_j, \gamma_i$.
        const beta0 = bigintCryptoUtils.randBetween(Ecdsa.curve.order() ** _5n);
        const beta = (0, util_1.bigIntToBufferBE)(Ecdsa.curve.scalarNegate(Ecdsa.curve.scalarReduce(beta0)), 32).toString('hex');
        const g = (0, sdk_lib_mpc_1.hexToBigInt)(shareParticipant.gamma);
        const rb = await (0, sdk_lib_mpc_1.randomPositiveCoPrimeTo)(pka.n);
        const cb = pka.encrypt(beta0, rb);
        const alpha = pka.addition(pka.multiply(k, g), cb);
        const alphaToBeSent = (0, util_1.bigIntToBufferBE)(alpha, ALPHAMUSIZE).toString('hex');
        // Prove $\gamma_i \in Z_{N^2}$.
        const gx = Ecdsa.curve.basePointMult(g);
        let proof = await sdk_lib_mpc_1.EcdsaRangeProof.proveWithCheck(Ecdsa.curve, sdk_lib_mpc_1.minModulusBitLength, pka, {
            ntilde: ntildea,
            h1: h1a,
            h2: h2a,
        }, k, alpha, g, beta0, rb, gx);
        const gammaProofToBeSent = {
            z: (0, util_1.bigIntToBufferBE)(proof.z, 384).toString('hex'),
            zprm: (0, util_1.bigIntToBufferBE)(proof.zprm, 384).toString('hex'),
            t: (0, util_1.bigIntToBufferBE)(proof.t, 384).toString('hex'),
            v: (0, util_1.bigIntToBufferBE)(proof.v, 768).toString('hex'),
            w: (0, util_1.bigIntToBufferBE)(proof.w, 384).toString('hex'),
            s: (0, util_1.bigIntToBufferBE)(proof.s, 384).toString('hex'),
            s1: (0, util_1.bigIntToBufferBE)(proof.s1, 96).toString('hex'),
            s2: (0, util_1.bigIntToBufferBE)(proof.s2, 480).toString('hex'),
            t1: (0, util_1.bigIntToBufferBE)(proof.t1, 224).toString('hex'),
            t2: (0, util_1.bigIntToBufferBE)(proof.t2, 480).toString('hex'),
            u: (0, util_1.bigIntToBufferBE)(proof.u, 33).toString('hex'),
            x: (0, util_1.bigIntToBufferBE)(gx, 33).toString('hex'),
        };
        // MtA $k_j, w_i$.
        const nu0 = bigintCryptoUtils.randBetween(Ecdsa.curve.order() ** _5n);
        const nu = (0, util_1.bigIntToBufferBE)(Ecdsa.curve.scalarNegate(Ecdsa.curve.scalarReduce(nu0)), 32).toString('hex');
        const w = (0, sdk_lib_mpc_1.hexToBigInt)(shareParticipant.w);
        const rn = await (0, sdk_lib_mpc_1.randomPositiveCoPrimeTo)(pka.n);
        const cn = pka.encrypt(nu0, rn);
        const mu = pka.addition(pka.multiply(k, w), cn);
        const muToBeSent = (0, util_1.bigIntToBufferBE)(mu, ALPHAMUSIZE).toString('hex');
        // Prove $\w_i \in Z_{N^2}$.
        const wx = Ecdsa.curve.basePointMult(w);
        proof = await sdk_lib_mpc_1.EcdsaRangeProof.proveWithCheck(Ecdsa.curve, sdk_lib_mpc_1.minModulusBitLength, pka, {
            ntilde: ntildea,
            h1: h1a,
            h2: h2a,
        }, k, (0, sdk_lib_mpc_1.hexToBigInt)(muToBeSent), w, nu0, rn, wx);
        const wProofToBeSent = {
            z: (0, util_1.bigIntToBufferBE)(proof.z, 384).toString('hex'),
            zprm: (0, util_1.bigIntToBufferBE)(proof.zprm, 384).toString('hex'),
            t: (0, util_1.bigIntToBufferBE)(proof.t, 384).toString('hex'),
            v: (0, util_1.bigIntToBufferBE)(proof.v, 768).toString('hex'),
            w: (0, util_1.bigIntToBufferBE)(proof.w, 384).toString('hex'),
            s: (0, util_1.bigIntToBufferBE)(proof.s, 384).toString('hex'),
            s1: (0, util_1.bigIntToBufferBE)(proof.s1, 96).toString('hex'),
            s2: (0, util_1.bigIntToBufferBE)(proof.s2, 480).toString('hex'),
            t1: (0, util_1.bigIntToBufferBE)(proof.t1, 224).toString('hex'),
            t2: (0, util_1.bigIntToBufferBE)(proof.t2, 480).toString('hex'),
            u: (0, util_1.bigIntToBufferBE)(proof.u, 33).toString('hex'),
            x: (0, util_1.bigIntToBufferBE)(wx, 33).toString('hex'),
        };
        const nToBeSent = signShare.kShare.n;
        const ntildeToBeSent = (0, util_1.bigIntToBufferBE)(ntildeb, 384).toString('hex');
        const h1ToBeSent = (0, util_1.bigIntToBufferBE)(h1b, 384).toString('hex');
        const h2ToBeSent = (0, util_1.bigIntToBufferBE)(h2b, 384).toString('hex');
        const kToBeSent = signShare.kShare.k;
        const proofToBeSent = signShare.kShare.proof;
        const [iToBeSent, jToBeSent] = [receivedKShare.j, receivedKShare.i];
        return {
            aShare: {
                i: iToBeSent,
                j: jToBeSent,
                ntilde: ntildeToBeSent,
                h1: h1ToBeSent,
                h2: h2ToBeSent,
                n: nToBeSent,
                k: kToBeSent,
                alpha: alphaToBeSent,
                mu: muToBeSent,
                proof: proofToBeSent,
                gammaProof: gammaProofToBeSent,
                wProof: wProofToBeSent,
                // provide the share participants proof
                // to the paillier challenge in the receivedKShare from the other signer
                sigma: signShare.kShare.sigma,
            },
            bShare: {
                ...shareParticipant,
                beta,
                nu,
            },
        };
    }
    /**
     * Perform multiplicitive-to-additive (MtA) share conversion with another
     * signer.
     * Connection 2.1 in https://lucid.app/lucidchart/7061785b-bc5c-4002-b546-3f4a3612fc62/edit?page=IAVmvYO4FvKc#
     * If signer B completed signConvertStep1, then this step is completed by signer A.
     * @param {SignConvert} shares
     * @returns {SignConvertRT}
     */
    async signConvertStep2(shares) {
        const receivedAShare = shares.aShare;
        if (!receivedAShare.gammaProof) {
            throw new Error('Unexpected missing gammaProof on aShareToBeSent');
        }
        if (!receivedAShare.wProof) {
            throw new Error('Unexpected missing wProof on aShareToBeSent');
        }
        const n = (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.n); // Paillier pub from other signer
        // current participant public key
        const pka = (0, util_1.getPaillierPublicKey)((0, sdk_lib_mpc_1.hexToBigInt)(shares.wShare.n));
        const ntildea = (0, sdk_lib_mpc_1.hexToBigInt)(shares.wShare.ntilde);
        const h1a = (0, sdk_lib_mpc_1.hexToBigInt)(shares.wShare.h1);
        const h2a = (0, sdk_lib_mpc_1.hexToBigInt)(shares.wShare.h2);
        const ck = (0, sdk_lib_mpc_1.hexToBigInt)(shares.wShare.ck);
        const shareParticipantPaillierChallenge = sdk_lib_mpc_1.EcdsaTypes.deserializePaillierChallenge({ p: shares.wShare.p });
        const receivedPaillierChallengeProof = sdk_lib_mpc_1.EcdsaTypes.deserializePaillierChallengeProofs({
            sigma: shares.aShare.sigma,
        });
        if (!sdk_lib_mpc_1.EcdsaPaillierProof.verify(n, shareParticipantPaillierChallenge.p, receivedPaillierChallengeProof.sigma)) {
            throw new Error('could not verify signing share for paillier proof');
        }
        // Verify $\gamma_i \in Z_{N^2}$.
        if (!sdk_lib_mpc_1.EcdsaRangeProof.verifyWithCheck(Ecdsa.curve, sdk_lib_mpc_1.minModulusBitLength, pka, {
            ntilde: ntildea,
            h1: h1a,
            h2: h2a,
        }, {
            z: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.gammaProof.z),
            zprm: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.gammaProof.zprm),
            t: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.gammaProof.t),
            v: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.gammaProof.v),
            w: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.gammaProof.w),
            s: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.gammaProof.s),
            s1: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.gammaProof.s1),
            s2: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.gammaProof.s2),
            t1: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.gammaProof.t1),
            t2: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.gammaProof.t2),
            u: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.gammaProof.u),
        }, ck, (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.alpha), (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.gammaProof.x))) {
            throw new Error('could not verify signing share for gamma proof');
        }
        // Verify $\w_i \in Z_{N^2}$.
        if (!sdk_lib_mpc_1.EcdsaRangeProof.verifyWithCheck(Ecdsa.curve, sdk_lib_mpc_1.minModulusBitLength, pka, {
            ntilde: ntildea,
            h1: h1a,
            h2: h2a,
        }, {
            z: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.wProof.z),
            zprm: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.wProof.zprm),
            t: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.wProof.t),
            v: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.wProof.v),
            w: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.wProof.w),
            s: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.wProof.s),
            s1: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.wProof.s1),
            s2: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.wProof.s2),
            t1: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.wProof.t1),
            t2: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.wProof.t2),
            u: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.wProof.u),
        }, ck, (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.mu), (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.wProof.x))) {
            throw new Error('could not verify share for wProof');
        }
        const sk = new paillierBigint.PrivateKey((0, sdk_lib_mpc_1.hexToBigInt)(shares.wShare.l), (0, sdk_lib_mpc_1.hexToBigInt)(shares.wShare.m), pka);
        const gShareAlpha = (0, util_1.bigIntToBufferBE)(Ecdsa.curve.scalarReduce(sk.decrypt((0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.alpha))), 32).toString('hex');
        const gShareMu = (0, util_1.bigIntToBufferBE)(Ecdsa.curve.scalarReduce(sk.decrypt((0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.mu))), // recheck encrypted number
        32).toString('hex');
        if (!receivedAShare.proof) {
            throw new Error('Unexpected missing proof on aShareToBeSent');
        }
        const pkb = (0, util_1.getPaillierPublicKey)(n);
        const ntildeb = (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.ntilde);
        const h1b = (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.h1);
        const h2b = (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.h2);
        const k = (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.k);
        if (!sdk_lib_mpc_1.EcdsaRangeProof.verify(Ecdsa.curve, sdk_lib_mpc_1.minModulusBitLength, pkb, {
            ntilde: ntildea,
            h1: h1a,
            h2: h2a,
        }, {
            z: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.proof.z),
            u: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.proof.u),
            w: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.proof.w),
            s: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.proof.s),
            s1: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.proof.s1),
            s2: (0, sdk_lib_mpc_1.hexToBigInt)(receivedAShare.proof.s2),
        }, k)) {
            throw new Error('Could not verify signing A share proof');
        }
        // MtA $k_j, \gamma_i$.
        const beta0 = bigintCryptoUtils.randBetween(Ecdsa.curve.order() ** _5n);
        const gShareBeta = (0, util_1.bigIntToBufferBE)(Ecdsa.curve.scalarNegate(Ecdsa.curve.scalarReduce(beta0)), 32).toString('hex');
        const g = (0, sdk_lib_mpc_1.hexToBigInt)(shares.wShare.gamma);
        const rb = await (0, sdk_lib_mpc_1.randomPositiveCoPrimeTo)(pkb.n);
        const cb = pkb.encrypt(beta0, rb);
        const alpha = pkb.addition(pkb.multiply(k, g), cb);
        const alphaToBeSent = (0, util_1.bigIntToBufferBE)(alpha, ALPHAMUSIZE).toString('hex');
        // Prove $\gamma_i \in Z_{N^2}$.
        const gx = Ecdsa.curve.basePointMult(g);
        let proof = await sdk_lib_mpc_1.EcdsaRangeProof.proveWithCheck(Ecdsa.curve, sdk_lib_mpc_1.minModulusBitLength, pkb, {
            ntilde: ntildeb,
            h1: h1b,
            h2: h2b,
        }, k, alpha, g, beta0, rb, gx);
        const gammaProofToBeSent = {
            z: (0, util_1.bigIntToBufferBE)(proof.z, 384).toString('hex'),
            zprm: (0, util_1.bigIntToBufferBE)(proof.zprm, 384).toString('hex'),
            t: (0, util_1.bigIntToBufferBE)(proof.t, 384).toString('hex'),
            v: (0, util_1.bigIntToBufferBE)(proof.v, 768).toString('hex'),
            w: (0, util_1.bigIntToBufferBE)(proof.w, 384).toString('hex'),
            s: (0, util_1.bigIntToBufferBE)(proof.s, 384).toString('hex'),
            s1: (0, util_1.bigIntToBufferBE)(proof.s1, 96).toString('hex'),
            s2: (0, util_1.bigIntToBufferBE)(proof.s2, 480).toString('hex'),
            t1: (0, util_1.bigIntToBufferBE)(proof.t1, 224).toString('hex'),
            t2: (0, util_1.bigIntToBufferBE)(proof.t2, 480).toString('hex'),
            u: (0, util_1.bigIntToBufferBE)(proof.u, 33).toString('hex'),
            x: (0, util_1.bigIntToBufferBE)(gx, 33).toString('hex'),
        };
        // MtA $k_j, w_i$.
        const nu0 = bigintCryptoUtils.randBetween(Ecdsa.curve.order() ** _5n);
        const gShareNu = (0, util_1.bigIntToBufferBE)(Ecdsa.curve.scalarNegate(Ecdsa.curve.scalarReduce(nu0)), 32).toString('hex');
        const w = (0, sdk_lib_mpc_1.hexToBigInt)(shares.wShare.w);
        const rn = await (0, sdk_lib_mpc_1.randomPositiveCoPrimeTo)(pkb.n);
        const cn = pkb.encrypt(nu0, rn);
        const mu = pkb.addition(pkb.multiply(k, w), cn);
        const muToBeSent = (0, util_1.bigIntToBufferBE)(mu, ALPHAMUSIZE).toString('hex');
        // Prove $\w_i \in Z_{N^2}$.
        const wx = Ecdsa.curve.basePointMult(w);
        proof = await sdk_lib_mpc_1.EcdsaRangeProof.proveWithCheck(Ecdsa.curve, sdk_lib_mpc_1.minModulusBitLength, pkb, {
            ntilde: ntildeb,
            h1: h1b,
            h2: h2b,
        }, k, (0, sdk_lib_mpc_1.hexToBigInt)(muToBeSent), w, nu0, rn, wx);
        const wProofToBeSent = {
            z: (0, util_1.bigIntToBufferBE)(proof.z, 384).toString('hex'),
            zprm: (0, util_1.bigIntToBufferBE)(proof.zprm, 384).toString('hex'),
            t: (0, util_1.bigIntToBufferBE)(proof.t, 384).toString('hex'),
            v: (0, util_1.bigIntToBufferBE)(proof.v, 768).toString('hex'),
            w: (0, util_1.bigIntToBufferBE)(proof.w, 384).toString('hex'),
            s: (0, util_1.bigIntToBufferBE)(proof.s, 384).toString('hex'),
            s1: (0, util_1.bigIntToBufferBE)(proof.s1, 96).toString('hex'),
            s2: (0, util_1.bigIntToBufferBE)(proof.s2, 480).toString('hex'),
            t1: (0, util_1.bigIntToBufferBE)(proof.t1, 224).toString('hex'),
            t2: (0, util_1.bigIntToBufferBE)(proof.t2, 480).toString('hex'),
            u: (0, util_1.bigIntToBufferBE)(proof.u, 33).toString('hex'),
            x: (0, util_1.bigIntToBufferBE)(wx, 33).toString('hex'),
        };
        const [iToBeSent, jToBeSent] = [receivedAShare.j, receivedAShare.i];
        return {
            muShare: {
                i: iToBeSent,
                j: jToBeSent,
                alpha: alphaToBeSent,
                mu: muToBeSent,
                gammaProof: gammaProofToBeSent,
                wProof: wProofToBeSent,
            },
            gShare: {
                i: shares.wShare.i,
                n: shares.wShare.n,
                y: shares.wShare.y,
                k: shares.wShare.k,
                w: shares.wShare.w,
                gamma: shares.wShare.gamma,
                alpha: gShareAlpha,
                mu: gShareMu,
                beta: gShareBeta,
                nu: gShareNu,
            },
        };
    }
    /**
     * Perform multiplicitive-to-additive (MtA) share conversion with another signer.
     * Connection 2.2 in https://lucid.app/lucidchart/7061785b-bc5c-4002-b546-3f4a3612fc62/edit?page=IAVmvYO4FvKc#
     * If signer A completed signConvertStep2, then this step is completed by signer B.
     * @param {SignConvert} shares
     * @returns {SignConvertRT}
     */
    async signConvertStep3(shares) {
        const receivedMuShare = shares.muShare;
        if (!receivedMuShare.gammaProof) {
            throw new Error('Unexpected missing gammaProof on aShareToBeSent');
        }
        if (!receivedMuShare.wProof) {
            throw new Error('Unexpected missing wProof on aShareToBeSent');
        }
        const pka = (0, util_1.getPaillierPublicKey)((0, sdk_lib_mpc_1.hexToBigInt)(shares.bShare.n));
        const ntildea = (0, sdk_lib_mpc_1.hexToBigInt)(shares.bShare.ntilde);
        const h1a = (0, sdk_lib_mpc_1.hexToBigInt)(shares.bShare.h1);
        const h2a = (0, sdk_lib_mpc_1.hexToBigInt)(shares.bShare.h2);
        const ck = (0, sdk_lib_mpc_1.hexToBigInt)(shares.bShare.ck);
        // Verify $\gamma_i \in Z_{N^2}$.
        if (!sdk_lib_mpc_1.EcdsaRangeProof.verifyWithCheck(Ecdsa.curve, sdk_lib_mpc_1.minModulusBitLength, pka, {
            ntilde: ntildea,
            h1: h1a,
            h2: h2a,
        }, {
            z: (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.gammaProof.z),
            zprm: (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.gammaProof.zprm),
            t: (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.gammaProof.t),
            v: (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.gammaProof.v),
            w: (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.gammaProof.w),
            s: (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.gammaProof.s),
            s1: (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.gammaProof.s1),
            s2: (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.gammaProof.s2),
            t1: (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.gammaProof.t1),
            t2: (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.gammaProof.t2),
            u: (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.gammaProof.u),
        }, ck, (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.alpha), (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.gammaProof.x))) {
            throw new Error('could not verify signing share for gamma proof');
        }
        // Verify $\w_i \in Z_{N^2}$.
        if (!sdk_lib_mpc_1.EcdsaRangeProof.verifyWithCheck(Ecdsa.curve, sdk_lib_mpc_1.minModulusBitLength, pka, {
            ntilde: ntildea,
            h1: h1a,
            h2: h2a,
        }, {
            z: (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.wProof.z),
            zprm: (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.wProof.zprm),
            t: (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.wProof.t),
            v: (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.wProof.v),
            w: (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.wProof.w),
            s: (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.wProof.s),
            s1: (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.wProof.s1),
            s2: (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.wProof.s2),
            t1: (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.wProof.t1),
            t2: (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.wProof.t2),
            u: (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.wProof.u),
        }, ck, (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.mu), (0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.wProof.x))) {
            throw new Error('could not verify share for wProof');
        }
        const sk = new paillierBigint.PrivateKey((0, sdk_lib_mpc_1.hexToBigInt)(shares.bShare.l), (0, sdk_lib_mpc_1.hexToBigInt)(shares.bShare.m), pka);
        const alpha = sk.decrypt((0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.alpha));
        const gShareAlpha = (0, util_1.bigIntToBufferBE)(Ecdsa.curve.scalarReduce(alpha), 32).toString('hex');
        const mu = sk.decrypt((0, sdk_lib_mpc_1.hexToBigInt)(receivedMuShare.mu)); // recheck encrypted number
        const gShareMu = (0, util_1.bigIntToBufferBE)(Ecdsa.curve.scalarReduce(mu), 32).toString('hex');
        const [iToBeSent, jToBeSent] = [receivedMuShare.j, receivedMuShare.i];
        return {
            gShare: {
                i: shares.bShare.i,
                n: shares.bShare.n,
                y: shares.bShare.y,
                k: shares.bShare.k,
                w: shares.bShare.w,
                gamma: shares.bShare.gamma,
                alpha: gShareAlpha,
                mu: gShareMu,
                beta: shares.bShare.beta,
                nu: shares.bShare.nu,
            },
            signIndex: {
                i: iToBeSent,
                j: jToBeSent,
            },
        };
    }
    /**
     * Perform multiplicitive-to-additive (MtA) share conversion with another signer.
     * @deprecated - use one of [signConvertStep1, signConvertStep2, signConvertStep3] instead
     * @param {SignConvert} shares
     * @returns {SignConvertRT}
     */
    async signConvert(shares) {
        let shareParticipant, shareToBeSent;
        let isGammaShare = false;
        let kShare = {};
        if (shares.xShare && shares.yShare && shares.kShare) {
            const xShare = shares.xShare; // currentParticipant secret xShare
            const yShare = {
                ...shares.yShare,
                ntilde: shares.kShare.ntilde,
                h1: shares.kShare.h1,
                h2: shares.kShare.h2,
                p: shares.kShare.p,
            };
            const signShare = await this.signShare(xShare, yShare);
            kShare = signShare.kShare;
            shareToBeSent = { ...shares.kShare };
            shareParticipant = { ...signShare.wShare };
        }
        else if ((shares.bShare && shares.muShare) || (shares.aShare && shares.wShare)) {
            isGammaShare = true;
            shareToBeSent = shares.aShare ? { ...shares.aShare } : { ...shares.muShare };
            shareParticipant = shares.wShare ? { ...shares.wShare } : { ...shares.bShare };
        }
        else {
            throw new Error('Invalid config for Sign Convert');
        }
        if (shareParticipant.i !== shareToBeSent.i) {
            throw new Error('Shares from same participant');
        }
        if (shareToBeSent.alpha) {
            const bShareParticipant = shareParticipant;
            const aShareToBeSent = shareToBeSent;
            if (!aShareToBeSent.gammaProof) {
                throw new Error('Unexpected missing gammaProof on aShareToBeSent');
            }
            if (!aShareToBeSent.wProof) {
                throw new Error('Unexpected missing wProof on aShareToBeSent');
            }
            const pka = (0, util_1.getPaillierPublicKey)((0, sdk_lib_mpc_1.hexToBigInt)(bShareParticipant.n));
            let ntildea, h1a, h2a, ck;
            if (bShareParticipant.ntilde) {
                ntildea = (0, sdk_lib_mpc_1.hexToBigInt)(bShareParticipant.ntilde);
                h1a = (0, sdk_lib_mpc_1.hexToBigInt)(bShareParticipant.h1);
                h2a = (0, sdk_lib_mpc_1.hexToBigInt)(bShareParticipant.h2);
                ck = (0, sdk_lib_mpc_1.hexToBigInt)(bShareParticipant.ck);
            }
            // Verify $\gamma_i \in Z_{N^2}$.
            if (!sdk_lib_mpc_1.EcdsaRangeProof.verifyWithCheck(Ecdsa.curve, sdk_lib_mpc_1.minModulusBitLength, pka, {
                ntilde: ntildea,
                h1: h1a,
                h2: h2a,
            }, {
                z: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.gammaProof.z),
                zprm: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.gammaProof.zprm),
                t: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.gammaProof.t),
                v: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.gammaProof.v),
                w: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.gammaProof.w),
                s: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.gammaProof.s),
                s1: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.gammaProof.s1),
                s2: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.gammaProof.s2),
                t1: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.gammaProof.t1),
                t2: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.gammaProof.t2),
                u: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.gammaProof.u),
            }, ck, (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.alpha), (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.gammaProof.x))) {
                throw new Error('could not verify signing share for gamma proof');
            }
            // Verify $\w_i \in Z_{N^2}$.
            if (!sdk_lib_mpc_1.EcdsaRangeProof.verifyWithCheck(Ecdsa.curve, sdk_lib_mpc_1.minModulusBitLength, pka, {
                ntilde: ntildea,
                h1: h1a,
                h2: h2a,
            }, {
                z: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.wProof.z),
                zprm: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.wProof.zprm),
                t: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.wProof.t),
                v: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.wProof.v),
                w: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.wProof.w),
                s: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.wProof.s),
                s1: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.wProof.s1),
                s2: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.wProof.s2),
                t1: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.wProof.t1),
                t2: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.wProof.t2),
                u: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.wProof.u),
            }, ck, (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.mu), (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.wProof.x))) {
                throw new Error('could not verify share for wProof');
            }
            const sk = new paillierBigint.PrivateKey((0, sdk_lib_mpc_1.hexToBigInt)(bShareParticipant.l), (0, sdk_lib_mpc_1.hexToBigInt)(bShareParticipant.m), pka);
            const gShareParticipant = shareParticipant;
            const muShareToBeSent = shareToBeSent;
            const alpha = sk.decrypt((0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.alpha));
            gShareParticipant.alpha = (0, util_1.bigIntToBufferBE)(Ecdsa.curve.scalarReduce(alpha), 32).toString('hex');
            const mu = sk.decrypt((0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.mu)); // recheck encrypted number
            gShareParticipant.mu = (0, util_1.bigIntToBufferBE)(Ecdsa.curve.scalarReduce(mu), 32).toString('hex');
            const partialShareParticipant = shareParticipant;
            const partialShareToBeSent = muShareToBeSent;
            delete partialShareParticipant.l;
            delete partialShareParticipant.m;
            delete partialShareToBeSent.alpha;
            delete partialShareToBeSent.mu;
        }
        if (shareToBeSent.k) {
            const bShareParticipant = shareParticipant;
            const aShareToBeSent = shareToBeSent;
            if (!aShareToBeSent.proof) {
                throw new Error('Unexpected missing proof on aShareToBeSent');
            }
            const n = (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.n); // Paillier pub from other signer
            const pka = (0, util_1.getPaillierPublicKey)(n);
            const ntildea = (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.ntilde);
            const h1a = (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.h1);
            const h2a = (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.h2);
            const ntildeb = (0, sdk_lib_mpc_1.hexToBigInt)(bShareParticipant.ntilde);
            const h1b = (0, sdk_lib_mpc_1.hexToBigInt)(bShareParticipant.h1);
            const h2b = (0, sdk_lib_mpc_1.hexToBigInt)(bShareParticipant.h2);
            const k = (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.k);
            if (!sdk_lib_mpc_1.EcdsaRangeProof.verify(Ecdsa.curve, sdk_lib_mpc_1.minModulusBitLength, pka, {
                ntilde: ntildeb,
                h1: h1b,
                h2: h2b,
            }, {
                z: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.proof.z),
                u: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.proof.u),
                w: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.proof.w),
                s: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.proof.s),
                s1: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.proof.s1),
                s2: (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.proof.s2),
            }, k)) {
                throw new Error('Could not verify signing A share proof');
            }
            // MtA $k_j, \gamma_i$.
            const beta0 = bigintCryptoUtils.randBetween(Ecdsa.curve.order() ** _5n);
            bShareParticipant.beta = (0, util_1.bigIntToBufferBE)(Ecdsa.curve.scalarNegate(Ecdsa.curve.scalarReduce(beta0)), 32).toString('hex');
            const g = (0, sdk_lib_mpc_1.hexToBigInt)(bShareParticipant.gamma);
            const rb = await (0, sdk_lib_mpc_1.randomPositiveCoPrimeTo)(pka.n);
            const cb = pka.encrypt(beta0, rb);
            const alpha = pka.addition(pka.multiply(k, g), cb);
            aShareToBeSent.alpha = (0, util_1.bigIntToBufferBE)(alpha, 32).toString('hex');
            // Prove $\gamma_i \in Z_{N^2}$.
            const gx = Ecdsa.curve.basePointMult(g);
            let proof = await sdk_lib_mpc_1.EcdsaRangeProof.proveWithCheck(Ecdsa.curve, sdk_lib_mpc_1.minModulusBitLength, pka, {
                ntilde: ntildea,
                h1: h1a,
                h2: h2a,
            }, k, alpha, g, beta0, rb, gx);
            Object.assign(aShareToBeSent, {
                gammaProof: {
                    z: (0, util_1.bigIntToBufferBE)(proof.z, 384).toString('hex'),
                    zprm: (0, util_1.bigIntToBufferBE)(proof.zprm, 384).toString('hex'),
                    t: (0, util_1.bigIntToBufferBE)(proof.t, 384).toString('hex'),
                    v: (0, util_1.bigIntToBufferBE)(proof.v, 768).toString('hex'),
                    w: (0, util_1.bigIntToBufferBE)(proof.w, 384).toString('hex'),
                    s: (0, util_1.bigIntToBufferBE)(proof.s, 384).toString('hex'),
                    s1: (0, util_1.bigIntToBufferBE)(proof.s1, 96).toString('hex'),
                    s2: (0, util_1.bigIntToBufferBE)(proof.s2, 480).toString('hex'),
                    t1: (0, util_1.bigIntToBufferBE)(proof.t1, 224).toString('hex'),
                    t2: (0, util_1.bigIntToBufferBE)(proof.t2, 480).toString('hex'),
                    u: (0, util_1.bigIntToBufferBE)(proof.u, 33).toString('hex'),
                    x: (0, util_1.bigIntToBufferBE)(gx, 33).toString('hex'),
                },
            });
            // MtA $k_j, w_i$.
            const nu0 = bigintCryptoUtils.randBetween(Ecdsa.curve.order() ** _5n);
            shareParticipant.nu = (0, util_1.bigIntToBufferBE)(Ecdsa.curve.scalarNegate(Ecdsa.curve.scalarReduce(nu0)), 32).toString('hex');
            const w = (0, sdk_lib_mpc_1.hexToBigInt)(bShareParticipant.w);
            const rn = await (0, sdk_lib_mpc_1.randomPositiveCoPrimeTo)(pka.n);
            const cn = pka.encrypt(nu0, rn);
            const mu = pka.addition(pka.multiply(k, w), cn);
            shareToBeSent.mu = (0, util_1.bigIntToBufferBE)(mu, 32).toString('hex');
            // Prove $\w_i \in Z_{N^2}$.
            const wx = Ecdsa.curve.basePointMult(w);
            proof = await sdk_lib_mpc_1.EcdsaRangeProof.proveWithCheck(Ecdsa.curve, sdk_lib_mpc_1.minModulusBitLength, pka, {
                ntilde: ntildea,
                h1: h1a,
                h2: h2a,
            }, k, (0, sdk_lib_mpc_1.hexToBigInt)(aShareToBeSent.mu), w, nu0, rn, wx);
            Object.assign(shareToBeSent, {
                wProof: {
                    z: (0, util_1.bigIntToBufferBE)(proof.z, 384).toString('hex'),
                    zprm: (0, util_1.bigIntToBufferBE)(proof.zprm, 384).toString('hex'),
                    t: (0, util_1.bigIntToBufferBE)(proof.t, 384).toString('hex'),
                    v: (0, util_1.bigIntToBufferBE)(proof.v, 768).toString('hex'),
                    w: (0, util_1.bigIntToBufferBE)(proof.w, 384).toString('hex'),
                    s: (0, util_1.bigIntToBufferBE)(proof.s, 384).toString('hex'),
                    s1: (0, util_1.bigIntToBufferBE)(proof.s1, 96).toString('hex'),
                    s2: (0, util_1.bigIntToBufferBE)(proof.s2, 480).toString('hex'),
                    t1: (0, util_1.bigIntToBufferBE)(proof.t1, 224).toString('hex'),
                    t2: (0, util_1.bigIntToBufferBE)(proof.t2, 480).toString('hex'),
                    u: (0, util_1.bigIntToBufferBE)(proof.u, 33).toString('hex'),
                    x: (0, util_1.bigIntToBufferBE)(wx, 33).toString('hex'),
                },
            });
            if (shareParticipant.alpha) {
                const partialShareParticipant = shareParticipant;
                const partialShareToBeSent = shareToBeSent;
                delete partialShareParticipant.ntilde;
                delete partialShareParticipant.h1;
                delete partialShareParticipant.h2;
                delete partialShareParticipant.ck;
                delete partialShareToBeSent.n;
                delete partialShareToBeSent.ntilde;
                delete partialShareToBeSent.h1;
                delete partialShareToBeSent.h2;
                delete partialShareToBeSent.k;
                delete partialShareToBeSent.proof;
            }
            else {
                Object.assign(shareToBeSent, {
                    n: kShare.n,
                    ntilde: (0, util_1.bigIntToBufferBE)(ntildeb, 384).toString('hex'),
                    h1: (0, util_1.bigIntToBufferBE)(h1b, 384).toString('hex'),
                    h2: (0, util_1.bigIntToBufferBE)(h2b, 384).toString('hex'),
                    k: kShare.k,
                    proof: kShare.proof,
                });
            }
        }
        if (!('alpha' in shareToBeSent) && !('k' in shareToBeSent)) {
            const partialShareParticipant = shareParticipant;
            delete partialShareParticipant.ntilde;
            delete partialShareParticipant.h1;
            delete partialShareParticipant.h2;
            delete partialShareParticipant.ck;
            const muShareToBeSent = shareToBeSent;
            shareToBeSent = {
                i: muShareToBeSent.i,
                j: muShareToBeSent.j,
            };
        }
        [shareToBeSent.i, shareToBeSent.j] = [shareToBeSent.j, shareToBeSent.i];
        if (isGammaShare) {
            return {
                muShare: shareToBeSent,
                gShare: shareParticipant,
            };
        }
        return {
            aShare: shareToBeSent,
            bShare: shareParticipant,
        };
    }
    /**
     * Combine gamma shares to get the private omicron / delta shares
     * @param {SignCombine} shares
     * @returns {SignCombineRT}
     */
    signCombine(shares) {
        const gShare = shares.gShare;
        const S = shares.signIndex;
        const gamma = (0, sdk_lib_mpc_1.hexToBigInt)(gShare.gamma);
        const alpha = (0, sdk_lib_mpc_1.hexToBigInt)(gShare.alpha);
        const beta = (0, sdk_lib_mpc_1.hexToBigInt)(gShare.beta);
        const mu = (0, sdk_lib_mpc_1.hexToBigInt)(gShare.mu);
        const nu = (0, sdk_lib_mpc_1.hexToBigInt)(gShare.nu);
        const k = (0, sdk_lib_mpc_1.hexToBigInt)(gShare.k);
        const w = (0, sdk_lib_mpc_1.hexToBigInt)(gShare.w);
        const delta = Ecdsa.curve.scalarAdd(Ecdsa.curve.scalarMult(k, gamma), Ecdsa.curve.scalarAdd(alpha, beta));
        const omicron = Ecdsa.curve.scalarAdd(Ecdsa.curve.scalarMult(k, w), Ecdsa.curve.scalarAdd(mu, nu));
        const Gamma = Ecdsa.curve.basePointMult(gamma);
        return {
            oShare: {
                i: gShare.i,
                y: gShare.y,
                k: (0, util_1.bigIntToBufferBE)(k, 32).toString('hex'),
                omicron: (0, util_1.bigIntToBufferBE)(omicron, 32).toString('hex'),
                delta: (0, util_1.bigIntToBufferBE)(delta, 32).toString('hex'),
                Gamma: (0, util_1.bigIntToBufferBE)(Gamma, 33).toString('hex'),
            },
            dShare: {
                i: S.i,
                j: gShare.i,
                delta: (0, util_1.bigIntToBufferBE)(delta, 32).toString('hex'),
                Gamma: (0, util_1.bigIntToBufferBE)(Gamma, 33).toString('hex'),
            },
        };
    }
    /**
     * Sign a message.
     * @param {Buffer} M Message to be signed
     * @param {OShare} oShare private omicron share of current participant
     * @param {DShare} dShare delta share received from the other participant
     * @param {Hash} hash hashing algorithm implementing Node`s standard crypto hash interface
     * @param shouldHash if true, we hash the provided buffer before signing
     * @returns {VAShare}
     */
    sign(M, oShare, dShare, hash, shouldHash = true) {
        const m = shouldHash ? (hash || (0, crypto_1.createHash)('sha256')).update(M).digest() : M;
        const delta = Ecdsa.curve.scalarAdd((0, sdk_lib_mpc_1.hexToBigInt)(oShare.delta), (0, sdk_lib_mpc_1.hexToBigInt)(dShare.delta));
        const R = Ecdsa.curve.pointMultiply(Ecdsa.curve.pointAdd((0, sdk_lib_mpc_1.hexToBigInt)(oShare.Gamma), (0, sdk_lib_mpc_1.hexToBigInt)(dShare.Gamma)), Ecdsa.curve.scalarInvert(delta));
        const pointR = secp.Point.fromHex((0, util_1.bigIntToBufferBE)(R, 32));
        const r = pointR.x;
        const s = Ecdsa.curve.scalarAdd(Ecdsa.curve.scalarMult((0, util_1.bigIntFromU8ABE)(m), (0, sdk_lib_mpc_1.hexToBigInt)(oShare.k)), Ecdsa.curve.scalarMult(r, (0, sdk_lib_mpc_1.hexToBigInt)(oShare.omicron)));
        const l = Ecdsa.curve.scalarRandom();
        const rho = Ecdsa.curve.scalarRandom();
        const V = Ecdsa.curve.pointAdd(Ecdsa.curve.pointMultiply(R, s), Ecdsa.curve.basePointMult(l));
        const A = Ecdsa.curve.basePointMult(rho);
        const comDecom_V_A = sdk_lib_mpc_1.HashCommitment.createCommitment(Buffer.concat([(0, util_1.bigIntToBufferBE)(V, Ecdsa.curve.pointBytes), (0, util_1.bigIntToBufferBE)(A, Ecdsa.curve.pointBytes)]));
        return {
            i: oShare.i,
            y: oShare.y,
            R: pointR.toHex(true),
            s: (0, util_1.bigIntToBufferBE)(s, 32).toString('hex'),
            m: m,
            l: l,
            rho: rho,
            V: V,
            A: A,
            comDecomVA: comDecom_V_A,
        };
    }
    /**
     * Generate proofs of V_i and A_i values.
     * @param {Buffer} M Message to commit to as part of the context of the proof.
     *    This doesn't need to be the same message that was signed in the sign function above.
     *    But it should be the same for all participants for the purpose of providing proof context.
     * @param {VAShare} vaShare The VAShare to prove.
     * @returns {VAShareWithProofs}
     */
    generateVAProofs(M, vaShare) {
        const s = (0, sdk_lib_mpc_1.hexToBigInt)(vaShare.s);
        const R = (0, util_1.bigIntFromU8ABE)(secp.Point.fromHex(vaShare.R).toRawBytes(true));
        const proofContext = (0, crypto_1.createHash)('sha256').update(M).update((0, util_1.bigIntToBufferBE)(R, Ecdsa.curve.pointBytes)).digest();
        const zkVProof = sdk_lib_mpc_1.EcdsaZkVProof.createZkVProof(vaShare.V, s, vaShare.l, R, Ecdsa.curve, proofContext);
        const schnorrProof = sdk_lib_mpc_1.Schnorr.createSchnorrProof(vaShare.A, vaShare.rho, Ecdsa.curve, proofContext);
        return {
            ...vaShare,
            proofContext: proofContext,
            zkVProofV: zkVProof,
            schnorrProofA: schnorrProof,
        };
    }
    /**
     * Verify V_i and A_i values of all other participants during signing phase 5 steps 5A and 5B.
     * @param {VAShareWithProofs} vaShare V_i, A_i info including SShare values of the currenct participant
     * @param {PublicVAShareWithProofs[]} publicVAShares public V_i, A_i info of all other participants
     * @returns {UTShare} U_i, T_i info of the current participant if all verifications pass
     */
    verifyVAShares(vaShare, publicVAShares) {
        publicVAShares.forEach((publicVAShare) => {
            if (!sdk_lib_mpc_1.HashCommitment.verifyCommitment(publicVAShare.comDecomVA.commitment, {
                secret: Buffer.concat([
                    (0, util_1.bigIntToBufferBE)(publicVAShare.V, Ecdsa.curve.pointBytes),
                    (0, util_1.bigIntToBufferBE)(publicVAShare.A, Ecdsa.curve.pointBytes),
                ]),
                blindingFactor: publicVAShare.comDecomVA.decommitment.blindingFactor,
            })) {
                throw new Error('Could not verify commitment of V_i and A_i');
            }
            if (!sdk_lib_mpc_1.Schnorr.verifySchnorrProof(publicVAShare.A, publicVAShare.schnorrProofA, Ecdsa.curve, vaShare.proofContext)) {
                throw new Error('Could not verify Schnorr proof of A_i');
            }
            if (!sdk_lib_mpc_1.EcdsaZkVProof.verifyZkVProof(publicVAShare.V, publicVAShare.zkVProofV, (0, sdk_lib_mpc_1.hexToBigInt)(vaShare.R), Ecdsa.curve, vaShare.proofContext)) {
                throw new Error('Could not verify ZK proof of V_i');
            }
        });
        const y = (0, sdk_lib_mpc_1.hexToBigInt)(vaShare.y);
        // r is R's x coordinate.  R is in compressed form, so we need to slice off the first byte.
        const r = (0, sdk_lib_mpc_1.hexToBigInt)(vaShare.R.slice(2));
        // Calculate aggregation of all V_i and A_i.
        let V = Ecdsa.curve.pointAdd(Ecdsa.curve.pointAdd(Ecdsa.curve.basePointMult(Ecdsa.curve.scalarNegate((0, util_1.bigIntFromU8ABE)(vaShare.m))), Ecdsa.curve.pointMultiply(y, Ecdsa.curve.scalarNegate(r))), vaShare.V);
        let A = vaShare.A;
        publicVAShares.forEach((publicVAShare) => {
            V = Ecdsa.curve.pointAdd(V, publicVAShare.V);
            A = Ecdsa.curve.pointAdd(A, publicVAShare.A);
        });
        // Calculate U_i = rho_i * V and T_i = l_i * A.
        const U = Ecdsa.curve.pointMultiply(V, vaShare.rho);
        const T = Ecdsa.curve.pointMultiply(A, vaShare.l);
        const comDecom_U_T = sdk_lib_mpc_1.HashCommitment.createCommitment(Buffer.concat([(0, util_1.bigIntToBufferBE)(U, Ecdsa.curve.pointBytes), (0, util_1.bigIntToBufferBE)(T, Ecdsa.curve.pointBytes)]));
        return {
            ...vaShare,
            U,
            T,
            comDecomUT: comDecom_U_T,
        };
    }
    /**
     * Verify U_i and V_i values of all other participants during signing phase 5 steps 5C and 5D.
     * @param {UTShare} utShare U_i, T_i info including SShare values of the currenct participant
     * @param {PublicUTShare[]} publicUTShares public U_i, T_i info of all other participants
     * @returns {SShare} SShare of the current participant if all verifications pass
     */
    verifyUTShares(utShare, publicUTShares) {
        let sigmaU = utShare.U;
        let sigmaT = utShare.T;
        publicUTShares.forEach((publicUTShare) => {
            if (!sdk_lib_mpc_1.HashCommitment.verifyCommitment(publicUTShare.comDecomUT.commitment, {
                secret: Buffer.concat([
                    (0, util_1.bigIntToBufferBE)(publicUTShare.U, Ecdsa.curve.pointBytes),
                    (0, util_1.bigIntToBufferBE)(publicUTShare.T, Ecdsa.curve.pointBytes),
                ]),
                blindingFactor: publicUTShare.comDecomUT.decommitment.blindingFactor,
            })) {
                throw new Error('Could not verify commitment of U_i and T_i');
            }
            sigmaU = Ecdsa.curve.pointAdd(sigmaU, publicUTShare.U);
            sigmaT = Ecdsa.curve.pointAdd(sigmaT, publicUTShare.T);
        });
        if (sigmaU !== sigmaT) {
            throw new Error('Sum of all U_i does not match sum of all T_i');
        }
        return { ...utShare };
    }
    /**
     * Construct full signature by combining Sign Shares
     * @param {SShare[]} shares
     * @returns {Signature}
     */
    constructSignature(shares) {
        // Every R must match.
        const R = shares[0]['R'];
        const isRMatching = shares.map((share) => share['R'] === R).reduce((a, b) => a && b);
        if (!isRMatching) {
            throw new Error('R value should be consistent across all shares');
        }
        let s = shares.map((share) => (0, sdk_lib_mpc_1.hexToBigInt)(share['s'])).reduce(Ecdsa.curve.scalarAdd);
        const recid = (R.slice(0, 2) === '03' ? 1 : 0) ^ (s > Ecdsa.curve.order() / BigInt(2) ? 1 : 0);
        // Normalize s.
        s = s > Ecdsa.curve.order() / BigInt(2) ? Ecdsa.curve.order() - s : s;
        return {
            y: shares[0]['y'],
            r: R.slice(2),
            s: (0, util_1.bigIntToBufferBE)(s, 32).toString('hex'),
            recid: recid,
        };
    }
    /**
     * Verify ecdsa signatures
     * @param {Buffer} message
     * @param {Signature } signature
     * @param {Hash} hash hashing algorithm implementing Node`s standard crypto hash interface
     * @param {boolean} shouldHash if true, we hash the provided buffer before verifying
     * @returns {boolean} True if signature is valid; False otherwise
     */
    verify(message, signature, hash, shouldHash = true) {
        const messageToVerify = shouldHash ? (hash || (0, crypto_1.createHash)('sha256')).update(message).digest() : message;
        return Ecdsa.curve.verify(messageToVerify, Buffer.concat([
            Buffer.from([signature['recid']]),
            (0, util_1.bigIntToBufferBE)((0, sdk_lib_mpc_1.hexToBigInt)(signature['r']), 32),
            (0, util_1.bigIntToBufferBE)((0, sdk_lib_mpc_1.hexToBigInt)(signature['s']), 32),
        ]), (0, sdk_lib_mpc_1.hexToBigInt)(signature['y']));
    }
    /**
     * Deserializes a challenge and it's proofs from hex strings to bigint
     * @deprecated use sdk-lib-mpc EcdsaTypes.deserializeNtilde instead
     */
    static deserializeNtilde(challenge) {
        return sdk_lib_mpc_1.EcdsaTypes.deserializeNtilde(challenge);
    }
    /**
     * Serializes a challenge and it's proofs from big int to hex strings.
     * @deprecated use sdk-lib-mpc EcdsaTypes.deserializeNtilde instead
     * @param challenge
     */
    static serializeNtilde(challenge) {
        return sdk_lib_mpc_1.EcdsaTypes.serializeNtilde(challenge);
    }
}
exports.default = Ecdsa;
Ecdsa.curve = new curves_1.Secp256k1Curve();
Ecdsa.hdTree = new sdk_lib_mpc_1.Secp256k1Bip32HdTree();
Ecdsa.shamir = new sdk_lib_mpc_1.Shamir(Ecdsa.curve);
//# sourceMappingURL=data:application/json;base64,