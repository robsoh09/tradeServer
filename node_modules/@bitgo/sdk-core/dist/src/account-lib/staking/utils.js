"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOperationConfig = exports.WithdrawMethodId = exports.ActivateMethodId = exports.UnvoteMethodId = exports.VoteMethodId = exports.UnlockMethodId = exports.LockMethodId = void 0;
const statics_1 = require("@bitgo/statics");
const baseCoin_1 = require("../baseCoin");
exports.LockMethodId = '0xf83d08ba'; // lock()
exports.UnlockMethodId = '0x6198e339'; // unlock()
exports.VoteMethodId = '0x580d747a'; // vote()
exports.UnvoteMethodId = '0x6e198475'; // revokeActive()
exports.ActivateMethodId = '0x1c5a9d9c'; // activate()
exports.WithdrawMethodId = '0x2e1a7d4d'; // withdraw()
const LockedGoldTestnetAddress = '0x94c3e6675015d8479b648657e7ddfcd938489d0d';
const LockedGoldMainnetAddress = '0x6cc083aed9e3ebe302a6336dbc7c921c9f03349e';
const ElectionTestnetAddress = '0x11fe523f93cac185d12cb39cc3bd279d2de524f8';
const ElectionMainnetAddress = '0x8d6677192144292870907e3fa8a5527fe55a7ff6';
const operations = {
    [baseCoin_1.StakingOperationTypes.LOCK]: {
        [statics_1.NetworkType.TESTNET]: {
            contractAddress: LockedGoldTestnetAddress,
            methodId: exports.LockMethodId,
            types: [],
        },
        [statics_1.NetworkType.MAINNET]: {
            contractAddress: LockedGoldMainnetAddress,
            methodId: exports.LockMethodId,
            types: [],
        },
    },
    [baseCoin_1.StakingOperationTypes.UNLOCK]: {
        [statics_1.NetworkType.TESTNET]: {
            contractAddress: LockedGoldTestnetAddress,
            methodId: exports.UnlockMethodId,
            types: ['uint256'],
        },
        [statics_1.NetworkType.MAINNET]: {
            contractAddress: LockedGoldMainnetAddress,
            methodId: exports.UnlockMethodId,
            types: ['uint256'],
        },
    },
    [baseCoin_1.StakingOperationTypes.VOTE]: {
        [statics_1.NetworkType.TESTNET]: {
            contractAddress: ElectionTestnetAddress,
            methodId: exports.VoteMethodId,
            types: ['address', 'uint256', 'address', 'address'],
        },
        [statics_1.NetworkType.MAINNET]: {
            contractAddress: ElectionMainnetAddress,
            methodId: exports.VoteMethodId,
            types: ['address', 'uint256', 'address', 'address'],
        },
    },
    [baseCoin_1.StakingOperationTypes.UNVOTE]: {
        [statics_1.NetworkType.TESTNET]: {
            contractAddress: ElectionTestnetAddress,
            methodId: exports.UnvoteMethodId,
            types: ['address', 'uint256', 'address', 'address', 'uint256'],
        },
        [statics_1.NetworkType.MAINNET]: {
            contractAddress: ElectionMainnetAddress,
            methodId: exports.UnvoteMethodId,
            types: ['address', 'uint256', 'address', 'address', 'uint256'],
        },
    },
    [baseCoin_1.StakingOperationTypes.ACTIVATE]: {
        [statics_1.NetworkType.TESTNET]: {
            contractAddress: ElectionTestnetAddress,
            methodId: exports.ActivateMethodId,
            types: ['address'],
        },
        [statics_1.NetworkType.MAINNET]: {
            contractAddress: ElectionMainnetAddress,
            methodId: exports.ActivateMethodId,
            types: ['address'],
        },
    },
    [baseCoin_1.StakingOperationTypes.WITHDRAW]: {
        [statics_1.NetworkType.TESTNET]: {
            contractAddress: LockedGoldTestnetAddress,
            methodId: exports.WithdrawMethodId,
            types: ['uint256'],
        },
        [statics_1.NetworkType.MAINNET]: {
            contractAddress: LockedGoldMainnetAddress,
            methodId: exports.WithdrawMethodId,
            types: ['uint256'],
        },
    },
};
/**
 * @param type
 * @param network
 */
function getOperationConfig(type, network) {
    return operations[type][network];
}
exports.getOperationConfig = getOperationConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYWNjb3VudC1saWIvc3Rha2luZy91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw0Q0FBNkM7QUFDN0MsMENBQW9EO0FBUXZDLFFBQUEsWUFBWSxHQUFHLFlBQVksQ0FBQyxDQUFDLFNBQVM7QUFDdEMsUUFBQSxjQUFjLEdBQUcsWUFBWSxDQUFDLENBQUMsV0FBVztBQUMxQyxRQUFBLFlBQVksR0FBRyxZQUFZLENBQUMsQ0FBQyxTQUFTO0FBQ3RDLFFBQUEsY0FBYyxHQUFHLFlBQVksQ0FBQyxDQUFDLGlCQUFpQjtBQUNoRCxRQUFBLGdCQUFnQixHQUFHLFlBQVksQ0FBQyxDQUFDLGFBQWE7QUFDOUMsUUFBQSxnQkFBZ0IsR0FBRyxZQUFZLENBQUMsQ0FBQyxhQUFhO0FBRTNELE1BQU0sd0JBQXdCLEdBQUcsNENBQTRDLENBQUM7QUFDOUUsTUFBTSx3QkFBd0IsR0FBRyw0Q0FBNEMsQ0FBQztBQUM5RSxNQUFNLHNCQUFzQixHQUFHLDRDQUE0QyxDQUFDO0FBQzVFLE1BQU0sc0JBQXNCLEdBQUcsNENBQTRDLENBQUM7QUFFNUUsTUFBTSxVQUFVLEdBQUc7SUFDakIsQ0FBQyxnQ0FBcUIsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUM1QixDQUFDLHFCQUFXLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDckIsZUFBZSxFQUFFLHdCQUF3QjtZQUN6QyxRQUFRLEVBQUUsb0JBQVk7WUFDdEIsS0FBSyxFQUFFLEVBQUU7U0FDVjtRQUNELENBQUMscUJBQVcsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNyQixlQUFlLEVBQUUsd0JBQXdCO1lBQ3pDLFFBQVEsRUFBRSxvQkFBWTtZQUN0QixLQUFLLEVBQUUsRUFBRTtTQUNWO0tBQ0Y7SUFDRCxDQUFDLGdDQUFxQixDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQzlCLENBQUMscUJBQVcsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNyQixlQUFlLEVBQUUsd0JBQXdCO1lBQ3pDLFFBQVEsRUFBRSxzQkFBYztZQUN4QixLQUFLLEVBQUUsQ0FBQyxTQUFTLENBQUM7U0FDbkI7UUFDRCxDQUFDLHFCQUFXLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDckIsZUFBZSxFQUFFLHdCQUF3QjtZQUN6QyxRQUFRLEVBQUUsc0JBQWM7WUFDeEIsS0FBSyxFQUFFLENBQUMsU0FBUyxDQUFDO1NBQ25CO0tBQ0Y7SUFDRCxDQUFDLGdDQUFxQixDQUFDLElBQUksQ0FBQyxFQUFFO1FBQzVCLENBQUMscUJBQVcsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNyQixlQUFlLEVBQUUsc0JBQXNCO1lBQ3ZDLFFBQVEsRUFBRSxvQkFBWTtZQUN0QixLQUFLLEVBQUUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7U0FDcEQ7UUFDRCxDQUFDLHFCQUFXLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDckIsZUFBZSxFQUFFLHNCQUFzQjtZQUN2QyxRQUFRLEVBQUUsb0JBQVk7WUFDdEIsS0FBSyxFQUFFLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDO1NBQ3BEO0tBQ0Y7SUFDRCxDQUFDLGdDQUFxQixDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQzlCLENBQUMscUJBQVcsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNyQixlQUFlLEVBQUUsc0JBQXNCO1lBQ3ZDLFFBQVEsRUFBRSxzQkFBYztZQUN4QixLQUFLLEVBQUUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDO1NBQy9EO1FBQ0QsQ0FBQyxxQkFBVyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3JCLGVBQWUsRUFBRSxzQkFBc0I7WUFDdkMsUUFBUSxFQUFFLHNCQUFjO1lBQ3hCLEtBQUssRUFBRSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7U0FDL0Q7S0FDRjtJQUNELENBQUMsZ0NBQXFCLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDaEMsQ0FBQyxxQkFBVyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3JCLGVBQWUsRUFBRSxzQkFBc0I7WUFDdkMsUUFBUSxFQUFFLHdCQUFnQjtZQUMxQixLQUFLLEVBQUUsQ0FBQyxTQUFTLENBQUM7U0FDbkI7UUFDRCxDQUFDLHFCQUFXLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDckIsZUFBZSxFQUFFLHNCQUFzQjtZQUN2QyxRQUFRLEVBQUUsd0JBQWdCO1lBQzFCLEtBQUssRUFBRSxDQUFDLFNBQVMsQ0FBQztTQUNuQjtLQUNGO0lBQ0QsQ0FBQyxnQ0FBcUIsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUNoQyxDQUFDLHFCQUFXLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDckIsZUFBZSxFQUFFLHdCQUF3QjtZQUN6QyxRQUFRLEVBQUUsd0JBQWdCO1lBQzFCLEtBQUssRUFBRSxDQUFDLFNBQVMsQ0FBQztTQUNuQjtRQUNELENBQUMscUJBQVcsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNyQixlQUFlLEVBQUUsd0JBQXdCO1lBQ3pDLFFBQVEsRUFBRSx3QkFBZ0I7WUFDMUIsS0FBSyxFQUFFLENBQUMsU0FBUyxDQUFDO1NBQ25CO0tBQ0Y7Q0FDRixDQUFDO0FBRUY7OztHQUdHO0FBQ0gsU0FBZ0Isa0JBQWtCLENBQUMsSUFBMkIsRUFBRSxPQUFvQjtJQUNsRixPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBRkQsZ0RBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXR3b3JrVHlwZSB9IGZyb20gJ0BiaXRnby9zdGF0aWNzJztcbmltcG9ydCB7IFN0YWtpbmdPcGVyYXRpb25UeXBlcyB9IGZyb20gJy4uL2Jhc2VDb2luJztcblxuZXhwb3J0IGludGVyZmFjZSBDb250cmFjdE1ldGhvZENvbmZpZyB7XG4gIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nO1xuICBtZXRob2RJZDogc3RyaW5nO1xuICB0eXBlczogc3RyaW5nW107XG59XG5cbmV4cG9ydCBjb25zdCBMb2NrTWV0aG9kSWQgPSAnMHhmODNkMDhiYSc7IC8vIGxvY2soKVxuZXhwb3J0IGNvbnN0IFVubG9ja01ldGhvZElkID0gJzB4NjE5OGUzMzknOyAvLyB1bmxvY2soKVxuZXhwb3J0IGNvbnN0IFZvdGVNZXRob2RJZCA9ICcweDU4MGQ3NDdhJzsgLy8gdm90ZSgpXG5leHBvcnQgY29uc3QgVW52b3RlTWV0aG9kSWQgPSAnMHg2ZTE5ODQ3NSc7IC8vIHJldm9rZUFjdGl2ZSgpXG5leHBvcnQgY29uc3QgQWN0aXZhdGVNZXRob2RJZCA9ICcweDFjNWE5ZDljJzsgLy8gYWN0aXZhdGUoKVxuZXhwb3J0IGNvbnN0IFdpdGhkcmF3TWV0aG9kSWQgPSAnMHgyZTFhN2Q0ZCc7IC8vIHdpdGhkcmF3KClcblxuY29uc3QgTG9ja2VkR29sZFRlc3RuZXRBZGRyZXNzID0gJzB4OTRjM2U2Njc1MDE1ZDg0NzliNjQ4NjU3ZTdkZGZjZDkzODQ4OWQwZCc7XG5jb25zdCBMb2NrZWRHb2xkTWFpbm5ldEFkZHJlc3MgPSAnMHg2Y2MwODNhZWQ5ZTNlYmUzMDJhNjMzNmRiYzdjOTIxYzlmMDMzNDllJztcbmNvbnN0IEVsZWN0aW9uVGVzdG5ldEFkZHJlc3MgPSAnMHgxMWZlNTIzZjkzY2FjMTg1ZDEyY2IzOWNjM2JkMjc5ZDJkZTUyNGY4JztcbmNvbnN0IEVsZWN0aW9uTWFpbm5ldEFkZHJlc3MgPSAnMHg4ZDY2NzcxOTIxNDQyOTI4NzA5MDdlM2ZhOGE1NTI3ZmU1NWE3ZmY2JztcblxuY29uc3Qgb3BlcmF0aW9ucyA9IHtcbiAgW1N0YWtpbmdPcGVyYXRpb25UeXBlcy5MT0NLXToge1xuICAgIFtOZXR3b3JrVHlwZS5URVNUTkVUXToge1xuICAgICAgY29udHJhY3RBZGRyZXNzOiBMb2NrZWRHb2xkVGVzdG5ldEFkZHJlc3MsXG4gICAgICBtZXRob2RJZDogTG9ja01ldGhvZElkLFxuICAgICAgdHlwZXM6IFtdLFxuICAgIH0sXG4gICAgW05ldHdvcmtUeXBlLk1BSU5ORVRdOiB7XG4gICAgICBjb250cmFjdEFkZHJlc3M6IExvY2tlZEdvbGRNYWlubmV0QWRkcmVzcyxcbiAgICAgIG1ldGhvZElkOiBMb2NrTWV0aG9kSWQsXG4gICAgICB0eXBlczogW10sXG4gICAgfSxcbiAgfSxcbiAgW1N0YWtpbmdPcGVyYXRpb25UeXBlcy5VTkxPQ0tdOiB7XG4gICAgW05ldHdvcmtUeXBlLlRFU1RORVRdOiB7XG4gICAgICBjb250cmFjdEFkZHJlc3M6IExvY2tlZEdvbGRUZXN0bmV0QWRkcmVzcyxcbiAgICAgIG1ldGhvZElkOiBVbmxvY2tNZXRob2RJZCxcbiAgICAgIHR5cGVzOiBbJ3VpbnQyNTYnXSxcbiAgICB9LFxuICAgIFtOZXR3b3JrVHlwZS5NQUlOTkVUXToge1xuICAgICAgY29udHJhY3RBZGRyZXNzOiBMb2NrZWRHb2xkTWFpbm5ldEFkZHJlc3MsXG4gICAgICBtZXRob2RJZDogVW5sb2NrTWV0aG9kSWQsXG4gICAgICB0eXBlczogWyd1aW50MjU2J10sXG4gICAgfSxcbiAgfSxcbiAgW1N0YWtpbmdPcGVyYXRpb25UeXBlcy5WT1RFXToge1xuICAgIFtOZXR3b3JrVHlwZS5URVNUTkVUXToge1xuICAgICAgY29udHJhY3RBZGRyZXNzOiBFbGVjdGlvblRlc3RuZXRBZGRyZXNzLFxuICAgICAgbWV0aG9kSWQ6IFZvdGVNZXRob2RJZCxcbiAgICAgIHR5cGVzOiBbJ2FkZHJlc3MnLCAndWludDI1NicsICdhZGRyZXNzJywgJ2FkZHJlc3MnXSxcbiAgICB9LFxuICAgIFtOZXR3b3JrVHlwZS5NQUlOTkVUXToge1xuICAgICAgY29udHJhY3RBZGRyZXNzOiBFbGVjdGlvbk1haW5uZXRBZGRyZXNzLFxuICAgICAgbWV0aG9kSWQ6IFZvdGVNZXRob2RJZCxcbiAgICAgIHR5cGVzOiBbJ2FkZHJlc3MnLCAndWludDI1NicsICdhZGRyZXNzJywgJ2FkZHJlc3MnXSxcbiAgICB9LFxuICB9LFxuICBbU3Rha2luZ09wZXJhdGlvblR5cGVzLlVOVk9URV06IHtcbiAgICBbTmV0d29ya1R5cGUuVEVTVE5FVF06IHtcbiAgICAgIGNvbnRyYWN0QWRkcmVzczogRWxlY3Rpb25UZXN0bmV0QWRkcmVzcyxcbiAgICAgIG1ldGhvZElkOiBVbnZvdGVNZXRob2RJZCxcbiAgICAgIHR5cGVzOiBbJ2FkZHJlc3MnLCAndWludDI1NicsICdhZGRyZXNzJywgJ2FkZHJlc3MnLCAndWludDI1NiddLFxuICAgIH0sXG4gICAgW05ldHdvcmtUeXBlLk1BSU5ORVRdOiB7XG4gICAgICBjb250cmFjdEFkZHJlc3M6IEVsZWN0aW9uTWFpbm5ldEFkZHJlc3MsXG4gICAgICBtZXRob2RJZDogVW52b3RlTWV0aG9kSWQsXG4gICAgICB0eXBlczogWydhZGRyZXNzJywgJ3VpbnQyNTYnLCAnYWRkcmVzcycsICdhZGRyZXNzJywgJ3VpbnQyNTYnXSxcbiAgICB9LFxuICB9LFxuICBbU3Rha2luZ09wZXJhdGlvblR5cGVzLkFDVElWQVRFXToge1xuICAgIFtOZXR3b3JrVHlwZS5URVNUTkVUXToge1xuICAgICAgY29udHJhY3RBZGRyZXNzOiBFbGVjdGlvblRlc3RuZXRBZGRyZXNzLFxuICAgICAgbWV0aG9kSWQ6IEFjdGl2YXRlTWV0aG9kSWQsXG4gICAgICB0eXBlczogWydhZGRyZXNzJ10sXG4gICAgfSxcbiAgICBbTmV0d29ya1R5cGUuTUFJTk5FVF06IHtcbiAgICAgIGNvbnRyYWN0QWRkcmVzczogRWxlY3Rpb25NYWlubmV0QWRkcmVzcyxcbiAgICAgIG1ldGhvZElkOiBBY3RpdmF0ZU1ldGhvZElkLFxuICAgICAgdHlwZXM6IFsnYWRkcmVzcyddLFxuICAgIH0sXG4gIH0sXG4gIFtTdGFraW5nT3BlcmF0aW9uVHlwZXMuV0lUSERSQVddOiB7XG4gICAgW05ldHdvcmtUeXBlLlRFU1RORVRdOiB7XG4gICAgICBjb250cmFjdEFkZHJlc3M6IExvY2tlZEdvbGRUZXN0bmV0QWRkcmVzcyxcbiAgICAgIG1ldGhvZElkOiBXaXRoZHJhd01ldGhvZElkLFxuICAgICAgdHlwZXM6IFsndWludDI1NiddLFxuICAgIH0sXG4gICAgW05ldHdvcmtUeXBlLk1BSU5ORVRdOiB7XG4gICAgICBjb250cmFjdEFkZHJlc3M6IExvY2tlZEdvbGRNYWlubmV0QWRkcmVzcyxcbiAgICAgIG1ldGhvZElkOiBXaXRoZHJhd01ldGhvZElkLFxuICAgICAgdHlwZXM6IFsndWludDI1NiddLFxuICAgIH0sXG4gIH0sXG59O1xuXG4vKipcbiAqIEBwYXJhbSB0eXBlXG4gKiBAcGFyYW0gbmV0d29ya1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3BlcmF0aW9uQ29uZmlnKHR5cGU6IFN0YWtpbmdPcGVyYXRpb25UeXBlcywgbmV0d29yazogTmV0d29ya1R5cGUpOiBDb250cmFjdE1ldGhvZENvbmZpZyB7XG4gIHJldHVybiBvcGVyYXRpb25zW3R5cGVdW25ldHdvcmtdO1xufVxuIl19