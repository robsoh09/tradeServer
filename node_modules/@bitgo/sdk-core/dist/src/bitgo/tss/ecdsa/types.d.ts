import { ECDSA } from './../../../account-lib/mpc/tss';
export declare type NShare = ECDSA.NShare;
export declare type KeyShare = ECDSA.KeyShare;
export declare type XShare = ECDSA.XShare;
export declare type XShareWithChallenges = ECDSA.XShareWithChallenges;
export declare type YShare = ECDSA.YShare;
export declare type YShareWithChallenges = ECDSA.YShareWithChallenges;
export declare type SignShare = ECDSA.SignShareRT;
export declare type KShare = ECDSA.KShare;
export declare type WShare = ECDSA.WShare;
export declare type AShare = ECDSA.AShare;
export declare type GShare = ECDSA.GShare;
export declare type OShare = ECDSA.OShare;
export declare type DShare = ECDSA.DShare;
export declare type CreateUserGammaAndMuShareRT = ECDSA.SignConvertRT;
export declare type CreateUserOmicronAndDeltaShareRT = ECDSA.SignCombineRT;
export declare type SignatureShare = ECDSA.SShare;
export declare type Signature = ECDSA.Signature;
export declare type BShare = ECDSA.BShare;
export declare type SShare = ECDSA.SShare;
export declare type KeyCombined = ECDSA.KeyCombined;
export declare enum SendShareType {
    KShare = "KShare",
    MUShare = "MUShare",
    SShare = "SShare"
}
export declare enum ReceivedShareType {
    AShare = "AShare",
    DShare = "DShare",
    Signature = "Signature"
}
export declare type GetShareFromBitgoRT = DShare | AShare;
export declare type EncryptedNShare = {
    i: number;
    j: number;
    publicShare: string;
    encryptedPrivateShare: string;
    n: string;
    vssProof?: string;
    privateShareProof?: string;
};
export declare type DecryptableNShare = {
    nShare: EncryptedNShare;
    recipientPrivateArmor: string;
    senderPublicArmor: string;
    isbs58Encoded?: boolean;
};
export declare type CombinedKey = {
    commonKeychain: string;
    signingMaterial: SigningMaterial;
};
export declare type SigningMaterial = {
    pShare: ECDSA.PShare;
    bitgoNShare: ECDSA.NShare;
    backupNShare?: ECDSA.NShare;
    userNShare?: ECDSA.NShare;
};
export declare type CreateCombinedKeyParams = {
    keyShare: ECDSA.KeyShare;
    encryptedNShares: DecryptableNShare[];
    commonKeychain: string;
};
export declare type SendShareToBitgoRT = AShare | DShare | SShare | Signature;
//# sourceMappingURL=types.d.ts.map