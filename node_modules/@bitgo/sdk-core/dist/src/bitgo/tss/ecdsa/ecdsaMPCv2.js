"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserPartyGpgKey = exports.getBitGoPartyGpgKey = exports.verifyBitGoMessagesAndSignaturesRoundTwo = exports.verifyBitGoMessagesAndSignaturesRoundOne = exports.getSignatureShareRoundThree = exports.getSignatureShareRoundTwo = exports.getSignatureShareRoundOne = void 0;
const utils_1 = require("../../utils");
const sdk_lib_mpc_1 = require("@bitgo/sdk-lib-mpc");
const public_types_1 = require("@bitgo/public-types");
const assert_1 = __importDefault(require("assert"));
/**
 Helpers in this take care of all interaction with WP API's
**/
async function getSignatureShareRoundOne(round1Message, userGpgKey) {
    const serializedMessages = sdk_lib_mpc_1.DklsTypes.serializeMessages({
        broadcastMessages: [round1Message],
        p2pMessages: [],
    });
    const authEncBroadcastMessage = (await sdk_lib_mpc_1.DklsComms.encryptAndAuthOutgoingMessages(serializedMessages, [], // Broadcast message so doesn't need to encrypt to BitGo's GPG key
    [getUserPartyGpgKey(userGpgKey)])).broadcastMessages[0];
    // Share type expected by Wallet Platform's API
    (0, assert_1.default)(public_types_1.MPCv2PartyFromStringOrNumber.is(authEncBroadcastMessage.from));
    const share = {
        type: 'round1Input',
        data: {
            msg1: {
                from: authEncBroadcastMessage.from,
                message: authEncBroadcastMessage.payload.message,
                signature: authEncBroadcastMessage.payload.signature,
            },
        },
    };
    const serializedShare = JSON.stringify(share);
    return {
        from: utils_1.SignatureShareType.USER,
        to: utils_1.SignatureShareType.BITGO,
        share: serializedShare,
    };
}
exports.getSignatureShareRoundOne = getSignatureShareRoundOne;
async function getSignatureShareRoundTwo(userToBitGoMessages2, userToBitGoMessages3, userGpgKey, bitgoGpgKey) {
    const userToBitGoEncryptedMsg2 = await sdk_lib_mpc_1.DklsComms.encryptAndAuthOutgoingMessages(sdk_lib_mpc_1.DklsTypes.serializeMessages(userToBitGoMessages2), [getBitGoPartyGpgKey(bitgoGpgKey)], [getUserPartyGpgKey(userGpgKey)]);
    const userToBitGoEncryptedMsg3 = await sdk_lib_mpc_1.DklsComms.encryptAndAuthOutgoingMessages(sdk_lib_mpc_1.DklsTypes.serializeMessages(userToBitGoMessages3), [getBitGoPartyGpgKey(bitgoGpgKey)], [getUserPartyGpgKey(userGpgKey)]);
    (0, assert_1.default)(userToBitGoEncryptedMsg2.p2pMessages.length, 'User to BitGo messages 2 not present.');
    (0, assert_1.default)(userToBitGoEncryptedMsg3.p2pMessages.length, 'User to BitGo messages 3 not present.');
    (0, assert_1.default)(public_types_1.MPCv2PartyFromStringOrNumber.is(userToBitGoEncryptedMsg2.p2pMessages[0].from));
    (0, assert_1.default)(public_types_1.MPCv2PartyFromStringOrNumber.is(userToBitGoEncryptedMsg2.p2pMessages[0].to));
    (0, assert_1.default)(public_types_1.MPCv2PartyFromStringOrNumber.is(userToBitGoEncryptedMsg3.p2pMessages[0].from));
    (0, assert_1.default)(public_types_1.MPCv2PartyFromStringOrNumber.is(userToBitGoEncryptedMsg3.p2pMessages[0].to));
    const share = {
        type: 'round2Input',
        data: {
            msg2: {
                from: userToBitGoEncryptedMsg2.p2pMessages[0].from,
                to: userToBitGoEncryptedMsg2.p2pMessages[0].to,
                encryptedMessage: userToBitGoEncryptedMsg2.p2pMessages[0].payload.encryptedMessage,
                signature: userToBitGoEncryptedMsg2.p2pMessages[0].payload.signature,
            },
            msg3: {
                from: userToBitGoEncryptedMsg3.p2pMessages[0].from,
                to: userToBitGoEncryptedMsg3.p2pMessages[0].to,
                encryptedMessage: userToBitGoEncryptedMsg3.p2pMessages[0].payload.encryptedMessage,
                signature: userToBitGoEncryptedMsg3.p2pMessages[0].payload.signature,
            },
        },
    };
    return {
        from: utils_1.SignatureShareType.USER,
        to: utils_1.SignatureShareType.BITGO,
        share: JSON.stringify(share),
    };
}
exports.getSignatureShareRoundTwo = getSignatureShareRoundTwo;
async function getSignatureShareRoundThree(userToBitGoMessages4, userGpgKey, bitgoGpgKey) {
    var _a;
    const userToBitGoEncryptedMsg4 = await sdk_lib_mpc_1.DklsComms.encryptAndAuthOutgoingMessages(sdk_lib_mpc_1.DklsTypes.serializeMessages(userToBitGoMessages4), [getBitGoPartyGpgKey(bitgoGpgKey)], [getUserPartyGpgKey(userGpgKey)]);
    (0, assert_1.default)(public_types_1.MPCv2PartyFromStringOrNumber.is(userToBitGoEncryptedMsg4.broadcastMessages[0].from));
    if (!((_a = userToBitGoEncryptedMsg4.broadcastMessages[0].signatureR) === null || _a === void 0 ? void 0 : _a.message)) {
        throw Error('signatureR should be defined');
    }
    const share = {
        type: 'round3Input',
        data: {
            msg4: {
                from: userToBitGoEncryptedMsg4.broadcastMessages[0].from,
                message: userToBitGoEncryptedMsg4.broadcastMessages[0].payload.message,
                signature: userToBitGoEncryptedMsg4.broadcastMessages[0].payload.signature,
                signatureR: userToBitGoEncryptedMsg4.broadcastMessages[0].signatureR.message,
            },
        },
    };
    return {
        from: utils_1.SignatureShareType.USER,
        to: utils_1.SignatureShareType.BITGO,
        share: JSON.stringify(share),
    };
}
exports.getSignatureShareRoundThree = getSignatureShareRoundThree;
async function verifyBitGoMessagesAndSignaturesRoundOne(parsedSignatureShare, userGpgKey, bitgoGpgKey) {
    return await sdk_lib_mpc_1.DklsComms.decryptAndVerifyIncomingMessages({
        p2pMessages: [
            {
                from: parsedSignatureShare.data.msg2.from,
                to: parsedSignatureShare.data.msg2.to,
                payload: {
                    encryptedMessage: parsedSignatureShare.data.msg2.encryptedMessage,
                    signature: parsedSignatureShare.data.msg2.signature,
                },
            },
        ],
        broadcastMessages: [
            {
                from: parsedSignatureShare.data.msg1.from,
                payload: {
                    message: parsedSignatureShare.data.msg1.message,
                    signature: parsedSignatureShare.data.msg1.signature,
                },
            },
        ],
    }, [getBitGoPartyGpgKey(bitgoGpgKey)], [getUserPartyGpgKey(userGpgKey)]);
}
exports.verifyBitGoMessagesAndSignaturesRoundOne = verifyBitGoMessagesAndSignaturesRoundOne;
async function verifyBitGoMessagesAndSignaturesRoundTwo(parsedSignatureShare, userGpgKey, bitgoGpgKey) {
    return await sdk_lib_mpc_1.DklsComms.decryptAndVerifyIncomingMessages({
        p2pMessages: [
            {
                from: parsedSignatureShare.data.msg3.from,
                to: parsedSignatureShare.data.msg3.to,
                payload: {
                    encryptedMessage: parsedSignatureShare.data.msg3.encryptedMessage,
                    signature: parsedSignatureShare.data.msg3.signature,
                },
            },
        ],
        broadcastMessages: [],
    }, [getBitGoPartyGpgKey(bitgoGpgKey)], [getUserPartyGpgKey(userGpgKey)]);
}
exports.verifyBitGoMessagesAndSignaturesRoundTwo = verifyBitGoMessagesAndSignaturesRoundTwo;
function getBitGoPartyGpgKey(key) {
    return {
        partyId: 2,
        gpgKey: key.armor(),
    };
}
exports.getBitGoPartyGpgKey = getBitGoPartyGpgKey;
function getUserPartyGpgKey(key) {
    return {
        partyId: 0,
        gpgKey: key.privateKey,
    };
}
exports.getUserPartyGpgKey = getUserPartyGpgKey;
//# sourceMappingURL=data:application/json;base64,