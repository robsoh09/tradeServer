import { SignatureShareRecord } from '../../utils';
import openpgp from 'openpgp';
import { DklsTypes } from '@bitgo/sdk-lib-mpc';
import { MPCv2SignatureShareRound1Output, MPCv2SignatureShareRound2Output } from '@bitgo/public-types';
/**
 Helpers in this take care of all interaction with WP API's
**/
export declare function getSignatureShareRoundOne(round1Message: DklsTypes.DeserializedBroadcastMessage, userGpgKey: openpgp.SerializedKeyPair<string>): Promise<SignatureShareRecord>;
export declare function getSignatureShareRoundTwo(userToBitGoMessages2: DklsTypes.DeserializedMessages, userToBitGoMessages3: DklsTypes.DeserializedMessages, userGpgKey: openpgp.SerializedKeyPair<string>, bitgoGpgKey: openpgp.Key): Promise<SignatureShareRecord>;
export declare function getSignatureShareRoundThree(userToBitGoMessages4: DklsTypes.DeserializedMessages, userGpgKey: openpgp.SerializedKeyPair<string>, bitgoGpgKey: openpgp.Key): Promise<SignatureShareRecord>;
export declare function verifyBitGoMessagesAndSignaturesRoundOne(parsedSignatureShare: MPCv2SignatureShareRound1Output, userGpgKey: openpgp.SerializedKeyPair<string>, bitgoGpgKey: openpgp.Key): Promise<DklsTypes.SerializedMessages>;
export declare function verifyBitGoMessagesAndSignaturesRoundTwo(parsedSignatureShare: MPCv2SignatureShareRound2Output, userGpgKey: openpgp.SerializedKeyPair<string>, bitgoGpgKey: openpgp.Key): Promise<DklsTypes.SerializedMessages>;
export declare function getBitGoPartyGpgKey(key: openpgp.Key): DklsTypes.PartyGpgKey;
export declare function getUserPartyGpgKey(key: openpgp.SerializedKeyPair<string>): DklsTypes.PartyGpgKey;
//# sourceMappingURL=ecdsaMPCv2.d.ts.map