import { BitGoRequest, DecryptOptions, EncryptOptions, GetSharingKeyOptions, IRequestTracer } from '../api';
import { IBaseCoin } from './baseCoin';
import { CoinConstructor } from './coinFactory';
import { EnvironmentName } from './environments';
import { EcdhDerivedKeypair, GetSigningKeyApi } from './keychain';
export interface BitGoBase {
    wallets(): any;
    coin(coinName: string): IBaseCoin;
    decrypt(params: DecryptOptions): string;
    del(url: string): BitGoRequest;
    encrypt(params: EncryptOptions): string;
    readonly env: EnvironmentName;
    fetchConstants(): Promise<any>;
    get(url: string): BitGoRequest;
    getECDHKeychain(ecdhKeychainPub?: string): Promise<any>;
    getEcdhKeypairPrivate(password: string, entId?: string): Promise<EcdhDerivedKeypair>;
    getEnv(): EnvironmentName;
    getSharingKey({ email }: GetSharingKeyOptions): Promise<any>;
    getSigningKeyForUser(enterpriseId: string, userId?: string): Promise<GetSigningKeyApi>;
    microservicesUrl(path: string): string;
    post(url: string): BitGoRequest;
    put(url: string): BitGoRequest;
    patch(url: string): BitGoRequest;
    options(url: string): BitGoRequest;
    setRequestTracer(reqTracer: IRequestTracer): void;
    url(path: string, version?: number): string;
    register(name: string, coin: CoinConstructor): void;
}
//# sourceMappingURL=bitgoBase.d.ts.map