"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseLightningInvoice = exports.validateLnurlInvoice = exports.fetchLnurlPayInvoice = exports.decodeLnurlPay = void 0;
const bolt11 = __importStar(require("bolt11"));
const crypto = __importStar(require("crypto"));
const request = __importStar(require("superagent"));
const iLightning_1 = require("./iLightning");
const lnurlCodec_1 = require("./lnurlCodec");
const decode_1 = require("../utils/decode");
/**
 * Decodes an LNURL-pay request and makes an HTTP request to the decoded url
 * to retrieve details for the requested payment.
 * @param lnurl A bech32 encoded LNURL-pay request string
 * @returns {DecodedLnurlPayRequest} An LNURL-pay request message specifying
 * a min and max amount for the payment, metadata describing what the payment
 * is for, and a callback that can be used to fetch a lightning invoice for
 * the payment.
 */
async function decodeLnurlPay(lnurl) {
    const url = (0, lnurlCodec_1.decodeLnurl)(lnurl);
    const { body } = await request.get(url);
    const decodedRes = (0, decode_1.decodeOrElse)(iLightning_1.LnurlPayResponse.name, iLightning_1.LnurlPayResponse, body, (errors) => {
        throw new Error(`error(s) parsing lnurl response: ${errors}`);
    });
    const domain = new URL(url).hostname;
    return {
        ...decodedRes,
        domain,
    };
}
exports.decodeLnurlPay = decodeLnurlPay;
/**
 * Fetches a lightning invoice from an LNURL-pay callback server for a specified
 * amount of millisatoshis.
 * @param params {LnurlPayParams} An object specifying an amount and a callback
 * url with which to request a lightning invoice for an LNURL-pay request.
 * @returns {string} A BOLT #11 encoded lightning invoice
 */
async function fetchLnurlPayInvoice(params) {
    const { callback, millisatAmount, metadata } = params;
    const { pr: invoice } = callback.includes('?')
        ? (await request.get(callback + `&amount=${millisatAmount}`)).body
        : (await request.get(callback).query({ amount: millisatAmount })).body;
    const parsedInvoice = parseLightningInvoice(invoice);
    validateLnurlInvoice(parsedInvoice, millisatAmount, metadata);
    return invoice;
}
exports.fetchLnurlPayInvoice = fetchLnurlPayInvoice;
function getNetworkForInvoice(invoice) {
    if (invoice.startsWith('lntbs')) {
        // signet invoices are not supported by our bolt11 dependency
        // because the `tbs` prefix used for the invoice does not match the `tb`
        // prefix used by on-chain signet addresses
        // see: https://github.com/bitcoinjs/bolt11/pull/58#issuecomment-1106495709
        // we can still decode the invoice however using a custom network
        return {
            bech32: 'tbs',
            pubKeyHash: 0x6f,
            scriptHash: 0xc4,
            validWitnessVersions: [0, 1],
        };
    }
    return undefined;
}
/**
 * @param {ParsedLightningInvoice} invoice - a parsed lightning invoice
 * @param {number} amount - amount intended to pay for the invoice
 * @param {string} metadata - metadata that is used to verify the fetched invoice
 * @throws error for invoice that does not match with amount and metadata
 */
function validateLnurlInvoice(invoice, millisatAmount, metadata) {
    const { millisatoshis, descriptionHash } = invoice;
    if (millisatoshis !== millisatAmount) {
        throw new Error('amount of invoice does not match with given amount');
    }
    const hash = crypto.createHash('sha256').update(metadata).digest('hex');
    if (descriptionHash !== hash) {
        throw new Error('invoice h tag does not match with hash of metadata');
    }
}
exports.validateLnurlInvoice = validateLnurlInvoice;
/**
 * @param {unknown} invoiceStr - a lightning invoice
 * @return {ParsedLightningInvoice}
 * @throws error for invalid lightning invoice
 */
function parseLightningInvoice(invoiceStr) {
    var _a, _b;
    if (typeof invoiceStr !== 'string') {
        throw new Error('invoice is malformed');
    }
    const decodedInvoice = bolt11.decode(invoiceStr, getNetworkForInvoice(invoiceStr));
    if (decodedInvoice.network === undefined) {
        throw new Error('invoice network is invalid');
    }
    const { millisatoshis, tags, payeeNodeKey } = decodedInvoice;
    const paymentHash = (_a = tags.find((tag) => tag.tagName === 'payment_hash')) === null || _a === void 0 ? void 0 : _a.data;
    if (paymentHash === undefined || typeof paymentHash !== 'string') {
        throw new Error('invoice payment hash is invalid');
    }
    if (payeeNodeKey === undefined) {
        throw new Error('invoice payee pub key is invalid');
    }
    if (millisatoshis === undefined) {
        throw new Error('invoice millisatoshis amount is invalid');
    }
    const descriptionHash = (_b = tags.find((tag) => tag.tagName === 'purpose_commit_hash')) === null || _b === void 0 ? void 0 : _b.data;
    if (descriptionHash !== undefined && typeof descriptionHash !== 'string') {
        throw new Error('invoice description hash is invalid');
    }
    return { millisatoshis, paymentHash, payeeNodeKey, descriptionHash };
}
exports.parseLightningInvoice = parseLightningInvoice;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlnaHRuaW5nVXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYml0Z28vbGlnaHRuaW5nL2xpZ2h0bmluZ1V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsK0NBQWlDO0FBQ2pDLCtDQUFpQztBQUNqQyxvREFBc0M7QUFDdEMsNkNBQXdGO0FBQ3hGLDZDQUEyQztBQUMzQyw0Q0FBK0M7QUFnQi9DOzs7Ozs7OztHQVFHO0FBQ0ksS0FBSyxVQUFVLGNBQWMsQ0FBQyxLQUFhO0lBQ2hELE1BQU0sR0FBRyxHQUFHLElBQUEsd0JBQVcsRUFBQyxLQUFLLENBQUMsQ0FBQztJQUMvQixNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hDLE1BQU0sVUFBVSxHQUFHLElBQUEscUJBQVksRUFBQyw2QkFBZ0IsQ0FBQyxJQUFJLEVBQUUsNkJBQWdCLEVBQUUsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDeEYsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUNoRSxDQUFDLENBQUMsQ0FBQztJQUNILE1BQU0sTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQztJQUVyQyxPQUFPO1FBQ0wsR0FBRyxVQUFVO1FBQ2IsTUFBTTtLQUNQLENBQUM7QUFDSixDQUFDO0FBWkQsd0NBWUM7QUFFRDs7Ozs7O0dBTUc7QUFDSSxLQUFLLFVBQVUsb0JBQW9CLENBQUMsTUFBc0I7SUFDL0QsTUFBTSxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLEdBQUcsTUFBTSxDQUFDO0lBQ3RELE1BQU0sRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7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RUQsTUFBTSxlQUFlLEdBQUcsTUFBQSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxLQUFLLHFCQUFxQixDQUFDLDBDQUFFLElBQUksQ0FBQztJQUN4RixJQUFJLGVBQWUsS0FBSyxTQUFTLElBQUksT0FBTyxlQUFlLEtBQUssUUFBUSxFQUFFO1FBQ3hFLE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQztLQUN4RDtJQUVELE9BQU8sRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxlQUFlLEVBQUUsQ0FBQztBQUN2RSxDQUFDO0FBOUJELHNEQThCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGJvbHQxMSBmcm9tICdib2x0MTEnO1xuaW1wb3J0ICogYXMgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5pbXBvcnQgKiBhcyByZXF1ZXN0IGZyb20gJ3N1cGVyYWdlbnQnO1xuaW1wb3J0IHsgRGVjb2RlZExudXJsUGF5UmVxdWVzdCwgTG51cmxQYXlQYXJhbXMsIExudXJsUGF5UmVzcG9uc2UgfSBmcm9tICcuL2lMaWdodG5pbmcnO1xuaW1wb3J0IHsgZGVjb2RlTG51cmwgfSBmcm9tICcuL2xudXJsQ29kZWMnO1xuaW1wb3J0IHsgZGVjb2RlT3JFbHNlIH0gZnJvbSAnLi4vdXRpbHMvZGVjb2RlJztcblxuZXhwb3J0IHR5cGUgUGFyc2VkTGlnaHRuaW5nSW52b2ljZSA9IHtcbiAgLyoqXG4gICAqIFRoZSBhbW91bnQgb2YgbWlsbGlzYXRvc2hpIHJlcXVlc3RlZCBieSB0aGlzIGludm9pY2UuIElmIG51bGwgdGhlblxuICAgKiB0aGUgaW52b2ljZSBkb2VzIG5vdCBzcGVjaWZ5IGFuIGFtb3VudCBhbmQgd2lsbCBhY2NlcHQgYW55IHBheW1lbnQuXG4gICAqL1xuICBtaWxsaXNhdG9zaGlzOiBzdHJpbmcgfCBudWxsO1xuICAvKiogVGhlIGhleCBlbmNvZGVkIHBheW1lbnQgaGFzaCBmb3IgdGhlIGludm9pY2UgKi9cbiAgcGF5bWVudEhhc2g6IHN0cmluZztcbiAgLyoqIFRoZSBoZXggZW5jb2RlZCBub2RlIHB1YiBrZXkgb2YgdGhlIHBheWVlIHRoYXQgY3JlYXRlZCB0aGUgaW52b2ljZSAqL1xuICBwYXllZU5vZGVLZXk6IHN0cmluZztcbiAgLyoqIFRoZSBoZXggZW5jb2RlZCBTSEEyNTYgaGFzaCBvZiB0aGUgZGVzY3JpcHRpb24gb2Ygd2hhdCB0aGUgaW52b2ljZSBpcyBmb3IgKi9cbiAgZGVzY3JpcHRpb25IYXNoPzogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBEZWNvZGVzIGFuIExOVVJMLXBheSByZXF1ZXN0IGFuZCBtYWtlcyBhbiBIVFRQIHJlcXVlc3QgdG8gdGhlIGRlY29kZWQgdXJsXG4gKiB0byByZXRyaWV2ZSBkZXRhaWxzIGZvciB0aGUgcmVxdWVzdGVkIHBheW1lbnQuXG4gKiBAcGFyYW0gbG51cmwgQSBiZWNoMzIgZW5jb2RlZCBMTlVSTC1wYXkgcmVxdWVzdCBzdHJpbmdcbiAqIEByZXR1cm5zIHtEZWNvZGVkTG51cmxQYXlSZXF1ZXN0fSBBbiBMTlVSTC1wYXkgcmVxdWVzdCBtZXNzYWdlIHNwZWNpZnlpbmdcbiAqIGEgbWluIGFuZCBtYXggYW1vdW50IGZvciB0aGUgcGF5bWVudCwgbWV0YWRhdGEgZGVzY3JpYmluZyB3aGF0IHRoZSBwYXltZW50XG4gKiBpcyBmb3IsIGFuZCBhIGNhbGxiYWNrIHRoYXQgY2FuIGJlIHVzZWQgdG8gZmV0Y2ggYSBsaWdodG5pbmcgaW52b2ljZSBmb3JcbiAqIHRoZSBwYXltZW50LlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVjb2RlTG51cmxQYXkobG51cmw6IHN0cmluZyk6IFByb21pc2U8RGVjb2RlZExudXJsUGF5UmVxdWVzdD4ge1xuICBjb25zdCB1cmwgPSBkZWNvZGVMbnVybChsbnVybCk7XG4gIGNvbnN0IHsgYm9keSB9ID0gYXdhaXQgcmVxdWVzdC5nZXQodXJsKTtcbiAgY29uc3QgZGVjb2RlZFJlcyA9IGRlY29kZU9yRWxzZShMbnVybFBheVJlc3BvbnNlLm5hbWUsIExudXJsUGF5UmVzcG9uc2UsIGJvZHksIChlcnJvcnMpID0+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYGVycm9yKHMpIHBhcnNpbmcgbG51cmwgcmVzcG9uc2U6ICR7ZXJyb3JzfWApO1xuICB9KTtcbiAgY29uc3QgZG9tYWluID0gbmV3IFVSTCh1cmwpLmhvc3RuYW1lO1xuXG4gIHJldHVybiB7XG4gICAgLi4uZGVjb2RlZFJlcyxcbiAgICBkb21haW4sXG4gIH07XG59XG5cbi8qKlxuICogRmV0Y2hlcyBhIGxpZ2h0bmluZyBpbnZvaWNlIGZyb20gYW4gTE5VUkwtcGF5IGNhbGxiYWNrIHNlcnZlciBmb3IgYSBzcGVjaWZpZWRcbiAqIGFtb3VudCBvZiBtaWxsaXNhdG9zaGlzLlxuICogQHBhcmFtIHBhcmFtcyB7TG51cmxQYXlQYXJhbXN9IEFuIG9iamVjdCBzcGVjaWZ5aW5nIGFuIGFtb3VudCBhbmQgYSBjYWxsYmFja1xuICogdXJsIHdpdGggd2hpY2ggdG8gcmVxdWVzdCBhIGxpZ2h0bmluZyBpbnZvaWNlIGZvciBhbiBMTlVSTC1wYXkgcmVxdWVzdC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQk9MVCAjMTEgZW5jb2RlZCBsaWdodG5pbmcgaW52b2ljZVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hMbnVybFBheUludm9pY2UocGFyYW1zOiBMbnVybFBheVBhcmFtcyk6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IHsgY2FsbGJhY2ssIG1pbGxpc2F0QW1vdW50LCBtZXRhZGF0YSB9ID0gcGFyYW1zO1xuICBjb25zdCB7IHByOiBpbnZvaWNlIH0gPSBjYWxsYmFjay5pbmNsdWRlcygnPycpXG4gICAgPyAoYXdhaXQgcmVxdWVzdC5nZXQoY2FsbGJhY2sgKyBgJmFtb3VudD0ke21pbGxpc2F0QW1vdW50fWApKS5ib2R5XG4gICAgOiAoYXdhaXQgcmVxdWVzdC5nZXQoY2FsbGJhY2spLnF1ZXJ5KHsgYW1vdW50OiBtaWxsaXNhdEFtb3VudCB9KSkuYm9keTtcbiAgY29uc3QgcGFyc2VkSW52b2ljZSA9IHBhcnNlTGlnaHRuaW5nSW52b2ljZShpbnZvaWNlKTtcbiAgdmFsaWRhdGVMbnVybEludm9pY2UocGFyc2VkSW52b2ljZSwgbWlsbGlzYXRBbW91bnQsIG1ldGFkYXRhKTtcblxuICByZXR1cm4gaW52b2ljZTtcbn1cblxuZnVuY3Rpb24gZ2V0TmV0d29ya0Zvckludm9pY2UoaW52b2ljZTogc3RyaW5nKSB7XG4gIGlmIChpbnZvaWNlLnN0YXJ0c1dpdGgoJ2xudGJzJykpIHtcbiAgICAvLyBzaWduZXQgaW52b2ljZXMgYXJlIG5vdCBzdXBwb3J0ZWQgYnkgb3VyIGJvbHQxMSBkZXBlbmRlbmN5XG4gICAgLy8gYmVjYXVzZSB0aGUgYHRic2AgcHJlZml4IHVzZWQgZm9yIHRoZSBpbnZvaWNlIGRvZXMgbm90IG1hdGNoIHRoZSBgdGJgXG4gICAgLy8gcHJlZml4IHVzZWQgYnkgb24tY2hhaW4gc2lnbmV0IGFkZHJlc3Nlc1xuICAgIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW5qcy9ib2x0MTEvcHVsbC81OCNpc3N1ZWNvbW1lbnQtMTEwNjQ5NTcwOVxuICAgIC8vIHdlIGNhbiBzdGlsbCBkZWNvZGUgdGhlIGludm9pY2UgaG93ZXZlciB1c2luZyBhIGN1c3RvbSBuZXR3b3JrXG4gICAgcmV0dXJuIHtcbiAgICAgIGJlY2gzMjogJ3RicycsXG4gICAgICBwdWJLZXlIYXNoOiAweDZmLFxuICAgICAgc2NyaXB0SGFzaDogMHhjNCxcbiAgICAgIHZhbGlkV2l0bmVzc1ZlcnNpb25zOiBbMCwgMV0sXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHtQYXJzZWRMaWdodG5pbmdJbnZvaWNlfSBpbnZvaWNlIC0gYSBwYXJzZWQgbGlnaHRuaW5nIGludm9pY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBhbW91bnQgLSBhbW91bnQgaW50ZW5kZWQgdG8gcGF5IGZvciB0aGUgaW52b2ljZVxuICogQHBhcmFtIHtzdHJpbmd9IG1ldGFkYXRhIC0gbWV0YWRhdGEgdGhhdCBpcyB1c2VkIHRvIHZlcmlmeSB0aGUgZmV0Y2hlZCBpbnZvaWNlXG4gKiBAdGhyb3dzIGVycm9yIGZvciBpbnZvaWNlIHRoYXQgZG9lcyBub3QgbWF0Y2ggd2l0aCBhbW91bnQgYW5kIG1ldGFkYXRhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUxudXJsSW52b2ljZShpbnZvaWNlOiBQYXJzZWRMaWdodG5pbmdJbnZvaWNlLCBtaWxsaXNhdEFtb3VudDogc3RyaW5nLCBtZXRhZGF0YTogc3RyaW5nKTogdm9pZCB7XG4gIGNvbnN0IHsgbWlsbGlzYXRvc2hpcywgZGVzY3JpcHRpb25IYXNoIH0gPSBpbnZvaWNlO1xuICBpZiAobWlsbGlzYXRvc2hpcyAhPT0gbWlsbGlzYXRBbW91bnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2Ftb3VudCBvZiBpbnZvaWNlIGRvZXMgbm90IG1hdGNoIHdpdGggZ2l2ZW4gYW1vdW50Jyk7XG4gIH1cblxuICBjb25zdCBoYXNoID0gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTI1NicpLnVwZGF0ZShtZXRhZGF0YSkuZGlnZXN0KCdoZXgnKTtcbiAgaWYgKGRlc2NyaXB0aW9uSGFzaCAhPT0gaGFzaCkge1xuICAgIHRocm93IG5ldyBFcnJvcignaW52b2ljZSBoIHRhZyBkb2VzIG5vdCBtYXRjaCB3aXRoIGhhc2ggb2YgbWV0YWRhdGEnKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7dW5rbm93bn0gaW52b2ljZVN0ciAtIGEgbGlnaHRuaW5nIGludm9pY2VcbiAqIEByZXR1cm4ge1BhcnNlZExpZ2h0bmluZ0ludm9pY2V9XG4gKiBAdGhyb3dzIGVycm9yIGZvciBpbnZhbGlkIGxpZ2h0bmluZyBpbnZvaWNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUxpZ2h0bmluZ0ludm9pY2UoaW52b2ljZVN0cjogdW5rbm93bik6IFBhcnNlZExpZ2h0bmluZ0ludm9pY2Uge1xuICBpZiAodHlwZW9mIGludm9pY2VTdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZvaWNlIGlzIG1hbGZvcm1lZCcpO1xuICB9XG5cbiAgY29uc3QgZGVjb2RlZEludm9pY2UgPSBib2x0MTEuZGVjb2RlKGludm9pY2VTdHIsIGdldE5ldHdvcmtGb3JJbnZvaWNlKGludm9pY2VTdHIpKTtcblxuICBpZiAoZGVjb2RlZEludm9pY2UubmV0d29yayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZvaWNlIG5ldHdvcmsgaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgY29uc3QgeyBtaWxsaXNhdG9zaGlzLCB0YWdzLCBwYXllZU5vZGVLZXkgfSA9IGRlY29kZWRJbnZvaWNlO1xuXG4gIGNvbnN0IHBheW1lbnRIYXNoID0gdGFncy5maW5kKCh0YWcpID0+IHRhZy50YWdOYW1lID09PSAncGF5bWVudF9oYXNoJyk/LmRhdGE7XG4gIGlmIChwYXltZW50SGFzaCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBwYXltZW50SGFzaCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludm9pY2UgcGF5bWVudCBoYXNoIGlzIGludmFsaWQnKTtcbiAgfVxuICBpZiAocGF5ZWVOb2RlS2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludm9pY2UgcGF5ZWUgcHViIGtleSBpcyBpbnZhbGlkJyk7XG4gIH1cbiAgaWYgKG1pbGxpc2F0b3NoaXMgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignaW52b2ljZSBtaWxsaXNhdG9zaGlzIGFtb3VudCBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICBjb25zdCBkZXNjcmlwdGlvbkhhc2ggPSB0YWdzLmZpbmQoKHRhZykgPT4gdGFnLnRhZ05hbWUgPT09ICdwdXJwb3NlX2NvbW1pdF9oYXNoJyk/LmRhdGE7XG4gIGlmIChkZXNjcmlwdGlvbkhhc2ggIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZGVzY3JpcHRpb25IYXNoICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignaW52b2ljZSBkZXNjcmlwdGlvbiBoYXNoIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHJldHVybiB7IG1pbGxpc2F0b3NoaXMsIHBheW1lbnRIYXNoLCBwYXllZU5vZGVLZXksIGRlc2NyaXB0aW9uSGFzaCB9O1xufVxuIl19