import * as t from 'io-ts';
export interface CreateInvoiceParams {
    value: number;
    memo?: string;
    expiry?: number;
}
export interface LightningWithdrawalParams {
    value: number;
    destination?: string;
    sequenceId?: string;
}
export interface LightningDepositParams {
    amount: number;
}
export interface PayInvoiceParams {
    invoice: string;
    sequenceId?: string;
    comment?: string;
    feeLimitRatio?: number;
    feeLimit?: number;
}
export interface GetInvoicesQuery {
    status?: string;
    limit?: number;
    startDate?: string;
    endDate?: string;
}
export interface GetPaymentsQuery {
    status?: string;
    limit?: number;
    startDate?: string;
    endDate?: string;
}
export interface LnurlPayParams {
    callback: string;
    millisatAmount: string;
    metadata: string;
}
export declare const WPTransferEntry: t.PartialC<{
    wallet: t.StringC;
    address: t.StringC;
    value: t.NumberC;
    valueString: t.StringC;
    isChange: t.BooleanC;
    isPayGo: t.BooleanC;
    token: t.StringC;
}>;
export declare type WPTransferEntry = t.TypeOf<typeof WPTransferEntry>;
export declare const WPTransfer: t.TypeC<{
    entries: t.ArrayC<t.PartialC<{
        wallet: t.StringC;
        address: t.StringC;
        value: t.NumberC;
        valueString: t.StringC;
        isChange: t.BooleanC;
        isPayGo: t.BooleanC;
        token: t.StringC;
    }>>;
    id: t.StringC;
    heightId: t.StringC;
    type: t.StringC;
    value: t.NumberC;
    state: t.StringC;
}>;
export declare type WPTransfer = t.TypeOf<typeof WPTransfer>;
export declare const WithdrawResponse: t.ExactC<t.TypeC<{
    txid: t.StringC;
}>>;
export declare type WithdrawResponse = t.TypeOf<typeof WithdrawResponse>;
export declare const CreateInvoiceResponse: t.ExactC<t.TypeC<{
    value: t.NumberC;
    memo: t.UnionC<[t.StringC, t.UndefinedC]>;
    paymentHash: t.StringC;
    invoice: t.StringC;
    walletId: t.StringC;
    status: t.StringC;
    expiresAt: t.StringC;
}>>;
export declare type CreateInvoiceResponse = t.TypeOf<typeof CreateInvoiceResponse>;
export declare const CreateDepositAddressResponse: t.ExactC<t.TypeC<{
    address: t.StringC;
}>>;
export declare type CreateDepositAddressResponse = t.TypeOf<typeof CreateDepositAddressResponse>;
export declare const DepositResponse: t.ExactC<t.TypeC<{
    status: t.StringC;
    transfer: t.TypeC<{
        entries: t.ArrayC<t.PartialC<{
            wallet: t.StringC;
            address: t.StringC;
            value: t.NumberC;
            valueString: t.StringC;
            isChange: t.BooleanC;
            isPayGo: t.BooleanC;
            token: t.StringC;
        }>>;
        id: t.StringC;
        heightId: t.StringC;
        type: t.StringC;
        value: t.NumberC;
        state: t.StringC;
    }>;
}>>;
export declare type DepositResponse = t.TypeOf<typeof DepositResponse>;
export declare const PayInvoiceResponse: t.ExactC<t.TypeC<{
    paymentHash: t.StringC;
    transfer: t.TypeC<{
        entries: t.ArrayC<t.PartialC<{
            wallet: t.StringC;
            address: t.StringC;
            value: t.NumberC;
            valueString: t.StringC;
            isChange: t.BooleanC;
            isPayGo: t.BooleanC;
            token: t.StringC;
        }>>;
        id: t.StringC;
        heightId: t.StringC;
        type: t.StringC;
        value: t.NumberC;
        state: t.StringC;
    }>;
    status: t.StringC;
}>>;
export declare type PayInvoiceResponse = t.TypeOf<typeof PayInvoiceResponse>;
export declare const GetBalanceResponse: t.ExactC<t.TypeC<{
    balance: t.NumberC;
    availableBalance: t.NumberC;
    maximumBalance: t.NumberC;
}>>;
export declare type GetBalanceResponse = t.TypeOf<typeof GetBalanceResponse>;
export declare const GetInvoicesResponse: t.ArrayC<t.ExactC<t.TypeC<{
    paymentHash: t.StringC;
    walletId: t.StringC;
    status: t.UnionC<[t.LiteralC<"open">, t.LiteralC<"settled">, t.LiteralC<"canceled">]>;
    value: t.NumberC;
    expiresAt: t.StringC;
    createdAt: t.StringC;
    updatedAt: t.StringC;
    amtPaidSats: t.UnionC<[t.NumberC, t.UndefinedC]>;
}>>>;
export declare type GetInvoicesResponse = t.TypeOf<typeof GetInvoicesResponse>;
export declare const GetPaymentsResponse: t.ArrayC<t.ExactC<t.TypeC<{
    paymentHash: t.StringC;
    walletId: t.StringC;
    status: t.UnionC<[t.LiteralC<"in_flight">, t.LiteralC<"settled">, t.LiteralC<"failed">]>;
    amount: t.UnionC<[t.NumberC, t.UndefinedC]>;
    invoice: t.StringC;
    sendQueueId: t.StringC;
    failureReason: t.UnionC<[t.StringC, t.UndefinedC]>;
    fee: t.UnionC<[t.NumberC, t.UndefinedC]>;
    feeLimit: t.NumberC;
    paymentPreimage: t.UnionC<[t.StringC, t.UndefinedC]>;
    destination: t.StringC;
}>>>;
export declare type GetPaymentsResponse = t.TypeOf<typeof GetPaymentsResponse>;
export declare const LnurlPayResponse: t.ExactC<t.TypeC<{
    tag: t.LiteralC<"payRequest">;
    callback: t.StringC;
    /** The maximum amount in millisatoshis we can pay for this LNRUL request */
    maxSendable: t.NumberC;
    /** The minimum amount in millisatoshis we can pay for this LNRUL request */
    minSendable: t.NumberC;
    /** A json array in string format describing the payment */
    metadata: t.StringC;
}>>;
export declare type LnurlPayResponse = t.TypeOf<typeof LnurlPayResponse>;
export declare type DecodedLnurlPayRequest = LnurlPayResponse & {
    /**
     * From https://github.com/fiatjaf/lnurl-rfc/blob/luds/06.md#pay-to-static-qrnfclink
     * a payment dialog must include: Domain name extracted from LNURL query string.
     */
    domain: string;
};
export interface ILightning {
    createInvoice(params: CreateInvoiceParams): Promise<CreateInvoiceResponse>;
    createDepositAddress(): Promise<CreateDepositAddressResponse>;
    payInvoice(params: PayInvoiceParams): Promise<PayInvoiceResponse>;
    getBalance(): Promise<GetBalanceResponse>;
    withdraw(params: LightningWithdrawalParams): Promise<WithdrawResponse>;
    deposit(params: LightningDepositParams): Promise<DepositResponse>;
    getInvoices(query?: GetInvoicesQuery): Promise<GetInvoicesResponse>;
    decodeLnurlPay(lnurl: string): Promise<DecodedLnurlPayRequest>;
    fetchLnurlPayInvoice(params: LnurlPayParams): Promise<string>;
    getPayments(query?: GetPaymentsQuery): Promise<GetPaymentsResponse>;
}
//# sourceMappingURL=iLightning.d.ts.map