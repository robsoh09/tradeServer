import { ILightning, CreateInvoiceParams, PayInvoiceParams, LightningWithdrawalParams, LightningDepositParams, LnurlPayParams, CreateInvoiceResponse, CreateDepositAddressResponse, PayInvoiceResponse, GetBalanceResponse, WithdrawResponse, DepositResponse, GetInvoicesQuery, GetInvoicesResponse, DecodedLnurlPayRequest, GetPaymentsQuery, GetPaymentsResponse } from './iLightning';
import { BitGoBase } from '../bitgoBase';
import { IWallet } from '../wallet';
export declare class Lightning implements ILightning {
    private readonly bitgo;
    private readonly wallet;
    private readonly url;
    constructor(bitgo: BitGoBase, wallet: IWallet);
    createInvoice(params: CreateInvoiceParams): Promise<CreateInvoiceResponse>;
    createDepositAddress(): Promise<CreateDepositAddressResponse>;
    payInvoice(params: PayInvoiceParams): Promise<PayInvoiceResponse>;
    getBalance(): Promise<GetBalanceResponse>;
    withdraw(params: LightningWithdrawalParams): Promise<WithdrawResponse>;
    deposit(params: LightningDepositParams): Promise<DepositResponse>;
    getInvoices(query?: GetInvoicesQuery): Promise<GetInvoicesResponse>;
    /**
     * fetches lightning payments by status, limit, startDate and endDate
     * @param query
     * @return {GetPaymentsResponse}
     */
    getPayments(query?: GetPaymentsQuery): Promise<GetPaymentsResponse>;
    decodeLnurlPay(lnurl: string): Promise<DecodedLnurlPayRequest>;
    fetchLnurlPayInvoice(params: LnurlPayParams): Promise<string>;
}
//# sourceMappingURL=lightning.d.ts.map