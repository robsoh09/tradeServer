"use strict";
/**
 * @hidden
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAddressP2PKH = exports.makeRandomKey = exports.getNetwork = void 0;
const utxolib = __importStar(require("@bitgo/utxo-lib"));
const common = __importStar(require("../common"));
function getNetwork(network) {
    network = network || common.getNetwork();
    return utxolib.networks[network];
}
exports.getNetwork = getNetwork;
function makeRandomKey() {
    return utxolib.ECPair.makeRandom({ network: getNetwork() });
}
exports.makeRandomKey = makeRandomKey;
function getAddressP2PKH(key) {
    let pubkey;
    if ('getPublicKeyBuffer' in key) {
        pubkey = key.getPublicKeyBuffer();
    }
    else {
        pubkey = key.publicKey;
    }
    const { address } = utxolib.payments.p2pkh({ pubkey, network: key.network });
    if (!address) {
        throw new Error('could not compute address');
    }
    return address;
}
exports.getAddressP2PKH = getAddressP2PKH;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYml0Y29pbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9iaXRnby9iaXRjb2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFSCx5REFBMkM7QUFFM0Msa0RBQW9DO0FBR3BDLFNBQWdCLFVBQVUsQ0FBQyxPQUFtQjtJQUM1QyxPQUFPLEdBQUcsT0FBTyxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN6QyxPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbkMsQ0FBQztBQUhELGdDQUdDO0FBRUQsU0FBZ0IsYUFBYTtJQUMzQixPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBOEIsRUFBRSxDQUFDLENBQUM7QUFDMUYsQ0FBQztBQUZELHNDQUVDO0FBT0QsU0FBZ0IsZUFBZSxDQUFDLEdBQW9EO0lBQ2xGLElBQUksTUFBTSxDQUFDO0lBQ1gsSUFBSSxvQkFBb0IsSUFBSSxHQUFHLEVBQUU7UUFDL0IsTUFBTSxHQUFHLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0tBQ25DO1NBQU07UUFDTCxNQUFNLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQztLQUN4QjtJQUNELE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQW1DLEVBQUUsQ0FBQyxDQUFDO0lBQ3pHLElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDWixNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7S0FDOUM7SUFDRCxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDO0FBWkQsMENBWUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBoaWRkZW5cbiAqL1xuXG5pbXBvcnQgKiBhcyB1dHhvbGliIGZyb20gJ0BiaXRnby91dHhvLWxpYic7XG5pbXBvcnQgeyBCSVAzMkludGVyZmFjZSwgRUNQYWlySW50ZXJmYWNlIH0gZnJvbSAnQGJpdGdvL3V0eG8tbGliJztcbmltcG9ydCAqIGFzIGNvbW1vbiBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHsgVjFOZXR3b3JrIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXR3b3JrKG5ldHdvcms/OiBWMU5ldHdvcmspOiB1dHhvbGliLk5ldHdvcmsge1xuICBuZXR3b3JrID0gbmV0d29yayB8fCBjb21tb24uZ2V0TmV0d29yaygpO1xuICByZXR1cm4gdXR4b2xpYi5uZXR3b3Jrc1tuZXR3b3JrXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VSYW5kb21LZXkoKTogRUNQYWlySW50ZXJmYWNlIHtcbiAgcmV0dXJuIHV0eG9saWIuRUNQYWlyLm1ha2VSYW5kb20oeyBuZXR3b3JrOiBnZXROZXR3b3JrKCkgYXMgdXR4b2xpYi5CaXRjb2luSlNOZXR3b3JrIH0pO1xufVxuXG5pbnRlcmZhY2UgTGVnYWN5RUNQYWlyIHtcbiAgbmV0d29yazogdXR4b2xpYi5OZXR3b3JrO1xuICBnZXRQdWJsaWNLZXlCdWZmZXIoKTogQnVmZmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWRkcmVzc1AyUEtIKGtleTogRUNQYWlySW50ZXJmYWNlIHwgQklQMzJJbnRlcmZhY2UgfCBMZWdhY3lFQ1BhaXIpOiBzdHJpbmcge1xuICBsZXQgcHVia2V5O1xuICBpZiAoJ2dldFB1YmxpY0tleUJ1ZmZlcicgaW4ga2V5KSB7XG4gICAgcHVia2V5ID0ga2V5LmdldFB1YmxpY0tleUJ1ZmZlcigpO1xuICB9IGVsc2Uge1xuICAgIHB1YmtleSA9IGtleS5wdWJsaWNLZXk7XG4gIH1cbiAgY29uc3QgeyBhZGRyZXNzIH0gPSB1dHhvbGliLnBheW1lbnRzLnAycGtoKHsgcHVia2V5LCBuZXR3b3JrOiBrZXkubmV0d29yayBhcyB1dHhvbGliLkJpdGNvaW5KU05ldHdvcmsgfSk7XG4gIGlmICghYWRkcmVzcykge1xuICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IGNvbXB1dGUgYWRkcmVzcycpO1xuICB9XG4gIHJldHVybiBhZGRyZXNzO1xufVxuIl19