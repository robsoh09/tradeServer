"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TradingAccount = void 0;
const network_1 = require("./network");
class TradingAccount {
    constructor(enterpriseId, wallet, bitgo) {
        this.enterpriseId = enterpriseId;
        this.wallet = wallet;
        this.bitgo = bitgo;
    }
    get id() {
        return this.wallet.id();
    }
    /**
     * Signs an arbitrary payload with the user key on this trading account
     * @param params
     * @param params.payload arbitrary payload object (string | Record<string, unknown>)
     * @param params.walletPassphrase passphrase on this trading account, used to unlock the account user key
     * @returns hex-encoded signature of the payload
     */
    async signPayload(params) {
        const key = (await this.wallet.baseCoin.keychains().get({ id: this.wallet.keyIds()[0] }));
        const prv = this.wallet.bitgo.decrypt({
            input: key.encryptedPrv,
            password: params.walletPassphrase,
        });
        const payload = typeof params.payload === 'string' ? params.payload : JSON.stringify(params.payload);
        return (await this.wallet.baseCoin.signMessage({ prv }, payload)).toString('hex');
    }
    /**
     * Get Trade Network
     * To enable Off Exchange Allocation & Settlement, contact support@bitgo.com.
     * BitGo provides a UI experience for clients at: https://app.bitgo.com/web/enterprises/<enterpriseId>/allocate
     */
    toNetwork() {
        return new network_1.TradingNetwork(this.enterpriseId, this.wallet, this.bitgo);
    }
}
exports.TradingAccount = TradingAccount;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhZGluZ0FjY291bnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYml0Z28vdHJhZGluZy90cmFkaW5nQWNjb3VudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFNQSx1Q0FBMkM7QUFFM0MsTUFBYSxjQUFjO0lBTXpCLFlBQVksWUFBb0IsRUFBRSxNQUFlLEVBQUUsS0FBZ0I7UUFDakUsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUVELElBQUksRUFBRTtRQUNKLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUE2QjtRQUM3QyxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFRLENBQUM7UUFDakcsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO1lBQ3BDLEtBQUssRUFBRSxHQUFHLENBQUMsWUFBWTtZQUN2QixRQUFRLEVBQUUsTUFBTSxDQUFDLGdCQUFnQjtTQUNsQyxDQUFDLENBQUM7UUFDSCxNQUFNLE9BQU8sR0FBRyxPQUFPLE1BQU0sQ0FBQyxPQUFPLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyRyxPQUFRLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3RixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILFNBQVM7UUFDUCxPQUFPLElBQUksd0JBQWMsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hFLENBQUM7Q0FDRjtBQXpDRCx3Q0F5Q0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwcmV0dGllclxuICovXG5pbXBvcnQgeyBCaXRHb0Jhc2UgfSBmcm9tICcuLi9iaXRnb0Jhc2UnO1xuaW1wb3J0IHsgSVRyYWRpbmdBY2NvdW50LCBTaWduUGF5bG9hZFBhcmFtZXRlcnMgfSBmcm9tICcuLi90cmFkaW5nJztcbmltcG9ydCB7IElXYWxsZXQgfSBmcm9tICcuLi93YWxsZXQnO1xuaW1wb3J0IHsgVHJhZGluZ05ldHdvcmsgfSBmcm9tICcuL25ldHdvcmsnO1xuXG5leHBvcnQgY2xhc3MgVHJhZGluZ0FjY291bnQgaW1wbGVtZW50cyBJVHJhZGluZ0FjY291bnQge1xuICBwcml2YXRlIHJlYWRvbmx5IGJpdGdvOiBCaXRHb0Jhc2U7XG4gIHByaXZhdGUgcmVhZG9ubHkgZW50ZXJwcmlzZUlkOiBzdHJpbmc7XG5cbiAgcHVibGljIHdhbGxldDogSVdhbGxldDtcblxuICBjb25zdHJ1Y3RvcihlbnRlcnByaXNlSWQ6IHN0cmluZywgd2FsbGV0OiBJV2FsbGV0LCBiaXRnbzogQml0R29CYXNlKSB7XG4gICAgdGhpcy5lbnRlcnByaXNlSWQgPSBlbnRlcnByaXNlSWQ7XG4gICAgdGhpcy53YWxsZXQgPSB3YWxsZXQ7XG4gICAgdGhpcy5iaXRnbyA9IGJpdGdvO1xuICB9XG5cbiAgZ2V0IGlkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMud2FsbGV0LmlkKCk7XG4gIH1cblxuICAvKipcbiAgICogU2lnbnMgYW4gYXJiaXRyYXJ5IHBheWxvYWQgd2l0aCB0aGUgdXNlciBrZXkgb24gdGhpcyB0cmFkaW5nIGFjY291bnRcbiAgICogQHBhcmFtIHBhcmFtc1xuICAgKiBAcGFyYW0gcGFyYW1zLnBheWxvYWQgYXJiaXRyYXJ5IHBheWxvYWQgb2JqZWN0IChzdHJpbmcgfCBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPilcbiAgICogQHBhcmFtIHBhcmFtcy53YWxsZXRQYXNzcGhyYXNlIHBhc3NwaHJhc2Ugb24gdGhpcyB0cmFkaW5nIGFjY291bnQsIHVzZWQgdG8gdW5sb2NrIHRoZSBhY2NvdW50IHVzZXIga2V5XG4gICAqIEByZXR1cm5zIGhleC1lbmNvZGVkIHNpZ25hdHVyZSBvZiB0aGUgcGF5bG9hZFxuICAgKi9cbiAgYXN5bmMgc2lnblBheWxvYWQocGFyYW1zOiBTaWduUGF5bG9hZFBhcmFtZXRlcnMpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IGtleSA9IChhd2FpdCB0aGlzLndhbGxldC5iYXNlQ29pbi5rZXljaGFpbnMoKS5nZXQoeyBpZDogdGhpcy53YWxsZXQua2V5SWRzKClbMF0gfSkpIGFzIGFueTtcbiAgICBjb25zdCBwcnYgPSB0aGlzLndhbGxldC5iaXRnby5kZWNyeXB0KHtcbiAgICAgIGlucHV0OiBrZXkuZW5jcnlwdGVkUHJ2LFxuICAgICAgcGFzc3dvcmQ6IHBhcmFtcy53YWxsZXRQYXNzcGhyYXNlLFxuICAgIH0pO1xuICAgIGNvbnN0IHBheWxvYWQgPSB0eXBlb2YgcGFyYW1zLnBheWxvYWQgPT09ICdzdHJpbmcnID8gcGFyYW1zLnBheWxvYWQgOiBKU09OLnN0cmluZ2lmeShwYXJhbXMucGF5bG9hZCk7XG4gICAgcmV0dXJuICgoYXdhaXQgdGhpcy53YWxsZXQuYmFzZUNvaW4uc2lnbk1lc3NhZ2UoeyBwcnYgfSwgcGF5bG9hZCkpIGFzIGFueSkudG9TdHJpbmcoJ2hleCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBUcmFkZSBOZXR3b3JrXG4gICAqIFRvIGVuYWJsZSBPZmYgRXhjaGFuZ2UgQWxsb2NhdGlvbiAmIFNldHRsZW1lbnQsIGNvbnRhY3Qgc3VwcG9ydEBiaXRnby5jb20uXG4gICAqIEJpdEdvIHByb3ZpZGVzIGEgVUkgZXhwZXJpZW5jZSBmb3IgY2xpZW50cyBhdDogaHR0cHM6Ly9hcHAuYml0Z28uY29tL3dlYi9lbnRlcnByaXNlcy88ZW50ZXJwcmlzZUlkPi9hbGxvY2F0ZVxuICAgKi9cbiAgdG9OZXR3b3JrKCk6IFRyYWRpbmdOZXR3b3JrIHtcbiAgICByZXR1cm4gbmV3IFRyYWRpbmdOZXR3b3JrKHRoaXMuZW50ZXJwcmlzZUlkLCB0aGlzLndhbGxldCwgdGhpcy5iaXRnbyk7XG4gIH1cbn1cbiJdfQ==