"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TradingNetwork = void 0;
const uuid_1 = require("uuid");
const crypto_1 = __importDefault(require("crypto"));
class TradingNetwork {
    constructor(enterpriseId, wallet, bitgo) {
        this.enterpriseId = enterpriseId;
        this.wallet = wallet;
        this.bitgo = bitgo;
    }
    getBalances(params) {
        const url = this.bitgo.microservicesUrl(`/api/network/v1/enterprises/${this.enterpriseId}/clients/balances`);
        return this.bitgo.get(url).set('enterprise-id', this.enterpriseId).send(params).result();
    }
    getPartners(params) {
        const url = this.bitgo.microservicesUrl(`/api/network/v1/enterprises/${this.enterpriseId}/partners`);
        return this.bitgo.get(url).set('enterprise-id', this.enterpriseId).send(params).result();
    }
    getSupportedCurrencies(params) {
        const url = this.bitgo.microservicesUrl(`/api/network/v1/enterprises/${this.enterpriseId}/supportedCurrencies`);
        return this.bitgo.get(url).set('enterprise-id', this.enterpriseId).send(params).result();
    }
    getConnections(params) {
        const url = this.bitgo.microservicesUrl(`/api/network/v1/enterprises/${this.enterpriseId}/clients/connections`);
        return this.bitgo.get(url).set('enterprise-id', this.enterpriseId).send(params).result();
    }
    getConnectionById({ connectionId, ...params }) {
        const url = this.bitgo.microservicesUrl(`/api/network/v1/enterprises/${this.enterpriseId}/clients/connections/${connectionId}`);
        return this.bitgo.get(url).set('enterprise-id', this.enterpriseId).send(params).result();
    }
    createConnection(params) {
        const url = this.bitgo.microservicesUrl(`/api/network/v1/enterprises/${this.enterpriseId}/clients/connections`);
        return this.bitgo.post(url).set('enterprise-id', this.enterpriseId).send(params).result();
    }
    updateConnection({ connectionId, ...params }) {
        const url = this.bitgo.microservicesUrl(`/api/network/v1/enterprises/${this.enterpriseId}/clients/connections/${connectionId}`);
        return this.bitgo.put(url).set('enterprise-id', this.enterpriseId).send(params).result();
    }
    getAllocations(params) {
        const url = this.bitgo.microservicesUrl(`/api/network/v1/enterprises/${this.enterpriseId}/clients/allocations`);
        return this.bitgo.get(url).set('enterprise-id', this.enterpriseId).send(params).result();
    }
    getAllocationById({ allocationId, ...params }) {
        const url = this.bitgo.microservicesUrl(`/api/network/v1/enterprises/${this.enterpriseId}/clients/allocations/${allocationId}`);
        return this.bitgo.get(url).set('enterprise-id', this.enterpriseId).send(params).result();
    }
    /**
     * Prepare an allocation for submission
     * @param {string} walletPassphrase ofc wallet passphrase
     * @param {string} connectionId connection to whom to make the allocation or deallocation
     * @param {string=} clientExternalId one time generated uuid v4
     * @param {string} currency currency for which the allocation should be made. e.g. btc / tbtc
     * @param {string} quantity base amount. e.g. 10000000 (1 BTC)
     * @param {string} notes Private note that you can view and edit
     * @param {string=} nonce one time generated string .e.g. crypto.randomBytes(32).toString('hex')
     * @returns
     */
    async prepareAllocation({ walletPassphrase, ...body }) {
        if (!body.clientExternalId) {
            body.clientExternalId = (0, uuid_1.v4)();
        }
        if (!body.nonce) {
            body.nonce = crypto_1.default.randomBytes(32).toString('hex');
        }
        const payload = JSON.stringify(body);
        const prv = await this.wallet.getPrv({ walletPassphrase });
        const signedBuffer = await this.wallet.baseCoin.signMessage({ prv }, payload);
        const signature = signedBuffer.toString('hex');
        return {
            ...body,
            payload,
            signature,
        };
    }
    createAllocation({ connectionId, ...params }) {
        const url = this.bitgo.microservicesUrl(`/api/network/v1/enterprises/${this.enterpriseId}/clients/connections/${connectionId}/allocations`);
        return this.bitgo.post(url).set('enterprise-id', this.enterpriseId).send(params).result();
    }
    createDeallocation({ connectionId, ...params }) {
        const url = this.bitgo.microservicesUrl(`/api/network/v1/enterprises/${this.enterpriseId}/clients/connections/${connectionId}/deallocations`);
        return this.bitgo.post(url).set('enterprise-id', this.enterpriseId).send(params).result();
    }
    getSettlements(params) {
        const url = this.bitgo.microservicesUrl(`/api/network/v1/enterprises/${this.enterpriseId}/clients/settlements`);
        return this.bitgo.get(url).set('enterprise-id', this.enterpriseId).send(params).result();
    }
    getSettlementById({ settlementId, ...params }) {
        const url = this.bitgo.microservicesUrl(`/api/network/v1/enterprises/${this.enterpriseId}/clients/settlements/${settlementId}`);
        return this.bitgo.get(url).set('enterprise-id', this.enterpriseId).send(params).result();
    }
    getSettlementTransfers(params) {
        const url = this.bitgo.microservicesUrl(`/api/network/v1/enterprises/${this.enterpriseId}/clients/settlementTransfers`);
        return this.bitgo.get(url).set('enterprise-id', this.enterpriseId).send(params).result();
    }
}
exports.TradingNetwork = TradingNetwork;
//# sourceMappingURL=data:application/json;base64,