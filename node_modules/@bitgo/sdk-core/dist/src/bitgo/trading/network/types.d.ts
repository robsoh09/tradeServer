export interface ITradingNetwork {
    getBalances: (params?: GetNetworkBalancesParams) => Promise<GetNetworkBalancesResponse>;
    getPartners: (params?: GetNetworkPartnersParams) => Promise<GetNetworkPartnersResponse>;
    getSupportedCurrencies: (params: GetNetworkSupportedCurrenciesParams) => Promise<GetNetworkSupportedCurrenciesResponse>;
    getConnections: (params?: GetNetworkConnectionsParams) => Promise<GetNetworkConnectionsResponse>;
    getConnectionById: (params: GetNetworkConnectionByIdParams) => Promise<GetNetworkConnectionByIdResponse>;
    createConnection: (params: CreateNetworkConnectionParams) => Promise<CreateNetworkConnectionResponse>;
    updateConnection: (params: UpdateNetworkConnectionParams) => Promise<UpdateNetworkConnectionResponse>;
    getAllocations: (params?: GetNetworkAllocationsParams) => Promise<GetNetworkAllocationsResponse>;
    getAllocationById: (params: GetNetworkAllocationByIdParams) => Promise<GetNetworkAllocationByIdResponse>;
    createAllocation: (params: CreateNetworkAllocationParams) => Promise<CreateNetworkAllocationResponse>;
    createDeallocation: (params: CreateNetworkDeallocationParams) => Promise<CreateNetworkDeallocationResponse>;
    getSettlements: (params?: GetNetworkSettlementsParams) => Promise<GetNetworkSettlementsResponse>;
    getSettlementById: (params: GetNetworkSettlementByIdParams) => Promise<GetNetworkSettlementByIdResponse>;
    getSettlementTransfers: (params?: GetNetworkSettlementTransfersParams) => Promise<GetNetworkSettlementTransfersResponse>;
}
export declare type GetNetworkBalancesParams = NetworkPaginationParams & {
    connectionIds?: string[];
    partnerIds?: string[];
};
export declare type GetNetworkBalancesResponse = {
    clientId: string;
    balances: Record<string, NetworkAccountBalanceRecord>;
    networkBalances: Record<string, NetworkBalance>;
};
export declare type GetNetworkPartnersParams = NetworkPaginationParams & {
    ids?: string[];
    names?: string[];
    institutionIds?: string[];
    institutionIdentifiers?: string[];
    active?: boolean;
};
export declare type GetNetworkPartnersResponse = {
    partners: NetworkPartner[];
};
export declare type GetNetworkSupportedCurrenciesParams = {
    partnerIds: string[];
};
export declare type GetNetworkSupportedCurrenciesResponse = {
    supportedCurrencies: Record<string, V1SupportedCurrency[]>;
    domain: string;
};
/** Connections */
export declare type GetNetworkConnectionsParams = NetworkPaginationParams & {
    active?: string;
    connectionIds?: string;
    partnerIds?: string;
    names?: string;
};
export declare type GetNetworkConnectionsResponse = {
    connections: NetworkConnection[];
};
export declare type GetNetworkConnectionByIdParams = {
    connectionId: string;
};
export declare type GetNetworkConnectionByIdResponse = {
    connection: NetworkConnection;
};
export declare type CreateNetworkConnectionParams = {
    partnerId: string;
    name: string;
    connectionKey: NetworkConnectionKey;
    nonce: string;
    payload: string;
    signature: string;
};
export declare type CreateNetworkConnectionResponse = {
    connection: NetworkConnection;
};
export declare type UpdateNetworkConnectionParams = {
    connectionId: string;
    name?: string;
    active?: boolean;
};
export declare type UpdateNetworkConnectionResponse = {
    connection: NetworkConnection;
};
/** Allocations */
export declare type GetNetworkAllocationsParams = NetworkPaginationParams & {
    sortField?: 'id' | 'updatedAt' | 'quantity' | 'currency';
    sortDirection?: NetworkSortDirection;
    allocationIds?: string[];
    types?: NetworkAllocationType[];
    statuses?: NetworkAllocationStatus[];
    currencies?: string[];
    connectionIds?: string[];
    partnerIds?: string[];
};
export declare type GetNetworkAllocationsResponse = {
    allocations: NetworkAllocation[];
};
export declare type GetNetworkAllocationByIdParams = {
    allocationId: string;
};
export declare type GetNetworkAllocationByIdResponse = {
    allocation: NetworkAllocation;
};
export declare type PrepareNetworkAllocationParams = Omit<CreateNetworkAllocationParams, 'payload' | 'signature'> & {
    walletPassphrase: string;
    clientExternalId?: string;
    nonce?: string;
};
export declare type CreateNetworkAllocationParams = {
    connectionId: string;
    payload: string;
    signature: string;
    amount: NetworkAllocationAmount;
    clientExternalId: string;
    nonce: string;
    notes?: string;
};
export declare type CreateNetworkAllocationResponse = {
    allocation: NetworkAllocation;
};
/** Deallocations */
export declare type CreateNetworkDeallocationParams = {
    connectionId: string;
    payload: string;
    signature: string;
    amount: NetworkAllocationAmount;
    clientExternalId: string;
    nonce: string;
    notes?: string;
};
export declare type CreateNetworkDeallocationResponse = {
    allocation: NetworkAllocation;
};
export declare type GetNetworkSettlementsParams = NetworkPaginationParams & {
    settlementIds?: string[];
    partnerIds?: string[];
    partyConnectionIds?: string[];
    counterpartyConnectionIds?: string[];
};
export declare type GetNetworkSettlementsResponse = {
    settlements: NetworkSettlement[];
};
export declare type GetNetworkSettlementByIdParams = NetworkPaginationParams & {
    settlementId: string;
    currencies?: string[];
};
export declare type GetNetworkSettlementByIdResponse = {
    settlement: NetworkSettlement;
    settlementTransfers: NetworkSettlementTransfer[];
};
export declare type GetNetworkSettlementTransfersParams = NetworkPaginationParams & {
    currencies?: string[];
    initiatedBy?: string[];
    partnerIds?: string[];
    settlementIds?: string[];
    settlementStatuses?: NetworkSettlementStatus[];
    settlementUpdatedBefore?: string;
    settlementUpdatedOnOrAfter?: string;
};
export declare type GetNetworkSettlementTransfersResponse = {
    settlementTransfers: NetworkSettlementTransfer[];
};
declare type NetworkPaginationParams = {
    pageNumber?: string | number;
    pageSize?: string | number;
};
declare type NetworkSortDirection = 'ASC' | 'DESC';
export declare type NetworkAccountBalanceRecord = {
    available: string;
    held: string;
};
export declare type NetworkBalance = {
    balances: Record<string, NetworkAccountBalanceRecord>;
    name: string;
    partnerId: string;
    partnerInstitutionIdentifier: string;
    partnersConnectionId: string;
};
export declare type V1SupportedCurrency = {
    ofcCurrency: string;
    backingCurrency: string;
    partnerNames: string[];
};
export declare type NetworkConnection = {
    active: boolean;
    clientId: string;
    initialized: boolean;
    name: string;
    partnersConnectionId: string;
    partnersClientId: string;
    partnerId: string;
    networkAccountId: string;
    proof: string;
    nonce: string;
    id: string;
    createdAt: string;
    updatedAt: string;
};
export declare type NetworkConnectionKey = NetworkConnectionKeyToken | NetworkConnectionKeyTokenAndSignature | NetworkConnectionKeyApiKeyAndSecret | NetworkConnectionKeyClearloop;
export declare type NetworkConnectionKeyToken = {
    schema: 'token';
    connectionToken: string;
};
export declare type NetworkConnectionKeyTokenAndSignature = {
    schema: 'tokenAndSignature';
    connectionToken: string;
    signature: string;
};
export declare type NetworkConnectionKeyApiKeyAndSecret = {
    schema: 'apiKeyAndSecret';
    apiKey: string;
    apiSecret: string;
};
export declare type NetworkConnectionKeyClearloop = Omit<NetworkConnectionKeyApiKeyAndSecret, 'schema'> & {
    schema: 'clearloop';
    clientAccountId: string;
    companyRegistrationNumber: string;
};
export declare type NetworkAllocationType = 'allocation' | 'deallocation';
export declare type NetworkAllocationStatus = 'cleared' | 'released' | 'reserved';
export declare type NetworkAllocation = {
    reason: string;
    status: NetworkAllocationStatus;
    type: NetworkAllocationType;
    id: string;
    amount: NetworkAllocationAmount;
    connectionId: string;
    clientExternalId: string;
    partnerExternalId?: string;
    initiatedBy: string;
    notes?: string;
    createdAt: string;
    updatedAt: string;
};
export declare type NetworkAllocationAmount = {
    currency: string;
    quantity?: string;
};
export declare type NetworkDeallocation = NetworkAllocation;
export declare type NetworkSettlement = {
    status: NetworkSettlementStatus;
    reason?: string;
    id: string;
    partnerId: string;
    externalId: string;
    reconciled: boolean;
    initiatedBy: string;
    notes?: string;
    createdAt: string;
    updatedAt: string;
};
export declare type NetworkSettlementTransfer = {
    id: string;
    currency: string;
    settlementId: string;
    quantity: string;
    txIds: string[];
    settlementStatus: NetworkSettlementStatus;
    settlementNotes?: string;
    sourceTradingAccountId?: string;
    sourceClientName?: string;
    destinationTradingAccountId?: string;
    destinationClientName?: string;
    sourceNetworkAccountId?: string;
    sourceConnectionName?: string;
    destinationNetworkAccountId?: string;
    destinationConnectionName?: string;
    createdAt: string;
    updatedAt: string;
};
export declare type NetworkSettlementStatus = 'failed' | 'completed' | 'pending';
export declare type ConnectionKeySchema = 'token' | 'tokenAndSignature' | 'apiKeyAndSecret' | 'clearloop';
export declare type NetworkPartner = {
    id: string;
    name: string;
    institutionId: string;
    institutionIdentifier: string;
    connectionKeySchema: ConnectionKeySchema;
    active: boolean;
    publicKey?: string;
};
export {};
//# sourceMappingURL=types.d.ts.map