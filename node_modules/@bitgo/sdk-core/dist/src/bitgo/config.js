"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultConstants = exports.defaults = exports.krsProviders = void 0;
const _ = __importStar(require("lodash"));
const statics_1 = require("@bitgo/statics");
const environments_1 = require("./environments");
// KRS providers and their fee structures
exports.krsProviders = {
    keyternal: {
        feeType: 'flatUsd',
        feeAmount: 99,
        supportedCoins: ['btc', 'eth'],
        feeAddresses: {
            btc: '', // TODO [BG-6965] Get address from Keyternal - recovery will fail for now until Keyternal is ready
        },
    },
    bitgoKRSv2: {
        feeType: 'flatUsd',
        feeAmount: 0,
        supportedCoins: ['btc', 'eth'],
    },
    dai: {
        feeType: 'flatUsd',
        feeAmount: 0,
        supportedCoins: ['btc', 'eth', 'xlm', 'xrp', 'dash', 'zec', 'ltc', 'bch', 'bsv', 'bcha'],
    },
};
exports.defaults = {
    maxFee: 0.1e8,
    maxFeeRate: 1000000,
    minFeeRate: 5000,
    fallbackFeeRate: 50000,
    minOutputSize: 2730,
    minInstantFeeRate: 10000,
    bitgoEthAddress: '0x0f47ea803926926f299b7f1afc8460888d850f47',
};
// TODO: once server starts returning eth address keychains, remove bitgoEthAddress
/**
 * Get the default (hardcoded) constants for a particular network.
 *
 * Note that this may not be the complete set of constants, and additional constants may get fetched
 * from BitGo during the lifespan of a BitGo object.
 * @param env
 */
const defaultConstants = (env) => {
    if (environments_1.Environments[env] === undefined) {
        throw Error(`invalid environment ${env}`);
    }
    const network = environments_1.Environments[env].network;
    return _.merge({}, exports.defaults, statics_1.tokens[network]);
};
exports.defaultConstants = defaultConstants;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2JpdGdvL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDBDQUE0QjtBQUM1Qiw0Q0FBd0M7QUFDeEMsaURBQStEO0FBUy9ELHlDQUF5QztBQUM1QixRQUFBLFlBQVksR0FBZ0M7SUFDdkQsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFNBQVM7UUFDbEIsU0FBUyxFQUFFLEVBQUU7UUFDYixjQUFjLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO1FBQzlCLFlBQVksRUFBRTtZQUNaLEdBQUcsRUFBRSxFQUFFLEVBQUUsa0dBQWtHO1NBQzVHO0tBQ0Y7SUFDRCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsU0FBUztRQUNsQixTQUFTLEVBQUUsQ0FBQztRQUNaLGNBQWMsRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUM7S0FDL0I7SUFDRCxHQUFHLEVBQUU7UUFDSCxPQUFPLEVBQUUsU0FBUztRQUNsQixTQUFTLEVBQUUsQ0FBQztRQUNaLGNBQWMsRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQztLQUN6RjtDQUNGLENBQUM7QUFFVyxRQUFBLFFBQVEsR0FBRztJQUN0QixNQUFNLEVBQUUsS0FBSztJQUNiLFVBQVUsRUFBRSxPQUFPO0lBQ25CLFVBQVUsRUFBRSxJQUFJO0lBQ2hCLGVBQWUsRUFBRSxLQUFLO0lBQ3RCLGFBQWEsRUFBRSxJQUFJO0lBQ25CLGlCQUFpQixFQUFFLEtBQUs7SUFDeEIsZUFBZSxFQUFFLDRDQUE0QztDQUM5RCxDQUFDO0FBRUYsbUZBQW1GO0FBQ25GOzs7Ozs7R0FNRztBQUNJLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxHQUFvQixFQUFFLEVBQUU7SUFDdkQsSUFBSSwyQkFBWSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFNBQVMsRUFBRTtRQUNuQyxNQUFNLEtBQUssQ0FBQyx1QkFBdUIsR0FBRyxFQUFFLENBQUMsQ0FBQztLQUMzQztJQUVELE1BQU0sT0FBTyxHQUFHLDJCQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDO0lBQzFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsZ0JBQVEsRUFBRSxnQkFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDaEQsQ0FBQyxDQUFDO0FBUFcsUUFBQSxnQkFBZ0Isb0JBTzNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgdG9rZW5zIH0gZnJvbSAnQGJpdGdvL3N0YXRpY3MnO1xuaW1wb3J0IHsgRW52aXJvbm1lbnROYW1lLCBFbnZpcm9ubWVudHMgfSBmcm9tICcuL2Vudmlyb25tZW50cyc7XG5cbmV4cG9ydCB0eXBlIEtyc1Byb3ZpZGVyID0ge1xuICBmZWVUeXBlOiAnZmxhdFVzZCc7XG4gIGZlZUFtb3VudDogbnVtYmVyO1xuICBzdXBwb3J0ZWRDb2luczogc3RyaW5nW107XG4gIGZlZUFkZHJlc3Nlcz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG59O1xuXG4vLyBLUlMgcHJvdmlkZXJzIGFuZCB0aGVpciBmZWUgc3RydWN0dXJlc1xuZXhwb3J0IGNvbnN0IGtyc1Byb3ZpZGVyczogUmVjb3JkPHN0cmluZywgS3JzUHJvdmlkZXI+ID0ge1xuICBrZXl0ZXJuYWw6IHtcbiAgICBmZWVUeXBlOiAnZmxhdFVzZCcsXG4gICAgZmVlQW1vdW50OiA5OSxcbiAgICBzdXBwb3J0ZWRDb2luczogWydidGMnLCAnZXRoJ10sXG4gICAgZmVlQWRkcmVzc2VzOiB7XG4gICAgICBidGM6ICcnLCAvLyBUT0RPIFtCRy02OTY1XSBHZXQgYWRkcmVzcyBmcm9tIEtleXRlcm5hbCAtIHJlY292ZXJ5IHdpbGwgZmFpbCBmb3Igbm93IHVudGlsIEtleXRlcm5hbCBpcyByZWFkeVxuICAgIH0sXG4gIH0sXG4gIGJpdGdvS1JTdjI6IHtcbiAgICBmZWVUeXBlOiAnZmxhdFVzZCcsXG4gICAgZmVlQW1vdW50OiAwLCAvLyB3ZSB3aWxsIHJlY2VpdmUgcGF5bWVudHMgb2ZmLWNoYWluXG4gICAgc3VwcG9ydGVkQ29pbnM6IFsnYnRjJywgJ2V0aCddLFxuICB9LFxuICBkYWk6IHtcbiAgICBmZWVUeXBlOiAnZmxhdFVzZCcsXG4gICAgZmVlQW1vdW50OiAwLCAvLyBkYWkgd2lsbCByZWNlaXZlIHBheW1lbnRzIG9mZi1jaGFpblxuICAgIHN1cHBvcnRlZENvaW5zOiBbJ2J0YycsICdldGgnLCAneGxtJywgJ3hycCcsICdkYXNoJywgJ3plYycsICdsdGMnLCAnYmNoJywgJ2JzdicsICdiY2hhJ10sXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdHMgPSB7XG4gIG1heEZlZTogMC4xZTgsXG4gIG1heEZlZVJhdGU6IDEwMDAwMDAsXG4gIG1pbkZlZVJhdGU6IDUwMDAsXG4gIGZhbGxiYWNrRmVlUmF0ZTogNTAwMDAsXG4gIG1pbk91dHB1dFNpemU6IDI3MzAsXG4gIG1pbkluc3RhbnRGZWVSYXRlOiAxMDAwMCxcbiAgYml0Z29FdGhBZGRyZXNzOiAnMHgwZjQ3ZWE4MDM5MjY5MjZmMjk5YjdmMWFmYzg0NjA4ODhkODUwZjQ3Jyxcbn07XG5cbi8vIFRPRE86IG9uY2Ugc2VydmVyIHN0YXJ0cyByZXR1cm5pbmcgZXRoIGFkZHJlc3Mga2V5Y2hhaW5zLCByZW1vdmUgYml0Z29FdGhBZGRyZXNzXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCAoaGFyZGNvZGVkKSBjb25zdGFudHMgZm9yIGEgcGFydGljdWxhciBuZXR3b3JrLlxuICpcbiAqIE5vdGUgdGhhdCB0aGlzIG1heSBub3QgYmUgdGhlIGNvbXBsZXRlIHNldCBvZiBjb25zdGFudHMsIGFuZCBhZGRpdGlvbmFsIGNvbnN0YW50cyBtYXkgZ2V0IGZldGNoZWRcbiAqIGZyb20gQml0R28gZHVyaW5nIHRoZSBsaWZlc3BhbiBvZiBhIEJpdEdvIG9iamVjdC5cbiAqIEBwYXJhbSBlbnZcbiAqL1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRDb25zdGFudHMgPSAoZW52OiBFbnZpcm9ubWVudE5hbWUpID0+IHtcbiAgaWYgKEVudmlyb25tZW50c1tlbnZdID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBFcnJvcihgaW52YWxpZCBlbnZpcm9ubWVudCAke2Vudn1gKTtcbiAgfVxuXG4gIGNvbnN0IG5ldHdvcmsgPSBFbnZpcm9ubWVudHNbZW52XS5uZXR3b3JrO1xuICByZXR1cm4gXy5tZXJnZSh7fSwgZGVmYXVsdHMsIHRva2Vuc1tuZXR3b3JrXSk7XG59O1xuXG5leHBvcnQgdHlwZSBDb25maWcgPSB7XG4gIGtyc1Byb3ZpZGVyczogUmVjb3JkPHN0cmluZywgS3JzUHJvdmlkZXI+O1xufTtcbiJdfQ==