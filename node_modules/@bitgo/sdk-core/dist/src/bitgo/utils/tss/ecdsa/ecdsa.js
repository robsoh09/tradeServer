"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EcdsaUtils = void 0;
const assert_1 = __importDefault(require("assert"));
const buffer_1 = require("buffer");
const openpgp = __importStar(require("openpgp"));
const sdk_lib_mpc_1 = require("@bitgo/sdk-lib-mpc");
const utxo_lib_1 = require("@bitgo/utxo-lib");
const tss_1 = require("../../../../account-lib/mpc/tss");
const ecdsa_1 = __importDefault(require("../../../tss/ecdsa"));
const baseTypes_1 = require("../baseTypes");
const tss_2 = require("../../../tss");
const types_1 = require("../../../tss/ecdsa/types");
const opengpgUtils_1 = require("../../opengpgUtils");
const ecdsa_2 = require("../../../tss/ecdsa/ecdsa");
const ecdh_1 = require("../../../ecdh");
const common_1 = require("../../../tss/common");
const types_2 = require("../../../tss/types");
const base_1 = require("./base");
const encryptNShare = ecdsa_1.default.encryptNShare;
/** @inheritdoc */
class EcdsaUtils extends base_1.BaseEcdsaUtils {
    async finalizeBitgoHeldBackupKeyShare(keyId, commonKeychain, userKeyShare, bitgoKeychain, userGpgKey, thirdPartyBackupPublicGpgKey) {
        var _a;
        const encryptedUserToBackupShare = await encryptNShare(userKeyShare, 2, thirdPartyBackupPublicGpgKey.armor(), userGpgKey);
        const bitgoToBackupKeyShare = (_a = bitgoKeychain.keyShares) === null || _a === void 0 ? void 0 : _a.find((keyShare) => keyShare.from === 'bitgo' && keyShare.to === 'backup');
        const userPublicShare = buffer_1.Buffer.concat([
            buffer_1.Buffer.from(userKeyShare.nShares[2].y, 'hex'),
            buffer_1.Buffer.from(userKeyShare.nShares[2].chaincode, 'hex'),
        ]).toString('hex');
        (0, assert_1.default)(bitgoToBackupKeyShare);
        const keyResponse = await this.bitgo
            .put(this.baseCoin.url(`/krs/backupkeys/${keyId}`))
            .send({
            commonKeychain,
            keyShares: [
                {
                    from: 'user',
                    to: 'backup',
                    publicShare: userPublicShare,
                    privateShare: encryptedUserToBackupShare.encryptedPrivateShare,
                    privateShareProof: encryptedUserToBackupShare.privateShareProof,
                    vssProof: encryptedUserToBackupShare.vssProof,
                },
                bitgoToBackupKeyShare,
            ],
        })
            .result();
        if (!keyResponse || !keyResponse.commonKeychain) {
            throw new Error('Failed backup key verification.');
        }
        return {
            id: keyResponse.id,
            keyShares: keyResponse.keyShares,
            commonKeychain: keyResponse.commonKeychain,
        };
    }
    /** @inheritdoc */
    async createKeychains(params) {
        var _a;
        const MPC = new tss_1.Ecdsa();
        const m = 2;
        const n = 3;
        const userKeyShare = await MPC.keyShare(1, m, n);
        const userGpgKey = await (0, opengpgUtils_1.generateGPGKeyPair)('secp256k1');
        const isThirdPartyBackup = this.isValidThirdPartyBackupProvider(params.backupProvider);
        const backupKeyShare = await this.createBackupKeyShares(isThirdPartyBackup, userGpgKey, params.enterprise);
        const backupGpgKey = await this.getBackupGpgPubKey(isThirdPartyBackup);
        // Get the BitGo public key based on user/enterprise feature flags
        // If it doesn't work, use the default public key from the constants
        const bitgoPublicGpgKey = (_a = (await this.getBitgoGpgPubkeyBasedOnFeatureFlags(params.enterprise))) !== null && _a !== void 0 ? _a : this.bitgoPublicGpgKey;
        const bitgoKeychain = await this.createBitgoKeychain({
            userGpgKey,
            backupGpgKey,
            bitgoPublicGpgKey,
            userKeyShare,
            backupKeyShare,
            enterprise: params.enterprise,
            isThirdPartyBackup,
        });
        const userKeychainPromise = this.createUserKeychain({
            userGpgKey,
            backupGpgKey,
            bitgoPublicGpgKey,
            userKeyShare,
            backupKeyShare,
            bitgoKeychain,
            passphrase: params.passphrase,
            originalPasscodeEncryptionCode: params.originalPasscodeEncryptionCode,
            isThirdPartyBackup,
        });
        const backupKeychainPromise = this.createBackupKeychain({
            userGpgKey,
            backupGpgKey,
            bitgoPublicGpgKey,
            userKeyShare,
            backupKeyShare,
            bitgoKeychain,
            passphrase: params.passphrase,
            backupProvider: params.backupProvider,
        });
        const [userKeychain, backupKeychain] = await Promise.all([userKeychainPromise, backupKeychainPromise]);
        return {
            userKeychain,
            backupKeychain,
            bitgoKeychain,
        };
    }
    /**
     * If a third party backup is requested, it will create backup shares from
     * a third party (BitGo as of now), otherwise the key shares will be client generated
     */
    async createBackupKeyShares(isThirdPartyBackup = false, userGpgPubKey, enterprise) {
        let backupKeyShare;
        if (isThirdPartyBackup) {
            const bitgoHeldBackupKeyShares = await this.createBitgoHeldBackupKeyShare(userGpgPubKey, enterprise);
            backupKeyShare = {
                bitGoHeldKeyShares: bitgoHeldBackupKeyShares,
            };
        }
        else {
            const MPC = new tss_1.Ecdsa();
            const m = 2;
            const n = 3;
            backupKeyShare = {
                userHeldKeyShare: await MPC.keyShare(2, m, n),
            };
        }
        return backupKeyShare;
    }
    createUserKeychain({ userGpgKey, backupGpgKey, bitgoPublicGpgKey, userKeyShare, backupKeyShare, bitgoKeychain, passphrase, originalPasscodeEncryptionCode, isThirdPartyBackup = false, }) {
        var _a;
        if (!passphrase) {
            throw new Error('Please provide a wallet passphrase');
        }
        if (isThirdPartyBackup && ((_a = backupKeyShare.bitGoHeldKeyShares) === null || _a === void 0 ? void 0 : _a.keyShares)) {
            return this.createUserKeychainFromThirdPartyBackup(userGpgKey, bitgoPublicGpgKey, backupGpgKey, userKeyShare, backupKeyShare.bitGoHeldKeyShares.keyShares, bitgoKeychain, passphrase, originalPasscodeEncryptionCode);
        }
        (0, assert_1.default)(backupKeyShare.userHeldKeyShare);
        return this.createParticipantKeychain(userGpgKey, backupGpgKey, bitgoPublicGpgKey, 1, userKeyShare, backupKeyShare.userHeldKeyShare, bitgoKeychain, passphrase, originalPasscodeEncryptionCode);
    }
    async createBackupKeychain({ userGpgKey, userKeyShare, backupGpgKey, backupKeyShare, bitgoKeychain, bitgoPublicGpgKey, passphrase, backupProvider, }) {
        var _a;
        if (this.isValidThirdPartyBackupProvider(backupProvider) && ((_a = backupKeyShare.bitGoHeldKeyShares) === null || _a === void 0 ? void 0 : _a.keyShares)) {
            (0, assert_1.default)(bitgoKeychain.commonKeychain);
            const finalizedBackupKeyShare = await this.finalizeBitgoHeldBackupKeyShare(backupKeyShare.bitGoHeldKeyShares.id, bitgoKeychain.commonKeychain, userKeyShare, bitgoKeychain, userGpgKey, backupGpgKey);
            if (finalizedBackupKeyShare.commonKeychain !== bitgoKeychain.commonKeychain) {
                throw new Error('Failed to create backup keychain - commonKeychains do not match');
            }
            const backupKeyParams = {
                source: 'backup',
                keyType: 'tss',
                commonKeychain: finalizedBackupKeyShare.commonKeychain,
                provider: backupProvider !== null && backupProvider !== void 0 ? backupProvider : 'BitGoTrustAsKrs',
            };
            const backupKeychain = await this.baseCoin.keychains().createBackup(backupKeyParams);
            backupKeychain.keyShares = finalizedBackupKeyShare.keyShares;
            return backupKeychain;
        }
        (0, assert_1.default)(backupKeyShare.userHeldKeyShare);
        (0, assert_1.default)(passphrase);
        return this.createParticipantKeychain(userGpgKey, backupGpgKey, bitgoPublicGpgKey, 2, userKeyShare, backupKeyShare.userHeldKeyShare, bitgoKeychain, passphrase);
    }
    /** @inheritdoc */
    async createBitgoKeychain({ userGpgKey, backupGpgKey, userKeyShare, backupKeyShare, enterprise, bitgoPublicGpgKey, isThirdPartyBackup = false, }) {
        const recipientIndex = 3;
        const userToBitgoShare = await encryptNShare(userKeyShare, recipientIndex, bitgoPublicGpgKey.armor(), userGpgKey);
        const backupToBitgoShare = await this.getBackupEncryptedNShare(backupKeyShare, recipientIndex, bitgoPublicGpgKey.armor(), backupGpgKey, isThirdPartyBackup);
        const createBitGoMPCParams = {
            keyType: 'tss',
            source: 'bitgo',
            keyShares: [
                {
                    from: 'user',
                    to: 'bitgo',
                    publicShare: userToBitgoShare.publicShare,
                    privateShare: userToBitgoShare.encryptedPrivateShare,
                    n: userToBitgoShare.n,
                    vssProof: userToBitgoShare.vssProof,
                    privateShareProof: userToBitgoShare.privateShareProof,
                },
                {
                    from: 'backup',
                    to: 'bitgo',
                    publicShare: backupToBitgoShare.publicShare,
                    privateShare: backupToBitgoShare.encryptedPrivateShare,
                    n: backupToBitgoShare.n,
                    vssProof: backupToBitgoShare.vssProof,
                    privateShareProof: backupToBitgoShare.privateShareProof,
                },
            ],
            userGPGPublicKey: userGpgKey.publicKey,
            backupGPGPublicKey: isThirdPartyBackup
                ? backupGpgKey.armor()
                : backupGpgKey.publicKey,
            enterprise: enterprise,
            algoUsed: 'ecdsa',
        };
        return await this.baseCoin.keychains().add(createBitGoMPCParams);
    }
    /**
     * This builds the relevant backup encryptedNShare based on whether the
     * backup key is user or third party generated
     * @param backupShare can either have key shares from the user or third party
     * @param recipientIndex index of the party receiving the backup shares
     * @param recipientGpgPublicArmor gpg armor of the party receiving the backup shares
     * @param backupGpgKey backup gpg key
     * @param isThirdPartyBackup whether the backup is generated by third party
     */
    async getBackupEncryptedNShare(backupShare, recipientIndex, recipientGpgPublicArmor, backupGpgKey, isThirdPartyBackup = false) {
        let backupToRecipientShare;
        if (isThirdPartyBackup) {
            if (!backupShare.bitGoHeldKeyShares) {
                throw new Error(`Missing third party backup key shares`);
            }
            const backupToRecipientApiShare = backupShare.bitGoHeldKeyShares.keyShares.find((keyShare) => keyShare.from === 'backup' && keyShare.to === (0, ecdsa_2.getParticipantFromIndex)(recipientIndex));
            if (!backupToRecipientApiShare) {
                throw new Error(`Missing backup to ${(0, ecdsa_2.getParticipantFromIndex)(recipientIndex)} key share`);
            }
            // Since backup is from a third party, it is already encrypted
            backupToRecipientShare = await (0, ecdsa_2.buildNShareFromAPIKeyShare)(backupToRecipientApiShare);
        }
        else {
            (0, assert_1.default)(backupShare.userHeldKeyShare);
            backupToRecipientShare = await encryptNShare(backupShare.userHeldKeyShare, recipientIndex, recipientGpgPublicArmor, backupGpgKey);
        }
        return backupToRecipientShare;
    }
    /**
     * This uses the backup key from a third party (bitgo in this case)
     * to create the user keychain via WP.
     */
    async createUserKeychainFromThirdPartyBackup(userGpgKey, bitgoPublicGpgKey, thirdPartyBackupPublicGpgKey, userKeyShare, thirdPartybackupKeyShares, bitgoKeychain, passphrase, originalPasscodeEncryptionCode) {
        const bitgoKeyShares = bitgoKeychain.keyShares;
        if (!bitgoKeyShares) {
            throw new Error('Missing BitGo key shares');
        }
        if (!bitgoKeychain.commonKeychain) {
            throw new Error(`Missing common key chain: ${bitgoKeychain.commonKeychain}`);
        }
        const bitGoToUserShare = bitgoKeyShares.find((keyShare) => keyShare.from === 'bitgo' && keyShare.to === 'user');
        if (!bitGoToUserShare) {
            throw new Error('Missing BitGo to User key share');
        }
        const backupToUserShare = thirdPartybackupKeyShares.find((keyShare) => keyShare.from === 'backup' && keyShare.to === 'user');
        if (!backupToUserShare) {
            throw new Error('Missing Backup to User key share');
        }
        const backupToUserNShare = await (0, ecdsa_2.buildNShareFromAPIKeyShare)(backupToUserShare);
        const bitGoToUserNShare = await (0, ecdsa_2.buildNShareFromAPIKeyShare)(bitGoToUserShare);
        const encryptedNShares = [
            {
                nShare: backupToUserNShare,
                recipientPrivateArmor: userGpgKey.privateKey,
                senderPublicArmor: thirdPartyBackupPublicGpgKey.armor(),
                isbs58Encoded: false,
            },
            {
                nShare: bitGoToUserNShare,
                recipientPrivateArmor: userGpgKey.privateKey,
                senderPublicArmor: bitgoPublicGpgKey.armor(),
                isbs58Encoded: false,
            },
        ];
        const userCombinedKey = await ecdsa_1.default.createCombinedKey(userKeyShare, encryptedNShares, bitgoKeychain.commonKeychain);
        if (userCombinedKey.commonKeychain !== bitgoKeychain.commonKeychain) {
            throw new Error('Failed to create user keychain - commonKeychains do not match.');
        }
        const prv = JSON.stringify(userCombinedKey.signingMaterial);
        const userKeychainParams = {
            source: 'user',
            keyType: 'tss',
            commonKeychain: userCombinedKey.commonKeychain,
            prv: prv,
            encryptedPrv: this.bitgo.encrypt({
                input: prv,
                password: passphrase,
            }),
            originalPasscodeEncryptionCode,
        };
        const keychains = this.baseCoin.keychains();
        return await keychains.add(userKeychainParams);
    }
    /** @inheritdoc */
    async createParticipantKeychain(userGpgKey, userLocalBackupGpgKey, bitgoPublicGpgKey, recipientIndex, userKeyShare, backupKeyShare, bitgoKeychain, passphrase, originalPasscodeEncryptionCode) {
        const bitgoKeyShares = bitgoKeychain.keyShares;
        if (!bitgoKeyShares) {
            throw new Error('Missing BitGo key shares');
        }
        if (!bitgoKeychain.commonKeychain) {
            throw new Error(`Missing common key chain: ${bitgoKeychain.commonKeychain}`);
        }
        let recipient;
        let keyShare;
        let otherShare;
        let recipientGpgKey;
        let senderGpgKey;
        if (recipientIndex === 1) {
            keyShare = userKeyShare;
            otherShare = backupKeyShare;
            recipient = 'user';
            recipientGpgKey = userGpgKey;
            senderGpgKey = userLocalBackupGpgKey;
        }
        else if (recipientIndex === 2) {
            keyShare = backupKeyShare;
            otherShare = userKeyShare;
            recipient = 'backup';
            recipientGpgKey = userLocalBackupGpgKey;
            senderGpgKey = userGpgKey;
        }
        else {
            throw new Error('Invalid user index');
        }
        const bitGoToRecipientShare = bitgoKeyShares.find((keyShare) => keyShare.from === 'bitgo' && keyShare.to === recipient);
        if (!bitGoToRecipientShare) {
            throw new Error(`Missing BitGo to ${recipient} key share`);
        }
        const decryptedShare = await this.decryptPrivateShare(bitGoToRecipientShare.privateShare, recipientGpgKey);
        await this.verifyWalletSignatures(userGpgKey.publicKey, userLocalBackupGpgKey.publicKey, bitgoKeychain, decryptedShare, recipientIndex);
        const senderToRecipientShare = await encryptNShare(otherShare, recipientIndex, recipientGpgKey.publicKey, senderGpgKey);
        const encryptedNShares = [
            {
                // userToBackup or backupToUser
                nShare: senderToRecipientShare,
                recipientPrivateArmor: recipientGpgKey.privateKey,
                senderPublicArmor: senderGpgKey.publicKey,
            },
            {
                // bitgoToRecipient
                nShare: {
                    i: recipientIndex,
                    j: 3,
                    publicShare: bitGoToRecipientShare.publicShare,
                    encryptedPrivateShare: bitGoToRecipientShare.privateShare,
                    n: bitGoToRecipientShare.n,
                    vssProof: bitGoToRecipientShare.vssProof,
                    privateShareProof: bitGoToRecipientShare.privateShareProof,
                },
                recipientPrivateArmor: recipientGpgKey.privateKey,
                senderPublicArmor: bitgoPublicGpgKey.armor(),
                isbs58Encoded: false,
            },
        ];
        const recipientCombinedKey = await ecdsa_1.default.createCombinedKey(keyShare, encryptedNShares, bitgoKeychain.commonKeychain);
        const prv = JSON.stringify(recipientCombinedKey.signingMaterial);
        const recipientKeychainParams = {
            source: recipient,
            keyType: 'tss',
            commonKeychain: bitgoKeychain.commonKeychain,
            prv: prv,
            encryptedPrv: this.bitgo.encrypt({
                input: prv,
                password: passphrase,
            }),
            originalPasscodeEncryptionCode,
        };
        const keychains = this.baseCoin.keychains();
        return recipientIndex === 1
            ? await keychains.add(recipientKeychainParams)
            : await keychains.createBackup(recipientKeychainParams);
    }
    async createTssEcdsaStep1SigningMaterial(params) {
        const { challenges, derivationPath, prv } = params;
        const userSigningMaterial = JSON.parse(prv);
        if (userSigningMaterial.pShare.i !== 1) {
            throw new Error('Invalid user key');
        }
        if (!userSigningMaterial.backupNShare) {
            throw new Error('Invalid user key - missing backupNShare');
        }
        const MPC = new tss_1.Ecdsa();
        const signingKey = MPC.keyDerive(userSigningMaterial.pShare, [userSigningMaterial.bitgoNShare, userSigningMaterial.backupNShare], derivationPath);
        const bitgoIndex = types_2.ShareKeyPosition.BITGO;
        const userIndex = userSigningMaterial.pShare.i;
        const { ntilde: ntildea, h1: h1a, h2: h2a, p: pa } = challenges.enterpriseChallenge;
        const { ntilde: ntildeb, h1: h1b, h2: h2b, p: pb, n: nb } = challenges.bitgoChallenge;
        const userXShare = MPC.appendChallenge(signingKey.xShare, { ntilde: ntildea, h1: h1a, h2: h2a }, { p: pa });
        const bitgoYShare = MPC.appendChallenge({
            i: userIndex,
            j: bitgoIndex,
            n: nb,
        }, { ntilde: ntildeb, h1: h1b, h2: h2b }, { p: pb });
        const userSignShare = await ecdsa_1.default.createUserSignShare(userXShare, bitgoYShare);
        const u = signingKey.nShares[bitgoIndex].u;
        let chaincode = userSigningMaterial.bitgoNShare.chaincode;
        while (chaincode.length < 64) {
            chaincode = '0' + chaincode;
        }
        const signerShare = utxo_lib_1.bip32.fromPrivateKey(buffer_1.Buffer.from(u, 'hex'), buffer_1.Buffer.from(chaincode, 'hex')).toBase58();
        const bitgoGpgKey = (await (0, opengpgUtils_1.getBitgoGpgPubKey)(this.bitgo)).mpcV1;
        const encryptedSignerShare = (await openpgp.encrypt({
            message: await openpgp.createMessage({
                text: signerShare,
            }),
            config: {
                rejectCurves: new Set(),
            },
            encryptionKeys: [bitgoGpgKey],
        }));
        const userGpgKey = await (0, opengpgUtils_1.generateGPGKeyPair)('secp256k1');
        const privateShareProof = await (0, opengpgUtils_1.createShareProof)(userGpgKey.privateKey, signingKey.nShares[bitgoIndex].u, 'ecdsa');
        const vssProof = signingKey.nShares[bitgoIndex].v;
        const userPublicGpgKey = userGpgKey.publicKey;
        const publicShare = signingKey.nShares[bitgoIndex].y + signingKey.nShares[bitgoIndex].chaincode;
        return {
            privateShareProof: privateShareProof,
            vssProof: vssProof,
            publicShare: publicShare,
            encryptedSignerOffsetShare: encryptedSignerShare,
            userPublicGpgKey: userPublicGpgKey,
            kShare: userSignShare.kShare,
            wShare: params.walletPassphrase
                ? this.bitgo.encrypt({ input: JSON.stringify(userSignShare.wShare), password: params.walletPassphrase })
                : userSignShare.wShare,
        };
    }
    async createTssEcdsaStep2SigningMaterial(params) {
        // Append the BitGo challenge to the Ashare to be used in subsequent proofs
        const bitgoToUserAShareWithNtilde = {
            ...params.aShareFromBitgo,
            ...params.bitgoChallenge,
        };
        const userGammaAndMuShares = await ecdsa_1.default.createUserGammaAndMuShare(params.wShare, bitgoToUserAShareWithNtilde);
        const userOmicronAndDeltaShare = await ecdsa_1.default.createUserOmicronAndDeltaShare(userGammaAndMuShares.gShare);
        return {
            muDShare: {
                muShare: userGammaAndMuShares.muShare,
                dShare: userOmicronAndDeltaShare.dShare,
                i: userGammaAndMuShares.muShare.i,
            },
            oShare: params.walletPassphrase
                ? this.bitgo.encrypt({
                    input: JSON.stringify(userOmicronAndDeltaShare.oShare),
                    password: params.walletPassphrase,
                })
                : userOmicronAndDeltaShare.oShare,
        };
    }
    getOfflineSignerPaillierModulus(params) {
        (0, assert_1.default)(params.prv, 'Params to get paillier modulus are missing prv.');
        const userSigningMaterial = JSON.parse(params.prv);
        return { userPaillierModulus: userSigningMaterial.pShare.n };
    }
    async createOfflineKShare(params) {
        const { tssParams, prv, requestType, challenges } = params;
        (0, assert_1.default)(typeof tssParams.txRequest !== 'string', 'Invalid txRequest type');
        const txRequest = tssParams.txRequest;
        let derivationPath;
        if (requestType === baseTypes_1.RequestType.tx) {
            (0, assert_1.default)(txRequest.transactions || txRequest.unsignedTxs, 'Unable to find transactions in txRequest');
            const unsignedTx = txRequest.apiVersion === 'full' ? txRequest.transactions[0].unsignedTx : txRequest.unsignedTxs[0];
            derivationPath = unsignedTx.derivationPath;
        }
        else if (requestType === baseTypes_1.RequestType.message) {
            // TODO BG-67299 Message signing with derivation path
            derivationPath = '';
        }
        return this.createTssEcdsaStep1SigningMaterial({
            prv: prv,
            challenges: challenges,
            derivationPath: derivationPath,
            walletPassphrase: params.walletPassphrase,
        });
    }
    async createOfflineMuDeltaShare(params) {
        const decryptedWShare = this.bitgo.decrypt({ input: params.encryptedWShare, password: params.walletPassphrase });
        return await this.createTssEcdsaStep2SigningMaterial({
            aShareFromBitgo: params.aShareFromBitgo,
            bitgoChallenge: params.bitgoChallenge,
            wShare: JSON.parse(decryptedWShare),
            walletPassphrase: params.walletPassphrase,
        });
    }
    async createOfflineSShare(params) {
        const { tssParams, requestType, dShareFromBitgo, encryptedOShare, walletPassphrase } = params;
        (0, assert_1.default)(typeof tssParams.txRequest !== 'string', 'Invalid txRequest type');
        const txRequest = tssParams.txRequest;
        let signablePayload;
        if (requestType === baseTypes_1.RequestType.tx) {
            (0, assert_1.default)(txRequest.transactions || txRequest.unsignedTxs, 'Unable to find transactions in txRequest');
            const unsignedTx = txRequest.apiVersion === 'full' ? txRequest.transactions[0].unsignedTx : txRequest.unsignedTxs[0];
            signablePayload = buffer_1.Buffer.from(unsignedTx.signableHex, 'hex');
        }
        else if (requestType === baseTypes_1.RequestType.message) {
            signablePayload = params.tssParams.bufferToSign;
        }
        const decryptedOShare = this.bitgo.decrypt({ input: encryptedOShare, password: walletPassphrase });
        const { i, R, s, y } = await ecdsa_1.default.createUserSignatureShare(JSON.parse(decryptedOShare), dShareFromBitgo, signablePayload);
        // return only required SShare without bigints from VAShare
        return {
            i,
            R,
            s,
            y,
        };
    }
    async signEcdsaTssUsingExternalSigner(params, requestType, externalSignerPaillierModulusGetter, externalSignerKShareGenerator, externalSignerMuDeltaShareGenerator, externalSignerSShareGenerator) {
        var _a;
        const { txRequest } = params;
        const pendingEcdsaTssInitialization = (_a = this.wallet.coinSpecific()) === null || _a === void 0 ? void 0 : _a.pendingEcdsaTssInitialization;
        if (pendingEcdsaTssInitialization) {
            throw new Error('Wallet is not ready for TSS ECDSA signing. Please contact your enterprise admin to finish the enterprise TSS initialization.');
        }
        const txRequestObj = await (0, tss_2.getTxRequest)(this.bitgo, this.wallet.id(), txRequest, params.reqId);
        const { userPaillierModulus } = await externalSignerPaillierModulusGetter({ txRequest: txRequestObj });
        const { enterpriseChallenge, bitgoChallenge } = await this.getEcdsaSigningChallenges(txRequest, requestType, userPaillierModulus, 0, params.reqId);
        const step1SigningMaterial = await externalSignerKShareGenerator({
            tssParams: {
                ...params,
                txRequest: txRequestObj,
            },
            challenges: { enterpriseChallenge, bitgoChallenge },
            requestType: requestType,
        });
        // signing stage one with K share send to bitgo and receives A share
        const bitgoToUserAShare = (await ecdsa_1.default.sendShareToBitgo(this.bitgo, this.wallet.id(), txRequestObj.txRequestId, requestType, types_1.SendShareType.KShare, step1SigningMaterial.kShare, step1SigningMaterial.encryptedSignerOffsetShare, step1SigningMaterial.vssProof, step1SigningMaterial.privateShareProof, step1SigningMaterial.publicShare, step1SigningMaterial.userPublicGpgKey, params.reqId)); // WP/HSM does not return the initial challenge
        const step2Return = await externalSignerMuDeltaShareGenerator({
            txRequest: txRequestObj,
            aShareFromBitgo: bitgoToUserAShare,
            bitgoChallenge: bitgoChallenge,
            encryptedWShare: step1SigningMaterial.wShare,
        });
        // signing stage two with muShare and dShare send to bitgo and receives D share
        const bitgoToUserDShare = (await ecdsa_1.default.sendShareToBitgo(this.bitgo, this.wallet.id(), txRequestObj.txRequestId, requestType, types_1.SendShareType.MUShare, step2Return.muDShare, undefined, undefined, undefined, undefined, undefined, params.reqId));
        const userSShare = await externalSignerSShareGenerator({
            tssParams: {
                ...params,
                txRequest: txRequestObj,
            },
            dShareFromBitgo: bitgoToUserDShare,
            requestType: requestType,
            encryptedOShare: step2Return.oShare,
        });
        // signing stage three with SShare send to bitgo and receives SShare
        await ecdsa_1.default.sendShareToBitgo(this.bitgo, this.wallet.id(), txRequestObj.txRequestId, requestType, types_1.SendShareType.SShare, userSShare, undefined, undefined, undefined, undefined, undefined, params.reqId);
        return await (0, tss_2.getTxRequest)(this.bitgo, this.wallet.id(), txRequestObj.txRequestId, params.reqId);
    }
    /**
     * Gets signing key, txRequestResolved and txRequestId
     * @param {string | TxRequest} params.txRequest - transaction request object or id
     * @param {string} params.prv - decrypted private key
     * @param { string} params.reqId - request id
     * @returns {Promise<TxRequest>}
     */
    async signRequestBase(params, requestType) {
        var _a;
        const pendingEcdsaTssInitialization = (_a = this.wallet.coinSpecific()) === null || _a === void 0 ? void 0 : _a.pendingEcdsaTssInitialization;
        if (pendingEcdsaTssInitialization) {
            throw new Error('Wallet is not ready for TSS ECDSA signing. Please contact your enterprise admin to finish the enterprise TSS initialization.');
        }
        const userSigningMaterial = JSON.parse(params.prv);
        if (userSigningMaterial.pShare.i !== 1) {
            throw new Error('Invalid user key');
        }
        if (!userSigningMaterial.backupNShare) {
            throw new Error('Invalid user key - missing backupNShare');
        }
        const txRequest = typeof params.txRequest === 'string'
            ? await (0, tss_2.getTxRequest)(this.bitgo, this.wallet.id(), params.txRequest)
            : params.txRequest;
        let signablePayload = new buffer_1.Buffer('');
        let derivationPath = '';
        if (requestType === baseTypes_1.RequestType.tx) {
            (0, assert_1.default)(txRequest.transactions || txRequest.unsignedTxs, 'Unable to find transactions in txRequest');
            const unsignedTx = txRequest.apiVersion === 'full' ? txRequest.transactions[0].unsignedTx : txRequest.unsignedTxs[0];
            signablePayload = buffer_1.Buffer.from(unsignedTx.signableHex, 'hex');
            derivationPath = unsignedTx.derivationPath;
        }
        else if (requestType === baseTypes_1.RequestType.message) {
            signablePayload = params.bufferToSign;
            // TODO BG-67299 Message signing with derivation path
        }
        const paillierModulus = this.getOfflineSignerPaillierModulus({ prv: params.prv });
        const challenges = await this.getEcdsaSigningChallenges(txRequest.txRequestId, requestType, paillierModulus.userPaillierModulus, 0);
        const step1Return = await this.createTssEcdsaStep1SigningMaterial({
            prv: params.prv,
            challenges: challenges,
            derivationPath: derivationPath,
        });
        // signing stage one with K share send to bitgo and receives A share
        const bitgoToUserAShare = (await ecdsa_1.default.sendShareToBitgo(this.bitgo, this.wallet.id(), txRequest.txRequestId, requestType, types_1.SendShareType.KShare, step1Return.kShare, step1Return.encryptedSignerOffsetShare, step1Return.vssProof, step1Return.privateShareProof, step1Return.publicShare, step1Return.userPublicGpgKey)); // WP/HSM does not return the initial challenge
        const step2Return = await this.createTssEcdsaStep2SigningMaterial({
            aShareFromBitgo: bitgoToUserAShare,
            bitgoChallenge: challenges.bitgoChallenge,
            wShare: step1Return.wShare,
        });
        // signing stage two with muShare and dShare send to bitgo and receives D share
        const bitgoToUserDShare = (await ecdsa_1.default.sendShareToBitgo(this.bitgo, this.wallet.id(), txRequest.txRequestId, requestType, types_1.SendShareType.MUShare, step2Return.muDShare));
        // If only the getHashFunction() is defined for the coin use it otherwise
        // pass undefined hash, default hash will be used in that case.
        let hash;
        try {
            hash = this.baseCoin.getHashFunction();
        }
        catch (err) {
            hash = undefined;
        }
        const userSShare = await ecdsa_1.default.createUserSignatureShare(step2Return.oShare, bitgoToUserDShare, signablePayload, hash);
        // signing stage three with SShare send to bitgo and receives SShare
        await ecdsa_1.default.sendShareToBitgo(this.bitgo, this.wallet.id(), txRequest.txRequestId, requestType, types_1.SendShareType.SShare, userSShare);
        return await (0, tss_2.getTxRequest)(this.bitgo, this.wallet.id(), txRequest.txRequestId);
    }
    /**
     * Signs the transaction associated to the transaction request.
     * @param {string | TxRequest} params.txRequest - transaction request object or id
     * @param {string} params.prv - decrypted private key
     * @param {string} params.reqId - request id
     * @returns {Promise<TxRequest>} fully signed TxRequest object
     */
    async signTxRequest(params) {
        this.bitgo.setRequestTracer(params.reqId);
        return this.signRequestBase(params, baseTypes_1.RequestType.tx);
    }
    /**
     * Signs the message associated to the transaction request.
     * @param {string | TxRequest} params.txRequest - transaction request object or id
     * @param {string} params.prv - decrypted private key
     * @param {string} params.reqId - request id
     * @returns {Promise<TxRequest>} fully signed TxRequest object
     */
    async signTxRequestForMessage(params) {
        if (!params.messageRaw) {
            throw new Error('Raw message required to sign message');
        }
        return this.signRequestBase(params, baseTypes_1.RequestType.message);
    }
    /**
     * Get the challenge values for enterprise and BitGo in ECDSA signing
     * Only returns the challenges if they are verified by the user's enterprise admin's ecdh key
     * @param {string} txRequestId - transaction request id
     * @param {RequestType} requestType -  (0 for tx, 1 for message)
     * @param {string} walletPaillierModulus - paillier pubkey $n$
     * @param {number} index - index of the requestType
     * @param {IRequestTracer} reqId - request tracer request id
     */
    async getEcdsaSigningChallenges(txRequestId, requestType, walletPaillierModulus, index = 0, reqId) {
        const enterpriseId = this.wallet.toJSON().enterprise;
        if (!enterpriseId) {
            throw new Error('Wallet must be an enterprise wallet.');
        }
        // create BitGo range proof and paillier proof challenge
        const createBitgoChallengeResponse = await (0, common_1.getTxRequestChallenge)(this.bitgo, this.wallet.id(), txRequestId, index.toString(), requestType, walletPaillierModulus, reqId);
        const bitgoToEnterprisePaillierChallenge = { p: createBitgoChallengeResponse.p };
        const enterpriseToBitgoPaillierChallenge = sdk_lib_mpc_1.EcdsaTypes.serializePaillierChallenge({
            p: await sdk_lib_mpc_1.EcdsaPaillierProof.generateP((0, sdk_lib_mpc_1.hexToBigInt)(createBitgoChallengeResponse.n)),
        });
        // TODO(BG-78764): once the paillier proofs are complete, reduce challenge creation to one API call
        const walletChallenges = await this.wallet.getChallengesForEcdsaSigning();
        const challengeVerifierUserId = walletChallenges.createdBy;
        const adminSigningKeyResponse = await this.bitgo.getSigningKeyForUser(enterpriseId, challengeVerifierUserId);
        const pubkeyOfAdminEcdhKeyHex = adminSigningKeyResponse.derivedPubkey;
        // Verify enterprise's challenge is signed by the respective admins ecdh keychain
        const enterpriseRawChallenge = {
            ntilde: walletChallenges.enterpriseChallenge.ntilde,
            h1: walletChallenges.enterpriseChallenge.h1,
            h2: walletChallenges.enterpriseChallenge.h2,
        };
        const adminSignatureOnEntChallenge = walletChallenges.enterpriseChallenge.verifiers.adminSignature;
        if (!(0, ecdh_1.verifyEcdhSignature)(EcdsaUtils.getMessageToSignFromChallenge(enterpriseRawChallenge), adminSignatureOnEntChallenge, buffer_1.Buffer.from(pubkeyOfAdminEcdhKeyHex, 'hex'))) {
            throw new Error(`Admin signature for enterprise challenge is not valid. Please contact your enterprise admin.`);
        }
        // Verify that the BitGo challenge's ZK proofs have been verified by the admin
        const bitgoChallenge = {
            ntilde: walletChallenges.bitgoChallenge.ntilde,
            h1: walletChallenges.bitgoChallenge.h1,
            h2: walletChallenges.bitgoChallenge.h2,
            p: bitgoToEnterprisePaillierChallenge.p,
            n: createBitgoChallengeResponse.n,
        };
        const adminVerificationSignatureForBitGoChallenge = walletChallenges.bitgoChallenge.verifiers.adminSignature;
        if (!(0, ecdh_1.verifyEcdhSignature)(EcdsaUtils.getMessageToSignFromChallenge(bitgoChallenge), adminVerificationSignatureForBitGoChallenge, buffer_1.Buffer.from(pubkeyOfAdminEcdhKeyHex, 'hex'))) {
            throw new Error(`Admin signature for BitGo's challenge is not valid. Please contact your enterprise admin.`);
        }
        return {
            enterpriseChallenge: {
                ...enterpriseRawChallenge,
                p: enterpriseToBitgoPaillierChallenge.p,
            },
            bitgoChallenge,
        };
    }
    /**
     * Verifies the u-value proofs and GPG keys used in generating a TSS ECDSA wallet.
     * @param userGpgPub The user's public GPG key for encryption between user/server
     * @param backupGpgPub The backup's public GPG key for encryption between backup/server
     * @param bitgoKeychain previously created BitGo keychain; must be compatible with user and backup key shares
     * @param decryptedShare The decrypted bitgo-to-user/backup private share retrieved from the keychain
     * @param verifierIndex The index of the party to verify: 1 = user, 2 = backup
     */
    async verifyWalletSignatures(userGpgPub, backupGpgPub, bitgoKeychain, decryptedShare, verifierIndex) {
        (0, assert_1.default)(bitgoKeychain.commonKeychain);
        (0, assert_1.default)(bitgoKeychain.walletHSMGPGPublicKeySigs);
        const bitgoGpgKey = (await (0, opengpgUtils_1.getBitgoGpgPubKey)(this.bitgo)).mpcV1;
        const userKeyPub = await openpgp.readKey({ armoredKey: userGpgPub });
        const userKeyId = userKeyPub.keyPacket.getFingerprint();
        const backupKeyPub = await openpgp.readKey({ armoredKey: backupGpgPub });
        const backupKeyId = backupKeyPub.keyPacket.getFingerprint();
        const walletSignatures = await openpgp.readKeys({ armoredKeys: bitgoKeychain.walletHSMGPGPublicKeySigs });
        if (walletSignatures.length !== 2) {
            throw new Error('Invalid wallet signatures');
        }
        if (userKeyId !== walletSignatures[0].keyPacket.getFingerprint()) {
            throw new Error(`first wallet signature's fingerprint does not match passed user gpg key's fingerprint`);
        }
        if (backupKeyId !== walletSignatures[1].keyPacket.getFingerprint()) {
            throw new Error(`second wallet signature's fingerprint does not match passed backup gpg key's fingerprint`);
        }
        await (0, ecdsa_2.verifyWalletSignature)({
            walletSignature: walletSignatures[0],
            commonKeychain: bitgoKeychain.commonKeychain,
            userKeyId,
            backupKeyId,
            bitgoPub: bitgoGpgKey,
            decryptedShare,
            verifierIndex,
        });
        await (0, ecdsa_2.verifyWalletSignature)({
            walletSignature: walletSignatures[1],
            commonKeychain: bitgoKeychain.commonKeychain,
            userKeyId,
            backupKeyId,
            bitgoPub: bitgoGpgKey,
            decryptedShare,
            verifierIndex,
        });
    }
    /**
     * Signs a challenge with the provided v1 ecdh key at a derived path
     * @param challenge challenge to sign
     * @param ecdhXprv xprv of the ecdh key
     * @param derivationPath the derived path at which the ecdh key will sign
     */
    static signChallenge(challenge, ecdhXprv, derivationPath) {
        const messageToSign = this.getMessageToSignFromChallenge(challenge);
        return (0, ecdh_1.signMessageWithDerivedEcdhKey)(messageToSign, ecdhXprv, derivationPath);
    }
    /**
     * Converts challenge to a common message format which can be signed.
     * @param challenge
     */
    static getMessageToSignFromChallenge(challenge) {
        return challenge.ntilde.concat(challenge.h1).concat(challenge.h2);
    }
    /**
     Verifies ZK proofs of BitGo's challenges for both nitro and institutional HSMs
     which are fetched from the WP API.
     */
    static async verifyBitGoChallenges(bitgoChallenges) {
        // Verify institutional hsm challenge proof
        const instChallengeVerified = await this.verifyBitGoChallenge({
            ntilde: bitgoChallenges.bitgoInstitutionalHsm.ntilde,
            h1: bitgoChallenges.bitgoInstitutionalHsm.h1,
            h2: bitgoChallenges.bitgoInstitutionalHsm.h2,
            ntildeProof: bitgoChallenges.bitgoInstitutionalHsm.ntildeProof,
        });
        // Verify nitro hsm challenge proof
        const nitroChallengeVerified = await this.verifyBitGoChallenge({
            ntilde: bitgoChallenges.bitgoNitroHsm.ntilde,
            h1: bitgoChallenges.bitgoNitroHsm.h1,
            h2: bitgoChallenges.bitgoNitroHsm.h2,
            ntildeProof: bitgoChallenges.bitgoNitroHsm.ntildeProof,
        });
        return instChallengeVerified && nitroChallengeVerified;
    }
    /**
     * Verifies ZK proof for a single BitGo challenge
     * @param bitgoChallenge
     */
    static async verifyBitGoChallenge(bitgoChallenge) {
        const deserializedInstChallenge = sdk_lib_mpc_1.EcdsaTypes.deserializeNtildeWithProofs(bitgoChallenge);
        const ntildeProofH1WrtH2Verified = await sdk_lib_mpc_1.EcdsaRangeProof.verifyNtildeProof({
            ntilde: deserializedInstChallenge.ntilde,
            h1: deserializedInstChallenge.h1,
            h2: deserializedInstChallenge.h2,
        }, deserializedInstChallenge.ntildeProof.h1WrtH2);
        const ntildeProofH2WrtH1Verified = await sdk_lib_mpc_1.EcdsaRangeProof.verifyNtildeProof({
            ntilde: deserializedInstChallenge.ntilde,
            h1: deserializedInstChallenge.h2,
            h2: deserializedInstChallenge.h1,
        }, deserializedInstChallenge.ntildeProof.h2WrtH1);
        return ntildeProofH1WrtH2Verified && ntildeProofH2WrtH1Verified;
    }
    /**
     * Gets the bitgo challenges for both nitro and institutional HSMs from WP API.
     * @param bitgo
     */
    static async getBitGoChallenges(bitgo) {
        const res = await bitgo.get(bitgo.url('/tss/ecdsa/challenges', 2)).send().result();
        if (!res.bitgoNitroHsm ||
            !res.bitgoNitroHsm.ntilde ||
            !res.bitgoNitroHsm.h1 ||
            !res.bitgoNitroHsm.h2 ||
            !res.bitgoNitroHsm.ntildeProof ||
            !res.bitgoInstitutionalHsm ||
            !res.bitgoInstitutionalHsm.ntilde ||
            !res.bitgoInstitutionalHsm.h1 ||
            !res.bitgoInstitutionalHsm.h2 ||
            !res.bitgoInstitutionalHsm.ntildeProof) {
            throw new Error('Expected BitGo challenge proof to be present. Contact support@bitgo.com.');
        }
        return res;
    }
    /**
     * Gets BitGo's proofs from API and signs them if the proofs are valid.
     * @param bitgo
     * @param enterpriseId
     * @param userPassword
     */
    static async getVerifyAndSignBitGoChallenges(bitgo, enterpriseId, userPassword) {
        // Fetch BitGo's challenge and verify
        const bitgoChallengesWithProofs = await EcdsaUtils.getBitGoChallenges(bitgo);
        if (!(await EcdsaUtils.verifyBitGoChallenges(bitgoChallengesWithProofs))) {
            throw new Error(`Failed to verify BitGo's challenge needed to enable ECDSA signing. Please contact support@bitgo.com`);
        }
        return await EcdsaUtils.signBitgoChallenges(bitgo, enterpriseId, userPassword, bitgoChallengesWithProofs);
    }
    /**
     * Sign Bitgo's proofs, verification of proofs is left to the caller
     * @param bitgo
     * @param enterpriseId
     * @param userPassword
     * @param bitgoChallengesWithProofs Optionally provide Bitgo Challaenge & Proofs instead of fetching from API
     */
    static async signBitgoChallenges(bitgo, enterpriseId, userPassword, bitgoChallengesWithProofs) {
        // fetch challenge & proof if none are provided
        const challengesWithProofs = bitgoChallengesWithProofs
            ? bitgoChallengesWithProofs
            : await EcdsaUtils.getBitGoChallenges(bitgo);
        // Fetch user's ecdh public keychain needed for signing the challenges
        const ecdhKeypair = await bitgo.getEcdhKeypairPrivate(userPassword, enterpriseId);
        const signedBitGoInstChallenge = EcdsaUtils.signChallenge(challengesWithProofs.bitgoInstitutionalHsm, ecdhKeypair.xprv, ecdhKeypair.derivationPath);
        const signedBitGoNitroChallenge = EcdsaUtils.signChallenge(challengesWithProofs.bitgoNitroHsm, ecdhKeypair.xprv, ecdhKeypair.derivationPath);
        return {
            bitgoInstHsmAdminSignature: signedBitGoInstChallenge,
            bitgoNitroHsmAdminSignature: signedBitGoNitroChallenge,
        };
    }
    /**
     * This is needed to enable ecdsa signing on the enterprise.
     * It receives the enterprise challenge and signatures of verified bitgo proofs
     * and uploads them on the enterprise.
     * @param bitgo
     * @param entId - enterprise id to enable ecdsa signing on
     * @param userPassword - enterprise admin's login pw
     * @param bitgoInstChallengeProofSignature - signature on bitgo's institutional HSM challenge after verification
     * @param bitgoNitroChallengeProofSignature - signature on bitgo's nitro HSM challenge after verification
     * @param challenge - optionally use the challenge for enterprise challenge
     */
    static async initiateChallengesForEnterprise(bitgo, entId, userPassword, bitgoInstChallengeProofSignature, bitgoNitroChallengeProofSignature, challenge) {
        // Fetch user's ecdh public keychain needed for signing the challenges
        const ecdhKeypair = await bitgo.getEcdhKeypairPrivate(userPassword, entId);
        // Generate and sign enterprise challenge
        const entChallengeWithProof = challenge !== null && challenge !== void 0 ? challenge : (await sdk_lib_mpc_1.EcdsaRangeProof.generateNtilde(sdk_lib_mpc_1.minModulusBitLength));
        const serializedEntChallengeWithProof = sdk_lib_mpc_1.EcdsaTypes.serializeNtildeWithProofs(entChallengeWithProof);
        const signedEnterpriseChallenge = EcdsaUtils.signChallenge(serializedEntChallengeWithProof, ecdhKeypair.xprv, ecdhKeypair.derivationPath);
        await this.uploadChallengesToEnterprise(bitgo, entId, serializedEntChallengeWithProof, signedEnterpriseChallenge.toString('hex'), bitgoInstChallengeProofSignature.toString('hex'), bitgoNitroChallengeProofSignature.toString('hex'));
    }
    /**
     * Uploads the signed challenges and their proofs on the enterprise.
     * This initiates ecdsa signing for the enterprise users.
     * @param bitgo
     * @param entId - enterprise to enable ecdsa signing on
     * @param entChallenge - client side generated ent challenge with ZK proofs
     * @param entChallengeSignature - signature on enterprise challenge
     * @param bitgoIntChallengeSignature - signature on BitGo's institutional HSM challenge
     * @param bitgoNitroChallengeSignature - signature on BitGo's nitro HSM challenge
     */
    static async uploadChallengesToEnterprise(bitgo, entId, entChallenge, entChallengeSignature, bitgoIntChallengeSignature, bitgoNitroChallengeSignature) {
        const body = {
            enterprise: {
                ntilde: entChallenge.ntilde,
                h1: entChallenge.h1,
                h2: entChallenge.h2,
                verifiers: {
                    adminSignature: entChallengeSignature,
                },
            },
            bitgoInstitutionalHsm: {
                verifiers: {
                    adminSignature: bitgoIntChallengeSignature,
                },
            },
            bitgoNitroHsm: {
                verifiers: {
                    adminSignature: bitgoNitroChallengeSignature,
                },
            },
        };
        if ('ntildeProof' in entChallenge) {
            body.enterprise['ntildeProof'] = entChallenge.ntildeProof;
        }
        await bitgo
            .put(bitgo.url(`/enterprise/${entId}/tssconfig/ecdsa/challenge`, 2))
            .send(body)
            .result();
    }
}
exports.EcdsaUtils = EcdsaUtils;
//# sourceMappingURL=data:application/json;base64,