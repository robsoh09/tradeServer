import * as t from 'io-ts';
export declare enum MPCv2PartiesEnum {
    USER = 0,
    BACKUP = 1,
    BITGO = 2
}
export declare const generateMPCv2KeyRequestBody: t.UnionC<[t.TypeC<{
    userGpgPublicKey: import("io-ts-types").NonEmptyStringC;
    backupGpgPublicKey: import("io-ts-types").NonEmptyStringC;
    userMsg1: t.TypeC<{
        from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 1 | 2, string, unknown>]>;
        message: t.StringC;
        signature: t.StringC;
    }>;
    backupMsg1: t.TypeC<{
        from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 1 | 2, string, unknown>]>;
        message: t.StringC;
        signature: t.StringC;
    }>;
}>, t.TypeC<{
    sessionId: import("io-ts-types").NonEmptyStringC;
    userMsg2: t.TypeC<{
        from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 1 | 2, string, unknown>]>;
        to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 1 | 2, string, unknown>]>;
        encryptedMessage: t.StringC;
        signature: t.StringC;
    }>;
    userCommitment2: import("io-ts-types").NonEmptyStringC;
    backupMsg2: t.TypeC<{
        from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 1 | 2, string, unknown>]>;
        to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 1 | 2, string, unknown>]>;
        encryptedMessage: t.StringC;
        signature: t.StringC;
    }>;
    backupCommitment2: import("io-ts-types").NonEmptyStringC;
}>, t.TypeC<{
    sessionId: import("io-ts-types").NonEmptyStringC;
    userMsg3: t.TypeC<{
        from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 1 | 2, string, unknown>]>;
        to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 1 | 2, string, unknown>]>;
        encryptedMessage: t.StringC;
        signature: t.StringC;
    }>;
    backupMsg3: t.TypeC<{
        from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 1 | 2, string, unknown>]>;
        to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 1 | 2, string, unknown>]>;
        encryptedMessage: t.StringC;
        signature: t.StringC;
    }>;
    userMsg4: t.TypeC<{
        from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 1 | 2, string, unknown>]>;
        message: t.StringC;
        signature: t.StringC;
    }>;
    backupMsg4: t.TypeC<{
        from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 1 | 2, string, unknown>]>;
        message: t.StringC;
        signature: t.StringC;
    }>;
}>]>;
export declare type GenerateMPCv2KeyRequestBody = t.TypeOf<typeof generateMPCv2KeyRequestBody>;
export declare const generateMPCv2KeyRequestResponse: t.UnionC<[t.TypeC<{
    walletGpgPubKeySigs: import("io-ts-types").NonEmptyStringC;
    sessionId: import("io-ts-types").NonEmptyStringC;
    bitgoMsg1: t.TypeC<{
        from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 1 | 2, string, unknown>]>;
        message: t.StringC;
        signature: t.StringC;
    }>;
    bitgoToUserMsg2: t.TypeC<{
        from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 1 | 2, string, unknown>]>;
        to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 1 | 2, string, unknown>]>;
        encryptedMessage: t.StringC;
        signature: t.StringC;
    }>;
    bitgoToBackupMsg2: t.TypeC<{
        from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 1 | 2, string, unknown>]>;
        to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 1 | 2, string, unknown>]>;
        encryptedMessage: t.StringC;
        signature: t.StringC;
    }>;
}>, t.TypeC<{
    sessionId: import("io-ts-types").NonEmptyStringC;
    bitgoCommitment2: import("io-ts-types").NonEmptyStringC;
    bitgoToUserMsg3: t.TypeC<{
        from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 1 | 2, string, unknown>]>;
        to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 1 | 2, string, unknown>]>;
        encryptedMessage: t.StringC;
        signature: t.StringC;
    }>;
    bitgoToBackupMsg3: t.TypeC<{
        from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 1 | 2, string, unknown>]>;
        to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 1 | 2, string, unknown>]>;
        encryptedMessage: t.StringC;
        signature: t.StringC;
    }>;
}>, t.TypeC<{
    sessionId: import("io-ts-types").NonEmptyStringC;
    commonKeychain: import("io-ts-types").NonEmptyStringC;
    bitgoMsg4: t.TypeC<{
        from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 1 | 2, string, unknown>]>;
        message: t.StringC;
        signature: t.StringC;
    }>;
}>]>;
export declare type GenerateMPCv2KeyRequestResponse = t.TypeOf<typeof generateMPCv2KeyRequestResponse>;
//# sourceMappingURL=typesMPCv2.d.ts.map