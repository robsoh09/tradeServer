/// <reference types="node" />
import { Key } from 'openpgp';
import { EcdsaTypes } from '@bitgo/sdk-lib-mpc';
import { ECDSA } from '../../../../account-lib/mpc/tss';
import { ECDSAMethodTypes } from '../../../tss/ecdsa';
import { BackupKeyShare, CreateKeychainParamsBase, BackupGpgKey } from '../baseTypes';
import { BackupProvider } from '../../../wallet';
export declare type KeyShare = ECDSA.KeyShare;
export declare type DecryptableNShare = ECDSAMethodTypes.DecryptableNShare;
export declare type CreateEcdsaKeychainParams = CreateKeychainParamsBase & {
    userKeyShare: ECDSA.KeyShare;
    backupKeyShare: BackupKeyShare;
    isThirdPartyBackup?: boolean;
    backupProvider?: BackupProvider;
    bitgoPublicGpgKey: Key;
    backupGpgKey: BackupGpgKey;
};
export declare type CreateEcdsaBitGoKeychainParams = Omit<CreateEcdsaKeychainParams, 'bitgoKeychain'>;
export declare type GetBitGoChallengesApi = {
    bitgoNitroHsm: EcdsaTypes.SerializedNtildeWithProofs;
    bitgoInstitutionalHsm: EcdsaTypes.SerializedNtildeWithProofs;
};
export declare type BitGoProofSignatures = {
    bitgoNitroHsmAdminSignature: Buffer;
    bitgoInstHsmAdminSignature: Buffer;
};
interface NtildeVerifiers {
    adminSignature: string;
    bitgoNitroHsmSignature?: string;
    bitgoInstitutionalHsmSignature?: string;
}
export declare type SerializedNtildeWithVerifiers = EcdsaTypes.SerializedNtilde & {
    verifiers: NtildeVerifiers;
};
export {};
//# sourceMappingURL=types.d.ts.map