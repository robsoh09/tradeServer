/// <reference types="node" />
import { Buffer } from 'buffer';
import { Keychain } from '../../../keychain';
import { KeychainsTriplet } from '../../../baseCoin';
import { BaseEcdsaUtils } from './base';
import { MPCv2PartyFromStringOrNumber } from '@bitgo/public-types';
import { TSSParams, TxRequest } from '../baseTypes';
export declare class EcdsaMPCv2Utils extends BaseEcdsaUtils {
    /** @inheritdoc */
    createKeychains(params: {
        passphrase: string;
        enterprise: string;
        originalPasscodeEncryptionCode?: string;
    }): Promise<KeychainsTriplet>;
    createParticipantKeychain(participantIndex: MPCv2PartyFromStringOrNumber, commonKeychain: string, privateMaterial?: Buffer, reducedPrivateMaterial?: Buffer, passphrase?: string, originalPasscodeEncryptionCode?: string): Promise<Keychain>;
    private addUserKeychain;
    private addBackupKeychain;
    private addBitgoKeychain;
    private sendKeyGenerationRequest;
    private sendKeyGenerationRound1;
    private sendKeyGenerationRound2;
    private sendKeyGenerationRound3;
    /**
     * Signs the transaction associated to the transaction request.
     * @param {string | TxRequest} params.txRequest - transaction request object or id
     * @param {string} params.prv - decrypted private key
     * @param {string} params.reqId - request id
     * @returns {Promise<TxRequest>} fully signed TxRequest object
     */
    signTxRequest(params: TSSParams): Promise<TxRequest>;
    private signRequestBase;
    private formatBitgoBroadcastMessage;
    private formatP2PMessage;
}
//# sourceMappingURL=ecdsaMPCv2.d.ts.map