"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TssUtils = exports.EddsaUtils = void 0;
/**
 * @prettier
 */
const assert_1 = __importDefault(require("assert"));
const bs58 = __importStar(require("bs58"));
const openpgp = __importStar(require("openpgp"));
const tss_1 = __importDefault(require("../../../../account-lib/mpc/tss"));
const eddsa_1 = require("../../../tss/eddsa/eddsa");
const opengpgUtils_1 = require("../../opengpgUtils");
const tss_2 = require("../../../tss");
const baseTypes_1 = require("../baseTypes");
const baseTSSUtils_1 = __importDefault(require("../baseTSSUtils"));
const common_1 = require("../../../tss/common");
const sdk_lib_mpc_1 = require("@bitgo/sdk-lib-mpc");
/**
 * Utility functions for TSS work flows.
 */
class EddsaUtils extends baseTSSUtils_1.default {
    async verifyWalletSignatures(userGpgPub, backupGpgPub, bitgoKeychain, decryptedShare, verifierIndex) {
        (0, assert_1.default)(bitgoKeychain.commonKeychain);
        (0, assert_1.default)(bitgoKeychain.walletHSMGPGPublicKeySigs);
        const bitgoGpgKey = (await (0, opengpgUtils_1.getBitgoGpgPubKey)(this.bitgo)).mpcV1;
        const userKeyPub = await openpgp.readKey({ armoredKey: userGpgPub });
        const userKeyId = userKeyPub.keyPacket.getFingerprint();
        const backupKeyPub = await openpgp.readKey({ armoredKey: backupGpgPub });
        const backupKeyId = backupKeyPub.keyPacket.getFingerprint();
        const walletSignatures = await openpgp.readKeys({ armoredKeys: bitgoKeychain.walletHSMGPGPublicKeySigs });
        if (walletSignatures.length !== 2) {
            throw new Error('Invalid wallet signatures');
        }
        if (userKeyId !== walletSignatures[0].keyPacket.getFingerprint()) {
            throw new Error(`first wallet signature's fingerprint does not match passed user gpg key's fingerprint`);
        }
        if (backupKeyId !== walletSignatures[1].keyPacket.getFingerprint()) {
            throw new Error(`second wallet signature's fingerprint does not match passed backup gpg key's fingerprint`);
        }
        await (0, eddsa_1.verifyWalletSignature)({
            walletSignature: walletSignatures[0],
            commonKeychain: bitgoKeychain.commonKeychain,
            userKeyId,
            backupKeyId,
            bitgoPub: bitgoGpgKey,
            decryptedShare,
            verifierIndex,
        });
        await (0, eddsa_1.verifyWalletSignature)({
            walletSignature: walletSignatures[1],
            commonKeychain: bitgoKeychain.commonKeychain,
            userKeyId,
            backupKeyId,
            bitgoPub: bitgoGpgKey,
            decryptedShare,
            verifierIndex,
        });
    }
    /**
     * Creates a Keychain containing the User's TSS signing materials.
     * We need to have the passphrase be optional to allow for the client to store their backup key on their premises
     *
     * @param userGpgKey - ephemeral GPG key to encrypt / decrypt sensitve data exchanged between user and server
     * @param userKeyShare - user's TSS key share
     * @param backupKeyShare - backup's TSS key share
     * @param bitgoKeychain - previously created BitGo keychain; must be compatible with user and backup key shares
     * @param [passphrase] - optional wallet passphrase used to encrypt user's signing materials
     * @param [originalPasscodeEncryptionCode] - optional encryption code needed for wallet password reset for hot wallets
     */
    async createUserKeychain({ userGpgKey, backupGpgKey, userKeyShare, backupKeyShare, bitgoKeychain, passphrase, originalPasscodeEncryptionCode, }) {
        const MPC = await tss_1.default.initialize();
        const bitgoKeyShares = bitgoKeychain.keyShares;
        if (!bitgoKeyShares) {
            throw new Error('Missing BitGo key shares');
        }
        const bitGoToUserShare = bitgoKeyShares.find((keyShare) => keyShare.from === 'bitgo' && keyShare.to === 'user');
        if (!bitGoToUserShare) {
            throw new Error('Missing BitGo to User key share');
        }
        const bitGoToUserPrivateShare = await this.decryptPrivateShare(bitGoToUserShare.privateShare, userGpgKey);
        await this.verifyWalletSignatures(userGpgKey.publicKey, backupGpgKey.publicKey, bitgoKeychain, bitGoToUserPrivateShare, 1);
        const bitgoToUser = {
            i: 1,
            j: 3,
            y: bitGoToUserShare.publicShare.slice(0, 64),
            v: bitGoToUserShare.vssProof,
            u: bitGoToUserPrivateShare.slice(0, 64),
            chaincode: bitGoToUserPrivateShare.slice(64),
        };
        // TODO(BG-47170): use tss.createCombinedKey helper when signatures are supported
        const userCombined = MPC.keyCombine(userKeyShare.uShare, [backupKeyShare.yShares[1], bitgoToUser]);
        const commonKeychain = userCombined.pShare.y + userCombined.pShare.chaincode;
        if (commonKeychain !== bitgoKeychain.commonKeychain) {
            throw new Error('Failed to create user keychain - commonKeychains do not match.');
        }
        const userSigningMaterial = {
            uShare: userKeyShare.uShare,
            bitgoYShare: bitgoToUser,
            backupYShare: backupKeyShare.yShares[1],
        };
        const userKeychainParams = {
            source: 'user',
            keyType: 'tss',
            commonKeychain: bitgoKeychain.commonKeychain,
            originalPasscodeEncryptionCode,
        };
        if (passphrase !== undefined) {
            userKeychainParams.encryptedPrv = this.bitgo.encrypt({
                input: JSON.stringify(userSigningMaterial),
                password: passphrase,
            });
        }
        return await this.baseCoin.keychains().add(userKeychainParams);
    }
    /**
     * Creates a Keychain containing the Backup party's TSS signing materials.
     * We need to have the passphrase be optional to allow for the client to store their backup key on their premises
     *
     * @param userGpgKey - ephemeral GPG key to encrypt / decrypt sensitve data exchanged between user and server
     * @param userKeyShare - User's TSS Keyshare
     * @param backupGpgKey - ephemeral GPG key to encrypt / decrypt sensitve data exchanged between backup and server
     * @param backupKeyShare - Backup's TSS Keyshare
     * @param bitgoKeychain - previously created BitGo keychain; must be compatible with user and backup key shares
     * @param [passphrase] - optional wallet passphrase used to encrypt user's signing materials
     */
    async createBackupKeychain({ userGpgKey, backupGpgKey, userKeyShare, backupKeyShare, bitgoKeychain, passphrase, }) {
        const MPC = await tss_1.default.initialize();
        const bitgoKeyShares = bitgoKeychain.keyShares;
        if (!bitgoKeyShares) {
            throw new Error('Invalid bitgo keyshares');
        }
        const bitGoToBackupShare = bitgoKeyShares.find((keyShare) => keyShare.from === 'bitgo' && keyShare.to === 'backup');
        if (!bitGoToBackupShare) {
            throw new Error('Missing BitGo to User key share');
        }
        const bitGoToBackupPrivateShare = await this.decryptPrivateShare(bitGoToBackupShare.privateShare, backupGpgKey);
        await this.verifyWalletSignatures(userGpgKey.publicKey, backupGpgKey.publicKey, bitgoKeychain, bitGoToBackupPrivateShare, 2);
        const bitgoToBackup = {
            i: 2,
            j: 3,
            y: bitGoToBackupShare.publicShare.slice(0, 64),
            v: bitGoToBackupShare.vssProof,
            u: bitGoToBackupPrivateShare.slice(0, 64),
            chaincode: bitGoToBackupPrivateShare.slice(64),
        };
        // TODO(BG-47170): use tss.createCombinedKey helper when signatures are supported
        const backupCombined = MPC.keyCombine(backupKeyShare.uShare, [userKeyShare.yShares[2], bitgoToBackup]);
        const commonKeychain = backupCombined.pShare.y + backupCombined.pShare.chaincode;
        if (commonKeychain !== bitgoKeychain.commonKeychain) {
            throw new Error('Failed to create backup keychain - commonKeychains do not match.');
        }
        const backupSigningMaterial = {
            uShare: backupKeyShare.uShare,
            bitgoYShare: bitgoToBackup,
            userYShare: userKeyShare.yShares[2],
        };
        const prv = JSON.stringify(backupSigningMaterial);
        const params = {
            source: 'backup',
            keyType: 'tss',
            commonKeychain: bitgoKeychain.commonKeychain,
            prv: prv,
        };
        if (passphrase !== undefined) {
            params.encryptedPrv = this.bitgo.encrypt({ input: prv, password: passphrase });
        }
        return await this.baseCoin.keychains().createBackup(params);
    }
    /**
     * Creates a Keychain containing BitGo's TSS signing materials.
     *
     * @param userGpgKey - ephemeral GPG key to encrypt / decrypt sensitve data exchanged between user and server
     * @param userKeyShare - user's TSS key share
     * @param backupKeyShare - backup's TSS key share
     * @param enterprise - enterprise associated to the wallet
     */
    async createBitgoKeychain({ userGpgKey, backupGpgKey, userKeyShare, backupKeyShare, enterprise, }) {
        // TODO(BG-47170): use tss.encryptYShare helper when signatures are supported
        const userToBitgoPublicShare = Buffer.concat([
            Buffer.from(userKeyShare.uShare.y, 'hex'),
            Buffer.from(userKeyShare.uShare.chaincode, 'hex'),
        ]).toString('hex');
        const userToBitgoPrivateShare = Buffer.concat([
            Buffer.from(userKeyShare.yShares[3].u, 'hex'),
            Buffer.from(userKeyShare.yShares[3].chaincode, 'hex'),
        ]).toString('hex');
        const userToBitgoKeyShare = {
            publicShare: userToBitgoPublicShare,
            privateShare: userToBitgoPrivateShare,
            privateShareProof: await (0, opengpgUtils_1.createShareProof)(userGpgKey.privateKey, userToBitgoPrivateShare.slice(0, 64), 'eddsa'),
            vssProof: userKeyShare.yShares[3].v,
        };
        const backupToBitgoPublicShare = Buffer.concat([
            Buffer.from(backupKeyShare.uShare.y, 'hex'),
            Buffer.from(backupKeyShare.uShare.chaincode, 'hex'),
        ]).toString('hex');
        const backupToBitgoPrivateShare = Buffer.concat([
            Buffer.from(backupKeyShare.yShares[3].u, 'hex'),
            Buffer.from(backupKeyShare.yShares[3].chaincode, 'hex'),
        ]).toString('hex');
        const backupToBitgoKeyShare = {
            publicShare: backupToBitgoPublicShare,
            privateShare: backupToBitgoPrivateShare,
            privateShareProof: await (0, opengpgUtils_1.createShareProof)(backupGpgKey.privateKey, backupToBitgoPrivateShare.slice(0, 64), 'eddsa'),
            vssProof: backupKeyShare.yShares[3].v,
        };
        return await this.createBitgoKeychainInWP(userGpgKey, backupGpgKey, userToBitgoKeyShare, backupToBitgoKeyShare, 'tss', enterprise);
    }
    /**
     * Creates User, Backup, and BitGo TSS Keychains.
     *
     * @param params.passphrase - passphrase used to encrypt signing materials created for User and Backup
     */
    async createKeychains(params) {
        const MPC = await tss_1.default.initialize();
        const m = 2;
        const n = 3;
        const userKeyShare = MPC.keyShare(1, m, n);
        const backupKeyShare = MPC.keyShare(2, m, n);
        const userGpgKey = await (0, opengpgUtils_1.generateGPGKeyPair)('secp256k1');
        const backupGpgKey = await (0, opengpgUtils_1.generateGPGKeyPair)('secp256k1');
        const bitgoKeychain = await this.createBitgoKeychain({
            userGpgKey,
            userKeyShare,
            backupGpgKey,
            backupKeyShare,
            enterprise: params.enterprise,
        });
        const userKeychainPromise = this.createUserKeychain({
            userGpgKey,
            userKeyShare,
            backupGpgKey,
            backupKeyShare,
            bitgoKeychain,
            passphrase: params.passphrase,
            originalPasscodeEncryptionCode: params.originalPasscodeEncryptionCode,
        });
        const backupKeychainPromise = this.createBackupKeychain({
            userGpgKey,
            userKeyShare,
            backupGpgKey,
            backupKeyShare,
            bitgoKeychain,
            passphrase: params.passphrase,
        });
        const [userKeychain, backupKeychain] = await Promise.all([userKeychainPromise, backupKeychainPromise]);
        // create wallet
        const keychains = {
            userKeychain,
            backupKeychain,
            bitgoKeychain,
        };
        return keychains;
    }
    async createCommitmentShareFromTxRequest(params) {
        var _a;
        const bitgoIndex = tss_2.ShareKeyPosition.BITGO;
        const { txRequest, prv } = params;
        const txRequestResolved = txRequest;
        const hdTree = await sdk_lib_mpc_1.Ed25519Bip32HdTree.initialize();
        const MPC = await tss_1.default.initialize(hdTree);
        const userSigningMaterial = JSON.parse(prv);
        if (!userSigningMaterial.backupYShare) {
            throw new Error('Invalid user key - missing backupYShare');
        }
        (0, assert_1.default)(txRequestResolved.transactions || txRequestResolved.unsignedTxs, 'Unable to find transactions in txRequest');
        const unsignedTx = txRequestResolved.apiVersion === 'full'
            ? txRequestResolved.transactions[0].unsignedTx
            : txRequestResolved.unsignedTxs[0];
        const signingKey = MPC.keyDerive(userSigningMaterial.uShare, [userSigningMaterial.bitgoYShare, userSigningMaterial.backupYShare], unsignedTx.derivationPath);
        const signablePayload = Buffer.from(unsignedTx.signableHex, 'hex');
        const userSignShare = await (0, tss_2.createUserSignShare)(signablePayload, signingKey.pShare);
        const commitment = (_a = userSignShare.rShares[bitgoIndex]) === null || _a === void 0 ? void 0 : _a.commitment;
        (0, assert_1.default)(commitment, 'Unable to find commitment in userSignShare');
        const userToBitgoCommitment = this.createUserToBitgoCommitmentShare(commitment);
        const signerShare = signingKey.yShares[bitgoIndex].u + signingKey.yShares[bitgoIndex].chaincode;
        const bitgoGpgKey = (await (0, opengpgUtils_1.getBitgoGpgPubKey)(this.bitgo)).mpcV1;
        const userToBitgoEncryptedSignerShare = await (0, opengpgUtils_1.encryptText)(signerShare, bitgoGpgKey);
        const encryptedSignerShare = this.createUserToBitgoEncryptedSignerShare(userToBitgoEncryptedSignerShare);
        const stringifiedRShare = JSON.stringify(userSignShare);
        const encryptedRShare = this.bitgo.encrypt({ input: stringifiedRShare, password: params.walletPassphrase });
        const encryptedUserToBitgoRShare = this.createUserToBitgoEncryptedRShare(encryptedRShare);
        return { userToBitgoCommitment, encryptedSignerShare, encryptedUserToBitgoRShare };
    }
    async createRShareFromTxRequest(params) {
        const { walletPassphrase, encryptedUserToBitgoRShare } = params;
        const decryptedRShare = this.bitgo.decrypt({
            input: encryptedUserToBitgoRShare.share,
            password: walletPassphrase,
        });
        const rShare = JSON.parse(decryptedRShare);
        (0, assert_1.default)(rShare.xShare, 'Unable to find xShare in decryptedRShare');
        (0, assert_1.default)(rShare.rShares, 'Unable to find rShares in decryptedRShare');
        return { rShare };
    }
    async createGShareFromTxRequest(params) {
        let txRequestResolved;
        const { txRequest, prv, bitgoToUserCommitment, bitgoToUserRShare, userToBitgoRShare } = params;
        if (typeof txRequest === 'string') {
            txRequestResolved = await (0, tss_2.getTxRequest)(this.bitgo, this.wallet.id(), txRequest);
        }
        else {
            txRequestResolved = txRequest;
        }
        const userSigningMaterial = JSON.parse(prv);
        if (!userSigningMaterial.backupYShare) {
            throw new Error('Invalid user key - missing backupYShare');
        }
        (0, assert_1.default)(txRequestResolved.transactions || txRequestResolved.unsignedTxs, 'Unable to find transactions in txRequest');
        const unsignedTx = txRequestResolved.apiVersion === 'full'
            ? txRequestResolved.transactions[0].unsignedTx
            : txRequestResolved.unsignedTxs[0];
        const signablePayload = Buffer.from(unsignedTx.signableHex, 'hex');
        const userToBitGoGShare = await (0, tss_2.createUserToBitGoGShare)(userToBitgoRShare, bitgoToUserRShare, userSigningMaterial.backupYShare, userSigningMaterial.bitgoYShare, signablePayload, bitgoToUserCommitment);
        return userToBitGoGShare;
    }
    async signEddsaTssUsingExternalSigner(txRequest, externalSignerCommitmentGenerator, externalSignerRShareGenerator, externalSignerGShareGenerator, reqId) {
        let txRequestResolved;
        let txRequestId;
        if (typeof txRequest === 'string') {
            txRequestResolved = await (0, tss_2.getTxRequest)(this.bitgo, this.wallet.id(), txRequest, reqId);
            txRequestId = txRequestResolved.txRequestId;
        }
        else {
            txRequestResolved = txRequest;
            txRequestId = txRequest.txRequestId;
        }
        const { apiVersion } = txRequestResolved;
        const { userToBitgoCommitment, encryptedSignerShare, encryptedUserToBitgoRShare } = await externalSignerCommitmentGenerator({ txRequest: txRequestResolved });
        const { commitmentShare: bitgoToUserCommitment } = await (0, common_1.exchangeEddsaCommitments)(this.bitgo, this.wallet.id(), txRequestId, userToBitgoCommitment, encryptedSignerShare, apiVersion, reqId);
        const { rShare } = await externalSignerRShareGenerator({
            txRequest: txRequestResolved,
            encryptedUserToBitgoRShare,
        });
        await (0, tss_2.offerUserToBitgoRShare)(this.bitgo, this.wallet.id(), txRequestId, rShare, encryptedSignerShare.share, apiVersion, undefined, undefined, undefined, undefined, reqId);
        const bitgoToUserRShare = await (0, tss_2.getBitgoToUserRShare)(this.bitgo, this.wallet.id(), txRequestId, reqId);
        const gSignShareTransactionParams = {
            txRequest: txRequestResolved,
            bitgoToUserRShare: bitgoToUserRShare,
            userToBitgoRShare: rShare,
            bitgoToUserCommitment,
        };
        const gShare = await externalSignerGShareGenerator(gSignShareTransactionParams);
        await (0, tss_2.sendUserToBitgoGShare)(this.bitgo, this.wallet.id(), txRequestId, gShare, apiVersion, reqId);
        return await (0, tss_2.getTxRequest)(this.bitgo, this.wallet.id(), txRequestId, reqId);
    }
    /**
     * Signs the transaction associated to the transaction request.
     *
     * @param txRequest - transaction request object or id
     * @param prv - decrypted private key
     * @param reqId - request id
     * @returns {Promise<TxRequest>} fully signed TxRequest object
     */
    async signTxRequest(params) {
        this.bitgo.setRequestTracer(params.reqId);
        let txRequestResolved;
        let txRequestId;
        const { txRequest, prv } = params;
        if (typeof txRequest === 'string') {
            txRequestResolved = await (0, tss_2.getTxRequest)(this.bitgo, this.wallet.id(), txRequest);
            txRequestId = txRequestResolved.txRequestId;
        }
        else {
            txRequestResolved = txRequest;
            txRequestId = txRequest.txRequestId;
        }
        const hdTree = await sdk_lib_mpc_1.Ed25519Bip32HdTree.initialize();
        const MPC = await tss_1.default.initialize(hdTree);
        const userSigningMaterial = JSON.parse(prv);
        if (!userSigningMaterial.backupYShare) {
            throw new Error('Invalid user key - missing backupYShare');
        }
        const { apiVersion } = txRequestResolved;
        (0, assert_1.default)(txRequestResolved.transactions || txRequestResolved.unsignedTxs, 'Unable to find transactions in txRequest');
        const unsignedTx = apiVersion === 'full' ? txRequestResolved.transactions[0].unsignedTx : txRequestResolved.unsignedTxs[0];
        const signingKey = MPC.keyDerive(userSigningMaterial.uShare, [userSigningMaterial.bitgoYShare, userSigningMaterial.backupYShare], unsignedTx.derivationPath);
        const signablePayload = Buffer.from(unsignedTx.signableHex, 'hex');
        const userSignShare = await (0, tss_2.createUserSignShare)(signablePayload, signingKey.pShare);
        const bitgoIndex = tss_2.ShareKeyPosition.BITGO;
        const signerShare = signingKey.yShares[bitgoIndex].u + signingKey.yShares[bitgoIndex].chaincode;
        const bitgoGpgKey = (await (0, opengpgUtils_1.getBitgoGpgPubKey)(this.bitgo)).mpcV1;
        const userToBitgoEncryptedSignerShare = await (0, opengpgUtils_1.encryptText)(signerShare, bitgoGpgKey);
        const userGpgKey = await (0, opengpgUtils_1.generateGPGKeyPair)('secp256k1');
        const privateShareProof = await (0, opengpgUtils_1.createShareProof)(userGpgKey.privateKey, signingKey.yShares[bitgoIndex].u, 'eddsa');
        const vssProof = signingKey.yShares[bitgoIndex].v;
        const userPublicGpgKey = userGpgKey.publicKey;
        const publicShare = signingKey.yShares[bitgoIndex].y + signingKey.yShares[bitgoIndex].chaincode;
        const userToBitgoCommitment = userSignShare.rShares[bitgoIndex].commitment;
        (0, assert_1.default)(userToBitgoCommitment, 'Missing userToBitgoCommitment commitment');
        const commitmentShare = this.createUserToBitgoCommitmentShare(userToBitgoCommitment);
        const encryptedSignerShare = this.createUserToBitgoEncryptedSignerShare(userToBitgoEncryptedSignerShare);
        const { commitmentShare: bitgoToUserCommitment } = await (0, common_1.exchangeEddsaCommitments)(this.bitgo, this.wallet.id(), txRequestId, commitmentShare, encryptedSignerShare, apiVersion, params.reqId);
        await (0, tss_2.offerUserToBitgoRShare)(this.bitgo, this.wallet.id(), txRequestId, userSignShare, userToBitgoEncryptedSignerShare, apiVersion, vssProof, privateShareProof, userPublicGpgKey, publicShare, params.reqId);
        const bitgoToUserRShare = await (0, tss_2.getBitgoToUserRShare)(this.bitgo, this.wallet.id(), txRequestId, params.reqId);
        const userToBitGoGShare = await (0, tss_2.createUserToBitGoGShare)(userSignShare, bitgoToUserRShare, userSigningMaterial.backupYShare, userSigningMaterial.bitgoYShare, signablePayload, bitgoToUserCommitment);
        await (0, tss_2.sendUserToBitgoGShare)(this.bitgo, this.wallet.id(), txRequestId, userToBitGoGShare, apiVersion, params.reqId);
        return await (0, tss_2.getTxRequest)(this.bitgo, this.wallet.id(), txRequestId, params.reqId);
    }
    /**
     * Get the commonPub portion of the commonKeychain.
     *
     * @param {String} commonKeychain
     * @returns {string}
     */
    static getPublicKeyFromCommonKeychain(commonKeychain) {
        if (commonKeychain.length !== 128) {
            throw new Error(`Invalid commonKeychain length, expected 128, got ${commonKeychain.length}`);
        }
        const commonPubHexStr = commonKeychain.slice(0, 64);
        return bs58.encode(Buffer.from(commonPubHexStr, 'hex'));
    }
    createUserToBitgoCommitmentShare(commitment) {
        return {
            from: baseTypes_1.SignatureShareType.USER,
            to: baseTypes_1.SignatureShareType.BITGO,
            share: commitment,
            type: baseTypes_1.CommitmentType.COMMITMENT,
        };
    }
    createUserToBitgoEncryptedSignerShare(encryptedSignerShare) {
        return {
            from: baseTypes_1.SignatureShareType.USER,
            to: baseTypes_1.SignatureShareType.BITGO,
            share: encryptedSignerShare,
            type: baseTypes_1.EncryptedSignerShareType.ENCRYPTED_SIGNER_SHARE,
        };
    }
    createUserToBitgoEncryptedRShare(encryptedRShare) {
        return {
            from: baseTypes_1.SignatureShareType.USER,
            to: baseTypes_1.SignatureShareType.BITGO,
            share: encryptedRShare,
            type: baseTypes_1.EncryptedSignerShareType.ENCRYPTED_R_SHARE,
        };
    }
}
exports.EddsaUtils = EddsaUtils;
/**
 * @deprecated - use EddsaUtils
 */
exports.TssUtils = EddsaUtils;
//# sourceMappingURL=data:application/json;base64,