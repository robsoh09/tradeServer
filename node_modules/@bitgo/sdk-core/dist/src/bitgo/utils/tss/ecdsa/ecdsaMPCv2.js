"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EcdsaMPCv2Utils = void 0;
const assert_1 = __importDefault(require("assert"));
const io_ts_types_1 = require("io-ts-types");
const buffer_1 = require("buffer");
const keccak_1 = __importDefault(require("keccak"));
const sdk_lib_mpc_1 = require("@bitgo/sdk-lib-mpc");
const opengpgUtils_1 = require("../../opengpgUtils");
const base_1 = require("./base");
const public_types_1 = require("@bitgo/public-types");
const typesMPCv2_1 = require("./typesMPCv2");
const baseTypes_1 = require("../baseTypes");
const tss_1 = require("../../../tss");
const ecdsaMPCv2_1 = require("../../../tss/ecdsa/ecdsaMPCv2");
const common_1 = require("../../../tss/common");
class EcdsaMPCv2Utils extends base_1.BaseEcdsaUtils {
    /** @inheritdoc */
    async createKeychains(params) {
        var _a;
        const m = 2;
        const n = 3;
        const userSession = new sdk_lib_mpc_1.DklsDkg.Dkg(n, m, typesMPCv2_1.MPCv2PartiesEnum.USER);
        const backupSession = new sdk_lib_mpc_1.DklsDkg.Dkg(n, m, typesMPCv2_1.MPCv2PartiesEnum.BACKUP);
        const userGpgKey = await (0, opengpgUtils_1.generateGPGKeyPair)('secp256k1');
        const backupGpgKey = await (0, opengpgUtils_1.generateGPGKeyPair)('secp256k1');
        // Get the BitGo public key based on user/enterprise feature flags
        // If it doesn't work, use the default public key from the constants
        const bitgoPublicGpgKey = ((_a = (await this.getBitgoGpgPubkeyBasedOnFeatureFlags(params.enterprise, true))) !== null && _a !== void 0 ? _a : this.bitgoMPCv2PublicGpgKey).armor();
        const userGpgPrvKey = {
            partyId: typesMPCv2_1.MPCv2PartiesEnum.USER,
            gpgKey: userGpgKey.privateKey,
        };
        const backupGpgPrvKey = {
            partyId: typesMPCv2_1.MPCv2PartiesEnum.BACKUP,
            gpgKey: backupGpgKey.privateKey,
        };
        const bitgoGpgPubKey = {
            partyId: typesMPCv2_1.MPCv2PartiesEnum.BITGO,
            gpgKey: bitgoPublicGpgKey,
        };
        // #region round 1
        const userRound1BroadcastMsg = await userSession.initDkg();
        const backupRound1BroadcastMsg = await backupSession.initDkg();
        const round1SerializedMessages = sdk_lib_mpc_1.DklsTypes.serializeMessages({
            broadcastMessages: [userRound1BroadcastMsg, backupRound1BroadcastMsg],
            p2pMessages: [],
        });
        const round1Messages = await sdk_lib_mpc_1.DklsComms.encryptAndAuthOutgoingMessages(round1SerializedMessages, [bitgoGpgPubKey], [userGpgPrvKey, backupGpgPrvKey]);
        const { sessionId, bitgoMsg1, bitgoToBackupMsg2, bitgoToUserMsg2 } = await this.sendKeyGenerationRound1(params.enterprise, userGpgKey.publicKey, backupGpgKey.publicKey, round1Messages);
        // #endregion
        // #region round 2
        const bitgoRound1BroadcastMessages = await sdk_lib_mpc_1.DklsComms.decryptAndVerifyIncomingMessages({ p2pMessages: [], broadcastMessages: [this.formatBitgoBroadcastMessage(bitgoMsg1)] }, [bitgoGpgPubKey], [userGpgPrvKey, backupGpgPrvKey]);
        const bitgoRound1BroadcastMsg = bitgoRound1BroadcastMessages.broadcastMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BITGO);
        (0, assert_1.default)(bitgoRound1BroadcastMsg, 'BitGo message 1 not found in broadcast messages');
        const userRound2P2PMessages = userSession.handleIncomingMessages({
            p2pMessages: [],
            broadcastMessages: [sdk_lib_mpc_1.DklsTypes.deserializeBroadcastMessage(bitgoRound1BroadcastMsg), backupRound1BroadcastMsg],
        });
        const userToBitgoMsg2 = userRound2P2PMessages.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.USER && m.to === typesMPCv2_1.MPCv2PartiesEnum.BITGO);
        (0, assert_1.default)(userToBitgoMsg2, 'User message 2 not found in P2P messages');
        const serializedUserToBitgoMsg2 = sdk_lib_mpc_1.DklsTypes.serializeP2PMessage(userToBitgoMsg2);
        const backupRound2P2PMessages = backupSession.handleIncomingMessages({
            p2pMessages: [],
            broadcastMessages: [userRound1BroadcastMsg, sdk_lib_mpc_1.DklsTypes.deserializeBroadcastMessage(bitgoRound1BroadcastMsg)],
        });
        const serializedBackupToBitgoMsg2 = sdk_lib_mpc_1.DklsTypes.serializeMessages(backupRound2P2PMessages).p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BACKUP && m.to === typesMPCv2_1.MPCv2PartiesEnum.BITGO);
        (0, assert_1.default)(serializedBackupToBitgoMsg2, 'Backup message 2 not found in P2P messages');
        const round2Messages = await sdk_lib_mpc_1.DklsComms.encryptAndAuthOutgoingMessages({ p2pMessages: [serializedUserToBitgoMsg2, serializedBackupToBitgoMsg2], broadcastMessages: [] }, [bitgoGpgPubKey], [userGpgPrvKey, backupGpgPrvKey]);
        const { sessionId: sessionIdRound2, bitgoCommitment2, bitgoToUserMsg3, bitgoToBackupMsg3, } = await this.sendKeyGenerationRound2(params.enterprise, sessionId, round2Messages);
        // #endregion
        // #region round 3
        assert_1.default.equal(sessionId, sessionIdRound2, 'Round 1 and 2 Session IDs do not match');
        const decryptedBitgoToUserRound2Msgs = await sdk_lib_mpc_1.DklsComms.decryptAndVerifyIncomingMessages({ p2pMessages: [this.formatP2PMessage(bitgoToUserMsg2)], broadcastMessages: [] }, [bitgoGpgPubKey], [userGpgPrvKey]);
        const serializedBitgoToUserRound2Msg = decryptedBitgoToUserRound2Msgs.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BITGO && m.to === typesMPCv2_1.MPCv2PartiesEnum.USER);
        (0, assert_1.default)(serializedBitgoToUserRound2Msg, 'BitGo to User message 2 not found in P2P messages');
        const bitgoToUserRound2Msg = sdk_lib_mpc_1.DklsTypes.deserializeP2PMessage(serializedBitgoToUserRound2Msg);
        const decryptedBitgoToBackupRound2Msg = await sdk_lib_mpc_1.DklsComms.decryptAndVerifyIncomingMessages({ p2pMessages: [this.formatP2PMessage(bitgoToBackupMsg2)], broadcastMessages: [] }, [bitgoGpgPubKey], [backupGpgPrvKey]);
        const serializedBitgoToBackupRound2Msg = decryptedBitgoToBackupRound2Msg.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BITGO && m.to === typesMPCv2_1.MPCv2PartiesEnum.BACKUP);
        (0, assert_1.default)(serializedBitgoToBackupRound2Msg, 'BitGo to Backup message 2 not found in P2P messages');
        const bitgoToBackupRound2Msg = sdk_lib_mpc_1.DklsTypes.deserializeP2PMessage(serializedBitgoToBackupRound2Msg);
        const userToBackupMsg2 = userRound2P2PMessages.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.USER && m.to === typesMPCv2_1.MPCv2PartiesEnum.BACKUP);
        (0, assert_1.default)(userToBackupMsg2, 'User to Backup message 2 not found in P2P messages');
        const backupToUserMsg2 = backupRound2P2PMessages.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BACKUP && m.to === typesMPCv2_1.MPCv2PartiesEnum.USER);
        (0, assert_1.default)(backupToUserMsg2, 'Backup to User message 2 not found in P2P messages');
        const userRound3Messages = userSession.handleIncomingMessages({
            broadcastMessages: [],
            p2pMessages: [bitgoToUserRound2Msg, backupToUserMsg2],
        });
        const userToBackupMsg3 = userRound3Messages.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.USER && m.to === typesMPCv2_1.MPCv2PartiesEnum.BACKUP);
        (0, assert_1.default)(userToBackupMsg3, 'User to Backup message 3 not found in P2P messages');
        const userToBitgoMsg3 = userRound3Messages.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.USER && m.to === typesMPCv2_1.MPCv2PartiesEnum.BITGO);
        (0, assert_1.default)(userToBitgoMsg3, 'User to Bitgo message 3 not found in P2P messages');
        const serializedUserToBitgoMsg3 = sdk_lib_mpc_1.DklsTypes.serializeP2PMessage(userToBitgoMsg3);
        const backupRound3Messages = backupSession.handleIncomingMessages({
            broadcastMessages: [],
            p2pMessages: [bitgoToBackupRound2Msg, userToBackupMsg2],
        });
        const backupToUserMsg3 = backupRound3Messages.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BACKUP && m.to === typesMPCv2_1.MPCv2PartiesEnum.USER);
        (0, assert_1.default)(backupToUserMsg3, 'Backup to User message 3 not found in P2P messages');
        const backupToBitgoMsg3 = backupRound3Messages.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BACKUP && m.to === typesMPCv2_1.MPCv2PartiesEnum.BITGO);
        (0, assert_1.default)(backupToBitgoMsg3, 'Backup to Bitgo message 3 not found in P2P messages');
        const serializedBackupToBitgoMsg3 = sdk_lib_mpc_1.DklsTypes.serializeP2PMessage(backupToBitgoMsg3);
        const decryptedBitgoToUserRound3Messages = await sdk_lib_mpc_1.DklsComms.decryptAndVerifyIncomingMessages({ broadcastMessages: [], p2pMessages: [this.formatP2PMessage(bitgoToUserMsg3, bitgoCommitment2)] }, [bitgoGpgPubKey], [userGpgPrvKey]);
        const serializedBitgoToUserRound3Msg = decryptedBitgoToUserRound3Messages.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BITGO && m.to === typesMPCv2_1.MPCv2PartiesEnum.USER);
        (0, assert_1.default)(serializedBitgoToUserRound3Msg, 'BitGo to User message 3 not found in P2P messages');
        const bitgoToUserRound3Msg = sdk_lib_mpc_1.DklsTypes.deserializeP2PMessage(serializedBitgoToUserRound3Msg);
        const decryptedBitgoToBackupRound3Messages = await sdk_lib_mpc_1.DklsComms.decryptAndVerifyIncomingMessages({ broadcastMessages: [], p2pMessages: [this.formatP2PMessage(bitgoToBackupMsg3, bitgoCommitment2)] }, [bitgoGpgPubKey], [backupGpgPrvKey]);
        const serializedBitgoToBackupRound3Msg = decryptedBitgoToBackupRound3Messages.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BITGO && m.to === typesMPCv2_1.MPCv2PartiesEnum.BACKUP);
        (0, assert_1.default)(serializedBitgoToBackupRound3Msg, 'BitGo to Backup message 3 not found in P2P messages');
        const bitgoToBackupRound3Msg = sdk_lib_mpc_1.DklsTypes.deserializeP2PMessage(serializedBitgoToBackupRound3Msg);
        const userRound4Messages = userSession.handleIncomingMessages({
            p2pMessages: [backupToUserMsg3, bitgoToUserRound3Msg],
            broadcastMessages: [],
        });
        const userRound4BroadcastMsg = userRound4Messages.broadcastMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.USER);
        (0, assert_1.default)(userRound4BroadcastMsg, 'User message 4 not found in broadcast messages');
        const serializedUserRound4BroadcastMsg = sdk_lib_mpc_1.DklsTypes.serializeBroadcastMessage(userRound4BroadcastMsg);
        const backupRound4Messages = backupSession.handleIncomingMessages({
            p2pMessages: [userToBackupMsg3, bitgoToBackupRound3Msg],
            broadcastMessages: [],
        });
        const backupRound4BroadcastMsg = backupRound4Messages.broadcastMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BACKUP);
        (0, assert_1.default)(backupRound4BroadcastMsg, 'Backup message 4 not found in broadcast messages');
        const serializedBackupRound4BroadcastMsg = sdk_lib_mpc_1.DklsTypes.serializeBroadcastMessage(backupRound4BroadcastMsg);
        const round3Messages = await sdk_lib_mpc_1.DklsComms.encryptAndAuthOutgoingMessages({
            p2pMessages: [serializedUserToBitgoMsg3, serializedBackupToBitgoMsg3],
            broadcastMessages: [serializedUserRound4BroadcastMsg, serializedBackupRound4BroadcastMsg],
        }, [bitgoGpgPubKey], [userGpgPrvKey, backupGpgPrvKey]);
        const { sessionId: sessionIdRound3, bitgoMsg4, commonKeychain: bitgoCommonKeychain, } = await this.sendKeyGenerationRound3(params.enterprise, sessionId, round3Messages);
        // #endregion
        // #region keychain creation
        assert_1.default.equal(sessionId, sessionIdRound3, 'Round 1 and 3 Session IDs do not match');
        const bitgoRound4BroadcastMessages = sdk_lib_mpc_1.DklsTypes.deserializeMessages(await sdk_lib_mpc_1.DklsComms.decryptAndVerifyIncomingMessages({ p2pMessages: [], broadcastMessages: [this.formatBitgoBroadcastMessage(bitgoMsg4)] }, [bitgoGpgPubKey], [])).broadcastMessages;
        const bitgoRound4BroadcastMsg = bitgoRound4BroadcastMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BITGO);
        (0, assert_1.default)(bitgoRound4BroadcastMsg, 'BitGo message 4 not found in broadcast messages');
        userSession.handleIncomingMessages({
            p2pMessages: [],
            broadcastMessages: [bitgoRound4BroadcastMsg, backupRound4BroadcastMsg],
        });
        backupSession.handleIncomingMessages({
            p2pMessages: [],
            broadcastMessages: [bitgoRound4BroadcastMsg, userRound4BroadcastMsg],
        });
        const userPrivateMaterial = userSession.getKeyShare();
        const backupPrivateMaterial = backupSession.getKeyShare();
        const userReducedPrivateMaterial = userSession.getReducedKeyShare();
        const backupReducedPrivateMaterial = backupSession.getReducedKeyShare();
        const userCommonKeychain = sdk_lib_mpc_1.DklsTypes.getCommonKeychain(userPrivateMaterial);
        const backupCommonKeychain = sdk_lib_mpc_1.DklsTypes.getCommonKeychain(backupPrivateMaterial);
        assert_1.default.equal(bitgoCommonKeychain, userCommonKeychain, 'User and Bitgo Common keychains do not match');
        assert_1.default.equal(bitgoCommonKeychain, backupCommonKeychain, 'Backup and Bitgo Common keychains do not match');
        const userKeychainPromise = this.addUserKeychain(bitgoCommonKeychain, userPrivateMaterial, userReducedPrivateMaterial, params.passphrase, params.originalPasscodeEncryptionCode);
        const backupKeychainPromise = this.addBackupKeychain(bitgoCommonKeychain, userPrivateMaterial, backupReducedPrivateMaterial, params.passphrase, params.originalPasscodeEncryptionCode);
        const bitgoKeychainPromise = this.addBitgoKeychain(bitgoCommonKeychain);
        const [userKeychain, backupKeychain, bitgoKeychain] = await Promise.all([
            userKeychainPromise,
            backupKeychainPromise,
            bitgoKeychainPromise,
        ]);
        // #endregion
        return {
            userKeychain,
            backupKeychain,
            bitgoKeychain,
        };
    }
    // #region keychain utils
    async createParticipantKeychain(participantIndex, commonKeychain, privateMaterial, reducedPrivateMaterial, passphrase, originalPasscodeEncryptionCode) {
        let source;
        let encryptedPrv = undefined;
        let reducedEncryptedPrv = undefined;
        switch (participantIndex) {
            case typesMPCv2_1.MPCv2PartiesEnum.USER:
            case typesMPCv2_1.MPCv2PartiesEnum.BACKUP:
                source = participantIndex === typesMPCv2_1.MPCv2PartiesEnum.USER ? 'user' : 'backup';
                (0, assert_1.default)(privateMaterial, `Private material is required for ${source} keychain`);
                (0, assert_1.default)(reducedPrivateMaterial, `Reduced private material is required for ${source} keychain`);
                (0, assert_1.default)(passphrase, `Passphrase is required for ${source} keychain`);
                encryptedPrv = this.bitgo.encrypt({
                    input: privateMaterial.toString('base64'),
                    password: passphrase,
                });
                reducedEncryptedPrv = this.bitgo.encrypt({
                    // Buffer.toString('base64') can not be used here as it does not work on the browser.
                    // The browser deals with a Buffer as Uint8Array, therefore in the browser .toString('base64') just creates a comma seperated string of the array values.
                    input: btoa(String.fromCharCode.apply(null, Array.from(new Uint8Array(reducedPrivateMaterial)))),
                    password: passphrase,
                });
                break;
            case typesMPCv2_1.MPCv2PartiesEnum.BITGO:
                source = 'bitgo';
                break;
            default:
                throw new Error('Invalid participant index');
        }
        const recipientKeychainParams = {
            source,
            keyType: 'tss',
            commonKeychain,
            encryptedPrv,
            originalPasscodeEncryptionCode,
            isMPCv2: true,
        };
        const keychains = this.baseCoin.keychains();
        return { ...(await keychains.add(recipientKeychainParams)), reducedEncryptedPrv: reducedEncryptedPrv };
    }
    async addUserKeychain(commonKeychain, privateMaterial, reducedPrivateMaterial, passphrase, originalPasscodeEncryptionCode) {
        return this.createParticipantKeychain(typesMPCv2_1.MPCv2PartiesEnum.USER, commonKeychain, privateMaterial, reducedPrivateMaterial, passphrase, originalPasscodeEncryptionCode);
    }
    async addBackupKeychain(commonKeychain, privateMaterial, reducedPrivateMaterial, passphrase, originalPasscodeEncryptionCode) {
        return this.createParticipantKeychain(typesMPCv2_1.MPCv2PartiesEnum.BACKUP, commonKeychain, privateMaterial, reducedPrivateMaterial, passphrase, originalPasscodeEncryptionCode);
    }
    async addBitgoKeychain(commonKeychain) {
        return this.createParticipantKeychain(typesMPCv2_1.MPCv2PartiesEnum.BITGO, commonKeychain);
    }
    // #endregion
    // #region generate key request utils
    async sendKeyGenerationRequest(enterprise, round, payload) {
        return this.bitgo
            .post(this.bitgo.url('/mpc/generatekey', 2))
            .send({ enterprise, type: public_types_1.KeyGenTypeEnum.MPCv2, round, payload })
            .result();
    }
    async sendKeyGenerationRound1(enterprise, userGpgPublicKey, backupGpgPublicKey, payload) {
        var _a, _b;
        (0, assert_1.default)(io_ts_types_1.NonEmptyString.is(userGpgPublicKey), 'User GPG public key is required');
        (0, assert_1.default)(io_ts_types_1.NonEmptyString.is(backupGpgPublicKey), 'Backup GPG public key is required');
        const userMsg1 = (_a = payload.broadcastMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.USER)) === null || _a === void 0 ? void 0 : _a.payload;
        (0, assert_1.default)(userMsg1, 'User message 1 not found in broadcast messages');
        const backupMsg1 = (_b = payload.broadcastMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BACKUP)) === null || _b === void 0 ? void 0 : _b.payload;
        (0, assert_1.default)(backupMsg1, 'Backup message 1 not found in broadcast messages');
        return this.sendKeyGenerationRequest(enterprise, public_types_1.MPCv2KeyGenStateEnum['MPCv2-R1'], {
            userGpgPublicKey,
            backupGpgPublicKey,
            userMsg1: { from: 0, ...userMsg1 },
            backupMsg1: { from: 1, ...backupMsg1 },
        });
    }
    async sendKeyGenerationRound2(enterprise, sessionId, payload) {
        (0, assert_1.default)(io_ts_types_1.NonEmptyString.is(sessionId), 'Session ID is required');
        const userMsg2 = payload.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.USER && m.to === typesMPCv2_1.MPCv2PartiesEnum.BITGO);
        (0, assert_1.default)(userMsg2, 'User to Bitgo message 2 not found in P2P messages');
        (0, assert_1.default)(userMsg2.commitment, 'User to Bitgo commitment not found in P2P messages');
        (0, assert_1.default)(io_ts_types_1.NonEmptyString.is(userMsg2.commitment), 'User to Bitgo commitment is required');
        const backupMsg2 = payload.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BACKUP && m.to === typesMPCv2_1.MPCv2PartiesEnum.BITGO);
        (0, assert_1.default)(backupMsg2, 'Backup to Bitgo message 2 not found in P2P messages');
        (0, assert_1.default)(backupMsg2.commitment, 'Backup to Bitgo commitment not found in P2P messages');
        (0, assert_1.default)(io_ts_types_1.NonEmptyString.is(backupMsg2.commitment), 'Backup to Bitgo commitment is required');
        return this.sendKeyGenerationRequest(enterprise, public_types_1.MPCv2KeyGenStateEnum['MPCv2-R2'], {
            sessionId,
            userMsg2: {
                from: typesMPCv2_1.MPCv2PartiesEnum.USER,
                to: typesMPCv2_1.MPCv2PartiesEnum.BITGO,
                signature: userMsg2.payload.signature,
                encryptedMessage: userMsg2.payload.encryptedMessage,
            },
            userCommitment2: userMsg2.commitment,
            backupMsg2: {
                from: typesMPCv2_1.MPCv2PartiesEnum.BACKUP,
                to: typesMPCv2_1.MPCv2PartiesEnum.BITGO,
                signature: backupMsg2.payload.signature,
                encryptedMessage: backupMsg2.payload.encryptedMessage,
            },
            backupCommitment2: backupMsg2.commitment,
        });
    }
    async sendKeyGenerationRound3(enterprise, sessionId, payload) {
        var _a, _b, _c, _d;
        (0, assert_1.default)(io_ts_types_1.NonEmptyString.is(sessionId), 'Session ID is required');
        const userMsg3 = (_a = payload.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.USER && m.to === typesMPCv2_1.MPCv2PartiesEnum.BITGO)) === null || _a === void 0 ? void 0 : _a.payload;
        (0, assert_1.default)(userMsg3, 'User to Bitgo message 3 not found in P2P messages');
        const backupMsg3 = (_b = payload.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BACKUP && m.to === typesMPCv2_1.MPCv2PartiesEnum.BITGO)) === null || _b === void 0 ? void 0 : _b.payload;
        (0, assert_1.default)(backupMsg3, 'Backup to Bitgo message 3 not found in P2P messages');
        const userMsg4 = (_c = payload.broadcastMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.USER)) === null || _c === void 0 ? void 0 : _c.payload;
        (0, assert_1.default)(userMsg4, 'User message 1 not found in broadcast messages');
        const backupMsg4 = (_d = payload.broadcastMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BACKUP)) === null || _d === void 0 ? void 0 : _d.payload;
        (0, assert_1.default)(backupMsg4, 'Backup message 1 not found in broadcast messages');
        return this.sendKeyGenerationRequest(enterprise, public_types_1.MPCv2KeyGenStateEnum['MPCv2-R3'], {
            sessionId,
            userMsg3: { from: 0, to: 2, ...userMsg3 },
            backupMsg3: { from: 1, to: 2, ...backupMsg3 },
            userMsg4: { from: 0, ...userMsg4 },
            backupMsg4: { from: 1, ...backupMsg4 },
        });
    }
    /**
     * Signs the transaction associated to the transaction request.
     * @param {string | TxRequest} params.txRequest - transaction request object or id
     * @param {string} params.prv - decrypted private key
     * @param {string} params.reqId - request id
     * @returns {Promise<TxRequest>} fully signed TxRequest object
     */
    async signTxRequest(params) {
        this.bitgo.setRequestTracer(params.reqId);
        return this.signRequestBase(params, baseTypes_1.RequestType.tx);
    }
    async signRequestBase(params, requestType) {
        const userKeyShare = buffer_1.Buffer.from(params.prv, 'base64');
        const txRequest = typeof params.txRequest === 'string'
            ? await (0, tss_1.getTxRequest)(this.bitgo, this.wallet.id(), params.txRequest)
            : params.txRequest;
        let derivationPath;
        let txToSign;
        const [userGpgKey, bitgoGpgPubKey] = await Promise.all([
            (0, opengpgUtils_1.generateGPGKeyPair)('secp256k1'),
            this.getBitgoGpgPubkeyBasedOnFeatureFlags(txRequest.enterpriseId, true).then((pubKey) => pubKey !== null && pubKey !== void 0 ? pubKey : this.bitgoMPCv2PublicGpgKey),
        ]);
        if (!bitgoGpgPubKey) {
            throw new Error('Missing BitGo GPG key for MPCv2');
        }
        if (requestType === baseTypes_1.RequestType.tx) {
            (0, assert_1.default)(txRequest.transactions || txRequest.unsignedTxs, 'Unable to find transactions in txRequest');
            const unsignedTx = txRequest.apiVersion === 'full' ? txRequest.transactions[0].unsignedTx : txRequest.unsignedTxs[0];
            txToSign = unsignedTx.signableHex;
            derivationPath = unsignedTx.derivationPath;
        }
        else if (requestType === baseTypes_1.RequestType.message) {
            throw new Error('MPCv2 message signing not supported yet.');
        }
        else {
            throw new Error('Invalid request type');
        }
        let hash;
        try {
            hash = this.baseCoin.getHashFunction();
        }
        catch (err) {
            hash = (0, keccak_1.default)('keccak256');
        }
        const hashBuffer = hash.update(buffer_1.Buffer.from(txToSign, 'hex')).digest();
        const otherSigner = new sdk_lib_mpc_1.DklsDsg.Dsg(userKeyShare, 0, derivationPath, hashBuffer);
        const userSignerBroadcastMsg1 = await otherSigner.init();
        const signatureShareRound1 = await (0, ecdsaMPCv2_1.getSignatureShareRoundOne)(userSignerBroadcastMsg1, userGpgKey);
        let latestTxRequest = await (0, common_1.sendSignatureShareV2)(this.bitgo, txRequest.walletId, txRequest.txRequestId, [signatureShareRound1], baseTypes_1.RequestType.tx, this.baseCoin.getMPCAlgorithm(), userGpgKey.publicKey, undefined, this.wallet.multisigTypeVersion());
        (0, assert_1.default)(latestTxRequest.transactions);
        const bitgoToUserMessages1And2 = latestTxRequest.transactions[0].signatureShares;
        // TODO: Use codec for parsing
        const parsedBitGoToUserSigShareRoundOne = JSON.parse(bitgoToUserMessages1And2[bitgoToUserMessages1And2.length - 1].share);
        if (parsedBitGoToUserSigShareRoundOne.type !== 'round1Output') {
            throw new Error('Unexpected signature share response. Unable to parse data.');
        }
        const serializedBitGoToUserMessagesRound1And2 = await (0, ecdsaMPCv2_1.verifyBitGoMessagesAndSignaturesRoundOne)(parsedBitGoToUserSigShareRoundOne, userGpgKey, bitgoGpgPubKey);
        /** Round 2 **/
        const deserializedMessages = sdk_lib_mpc_1.DklsTypes.deserializeMessages(serializedBitGoToUserMessagesRound1And2);
        const userToBitGoMessagesRound2 = otherSigner.handleIncomingMessages({
            p2pMessages: [],
            broadcastMessages: deserializedMessages.broadcastMessages,
        });
        const userToBitGoMessagesRound3 = otherSigner.handleIncomingMessages({
            p2pMessages: deserializedMessages.p2pMessages,
            broadcastMessages: [],
        });
        const signatureShareRoundTwo = await (0, ecdsaMPCv2_1.getSignatureShareRoundTwo)(userToBitGoMessagesRound2, userToBitGoMessagesRound3, userGpgKey, bitgoGpgPubKey);
        latestTxRequest = await (0, common_1.sendSignatureShareV2)(this.bitgo, txRequest.walletId, txRequest.txRequestId, [signatureShareRoundTwo], baseTypes_1.RequestType.tx, this.baseCoin.getMPCAlgorithm(), userGpgKey.publicKey, undefined, this.wallet.multisigTypeVersion());
        (0, assert_1.default)(latestTxRequest.transactions);
        const txRequestSignatureShares = latestTxRequest.transactions[0].signatureShares;
        // TODO: Use codec for parsing
        const parsedBitGoToUserSigShareRoundTwo = JSON.parse(txRequestSignatureShares[txRequestSignatureShares.length - 1].share);
        if (parsedBitGoToUserSigShareRoundTwo.type !== 'round2Output') {
            throw new Error('Unexpected signature share response. Unable to parse data.');
        }
        const serializedBitGoToUserMessagesRound3 = await (0, ecdsaMPCv2_1.verifyBitGoMessagesAndSignaturesRoundTwo)(parsedBitGoToUserSigShareRoundTwo, userGpgKey, bitgoGpgPubKey);
        /** Round 3 **/
        const deserializedBitGoToUserMessagesRound3 = sdk_lib_mpc_1.DklsTypes.deserializeMessages({
            p2pMessages: serializedBitGoToUserMessagesRound3.p2pMessages,
            broadcastMessages: [],
        });
        const userToBitGoMessagesRound4 = otherSigner.handleIncomingMessages({
            p2pMessages: deserializedBitGoToUserMessagesRound3.p2pMessages,
            broadcastMessages: [],
        });
        const signatureShareRoundThree = await (0, ecdsaMPCv2_1.getSignatureShareRoundThree)(userToBitGoMessagesRound4, userGpgKey, bitgoGpgPubKey);
        // Submit for final signature share combine
        await (0, common_1.sendSignatureShareV2)(this.bitgo, txRequest.walletId, txRequest.txRequestId, [signatureShareRoundThree], baseTypes_1.RequestType.tx, this.baseCoin.getMPCAlgorithm(), userGpgKey.publicKey, undefined, this.wallet.multisigTypeVersion());
        return (0, common_1.sendTxRequest)(this.bitgo, txRequest.walletId, txRequest.txRequestId, baseTypes_1.RequestType.tx);
    }
    // #endregion
    // #region utils
    formatBitgoBroadcastMessage(broadcastMessage) {
        return {
            from: broadcastMessage.from,
            payload: { message: broadcastMessage.message, signature: broadcastMessage.signature },
        };
    }
    formatP2PMessage(p2pMessage, commitment) {
        return {
            payload: { encryptedMessage: p2pMessage.encryptedMessage, signature: p2pMessage.signature },
            from: p2pMessage.from,
            to: p2pMessage.to,
            commitment,
        };
    }
}
exports.EcdsaMPCv2Utils = EcdsaMPCv2Utils;
//# sourceMappingURL=data:application/json;base64,