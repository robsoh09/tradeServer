"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EncryptedSignerShareType = exports.CommitmentType = exports.SignatureShareType = exports.RequestType = exports.TokenType = exports.MPCType = exports.ShareType = void 0;
var ShareType;
(function (ShareType) {
    ShareType["R"] = "R";
    ShareType["Commitment"] = "commitment";
    ShareType["G"] = "G";
    ShareType["S"] = "S";
    ShareType["K"] = "K";
    ShareType["MuDelta"] = "MuDelta";
    ShareType["PaillierModulus"] = "PaillierModulus";
})(ShareType = exports.ShareType || (exports.ShareType = {}));
var MPCType;
(function (MPCType) {
    MPCType["EDDSA"] = "eddsa";
    MPCType["ECDSA"] = "ecdsa";
})(MPCType = exports.MPCType || (exports.MPCType = {}));
var TokenType;
(function (TokenType) {
    TokenType["ERC721"] = "ERC721";
    TokenType["ERC1155"] = "ERC1155";
    TokenType["ERC20"] = "ERC20";
})(TokenType = exports.TokenType || (exports.TokenType = {}));
var RequestType;
(function (RequestType) {
    RequestType[RequestType["tx"] = 0] = "tx";
    RequestType[RequestType["message"] = 1] = "message";
})(RequestType = exports.RequestType || (exports.RequestType = {}));
var SignatureShareType;
(function (SignatureShareType) {
    SignatureShareType["USER"] = "user";
    SignatureShareType["BACKUP"] = "backup";
    SignatureShareType["BITGO"] = "bitgo";
})(SignatureShareType = exports.SignatureShareType || (exports.SignatureShareType = {}));
var CommitmentType;
(function (CommitmentType) {
    CommitmentType["COMMITMENT"] = "commitment";
    CommitmentType["DECOMMITMENT"] = "decommitment";
})(CommitmentType = exports.CommitmentType || (exports.CommitmentType = {}));
var EncryptedSignerShareType;
(function (EncryptedSignerShareType) {
    EncryptedSignerShareType["ENCRYPTED_SIGNER_SHARE"] = "encryptedSignerShare";
    EncryptedSignerShareType["ENCRYPTED_R_SHARE"] = "encryptedRShare";
})(EncryptedSignerShareType = exports.EncryptedSignerShareType || (exports.EncryptedSignerShareType = {}));
//# sourceMappingURL=data:application/json;base64,