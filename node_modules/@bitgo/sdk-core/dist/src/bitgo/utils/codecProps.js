"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCodecProperties = void 0;
const t = __importStar(require("io-ts"));
/**
 * @param type
 * @returns {string[]} the top-level properties of a codec
 */
function getCodecProperties(type) {
    if (type instanceof t.IntersectionType) {
        return type.types.flatMap(getCodecProperties);
    }
    if (type instanceof t.ExactType) {
        return getCodecProperties(type.type);
    }
    if (type instanceof t.PartialType || type instanceof t.InterfaceType) {
        return Object.keys(type.props);
    }
    throw new Error(`Unsupported type: ${type.name}`);
}
exports.getCodecProperties = getCodecProperties;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZWNQcm9wcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9iaXRnby91dGlscy9jb2RlY1Byb3BzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEseUNBQTJCO0FBRTNCOzs7R0FHRztBQUNILFNBQWdCLGtCQUFrQixDQUFDLElBQWlCO0lBQ2xELElBQUksSUFBSSxZQUFZLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRTtRQUN0QyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7S0FDL0M7SUFDRCxJQUFJLElBQUksWUFBWSxDQUFDLENBQUMsU0FBUyxFQUFFO1FBQy9CLE9BQU8sa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3RDO0lBQ0QsSUFBSSxJQUFJLFlBQVksQ0FBQyxDQUFDLFdBQVcsSUFBSSxJQUFJLFlBQVksQ0FBQyxDQUFDLGFBQWEsRUFBRTtRQUNwRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ2hDO0lBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFDcEQsQ0FBQztBQVpELGdEQVlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdCBmcm9tICdpby10cyc7XG5cbi8qKlxuICogQHBhcmFtIHR5cGVcbiAqIEByZXR1cm5zIHtzdHJpbmdbXX0gdGhlIHRvcC1sZXZlbCBwcm9wZXJ0aWVzIG9mIGEgY29kZWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvZGVjUHJvcGVydGllcyh0eXBlOiB0LlR5cGU8YW55Pik6IHN0cmluZ1tdIHtcbiAgaWYgKHR5cGUgaW5zdGFuY2VvZiB0LkludGVyc2VjdGlvblR5cGUpIHtcbiAgICByZXR1cm4gdHlwZS50eXBlcy5mbGF0TWFwKGdldENvZGVjUHJvcGVydGllcyk7XG4gIH1cbiAgaWYgKHR5cGUgaW5zdGFuY2VvZiB0LkV4YWN0VHlwZSkge1xuICAgIHJldHVybiBnZXRDb2RlY1Byb3BlcnRpZXModHlwZS50eXBlKTtcbiAgfVxuICBpZiAodHlwZSBpbnN0YW5jZW9mIHQuUGFydGlhbFR5cGUgfHwgdHlwZSBpbnN0YW5jZW9mIHQuSW50ZXJmYWNlVHlwZSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0eXBlLnByb3BzKTtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgdHlwZTogJHt0eXBlLm5hbWV9YCk7XG59XG4iXX0=