"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUtxoCoinScriptTypesForWalletType = exports.getUtxoCoinScriptTypes2Of3 = exports.inferAddressType = void 0;
const assert_1 = __importDefault(require("assert"));
const statics_1 = require("@bitgo/statics");
const utxolib = __importStar(require("@bitgo/utxo-lib"));
function inferAddressType(addressDetails) {
    return utxolib.bitgo.isChainCode(addressDetails.chain)
        ? utxolib.bitgo.scriptTypeForChain(addressDetails.chain)
        : null;
}
exports.inferAddressType = inferAddressType;
/**
 * Get the supported 2 of 3 script types for a given utxo coin
 */
function getUtxoCoinScriptTypes2Of3(coinName) {
    const coin = statics_1.coins.get(coinName);
    (0, assert_1.default)(coin instanceof statics_1.UtxoCoin, `coin ${coinName} is not a utxo coin`);
    const network = utxolib.networks[coin.network.utxolibName];
    return utxolib.bitgo.outputScripts.scriptTypes2Of3.filter((v) => utxolib.bitgo.outputScripts.isSupportedScriptType(network, v));
}
exports.getUtxoCoinScriptTypes2Of3 = getUtxoCoinScriptTypes2Of3;
/**
 * Get the supported 2 of 3 script types for a given utxo coin and wallet type
 * @param coinName
 * @param walletType
 */
function getUtxoCoinScriptTypesForWalletType(coinName, walletType) {
    const scriptTypes = getUtxoCoinScriptTypes2Of3(coinName);
    // Only return true for p2trMusig2 if the wallet type is hot
    return scriptTypes.filter((scriptType) => (scriptType === 'p2trMusig2' ? walletType === 'hot' : true));
}
exports.getUtxoCoinScriptTypesForWalletType = getUtxoCoinScriptTypesForWalletType;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3RVdHhvQ29pblV0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYml0Z28vdXRpbHMvYWJzdHJhY3RVdHhvQ29pblV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxvREFBNEI7QUFDNUIsNENBQWlEO0FBQ2pELHlEQUEyQztBQUkzQyxTQUFnQixnQkFBZ0IsQ0FBQyxjQUFpQztJQUNoRSxPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUM7UUFDcEQsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQztRQUN4RCxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ1gsQ0FBQztBQUpELDRDQUlDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQiwwQkFBMEIsQ0FBQyxRQUFnQjtJQUN6RCxNQUFNLElBQUksR0FBRyxlQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pDLElBQUEsZ0JBQU0sRUFBQyxJQUFJLFlBQVksa0JBQVEsRUFBRSxRQUFRLFFBQVEscUJBQXFCLENBQUMsQ0FBQztJQUN4RSxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBa0MsQ0FBQyxDQUFDO0lBQ2xGLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQzlELE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FDOUQsQ0FBQztBQUNKLENBQUM7QUFQRCxnRUFPQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFnQixtQ0FBbUMsQ0FDakQsUUFBZ0IsRUFDaEIsVUFBc0I7SUFFdEIsTUFBTSxXQUFXLEdBQUcsMEJBQTBCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFekQsNERBQTREO0lBQzVELE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQyxVQUFVLEtBQUssWUFBWSxDQUFDLENBQUMsQ0FBQyxVQUFVLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3pHLENBQUM7QUFSRCxrRkFRQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcbmltcG9ydCB7IGNvaW5zLCBVdHhvQ29pbiB9IGZyb20gJ0BiaXRnby9zdGF0aWNzJztcbmltcG9ydCAqIGFzIHV0eG9saWIgZnJvbSAnQGJpdGdvL3V0eG8tbGliJztcbmltcG9ydCBTY3JpcHRUeXBlMk9mMyA9IHV0eG9saWIuYml0Z28ub3V0cHV0U2NyaXB0cy5TY3JpcHRUeXBlMk9mMztcbmltcG9ydCB7IFdhbGxldFR5cGUgfSBmcm9tICcuLi93YWxsZXQnO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5mZXJBZGRyZXNzVHlwZShhZGRyZXNzRGV0YWlsczogeyBjaGFpbjogbnVtYmVyIH0pOiBTY3JpcHRUeXBlMk9mMyB8IG51bGwge1xuICByZXR1cm4gdXR4b2xpYi5iaXRnby5pc0NoYWluQ29kZShhZGRyZXNzRGV0YWlscy5jaGFpbilcbiAgICA/IHV0eG9saWIuYml0Z28uc2NyaXB0VHlwZUZvckNoYWluKGFkZHJlc3NEZXRhaWxzLmNoYWluKVxuICAgIDogbnVsbDtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHN1cHBvcnRlZCAyIG9mIDMgc2NyaXB0IHR5cGVzIGZvciBhIGdpdmVuIHV0eG8gY29pblxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VXR4b0NvaW5TY3JpcHRUeXBlczJPZjMoY29pbk5hbWU6IHN0cmluZyk6IHV0eG9saWIuYml0Z28ub3V0cHV0U2NyaXB0cy5TY3JpcHRUeXBlMk9mM1tdIHtcbiAgY29uc3QgY29pbiA9IGNvaW5zLmdldChjb2luTmFtZSk7XG4gIGFzc2VydChjb2luIGluc3RhbmNlb2YgVXR4b0NvaW4sIGBjb2luICR7Y29pbk5hbWV9IGlzIG5vdCBhIHV0eG8gY29pbmApO1xuICBjb25zdCBuZXR3b3JrID0gdXR4b2xpYi5uZXR3b3Jrc1tjb2luLm5ldHdvcmsudXR4b2xpYk5hbWUgYXMgdXR4b2xpYi5OZXR3b3JrTmFtZV07XG4gIHJldHVybiB1dHhvbGliLmJpdGdvLm91dHB1dFNjcmlwdHMuc2NyaXB0VHlwZXMyT2YzLmZpbHRlcigodikgPT5cbiAgICB1dHhvbGliLmJpdGdvLm91dHB1dFNjcmlwdHMuaXNTdXBwb3J0ZWRTY3JpcHRUeXBlKG5ldHdvcmssIHYpXG4gICk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBzdXBwb3J0ZWQgMiBvZiAzIHNjcmlwdCB0eXBlcyBmb3IgYSBnaXZlbiB1dHhvIGNvaW4gYW5kIHdhbGxldCB0eXBlXG4gKiBAcGFyYW0gY29pbk5hbWVcbiAqIEBwYXJhbSB3YWxsZXRUeXBlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRVdHhvQ29pblNjcmlwdFR5cGVzRm9yV2FsbGV0VHlwZShcbiAgY29pbk5hbWU6IHN0cmluZyxcbiAgd2FsbGV0VHlwZTogV2FsbGV0VHlwZVxuKTogdXR4b2xpYi5iaXRnby5vdXRwdXRTY3JpcHRzLlNjcmlwdFR5cGUyT2YzW10ge1xuICBjb25zdCBzY3JpcHRUeXBlcyA9IGdldFV0eG9Db2luU2NyaXB0VHlwZXMyT2YzKGNvaW5OYW1lKTtcblxuICAvLyBPbmx5IHJldHVybiB0cnVlIGZvciBwMnRyTXVzaWcyIGlmIHRoZSB3YWxsZXQgdHlwZSBpcyBob3RcbiAgcmV0dXJuIHNjcmlwdFR5cGVzLmZpbHRlcigoc2NyaXB0VHlwZSkgPT4gKHNjcmlwdFR5cGUgPT09ICdwMnRyTXVzaWcyJyA/IHdhbGxldFR5cGUgPT09ICdob3QnIDogdHJ1ZSkpO1xufVxuIl19