"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.postWithCodec = void 0;
/**
 * Try to encode the body with the codec and send the request.
 * If the codec fails to encode the body, send the request with the body as is and set the 'codec-error' header to true.
 * Set the 'io-ts-unknown-properties' header to the list of unknown properties that are present in the body but not the codec.
 * @param bitgo
 * @param url
 * @param codec
 * @param body
 * @param [useEncodedBody=true] - when false, send the original body. Useful when writing new codecs.
 */
function postWithCodec(agent, url, codec, body, { useEncodedBody = true, } = {}) {
    let encodedBody;
    try {
        encodedBody = codec.encode(body);
    }
    catch (e) {
        console.error('error encoding request body for url', url, e);
    }
    const postRequest = agent.post(url);
    return postRequest.send(useEncodedBody && encodedBody ? encodedBody : body);
}
exports.postWithCodec = postWithCodec;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zdFdpdGhDb2RlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9iaXRnby91dGlscy9wb3N0V2l0aENvZGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUtBOzs7Ozs7Ozs7R0FTRztBQUNILFNBQWdCLGFBQWEsQ0FLM0IsS0FBYSxFQUNiLEdBQVcsRUFDWCxLQUFtQixFQUNuQixJQUFPLEVBQ1AsRUFDRSxjQUFjLEdBQUcsSUFBSSxNQUduQixFQUFFO0lBRU4sSUFBSSxXQUEwQixDQUFDO0lBQy9CLElBQUk7UUFDRixXQUFXLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNsQztJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsT0FBTyxDQUFDLEtBQUssQ0FBQyxxQ0FBcUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDOUQ7SUFDRCxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBDLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxjQUFjLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzlFLENBQUM7QUF4QkQsc0NBd0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdCBmcm9tICdpby10cyc7XG5pbXBvcnQgeyBCaXRHb0Jhc2UgfSBmcm9tICcuLi9iaXRnb0Jhc2UnO1xuaW1wb3J0IHsgQml0R29SZXF1ZXN0IH0gZnJvbSAnLi4vLi4vYXBpJztcbmltcG9ydCB7IFN1cGVyQWdlbnQsIFN1cGVyQWdlbnRSZXF1ZXN0IH0gZnJvbSAnc3VwZXJhZ2VudCc7XG5cbi8qKlxuICogVHJ5IHRvIGVuY29kZSB0aGUgYm9keSB3aXRoIHRoZSBjb2RlYyBhbmQgc2VuZCB0aGUgcmVxdWVzdC5cbiAqIElmIHRoZSBjb2RlYyBmYWlscyB0byBlbmNvZGUgdGhlIGJvZHksIHNlbmQgdGhlIHJlcXVlc3Qgd2l0aCB0aGUgYm9keSBhcyBpcyBhbmQgc2V0IHRoZSAnY29kZWMtZXJyb3InIGhlYWRlciB0byB0cnVlLlxuICogU2V0IHRoZSAnaW8tdHMtdW5rbm93bi1wcm9wZXJ0aWVzJyBoZWFkZXIgdG8gdGhlIGxpc3Qgb2YgdW5rbm93biBwcm9wZXJ0aWVzIHRoYXQgYXJlIHByZXNlbnQgaW4gdGhlIGJvZHkgYnV0IG5vdCB0aGUgY29kZWMuXG4gKiBAcGFyYW0gYml0Z29cbiAqIEBwYXJhbSB1cmxcbiAqIEBwYXJhbSBjb2RlY1xuICogQHBhcmFtIGJvZHlcbiAqIEBwYXJhbSBbdXNlRW5jb2RlZEJvZHk9dHJ1ZV0gLSB3aGVuIGZhbHNlLCBzZW5kIHRoZSBvcmlnaW5hbCBib2R5LiBVc2VmdWwgd2hlbiB3cml0aW5nIG5ldyBjb2RlY3MuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwb3N0V2l0aENvZGVjPFxuICBUQWdlbnQgZXh0ZW5kcyBCaXRHb0Jhc2UgfCBTdXBlckFnZW50PGFueT4sXG4gIEEgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPixcbiAgTyBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHVua25vd24+XG4+KFxuICBhZ2VudDogVEFnZW50LFxuICB1cmw6IHN0cmluZyxcbiAgY29kZWM6IHQuVHlwZTxBLCBPPixcbiAgYm9keTogQSxcbiAge1xuICAgIHVzZUVuY29kZWRCb2R5ID0gdHJ1ZSxcbiAgfToge1xuICAgIHVzZUVuY29kZWRCb2R5PzogYm9vbGVhbjtcbiAgfSA9IHt9XG4pOiBUQWdlbnQgZXh0ZW5kcyBCaXRHb0Jhc2UgPyBCaXRHb1JlcXVlc3QgOiBTdXBlckFnZW50UmVxdWVzdCB7XG4gIGxldCBlbmNvZGVkQm9keTogTyB8IHVuZGVmaW5lZDtcbiAgdHJ5IHtcbiAgICBlbmNvZGVkQm9keSA9IGNvZGVjLmVuY29kZShib2R5KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ2Vycm9yIGVuY29kaW5nIHJlcXVlc3QgYm9keSBmb3IgdXJsJywgdXJsLCBlKTtcbiAgfVxuICBjb25zdCBwb3N0UmVxdWVzdCA9IGFnZW50LnBvc3QodXJsKTtcblxuICByZXR1cm4gcG9zdFJlcXVlc3Quc2VuZCh1c2VFbmNvZGVkQm9keSAmJiBlbmNvZGVkQm9keSA/IGVuY29kZWRCb2R5IDogYm9keSk7XG59XG4iXX0=