"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Markets = void 0;
/**
 * Markets Object
 * BitGo accessor to Bitcoin market data.
 *
 * Copyright 2022, BitGo, Inc.  All Rights Reserved.
 *
 * @prettier
 */
const common = __importStar(require("../../common"));
class Markets {
    constructor(bitgo, baseCoin) {
        this.bitgo = bitgo;
        this.baseCoin = baseCoin;
    }
    /**
     * Get the latest price data
     * @param params {}
     * @returns {*} an object containing price and volume data from the
     * current day in a number of currencies
     **/
    async latest(params) {
        return await this.bitgo.get(this.baseCoin.url('/market/latest')).result();
    }
    /**
     * Get yesterday's price data
     * @param params {}
     * @returns {*} an object containing price and volume data from the
     * previous day in a number of currencies
     */
    async yesterday(params) {
        return await this.bitgo.get(this.baseCoin.url('/market/yesterday')).result();
    }
    /**
     * Get price data from up to 90 days prior to today
     * @param params { currencyName: the code for the desired currency, for example USD }
     * @returns {*} an object containing average prices from a number of previous days
     */
    async lastDays(params) {
        common.validateParams(params, ['currencyName'], []);
        const days = params.days && !isNaN(parseInt(params.days, 10)) ? parseInt(params.days, 10) : 90;
        if (days && days < 0) {
            throw new Error('must use a non-negative number of days');
        }
        return this.bitgo.get(this.baseCoin.url('/market/last/' + days + '/' + params.currencyName)).result();
    }
}
exports.Markets = Markets;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2V0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9iaXRnby9tYXJrZXQvbWFya2V0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7O0dBT0c7QUFDSCxxREFBdUM7QUFLdkMsTUFBYSxPQUFPO0lBSWxCLFlBQW1CLEtBQWdCLEVBQUUsUUFBbUI7UUFDdEQsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDM0IsQ0FBQztJQUVEOzs7OztRQUtJO0lBQ0osS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFxQjtRQUNoQyxPQUFPLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzVFLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBd0I7UUFDdEMsT0FBTyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUMvRSxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBdUI7UUFDcEMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVwRCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFL0YsSUFBSSxJQUFJLElBQUksSUFBSSxHQUFHLENBQUMsRUFBRTtZQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7U0FDM0Q7UUFFRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGVBQWUsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3hHLENBQUM7Q0FDRjtBQTdDRCwwQkE2Q0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1hcmtldHMgT2JqZWN0XG4gKiBCaXRHbyBhY2Nlc3NvciB0byBCaXRjb2luIG1hcmtldCBkYXRhLlxuICpcbiAqIENvcHlyaWdodCAyMDIyLCBCaXRHbywgSW5jLiAgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBAcHJldHRpZXJcbiAqL1xuaW1wb3J0ICogYXMgY29tbW9uIGZyb20gJy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyBJQmFzZUNvaW4gfSBmcm9tICcuLi9iYXNlQ29pbic7XG5pbXBvcnQgeyBCaXRHb0Jhc2UgfSBmcm9tICcuLi9iaXRnb0Jhc2UnO1xuaW1wb3J0IHsgSU1hcmtldHMsIExhc3REYXlzT3B0aW9ucywgTGF0ZXN0T3B0aW9ucywgWWVzdGVyZGF5T3B0aW9ucyB9IGZyb20gJy4uL21hcmtldCc7XG5cbmV4cG9ydCBjbGFzcyBNYXJrZXRzIGltcGxlbWVudHMgSU1hcmtldHMge1xuICBwcml2YXRlIHJlYWRvbmx5IGJpdGdvOiBCaXRHb0Jhc2U7XG4gIHByaXZhdGUgcmVhZG9ubHkgYmFzZUNvaW46IElCYXNlQ29pbjtcblxuICBwdWJsaWMgY29uc3RydWN0b3IoYml0Z286IEJpdEdvQmFzZSwgYmFzZUNvaW46IElCYXNlQ29pbikge1xuICAgIHRoaXMuYml0Z28gPSBiaXRnbztcbiAgICB0aGlzLmJhc2VDb2luID0gYmFzZUNvaW47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBsYXRlc3QgcHJpY2UgZGF0YVxuICAgKiBAcGFyYW0gcGFyYW1zIHt9XG4gICAqIEByZXR1cm5zIHsqfSBhbiBvYmplY3QgY29udGFpbmluZyBwcmljZSBhbmQgdm9sdW1lIGRhdGEgZnJvbSB0aGVcbiAgICogY3VycmVudCBkYXkgaW4gYSBudW1iZXIgb2YgY3VycmVuY2llc1xuICAgKiovXG4gIGFzeW5jIGxhdGVzdChwYXJhbXM6IExhdGVzdE9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmJpdGdvLmdldCh0aGlzLmJhc2VDb2luLnVybCgnL21hcmtldC9sYXRlc3QnKSkucmVzdWx0KCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHllc3RlcmRheSdzIHByaWNlIGRhdGFcbiAgICogQHBhcmFtIHBhcmFtcyB7fVxuICAgKiBAcmV0dXJucyB7Kn0gYW4gb2JqZWN0IGNvbnRhaW5pbmcgcHJpY2UgYW5kIHZvbHVtZSBkYXRhIGZyb20gdGhlXG4gICAqIHByZXZpb3VzIGRheSBpbiBhIG51bWJlciBvZiBjdXJyZW5jaWVzXG4gICAqL1xuICBhc3luYyB5ZXN0ZXJkYXkocGFyYW1zOiBZZXN0ZXJkYXlPcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5iaXRnby5nZXQodGhpcy5iYXNlQ29pbi51cmwoJy9tYXJrZXQveWVzdGVyZGF5JykpLnJlc3VsdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBwcmljZSBkYXRhIGZyb20gdXAgdG8gOTAgZGF5cyBwcmlvciB0byB0b2RheVxuICAgKiBAcGFyYW0gcGFyYW1zIHsgY3VycmVuY3lOYW1lOiB0aGUgY29kZSBmb3IgdGhlIGRlc2lyZWQgY3VycmVuY3ksIGZvciBleGFtcGxlIFVTRCB9XG4gICAqIEByZXR1cm5zIHsqfSBhbiBvYmplY3QgY29udGFpbmluZyBhdmVyYWdlIHByaWNlcyBmcm9tIGEgbnVtYmVyIG9mIHByZXZpb3VzIGRheXNcbiAgICovXG4gIGFzeW5jIGxhc3REYXlzKHBhcmFtczogTGFzdERheXNPcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcbiAgICBjb21tb24udmFsaWRhdGVQYXJhbXMocGFyYW1zLCBbJ2N1cnJlbmN5TmFtZSddLCBbXSk7XG5cbiAgICBjb25zdCBkYXlzID0gcGFyYW1zLmRheXMgJiYgIWlzTmFOKHBhcnNlSW50KHBhcmFtcy5kYXlzLCAxMCkpID8gcGFyc2VJbnQocGFyYW1zLmRheXMsIDEwKSA6IDkwO1xuXG4gICAgaWYgKGRheXMgJiYgZGF5cyA8IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignbXVzdCB1c2UgYSBub24tbmVnYXRpdmUgbnVtYmVyIG9mIGRheXMnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5iaXRnby5nZXQodGhpcy5iYXNlQ29pbi51cmwoJy9tYXJrZXQvbGFzdC8nICsgZGF5cyArICcvJyArIHBhcmFtcy5jdXJyZW5jeU5hbWUpKS5yZXN1bHQoKTtcbiAgfVxufVxuIl19