import { BitGoBase } from '../bitgoBase';
import { IWallet } from '../wallet';
import { AddressBookListing, CreateAddressBookConnectionParams, CreateAddressBookConnectionResponse, CreateAddressBookListingEntryParams, CreateAddressBookListingEntryResponse, CreateAddressBookListingParams, GetAddressBookConnectionsParams, GetAddressBookConnectionsResponse, GetAddressBookListingEntryContactsParams, GetAddressBookListingEntryContactsResponse, GetAddressBookListingEntryDirectoryParams, GetAddressBookListingEntryDirectoryResponse, IAddressBook, UpdateAddressBookConnectionParams, UpdateAddressBookConnectionResponse, UpdateAddressBookListingEntryParams, UpdateAddressBookListingEntryResponse, UpdateAddressBookListingParams } from './types';
export declare class AddressBook implements IAddressBook {
    private readonly bitgo;
    private readonly enterpriseId;
    wallet?: IWallet;
    private _listing?;
    constructor(enterpriseId: string, bitgo: BitGoBase, wallet?: IWallet);
    listing(): AddressBookListing | undefined;
    /**
     * Get a list of connections the wallet has made to other directory or manually added contacts.
     */
    getConnections(params?: GetAddressBookConnectionsParams): Promise<GetAddressBookConnectionsResponse>;
    /**
     * Create a connection between an enterprise listing entry (wallet) to another listing entry
     * @param params
     * @param {string} listingEntryId Your enterprise listing entry id. Requires the creation of a listing entry before use.
     * @param {string=} localListingEntryDescription Optional name to override the name of the counterparties listing entry.
     * @param {string} targetListingEntryId If you know the other parties listing entry id
     * @param {string} walletId If you don't know the targetListingEntryId and are adding manually
     * @param {string} localListingName Required if using walletId
     * @returns {Promise<CreateAddressBookConnectionResponse>}
     */
    createConnection(params: CreateAddressBookConnectionParams): Promise<CreateAddressBookConnectionResponse>;
    /**
     * Update one or many connections to a new status
     */
    updateConnection(params: UpdateAddressBookConnectionParams): Promise<UpdateAddressBookConnectionResponse>;
    /**
     * Get the address book listing for the enterprise
     */
    getListing(): Promise<AddressBookListing>;
    /**
     * Create the listing used for each wallet's listing entry
     */
    createListing(params: CreateAddressBookListingParams): Promise<AddressBookListing>;
    /**
     * Update the name and description of the listing
     */
    updateListing({ listingId, ...params }: UpdateAddressBookListingParams): Promise<AddressBookListing>;
    /**
     * Return a list of listing entry contacts that are connected to your enterprise listing entries (wallets)
     */
    getListingEntryContacts(params?: GetAddressBookListingEntryContactsParams): Promise<GetAddressBookListingEntryContactsResponse>;
    /**
     * Return a public list of other listing entries that you can connect with.
     */
    getListingEntryDirectory(params?: GetAddressBookListingEntryDirectoryParams): Promise<GetAddressBookListingEntryDirectoryResponse>;
    /**
     * Create a listing entry for use in the public directory or keep private and share the listing entry id with others.
     */
    createListingEntry(params: Omit<CreateAddressBookListingEntryParams, 'walletId'> & {
        walletId?: string;
    }): Promise<CreateAddressBookListingEntryResponse>;
    /**
     * Update a listing entry (wallet)
     */
    updateListingEntry({ listingEntryId, ...params }: UpdateAddressBookListingEntryParams): Promise<UpdateAddressBookListingEntryResponse>;
}
//# sourceMappingURL=address-book.d.ts.map