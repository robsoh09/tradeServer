"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddressBook = void 0;
class AddressBook {
    constructor(enterpriseId, bitgo, wallet) {
        this.enterpriseId = enterpriseId;
        this.wallet = wallet;
        this.bitgo = bitgo;
    }
    listing() {
        /**
         * TODO(PX-2794): Move to structuredClone
         * https://github.com/BitGo/BitGoJS/pull/4119
         */
        return JSON.parse(JSON.stringify(this._listing));
    }
    /**
     * Get a list of connections the wallet has made to other directory or manually added contacts.
     */
    getConnections(params) {
        const url = this.bitgo.microservicesUrl('/api/address-book/v1/connections');
        return this.bitgo.get(url).set('enterprise-id', this.enterpriseId).send(params).result();
    }
    /**
     * Create a connection between an enterprise listing entry (wallet) to another listing entry
     * @param params
     * @param {string} listingEntryId Your enterprise listing entry id. Requires the creation of a listing entry before use.
     * @param {string=} localListingEntryDescription Optional name to override the name of the counterparties listing entry.
     * @param {string} targetListingEntryId If you know the other parties listing entry id
     * @param {string} walletId If you don't know the targetListingEntryId and are adding manually
     * @param {string} localListingName Required if using walletId
     * @returns {Promise<CreateAddressBookConnectionResponse>}
     */
    createConnection(params) {
        const url = this.bitgo.microservicesUrl('/api/address-book/v1/connections');
        return this.bitgo.post(url).set('enterprise-id', this.enterpriseId).send(params).result();
    }
    /**
     * Update one or many connections to a new status
     */
    updateConnection(params) {
        const url = this.bitgo.microservicesUrl('/api/address-book/v1/connections');
        return this.bitgo.put(url).set('enterprise-id', this.enterpriseId).send(params).result();
    }
    /**
     * Get the address book listing for the enterprise
     */
    async getListing() {
        const url = this.bitgo.microservicesUrl('/api/address-book/v1/listing/global');
        const response = await this.bitgo
            .get(url)
            .set('enterprise-id', this.enterpriseId)
            .send()
            .result();
        this._listing = response;
        return this.listing();
    }
    /**
     * Create the listing used for each wallet's listing entry
     */
    async createListing(params) {
        const url = this.bitgo.microservicesUrl('/api/address-book/v1/listing/global');
        const response = await this.bitgo
            .post(url)
            .set('enterprise-id', this.enterpriseId)
            .send(params)
            .result();
        this._listing = { ...response, listingEntries: [] };
        return this.listing();
    }
    /**
     * Update the name and description of the listing
     */
    async updateListing({ listingId, ...params }) {
        var _a;
        const url = this.bitgo.microservicesUrl(`/api/address-book/v1/listing/${listingId}`);
        const response = await this.bitgo
            .put(url)
            .set('enterprise-id', this.enterpriseId)
            .send(params)
            .result();
        this._listing = { ...response, listingEntries: ((_a = this._listing) === null || _a === void 0 ? void 0 : _a.listingEntries) ? this._listing.listingEntries : [] };
        return this.listing();
    }
    /**
     * Return a list of listing entry contacts that are connected to your enterprise listing entries (wallets)
     */
    getListingEntryContacts(params) {
        const url = this.bitgo.microservicesUrl('/api/address-book/v1/listing/entry/contacts');
        return this.bitgo.get(url).set('enterprise-id', this.enterpriseId).send(params).result();
    }
    /**
     * Return a public list of other listing entries that you can connect with.
     */
    getListingEntryDirectory(params) {
        const url = this.bitgo.microservicesUrl('/api/address-book/v1/listing/entry/directory');
        return this.bitgo.get(url).set('enterprise-id', this.enterpriseId).send(params).result();
    }
    /**
     * Create a listing entry for use in the public directory or keep private and share the listing entry id with others.
     */
    async createListingEntry(params) {
        var _a;
        if (!params.walletId && this.wallet) {
            params.walletId = this.wallet.id();
        }
        const url = this.bitgo.microservicesUrl('/api/address-book/v1/listing/entry/global');
        const response = await this.bitgo
            .post(url)
            .set('enterprise-id', this.enterpriseId)
            .send(params)
            .result();
        if (this._listing) {
            (_a = this._listing.listingEntries) === null || _a === void 0 ? void 0 : _a.push({ ...response });
        }
        return response;
    }
    /**
     * Update a listing entry (wallet)
     */
    async updateListingEntry({ listingEntryId, ...params }) {
        var _a, _b, _c, _d;
        const url = this.bitgo.microservicesUrl(`/api/address-book/v1/listing/entry/${listingEntryId}`);
        const response = await this.bitgo
            .put(url)
            .set('enterprise-id', this.enterpriseId)
            .send(params)
            .result();
        if (this._listing) {
            const index = (_c = (_b = (_a = this._listing) === null || _a === void 0 ? void 0 : _a.listingEntries) === null || _b === void 0 ? void 0 : _b.findIndex((x) => x.id === response.id)) !== null && _c !== void 0 ? _c : -1;
            if (index > -1 && this._listing.listingEntries) {
                this._listing.listingEntries[index] = { ...response };
            }
            else {
                (_d = this._listing.listingEntries) === null || _d === void 0 ? void 0 : _d.push({ ...response });
            }
        }
        return response;
    }
}
exports.AddressBook = AddressBook;
//# sourceMappingURL=data:application/json;base64,