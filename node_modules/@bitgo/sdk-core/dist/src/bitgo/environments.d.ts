/**
 * @prettier
 */
import { V1Network } from './types';
interface EnvironmentTemplate {
    uri?: string;
    network: V1Network;
    signingAddress: string;
    serverXpub: string;
    hsmXpub: string;
    btcExplorerBaseUrl: string;
    etherscanBaseUrl: string;
    etherscanApiToken?: string;
    avaxcNetworkBaseUrl: string;
    eth2ExplorerBaseUrl: string;
    ethwFullNodeRPCBaseUrl: string;
    polygonscanBaseUrl?: string;
    bscscanBaseUrl?: string;
    bscscanApiToken?: string;
    polygonscanApiToken?: string;
    arbiscanBaseUrl?: string;
    arbiscanApiToken?: string;
    optimisticEtherscanBaseUrl?: string;
    optimisticEtherscanApiToken?: string;
    zksyncExplorerBaseUrl?: string;
    zksyncExplorerApiToken?: string;
    baseethExplorerUrl?: string;
    baseethApiToken?: string;
    stellarFederationServerUrl?: string;
    eosNodeUrls: string[];
    nearNodeUrls: string[];
    solNodeUrl: string;
    adaNodeUrl: string;
    hashNodeUrl: string;
    injNodeUrl: string;
    atomNodeUrl: string;
    osmoNodeUrl: string;
    tiaNodeUrl: string;
    seiNodeUrl: string;
    bldNodeUrl: string;
    beraNodeUrl: string;
    zetaNodeUrl: string;
    coreumNodeUrl: string;
    islmNodeUrl: string;
    dotNodeUrls: string[];
    tronNodes: {
        full: string;
        solidity: string;
    };
    hmacVerificationEnforced: boolean;
}
export interface Environment extends EnvironmentTemplate {
    uri: string;
    stellarFederationServerUrl: string;
}
export declare const hardcodedPublicKeys: Readonly<{
    serverXpub: {
        prod: string;
        test: string;
    };
    hsmXpub: {
        prod: string;
        test: string;
        dev: string;
    };
}>;
export declare type EnvironmentName = 'prod' | 'staging' | 'test' | 'dev' | 'latest' | 'local' | 'localNonSecure' | 'mock' | 'adminProd' | 'adminTest' | 'adminDev' | 'adminLatest' | 'custom' | 'branch';
export declare type AliasEnvironmentName = 'production' | 'msProd' | 'msTest' | 'msDev' | 'msLatest';
export declare type Environments = {
    [k in EnvironmentName]: Environment;
};
export declare const AliasEnvironments: {
    [k in AliasEnvironmentName]: EnvironmentName;
};
export declare const Environments: Environments;
export {};
//# sourceMappingURL=environments.d.ts.map