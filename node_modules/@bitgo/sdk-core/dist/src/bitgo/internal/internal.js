"use strict";
/**
 * @prettier
 * @hidden
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFirstPendingTransaction = void 0;
/**
 */
const lodash_1 = require("lodash");
/**
 * Internal function to centralize this route for wallet-scoped and enterprise-scoped queries
 * Params must contain either walletId or enterpriseId
 * @param params Id to query for pending transaction
 * @param baseCoin The coin object
 * @param bitgo The BitGo object
 * @returns result of the query
 */
async function getFirstPendingTransaction(params, baseCoin, bitgo) {
    // These errors should never happen when this is called from wallet.js or enterprise.js
    if ((0, lodash_1.isUndefined)(baseCoin)) {
        throw new Error('Must provide baseCoin');
    }
    if ((0, lodash_1.isUndefined)(bitgo)) {
        throw new Error('Must provide BitGo object');
    }
    if ((0, lodash_1.isUndefined)(params.walletId) && (0, lodash_1.isUndefined)(params.enterpriseId)) {
        throw new Error('Must provide either walletId or enterpriseId');
    }
    return await bitgo.get(baseCoin.url('/tx/pending/first')).query(params).result();
}
exports.getFirstPendingTransaction = getFirstPendingTransaction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJuYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYml0Z28vaW50ZXJuYWwvaW50ZXJuYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7O0FBRUg7R0FDRztBQUNILG1DQUFxQztBQUlyQzs7Ozs7OztHQU9HO0FBQ0ksS0FBSyxVQUFVLDBCQUEwQixDQUM5QyxNQUFvRCxFQUNwRCxRQUFtQixFQUNuQixLQUFnQjtJQUVoQix1RkFBdUY7SUFDdkYsSUFBSSxJQUFBLG9CQUFXLEVBQUMsUUFBUSxDQUFDLEVBQUU7UUFDekIsTUFBTSxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0tBQzFDO0lBQ0QsSUFBSSxJQUFBLG9CQUFXLEVBQUMsS0FBSyxDQUFDLEVBQUU7UUFDdEIsTUFBTSxJQUFJLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0tBQzlDO0lBQ0QsSUFBSSxJQUFBLG9CQUFXLEVBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUEsb0JBQVcsRUFBQyxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUU7UUFDcEUsTUFBTSxJQUFJLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO0tBQ2pFO0lBQ0QsT0FBTyxNQUFNLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ25GLENBQUM7QUFoQkQsZ0VBZ0JDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJldHRpZXJcbiAqIEBoaWRkZW5cbiAqL1xuXG4vKipcbiAqL1xuaW1wb3J0IHsgaXNVbmRlZmluZWQgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgSUJhc2VDb2luIH0gZnJvbSAnLi4vYmFzZUNvaW4nO1xuaW1wb3J0IHsgQml0R29CYXNlIH0gZnJvbSAnLi4vYml0Z29CYXNlJztcblxuLyoqXG4gKiBJbnRlcm5hbCBmdW5jdGlvbiB0byBjZW50cmFsaXplIHRoaXMgcm91dGUgZm9yIHdhbGxldC1zY29wZWQgYW5kIGVudGVycHJpc2Utc2NvcGVkIHF1ZXJpZXNcbiAqIFBhcmFtcyBtdXN0IGNvbnRhaW4gZWl0aGVyIHdhbGxldElkIG9yIGVudGVycHJpc2VJZFxuICogQHBhcmFtIHBhcmFtcyBJZCB0byBxdWVyeSBmb3IgcGVuZGluZyB0cmFuc2FjdGlvblxuICogQHBhcmFtIGJhc2VDb2luIFRoZSBjb2luIG9iamVjdFxuICogQHBhcmFtIGJpdGdvIFRoZSBCaXRHbyBvYmplY3RcbiAqIEByZXR1cm5zIHJlc3VsdCBvZiB0aGUgcXVlcnlcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEZpcnN0UGVuZGluZ1RyYW5zYWN0aW9uKFxuICBwYXJhbXM6IHsgd2FsbGV0SWQ/OiBzdHJpbmc7IGVudGVycHJpc2VJZD86IHN0cmluZyB9LFxuICBiYXNlQ29pbjogSUJhc2VDb2luLFxuICBiaXRnbzogQml0R29CYXNlXG4pOiBQcm9taXNlPGFueT4ge1xuICAvLyBUaGVzZSBlcnJvcnMgc2hvdWxkIG5ldmVyIGhhcHBlbiB3aGVuIHRoaXMgaXMgY2FsbGVkIGZyb20gd2FsbGV0LmpzIG9yIGVudGVycHJpc2UuanNcbiAgaWYgKGlzVW5kZWZpbmVkKGJhc2VDb2luKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBwcm92aWRlIGJhc2VDb2luJyk7XG4gIH1cbiAgaWYgKGlzVW5kZWZpbmVkKGJpdGdvKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBwcm92aWRlIEJpdEdvIG9iamVjdCcpO1xuICB9XG4gIGlmIChpc1VuZGVmaW5lZChwYXJhbXMud2FsbGV0SWQpICYmIGlzVW5kZWZpbmVkKHBhcmFtcy5lbnRlcnByaXNlSWQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNdXN0IHByb3ZpZGUgZWl0aGVyIHdhbGxldElkIG9yIGVudGVycHJpc2VJZCcpO1xuICB9XG4gIHJldHVybiBhd2FpdCBiaXRnby5nZXQoYmFzZUNvaW4udXJsKCcvdHgvcGVuZGluZy9maXJzdCcpKS5xdWVyeShwYXJhbXMpLnJlc3VsdCgpO1xufVxuIl19