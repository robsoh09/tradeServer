/**
 * @prettier
 */
import { BIP32Interface } from '@bitgo/utxo-lib';
import { BaseCoin } from '../baseCoin';
import { BitGoBase } from '../bitgoBase';
import { KrsProvider } from '../config';
interface ValidateKeyOptions {
    key: string;
    source: string;
    passphrase?: string;
    isUnsignedSweep: boolean;
    isKrsRecovery: boolean;
}
export interface InitiateRecoveryOptions {
    userKey: string;
    backupKey: string;
    bitgoKey?: string;
    recoveryDestination: string;
    walletPassphrase?: string;
}
export interface InitiateConsolidationRecoveryOptions {
    userKey: string;
    backupKey: string;
    bitgoKey?: string;
    walletPassphrase?: string;
}
declare type GetKrsProviderOptions = {
    checkCoinFamilySupport?: boolean;
};
/**
 * @param coin
 * @param krsProviderName
 * @param checkCoinFamilySupport - assert that krsProvider explicitly supports coin
 * @return KrsProvider
 */
export declare function getKrsProvider(coin: BaseCoin, krsProviderName: string | undefined, { checkCoinFamilySupport }?: GetKrsProviderOptions): KrsProvider;
/**
 * Wrapper for {@see getKrsProvider} returning void
 */
export declare function checkKrsProvider(coin: BaseCoin, krsProviderName: string | undefined, options?: GetKrsProviderOptions): void;
export declare function getIsKrsRecovery({ backupKey, userKey }: {
    backupKey: string;
    userKey: string;
}): boolean;
export declare function getIsUnsignedSweep({ backupKey, userKey, isTss, }: {
    backupKey: string;
    userKey: string;
    isTss?: boolean;
}): boolean;
export declare function validateKey(bitgo: BitGoBase, { key, source, passphrase, isUnsignedSweep, isKrsRecovery }: ValidateKeyOptions): BIP32Interface;
export declare function getBip32Keys(bitgo: BitGoBase, params: InitiateRecoveryOptions | InitiateConsolidationRecoveryOptions, { requireBitGoXpub }: {
    requireBitGoXpub: boolean;
}): BIP32Interface[];
export {};
//# sourceMappingURL=initiate.d.ts.map