"use strict";
/**
 * @prettier
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBip32Keys = exports.validateKey = exports.getIsUnsignedSweep = exports.getIsKrsRecovery = exports.checkKrsProvider = exports.getKrsProvider = void 0;
const utxo_lib_1 = require("@bitgo/utxo-lib");
const config_1 = require("../config");
/**
 * @param coin
 * @param krsProviderName
 * @param checkCoinFamilySupport - assert that krsProvider explicitly supports coin
 * @return KrsProvider
 */
function getKrsProvider(coin, krsProviderName, { checkCoinFamilySupport = true } = {}) {
    if (!krsProviderName) {
        throw new Error(`no krsProvider name`);
    }
    const krsProvider = config_1.krsProviders[krsProviderName];
    if (krsProvider === undefined) {
        throw new Error('unknown key recovery service provider');
    }
    if (checkCoinFamilySupport && !krsProvider.supportedCoins.includes(coin.getFamily())) {
        throw new Error('specified key recovery service does not support recoveries for this coin');
    }
    return krsProvider;
}
exports.getKrsProvider = getKrsProvider;
/**
 * Wrapper for {@see getKrsProvider} returning void
 */
function checkKrsProvider(coin, krsProviderName, options = {}) {
    getKrsProvider(coin, krsProviderName, options);
}
exports.checkKrsProvider = checkKrsProvider;
function getIsKrsRecovery({ backupKey, userKey }) {
    return backupKey.startsWith('xpub') && !userKey.startsWith('xpub');
}
exports.getIsKrsRecovery = getIsKrsRecovery;
function getIsUnsignedSweep({ backupKey, userKey, isTss, }) {
    if (isTss) {
        try {
            return typeof JSON.parse(backupKey) === 'string' && typeof JSON.parse(userKey) === 'string';
        }
        catch (e) {
            return true;
        }
    }
    return backupKey.startsWith('xpub') && userKey.startsWith('xpub');
}
exports.getIsUnsignedSweep = getIsUnsignedSweep;
function validateKey(bitgo, { key, source, passphrase, isUnsignedSweep, isKrsRecovery }) {
    if (!key.startsWith('xprv') && !isUnsignedSweep) {
        // Try to decrypt the key
        try {
            if (source === 'user' || (source === 'backup' && !isKrsRecovery)) {
                return utxo_lib_1.bip32.fromBase58(bitgo.decrypt({ password: passphrase, input: key }));
            }
        }
        catch (e) {
            throw new Error(`Failed to decrypt ${source} key with passcode - try again!`);
        }
    }
    try {
        return utxo_lib_1.bip32.fromBase58(key);
    }
    catch (e) {
        throw new Error(`Failed to validate ${source} key - try again!`);
    }
}
exports.validateKey = validateKey;
function getBip32Keys(bitgo, params, { requireBitGoXpub }) {
    const isKrsRecovery = getIsKrsRecovery(params);
    const isUnsignedSweep = getIsUnsignedSweep(params);
    const keys = [
        // Box A
        validateKey(bitgo, {
            key: params.userKey,
            source: 'user',
            passphrase: params.walletPassphrase,
            isKrsRecovery,
            isUnsignedSweep,
        }),
        // Box B
        validateKey(bitgo, {
            key: params.backupKey,
            source: 'backup',
            passphrase: params.walletPassphrase,
            isKrsRecovery,
            isUnsignedSweep,
        }),
    ];
    if (requireBitGoXpub) {
        if (!params.bitgoKey) {
            throw new Error(`BitGo xpub required but not provided`);
        }
        try {
            // Box C
            keys.push(utxo_lib_1.bip32.fromBase58(params.bitgoKey));
        }
        catch (e) {
            throw new Error('Failed to parse bitgo xpub!');
        }
    }
    return keys;
}
exports.getBip32Keys = getBip32Keys;
//# sourceMappingURL=data:application/json;base64,