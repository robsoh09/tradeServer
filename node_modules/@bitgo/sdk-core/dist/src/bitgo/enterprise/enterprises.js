"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Enterprises = void 0;
/**
 * @prettier
 */
const _ = __importStar(require("lodash"));
const enterprise_1 = require("./enterprise");
class Enterprises {
    constructor(bitgo, baseCoin) {
        this.bitgo = bitgo;
        this.baseCoin = baseCoin;
    }
    /**
     * List all enterprises available to the current user
     * @param params unused
     */
    async list(params = {}) {
        const response = (await this.bitgo.get(this.bitgo.url('/enterprise')).result());
        return response.enterprises.map((e) => {
            // instantiate a new object for each enterprise
            return new enterprise_1.Enterprise(this.bitgo, this.baseCoin, e);
        });
    }
    /**
     * Fetch an enterprise from BitGo
     * @param params
     */
    async get(params = {}) {
        const enterpriseId = params.id;
        if (_.isUndefined(enterpriseId)) {
            throw new Error('id must not be empty');
        }
        if (!_.isString(enterpriseId)) {
            throw new Error('id must be hexadecimal enterprise ID');
        }
        const enterpriseData = (await this.bitgo.get(this.bitgo.url(`/enterprise/${enterpriseId}`)).result());
        return new enterprise_1.Enterprise(this.bitgo, this.baseCoin, enterpriseData);
    }
    /**
     * Create a new enterprise
     * @param params
     */
    // TODO: (CT-686) Flesh out params object with valid enterprise creation parameters
    async create(params = {}) {
        const enterpriseData = (await this.bitgo.post(this.bitgo.url(`/enterprise`)).send(params).result());
        return new enterprise_1.Enterprise(this.bitgo, this.baseCoin, enterpriseData);
    }
    /**
     * Resign TSS configs of all enterprises belonging to the user with a
     * new user password / ecdh keychain
     */
    async resignTssConfigsForEnterprises(oldEcdhKeypair, newEcdhKeypair) {
        const enterpriseTssConfigsForUser = await this.bitgo
            .get(this.bitgo.url('/tssconfigs/ecdsa', 2))
            .query({
            createdBy: 'me',
        })
            .send()
            .result();
        const resigningPromises = enterpriseTssConfigsForUser.map(async (enterpriseTssConfig) => {
            var _a, _b, _c;
            const enterprise = new enterprise_1.Enterprise(this.bitgo, this.bitgo.coin('tbtc'), {
                id: enterpriseTssConfig.enterpriseId,
                name: '',
            });
            const enterpriseChallenge = (_a = enterpriseTssConfig.ecdsa.challenge) === null || _a === void 0 ? void 0 : _a.enterprise;
            const bitgoNitroChallenge = (_b = enterpriseTssConfig.ecdsa.challenge) === null || _b === void 0 ? void 0 : _b.bitgoNitroHsm;
            const bitgoInstChallenge = (_c = enterpriseTssConfig.ecdsa.challenge) === null || _c === void 0 ? void 0 : _c.bitgoInstitutionalHsm;
            await enterprise.resignEnterpriseChallenges(oldEcdhKeypair, newEcdhKeypair, enterpriseChallenge, bitgoInstChallenge, bitgoNitroChallenge);
        });
        await Promise.all(resigningPromises);
    }
}
exports.Enterprises = Enterprises;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50ZXJwcmlzZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYml0Z28vZW50ZXJwcmlzZS9lbnRlcnByaXNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztHQUVHO0FBQ0gsMENBQTRCO0FBRzVCLDZDQUEwQztBQUsxQyxNQUFhLFdBQVc7SUFJdEIsWUFBWSxLQUFnQixFQUFFLFFBQW1CO1FBQy9DLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFFRDs7O09BR0c7SUFDSSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQWdDLEVBQUU7UUFDbEQsTUFBTSxRQUFRLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQVEsQ0FBQztRQUN2RixPQUFPLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDcEMsK0NBQStDO1lBQy9DLE9BQU8sSUFBSSx1QkFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN0RCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7O09BR0c7SUFDSSxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQStCLEVBQUU7UUFDaEQsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUMvQixJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1NBQ3pDO1FBQ0QsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO1NBQ3pEO1FBRUQsTUFBTSxjQUFjLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGVBQWUsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFRLENBQUM7UUFDN0csT0FBTyxJQUFJLHVCQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRDs7O09BR0c7SUFDSCxtRkFBbUY7SUFDNUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFjLEVBQUU7UUFDbEMsTUFBTSxjQUFjLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFRLENBQUM7UUFDM0csT0FBTyxJQUFJLHVCQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRDs7O09BR0c7SUFDSSxLQUFLLENBQUMsOEJBQThCLENBQ3pDLGNBQWtDLEVBQ2xDLGNBQWtDO1FBRWxDLE1BQU0sMkJBQTJCLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FBSzthQUNqRCxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDM0MsS0FBSyxDQUFDO1lBQ0wsU0FBUyxFQUFFLElBQUk7U0FDaEIsQ0FBQzthQUNELElBQUksRUFBRTthQUNOLE1BQU0sRUFBRSxDQUFDO1FBRVosTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLG1CQUFtQixFQUFFLEVBQUU7O1lBQ3RGLE1BQU0sVUFBVSxHQUFHLElBQUksdUJBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUNyRSxFQUFFLEVBQUUsbUJBQW1CLENBQUMsWUFBWTtnQkFDcEMsSUFBSSxFQUFFLEVBQUU7YUFDVCxDQUFDLENBQUM7WUFDSCxNQUFNLG1CQUFtQixHQUFHLE1BQUEsbUJBQW1CLENBQUMsS0FBSyxDQUFDLFNBQVMsMENBQUUsVUFBMkMsQ0FBQztZQUM3RyxNQUFNLG1CQUFtQixHQUFHLE1BQUEsbUJBQW1CLENBQUMsS0FBSyxDQUFDLFNBQVMsMENBQUUsYUFBOEMsQ0FBQztZQUNoSCxNQUFNLGtCQUFrQixHQUFHLE1BQUEsbUJBQW1CLENBQUMsS0FBSyxDQUFDLFNBQVMsMENBQzFELHFCQUFzRCxDQUFDO1lBQzNELE1BQU0sVUFBVSxDQUFDLDBCQUEwQixDQUN6QyxjQUFjLEVBQ2QsY0FBYyxFQUNkLG1CQUFtQixFQUNuQixrQkFBa0IsRUFDbEIsbUJBQW1CLENBQ3BCLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Q0FDRjtBQXBGRCxrQ0FvRkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwcmV0dGllclxuICovXG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBJQmFzZUNvaW4gfSBmcm9tICcuLi9iYXNlQ29pbic7XG5pbXBvcnQgeyBCaXRHb0Jhc2UgfSBmcm9tICcuLi9iaXRnb0Jhc2UnO1xuaW1wb3J0IHsgRW50ZXJwcmlzZSB9IGZyb20gJy4vZW50ZXJwcmlzZSc7XG5pbXBvcnQgeyBHZXRFbnRlcnByaXNlT3B0aW9ucywgSUVudGVycHJpc2VzIH0gZnJvbSAnLi9pRW50ZXJwcmlzZXMnO1xuaW1wb3J0IHsgRWNkaERlcml2ZWRLZXlwYWlyIH0gZnJvbSAnLi4va2V5Y2hhaW4nO1xuaW1wb3J0IHsgU2VyaWFsaXplZE50aWxkZVdpdGhWZXJpZmllcnMgfSBmcm9tICcuLi91dGlscy90c3MvZWNkc2EnO1xuXG5leHBvcnQgY2xhc3MgRW50ZXJwcmlzZXMgaW1wbGVtZW50cyBJRW50ZXJwcmlzZXMge1xuICBwcml2YXRlIHJlYWRvbmx5IGJpdGdvOiBCaXRHb0Jhc2U7XG4gIHByaXZhdGUgcmVhZG9ubHkgYmFzZUNvaW46IElCYXNlQ29pbjtcblxuICBjb25zdHJ1Y3RvcihiaXRnbzogQml0R29CYXNlLCBiYXNlQ29pbjogSUJhc2VDb2luKSB7XG4gICAgdGhpcy5iaXRnbyA9IGJpdGdvO1xuICAgIHRoaXMuYmFzZUNvaW4gPSBiYXNlQ29pbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0IGFsbCBlbnRlcnByaXNlcyBhdmFpbGFibGUgdG8gdGhlIGN1cnJlbnQgdXNlclxuICAgKiBAcGFyYW0gcGFyYW1zIHVudXNlZFxuICAgKi9cbiAgcHVibGljIGFzeW5jIGxpc3QocGFyYW1zOiBSZWNvcmQ8c3RyaW5nLCBuZXZlcj4gPSB7fSk6IFByb21pc2U8RW50ZXJwcmlzZVtdPiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSAoYXdhaXQgdGhpcy5iaXRnby5nZXQodGhpcy5iaXRnby51cmwoJy9lbnRlcnByaXNlJykpLnJlc3VsdCgpKSBhcyBhbnk7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmVudGVycHJpc2VzLm1hcCgoZSkgPT4ge1xuICAgICAgLy8gaW5zdGFudGlhdGUgYSBuZXcgb2JqZWN0IGZvciBlYWNoIGVudGVycHJpc2VcbiAgICAgIHJldHVybiBuZXcgRW50ZXJwcmlzZSh0aGlzLmJpdGdvLCB0aGlzLmJhc2VDb2luLCBlKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCBhbiBlbnRlcnByaXNlIGZyb20gQml0R29cbiAgICogQHBhcmFtIHBhcmFtc1xuICAgKi9cbiAgcHVibGljIGFzeW5jIGdldChwYXJhbXM6IEdldEVudGVycHJpc2VPcHRpb25zID0ge30pOiBQcm9taXNlPEVudGVycHJpc2U+IHtcbiAgICBjb25zdCBlbnRlcnByaXNlSWQgPSBwYXJhbXMuaWQ7XG4gICAgaWYgKF8uaXNVbmRlZmluZWQoZW50ZXJwcmlzZUlkKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpZCBtdXN0IG5vdCBiZSBlbXB0eScpO1xuICAgIH1cbiAgICBpZiAoIV8uaXNTdHJpbmcoZW50ZXJwcmlzZUlkKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpZCBtdXN0IGJlIGhleGFkZWNpbWFsIGVudGVycHJpc2UgSUQnKTtcbiAgICB9XG5cbiAgICBjb25zdCBlbnRlcnByaXNlRGF0YSA9IChhd2FpdCB0aGlzLmJpdGdvLmdldCh0aGlzLmJpdGdvLnVybChgL2VudGVycHJpc2UvJHtlbnRlcnByaXNlSWR9YCkpLnJlc3VsdCgpKSBhcyBhbnk7XG4gICAgcmV0dXJuIG5ldyBFbnRlcnByaXNlKHRoaXMuYml0Z28sIHRoaXMuYmFzZUNvaW4sIGVudGVycHJpc2VEYXRhKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgZW50ZXJwcmlzZVxuICAgKiBAcGFyYW0gcGFyYW1zXG4gICAqL1xuICAvLyBUT0RPOiAoQ1QtNjg2KSBGbGVzaCBvdXQgcGFyYW1zIG9iamVjdCB3aXRoIHZhbGlkIGVudGVycHJpc2UgY3JlYXRpb24gcGFyYW1ldGVyc1xuICBwdWJsaWMgYXN5bmMgY3JlYXRlKHBhcmFtczogYW55ID0ge30pOiBQcm9taXNlPEVudGVycHJpc2U+IHtcbiAgICBjb25zdCBlbnRlcnByaXNlRGF0YSA9IChhd2FpdCB0aGlzLmJpdGdvLnBvc3QodGhpcy5iaXRnby51cmwoYC9lbnRlcnByaXNlYCkpLnNlbmQocGFyYW1zKS5yZXN1bHQoKSkgYXMgYW55O1xuICAgIHJldHVybiBuZXcgRW50ZXJwcmlzZSh0aGlzLmJpdGdvLCB0aGlzLmJhc2VDb2luLCBlbnRlcnByaXNlRGF0YSk7XG4gIH1cblxuICAvKipcbiAgICogUmVzaWduIFRTUyBjb25maWdzIG9mIGFsbCBlbnRlcnByaXNlcyBiZWxvbmdpbmcgdG8gdGhlIHVzZXIgd2l0aCBhXG4gICAqIG5ldyB1c2VyIHBhc3N3b3JkIC8gZWNkaCBrZXljaGFpblxuICAgKi9cbiAgcHVibGljIGFzeW5jIHJlc2lnblRzc0NvbmZpZ3NGb3JFbnRlcnByaXNlcyhcbiAgICBvbGRFY2RoS2V5cGFpcjogRWNkaERlcml2ZWRLZXlwYWlyLFxuICAgIG5ld0VjZGhLZXlwYWlyOiBFY2RoRGVyaXZlZEtleXBhaXJcbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgZW50ZXJwcmlzZVRzc0NvbmZpZ3NGb3JVc2VyID0gYXdhaXQgdGhpcy5iaXRnb1xuICAgICAgLmdldCh0aGlzLmJpdGdvLnVybCgnL3Rzc2NvbmZpZ3MvZWNkc2EnLCAyKSlcbiAgICAgIC5xdWVyeSh7XG4gICAgICAgIGNyZWF0ZWRCeTogJ21lJyxcbiAgICAgIH0pXG4gICAgICAuc2VuZCgpXG4gICAgICAucmVzdWx0KCk7XG5cbiAgICBjb25zdCByZXNpZ25pbmdQcm9taXNlcyA9IGVudGVycHJpc2VUc3NDb25maWdzRm9yVXNlci5tYXAoYXN5bmMgKGVudGVycHJpc2VUc3NDb25maWcpID0+IHtcbiAgICAgIGNvbnN0IGVudGVycHJpc2UgPSBuZXcgRW50ZXJwcmlzZSh0aGlzLmJpdGdvLCB0aGlzLmJpdGdvLmNvaW4oJ3RidGMnKSwge1xuICAgICAgICBpZDogZW50ZXJwcmlzZVRzc0NvbmZpZy5lbnRlcnByaXNlSWQsXG4gICAgICAgIG5hbWU6ICcnLFxuICAgICAgfSk7XG4gICAgICBjb25zdCBlbnRlcnByaXNlQ2hhbGxlbmdlID0gZW50ZXJwcmlzZVRzc0NvbmZpZy5lY2RzYS5jaGFsbGVuZ2U/LmVudGVycHJpc2UgYXMgU2VyaWFsaXplZE50aWxkZVdpdGhWZXJpZmllcnM7XG4gICAgICBjb25zdCBiaXRnb05pdHJvQ2hhbGxlbmdlID0gZW50ZXJwcmlzZVRzc0NvbmZpZy5lY2RzYS5jaGFsbGVuZ2U/LmJpdGdvTml0cm9Ic20gYXMgU2VyaWFsaXplZE50aWxkZVdpdGhWZXJpZmllcnM7XG4gICAgICBjb25zdCBiaXRnb0luc3RDaGFsbGVuZ2UgPSBlbnRlcnByaXNlVHNzQ29uZmlnLmVjZHNhLmNoYWxsZW5nZVxuICAgICAgICA/LmJpdGdvSW5zdGl0dXRpb25hbEhzbSBhcyBTZXJpYWxpemVkTnRpbGRlV2l0aFZlcmlmaWVycztcbiAgICAgIGF3YWl0IGVudGVycHJpc2UucmVzaWduRW50ZXJwcmlzZUNoYWxsZW5nZXMoXG4gICAgICAgIG9sZEVjZGhLZXlwYWlyLFxuICAgICAgICBuZXdFY2RoS2V5cGFpcixcbiAgICAgICAgZW50ZXJwcmlzZUNoYWxsZW5nZSxcbiAgICAgICAgYml0Z29JbnN0Q2hhbGxlbmdlLFxuICAgICAgICBiaXRnb05pdHJvQ2hhbGxlbmdlXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgYXdhaXQgUHJvbWlzZS5hbGwocmVzaWduaW5nUHJvbWlzZXMpO1xuICB9XG59XG4iXX0=