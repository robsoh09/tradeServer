import { IBaseCoin } from '../baseCoin';
import { BitGoBase } from '../bitgoBase';
import { Enterprise } from './enterprise';
import { GetEnterpriseOptions, IEnterprises } from './iEnterprises';
import { EcdhDerivedKeypair } from '../keychain';
export declare class Enterprises implements IEnterprises {
    private readonly bitgo;
    private readonly baseCoin;
    constructor(bitgo: BitGoBase, baseCoin: IBaseCoin);
    /**
     * List all enterprises available to the current user
     * @param params unused
     */
    list(params?: Record<string, never>): Promise<Enterprise[]>;
    /**
     * Fetch an enterprise from BitGo
     * @param params
     */
    get(params?: GetEnterpriseOptions): Promise<Enterprise>;
    /**
     * Create a new enterprise
     * @param params
     */
    create(params?: any): Promise<Enterprise>;
    /**
     * Resign TSS configs of all enterprises belonging to the user with a
     * new user password / ecdh keychain
     */
    resignTssConfigsForEnterprises(oldEcdhKeypair: EcdhDerivedKeypair, newEcdhKeypair: EcdhDerivedKeypair): Promise<void>;
}
//# sourceMappingURL=enterprises.d.ts.map