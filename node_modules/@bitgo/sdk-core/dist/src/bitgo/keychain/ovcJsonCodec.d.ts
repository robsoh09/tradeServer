import * as t from 'io-ts';
export declare const OvcShare: t.IntersectionC<[t.TypeC<{
    publicShare: t.StringC;
    privateShare: t.StringC;
    vssProof: t.StringC;
    i: t.NumberC;
    j: t.NumberC;
}>, t.PartialC<{
    paillierPublicKey: t.StringC;
}>]>;
export declare const OvcToOtherShare: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
    publicShare: t.StringC;
    privateShare: t.StringC;
    vssProof: t.StringC;
    i: t.NumberC;
    j: t.NumberC;
}>, t.PartialC<{
    paillierPublicKey: t.StringC;
}>]>, t.TypeC<{
    uSig: t.StringC;
}>]>;
export declare const OvcToBitGoJSON: t.ExactC<t.TypeC<{
    tssVersion: t.StringC;
    walletType: t.StringC;
    coin: t.StringC;
    state: t.NumberC;
    ovc: t.TypeC<{
        1: t.TypeC<{
            gpgPubKey: t.StringC;
            ovcToBitgoShare: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
                publicShare: t.StringC;
                privateShare: t.StringC;
                vssProof: t.StringC;
                i: t.NumberC;
                j: t.NumberC;
            }>, t.PartialC<{
                paillierPublicKey: t.StringC;
            }>]>, t.TypeC<{
                uSig: t.StringC;
            }>]>;
        }>;
        2: t.TypeC<{
            gpgPubKey: t.StringC;
            ovcToBitgoShare: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
                publicShare: t.StringC;
                privateShare: t.StringC;
                vssProof: t.StringC;
                i: t.NumberC;
                j: t.NumberC;
            }>, t.PartialC<{
                paillierPublicKey: t.StringC;
            }>]>, t.TypeC<{
                uSig: t.StringC;
            }>]>;
            ovcToOvcShare: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
                publicShare: t.StringC;
                privateShare: t.StringC;
                vssProof: t.StringC;
                i: t.NumberC;
                j: t.NumberC;
            }>, t.PartialC<{
                paillierPublicKey: t.StringC;
            }>]>, t.TypeC<{
                uSig: t.StringC;
            }>]>;
        }>;
    }>;
}>>;
export declare type OvcToBitGoJSON = t.TypeOf<typeof OvcToBitGoJSON>;
export declare const BitGoToOvcJSON: t.ExactC<t.TypeC<{
    wallet: t.IntersectionC<[t.ExactC<t.TypeC<{
        tssVersion: t.StringC;
        walletType: t.StringC;
        coin: t.StringC;
        state: t.NumberC;
        ovc: t.TypeC<{
            1: t.TypeC<{
                gpgPubKey: t.StringC;
                ovcToBitgoShare: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
                    publicShare: t.StringC;
                    privateShare: t.StringC;
                    vssProof: t.StringC;
                    i: t.NumberC;
                    j: t.NumberC;
                }>, t.PartialC<{
                    paillierPublicKey: t.StringC;
                }>]>, t.TypeC<{
                    uSig: t.StringC;
                }>]>;
            }>;
            2: t.TypeC<{
                gpgPubKey: t.StringC;
                ovcToBitgoShare: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
                    publicShare: t.StringC;
                    privateShare: t.StringC;
                    vssProof: t.StringC;
                    i: t.NumberC;
                    j: t.NumberC;
                }>, t.PartialC<{
                    paillierPublicKey: t.StringC;
                }>]>, t.TypeC<{
                    uSig: t.StringC;
                }>]>;
                ovcToOvcShare: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
                    publicShare: t.StringC;
                    privateShare: t.StringC;
                    vssProof: t.StringC;
                    i: t.NumberC;
                    j: t.NumberC;
                }>, t.PartialC<{
                    paillierPublicKey: t.StringC;
                }>]>, t.TypeC<{
                    uSig: t.StringC;
                }>]>;
            }>;
        }>;
    }>>, t.TypeC<{
        platform: t.TypeC<{
            commonKeychain: t.StringC;
            walletGpgPubKeySigs: t.StringC;
            ovc: t.TypeC<{
                1: t.TypeC<{
                    bitgoToOvcShare: t.IntersectionC<[t.TypeC<{
                        publicShare: t.StringC;
                        privateShare: t.StringC;
                        vssProof: t.StringC;
                        i: t.NumberC;
                        j: t.NumberC;
                    }>, t.PartialC<{
                        paillierPublicKey: t.StringC;
                    }>]>;
                }>;
                2: t.TypeC<{
                    bitgoToOvcShare: t.IntersectionC<[t.TypeC<{
                        publicShare: t.StringC;
                        privateShare: t.StringC;
                        vssProof: t.StringC;
                        i: t.NumberC;
                        j: t.NumberC;
                    }>, t.PartialC<{
                        paillierPublicKey: t.StringC;
                    }>]>;
                }>;
            }>;
        }>;
    }>]>;
}>>;
export declare type BitGoToOvcJSON = t.TypeOf<typeof BitGoToOvcJSON>;
export declare const BitGoKeyFromOvcShares: t.ExactC<t.TypeC<{
    bitGoOutputJsonForOvc: t.ExactC<t.TypeC<{
        wallet: t.IntersectionC<[t.ExactC<t.TypeC<{
            tssVersion: t.StringC;
            walletType: t.StringC;
            coin: t.StringC;
            state: t.NumberC;
            ovc: t.TypeC<{
                1: t.TypeC<{
                    gpgPubKey: t.StringC;
                    ovcToBitgoShare: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
                        publicShare: t.StringC;
                        privateShare: t.StringC;
                        vssProof: t.StringC;
                        i: t.NumberC;
                        j: t.NumberC;
                    }>, t.PartialC<{
                        paillierPublicKey: t.StringC;
                    }>]>, t.TypeC<{
                        uSig: t.StringC;
                    }>]>;
                }>;
                2: t.TypeC<{
                    gpgPubKey: t.StringC;
                    ovcToBitgoShare: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
                        publicShare: t.StringC;
                        privateShare: t.StringC;
                        vssProof: t.StringC;
                        i: t.NumberC;
                        j: t.NumberC;
                    }>, t.PartialC<{
                        paillierPublicKey: t.StringC;
                    }>]>, t.TypeC<{
                        uSig: t.StringC;
                    }>]>;
                    ovcToOvcShare: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
                        publicShare: t.StringC;
                        privateShare: t.StringC;
                        vssProof: t.StringC;
                        i: t.NumberC;
                        j: t.NumberC;
                    }>, t.PartialC<{
                        paillierPublicKey: t.StringC;
                    }>]>, t.TypeC<{
                        uSig: t.StringC;
                    }>]>;
                }>;
            }>;
        }>>, t.TypeC<{
            platform: t.TypeC<{
                commonKeychain: t.StringC;
                walletGpgPubKeySigs: t.StringC;
                ovc: t.TypeC<{
                    1: t.TypeC<{
                        bitgoToOvcShare: t.IntersectionC<[t.TypeC<{
                            publicShare: t.StringC;
                            privateShare: t.StringC;
                            vssProof: t.StringC;
                            i: t.NumberC;
                            j: t.NumberC;
                        }>, t.PartialC<{
                            paillierPublicKey: t.StringC;
                        }>]>;
                    }>;
                    2: t.TypeC<{
                        bitgoToOvcShare: t.IntersectionC<[t.TypeC<{
                            publicShare: t.StringC;
                            privateShare: t.StringC;
                            vssProof: t.StringC;
                            i: t.NumberC;
                            j: t.NumberC;
                        }>, t.PartialC<{
                            paillierPublicKey: t.StringC;
                        }>]>;
                    }>;
                }>;
            }>;
        }>]>;
    }>>;
    bitGoKeyId: t.StringC;
}>>;
export declare type BitGoKeyFromOvcShares = t.TypeOf<typeof BitGoKeyFromOvcShares>;
//# sourceMappingURL=ovcJsonCodec.d.ts.map