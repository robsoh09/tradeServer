"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitGoKeyFromOvcShares = exports.BitGoToOvcJSON = exports.OvcToBitGoJSON = exports.OvcToOtherShare = exports.OvcShare = void 0;
/* eslint-disable no-redeclare */
const t = __importStar(require("io-ts"));
exports.OvcShare = t.intersection([
    t.type({
        publicShare: t.string,
        privateShare: t.string,
        vssProof: t.string,
        i: t.number,
        j: t.number,
    }),
    t.partial({
        paillierPublicKey: t.string,
    }),
], 'OvcShare');
exports.OvcToOtherShare = t.intersection([
    exports.OvcShare,
    t.type({
        uSig: t.string,
    }),
], 'OvcToOtherShare');
exports.OvcToBitGoJSON = t.strict({
    tssVersion: t.string,
    walletType: t.string,
    coin: t.string,
    state: t.number,
    ovc: t.type({
        1: t.type({
            gpgPubKey: t.string,
            ovcToBitgoShare: exports.OvcToOtherShare,
        }),
        2: t.type({
            gpgPubKey: t.string,
            ovcToBitgoShare: exports.OvcToOtherShare,
            ovcToOvcShare: exports.OvcToOtherShare,
        }),
    }),
}, 'OvcToBitGoJSON');
exports.BitGoToOvcJSON = t.strict({
    wallet: t.intersection([
        exports.OvcToBitGoJSON,
        t.type({
            platform: t.type({
                commonKeychain: t.string,
                walletGpgPubKeySigs: t.string,
                ovc: t.type({
                    // BitGo to User (OVC-1)
                    1: t.type({
                        bitgoToOvcShare: exports.OvcShare,
                    }),
                    // BitGo to Backup (OVC-2)
                    2: t.type({
                        bitgoToOvcShare: exports.OvcShare,
                    }),
                }),
            }),
        }),
    ]),
}, 'BitgoToOvcJson');
exports.BitGoKeyFromOvcShares = t.strict({
    bitGoOutputJsonForOvc: exports.BitGoToOvcJSON,
    bitGoKeyId: t.string,
}, 'BitGoKeyFromOvcShares');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZjSnNvbkNvZGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2JpdGdvL2tleWNoYWluL292Y0pzb25Db2RlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGlDQUFpQztBQUNqQyx5Q0FBMkI7QUFFZCxRQUFBLFFBQVEsR0FBRyxDQUFDLENBQUMsWUFBWSxDQUNwQztJQUNFLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDTCxXQUFXLEVBQUUsQ0FBQyxDQUFDLE1BQU07UUFDckIsWUFBWSxFQUFFLENBQUMsQ0FBQyxNQUFNO1FBQ3RCLFFBQVEsRUFBRSxDQUFDLENBQUMsTUFBTTtRQUNsQixDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU07UUFDWCxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU07S0FDWixDQUFDO0lBQ0YsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUNSLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxNQUFNO0tBQzVCLENBQUM7Q0FDSCxFQUNELFVBQVUsQ0FDWCxDQUFDO0FBRVcsUUFBQSxlQUFlLEdBQUcsQ0FBQyxDQUFDLFlBQVksQ0FDM0M7SUFDRSxnQkFBUTtJQUNSLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDTCxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU07S0FDZixDQUFDO0NBQ0gsRUFDRCxpQkFBaUIsQ0FDbEIsQ0FBQztBQUVXLFFBQUEsY0FBYyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQ3BDO0lBQ0UsVUFBVSxFQUFFLENBQUMsQ0FBQyxNQUFNO0lBQ3BCLFVBQVUsRUFBRSxDQUFDLENBQUMsTUFBTTtJQUNwQixJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU07SUFDZCxLQUFLLEVBQUUsQ0FBQyxDQUFDLE1BQU07SUFDZixHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNWLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ1IsU0FBUyxFQUFFLENBQUMsQ0FBQyxNQUFNO1lBQ25CLGVBQWUsRUFBRSx1QkFBZTtTQUNqQyxDQUFDO1FBQ0YsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDUixTQUFTLEVBQUUsQ0FBQyxDQUFDLE1BQU07WUFDbkIsZUFBZSxFQUFFLHVCQUFlO1lBQ2hDLGFBQWEsRUFBRSx1QkFBZTtTQUMvQixDQUFDO0tBQ0gsQ0FBQztDQUNILEVBQ0QsZ0JBQWdCLENBQ2pCLENBQUM7QUFJVyxRQUFBLGNBQWMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUNwQztJQUNFLE1BQU0sRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDO1FBQ3JCLHNCQUFjO1FBQ2QsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNMLFFBQVEsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNmLGNBQWMsRUFBRSxDQUFDLENBQUMsTUFBTTtnQkFDeEIsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDLE1BQU07Z0JBQzdCLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDO29CQUNWLHdCQUF3QjtvQkFDeEIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUM7d0JBQ1IsZUFBZSxFQUFFLGdCQUFRO3FCQUMxQixDQUFDO29CQUNGLDBCQUEwQjtvQkFDMUIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUM7d0JBQ1IsZUFBZSxFQUFFLGdCQUFRO3FCQUMxQixDQUFDO2lCQUNILENBQUM7YUFDSCxDQUFDO1NBQ0gsQ0FBQztLQUNILENBQUM7Q0FDSCxFQUNELGdCQUFnQixDQUNqQixDQUFDO0FBSVcsUUFBQSxxQkFBcUIsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUMzQztJQUNFLHFCQUFxQixFQUFFLHNCQUFjO0lBQ3JDLFVBQVUsRUFBRSxDQUFDLENBQUMsTUFBTTtDQUNyQixFQUNELHVCQUF1QixDQUN4QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tcmVkZWNsYXJlICovXG5pbXBvcnQgKiBhcyB0IGZyb20gJ2lvLXRzJztcblxuZXhwb3J0IGNvbnN0IE92Y1NoYXJlID0gdC5pbnRlcnNlY3Rpb24oXG4gIFtcbiAgICB0LnR5cGUoe1xuICAgICAgcHVibGljU2hhcmU6IHQuc3RyaW5nLFxuICAgICAgcHJpdmF0ZVNoYXJlOiB0LnN0cmluZyxcbiAgICAgIHZzc1Byb29mOiB0LnN0cmluZyxcbiAgICAgIGk6IHQubnVtYmVyLFxuICAgICAgajogdC5udW1iZXIsXG4gICAgfSksXG4gICAgdC5wYXJ0aWFsKHtcbiAgICAgIHBhaWxsaWVyUHVibGljS2V5OiB0LnN0cmluZyxcbiAgICB9KSxcbiAgXSxcbiAgJ092Y1NoYXJlJ1xuKTtcblxuZXhwb3J0IGNvbnN0IE92Y1RvT3RoZXJTaGFyZSA9IHQuaW50ZXJzZWN0aW9uKFxuICBbXG4gICAgT3ZjU2hhcmUsXG4gICAgdC50eXBlKHtcbiAgICAgIHVTaWc6IHQuc3RyaW5nLFxuICAgIH0pLFxuICBdLFxuICAnT3ZjVG9PdGhlclNoYXJlJ1xuKTtcblxuZXhwb3J0IGNvbnN0IE92Y1RvQml0R29KU09OID0gdC5zdHJpY3QoXG4gIHtcbiAgICB0c3NWZXJzaW9uOiB0LnN0cmluZyxcbiAgICB3YWxsZXRUeXBlOiB0LnN0cmluZyxcbiAgICBjb2luOiB0LnN0cmluZyxcbiAgICBzdGF0ZTogdC5udW1iZXIsXG4gICAgb3ZjOiB0LnR5cGUoe1xuICAgICAgMTogdC50eXBlKHtcbiAgICAgICAgZ3BnUHViS2V5OiB0LnN0cmluZyxcbiAgICAgICAgb3ZjVG9CaXRnb1NoYXJlOiBPdmNUb090aGVyU2hhcmUsXG4gICAgICB9KSxcbiAgICAgIDI6IHQudHlwZSh7XG4gICAgICAgIGdwZ1B1YktleTogdC5zdHJpbmcsXG4gICAgICAgIG92Y1RvQml0Z29TaGFyZTogT3ZjVG9PdGhlclNoYXJlLFxuICAgICAgICBvdmNUb092Y1NoYXJlOiBPdmNUb090aGVyU2hhcmUsXG4gICAgICB9KSxcbiAgICB9KSxcbiAgfSxcbiAgJ092Y1RvQml0R29KU09OJ1xuKTtcblxuZXhwb3J0IHR5cGUgT3ZjVG9CaXRHb0pTT04gPSB0LlR5cGVPZjx0eXBlb2YgT3ZjVG9CaXRHb0pTT04+O1xuXG5leHBvcnQgY29uc3QgQml0R29Ub092Y0pTT04gPSB0LnN0cmljdChcbiAge1xuICAgIHdhbGxldDogdC5pbnRlcnNlY3Rpb24oW1xuICAgICAgT3ZjVG9CaXRHb0pTT04sXG4gICAgICB0LnR5cGUoe1xuICAgICAgICBwbGF0Zm9ybTogdC50eXBlKHtcbiAgICAgICAgICBjb21tb25LZXljaGFpbjogdC5zdHJpbmcsXG4gICAgICAgICAgd2FsbGV0R3BnUHViS2V5U2lnczogdC5zdHJpbmcsXG4gICAgICAgICAgb3ZjOiB0LnR5cGUoe1xuICAgICAgICAgICAgLy8gQml0R28gdG8gVXNlciAoT1ZDLTEpXG4gICAgICAgICAgICAxOiB0LnR5cGUoe1xuICAgICAgICAgICAgICBiaXRnb1RvT3ZjU2hhcmU6IE92Y1NoYXJlLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAvLyBCaXRHbyB0byBCYWNrdXAgKE9WQy0yKVxuICAgICAgICAgICAgMjogdC50eXBlKHtcbiAgICAgICAgICAgICAgYml0Z29Ub092Y1NoYXJlOiBPdmNTaGFyZSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pLFxuICAgICAgICB9KSxcbiAgICAgIH0pLFxuICAgIF0pLFxuICB9LFxuICAnQml0Z29Ub092Y0pzb24nXG4pO1xuXG5leHBvcnQgdHlwZSBCaXRHb1RvT3ZjSlNPTiA9IHQuVHlwZU9mPHR5cGVvZiBCaXRHb1RvT3ZjSlNPTj47XG5cbmV4cG9ydCBjb25zdCBCaXRHb0tleUZyb21PdmNTaGFyZXMgPSB0LnN0cmljdChcbiAge1xuICAgIGJpdEdvT3V0cHV0SnNvbkZvck92YzogQml0R29Ub092Y0pTT04sXG4gICAgYml0R29LZXlJZDogdC5zdHJpbmcsXG4gIH0sXG4gICdCaXRHb0tleUZyb21PdmNTaGFyZXMnXG4pO1xuXG5leHBvcnQgdHlwZSBCaXRHb0tleUZyb21PdmNTaGFyZXMgPSB0LlR5cGVPZjx0eXBlb2YgQml0R29LZXlGcm9tT3ZjU2hhcmVzPjtcbiJdfQ==