"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decryptKeychainPrivateKey = void 0;
const utils_1 = require("../utils");
function maybeDecrypt(bitgo, input, password) {
    try {
        return bitgo.decrypt({
            input,
            password,
        });
    }
    catch (_e) {
        return undefined;
    }
}
/**
 * Decrypts the private key of a keychain.
 * This method will try the password against the traditional encryptedPrv,
 * and any webauthn device encryptedPrvs.
 *
 * @param bitgo
 * @param keychain
 * @param password
 */
function decryptKeychainPrivateKey(bitgo, keychain, password) {
    var _a;
    const prvs = [keychain.encryptedPrv, ...((_a = keychain.webauthnDevices) !== null && _a !== void 0 ? _a : []).map((d) => d.encryptedPrv)].filter(utils_1.notEmpty);
    for (const prv of prvs) {
        const decrypted = maybeDecrypt(bitgo, prv, password);
        if (decrypted) {
            return decrypted;
        }
    }
    return undefined;
}
exports.decryptKeychainPrivateKey = decryptKeychainPrivateKey;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjcnlwdEtleWNoYWluLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2JpdGdvL2tleWNoYWluL2RlY3J5cHRLZXljaGFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSxvQ0FBb0M7QUFFcEMsU0FBUyxZQUFZLENBQUMsS0FBZ0IsRUFBRSxLQUFhLEVBQUUsUUFBZ0I7SUFDckUsSUFBSTtRQUNGLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQztZQUNuQixLQUFLO1lBQ0wsUUFBUTtTQUNULENBQUMsQ0FBQztLQUNKO0lBQUMsT0FBTyxFQUFFLEVBQUU7UUFDWCxPQUFPLFNBQVMsQ0FBQztLQUNsQjtBQUNILENBQUM7QUFFRDs7Ozs7Ozs7R0FRRztBQUNILFNBQWdCLHlCQUF5QixDQUN2QyxLQUFnQixFQUNoQixRQUFzQyxFQUN0QyxRQUFnQjs7SUFFaEIsTUFBTSxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLEdBQUcsQ0FBQyxNQUFBLFFBQVEsQ0FBQyxlQUFlLG1DQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLGdCQUFRLENBQUMsQ0FBQztJQUN0SCxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtRQUN0QixNQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNyRCxJQUFJLFNBQVMsRUFBRTtZQUNiLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO0tBQ0Y7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDO0FBYkQsOERBYUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCaXRHb0Jhc2UgfSBmcm9tICcuLi9iaXRnb0Jhc2UnO1xuaW1wb3J0IHsgT3B0aW9uYWxLZXljaGFpbkVuY3J5cHRlZEtleSB9IGZyb20gJy4vaUtleWNoYWlucyc7XG5pbXBvcnQgeyBub3RFbXB0eSB9IGZyb20gJy4uL3V0aWxzJztcblxuZnVuY3Rpb24gbWF5YmVEZWNyeXB0KGJpdGdvOiBCaXRHb0Jhc2UsIGlucHV0OiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICB0cnkge1xuICAgIHJldHVybiBiaXRnby5kZWNyeXB0KHtcbiAgICAgIGlucHV0LFxuICAgICAgcGFzc3dvcmQsXG4gICAgfSk7XG4gIH0gY2F0Y2ggKF9lKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIERlY3J5cHRzIHRoZSBwcml2YXRlIGtleSBvZiBhIGtleWNoYWluLlxuICogVGhpcyBtZXRob2Qgd2lsbCB0cnkgdGhlIHBhc3N3b3JkIGFnYWluc3QgdGhlIHRyYWRpdGlvbmFsIGVuY3J5cHRlZFBydixcbiAqIGFuZCBhbnkgd2ViYXV0aG4gZGV2aWNlIGVuY3J5cHRlZFBydnMuXG4gKlxuICogQHBhcmFtIGJpdGdvXG4gKiBAcGFyYW0ga2V5Y2hhaW5cbiAqIEBwYXJhbSBwYXNzd29yZFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjcnlwdEtleWNoYWluUHJpdmF0ZUtleShcbiAgYml0Z286IEJpdEdvQmFzZSxcbiAga2V5Y2hhaW46IE9wdGlvbmFsS2V5Y2hhaW5FbmNyeXB0ZWRLZXksXG4gIHBhc3N3b3JkOiBzdHJpbmdcbik6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gIGNvbnN0IHBydnMgPSBba2V5Y2hhaW4uZW5jcnlwdGVkUHJ2LCAuLi4oa2V5Y2hhaW4ud2ViYXV0aG5EZXZpY2VzID8/IFtdKS5tYXAoKGQpID0+IGQuZW5jcnlwdGVkUHJ2KV0uZmlsdGVyKG5vdEVtcHR5KTtcbiAgZm9yIChjb25zdCBwcnYgb2YgcHJ2cykge1xuICAgIGNvbnN0IGRlY3J5cHRlZCA9IG1heWJlRGVjcnlwdChiaXRnbywgcHJ2LCBwYXNzd29yZCk7XG4gICAgaWYgKGRlY3J5cHRlZCkge1xuICAgICAgcmV0dXJuIGRlY3J5cHRlZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbiJdfQ==