/**
 * @prettier
 */
import { DelegationOptions, DelegationResults, IStakingWallet, StakeOptions, StakingPrebuildTransactionResult, StakingRequest, StakingSignedTransaction, StakingSignOptions, StakingTransaction, SwitchValidatorOptions, TransactionsReadyToSign, UnstakeOptions, EthUnstakeOptions, ClaimRewardsOptions } from './iStakingWallet';
import { IWallet } from '../wallet';
import { ITssUtils } from '../utils';
export declare class StakingWallet implements IStakingWallet {
    private readonly bitgo;
    private tokenParentWallet?;
    private readonly isEthTss;
    wallet: IWallet;
    tssUtil: ITssUtils;
    constructor(wallet: IWallet, isEthTss: boolean);
    get walletId(): string;
    get coin(): string;
    /**
     * Stake coins
     * @param options - stake options
     * @return StakingRequest
     */
    stake(options: StakeOptions): Promise<StakingRequest>;
    /**
     * Unstake coins
     * @param options - unstake options
     * @return StakingRequest
     */
    unstake(options: UnstakeOptions | EthUnstakeOptions): Promise<StakingRequest>;
    /**
     * Submit a request to switch the validator used for a specific delegation
     * This will create a new delegation with the new validator address and mark the old delegation as inactive
     * @param options - switch validator options
     * @return StakingRequest
     */
    switchValidator(options: SwitchValidatorOptions): Promise<StakingRequest>;
    /**
     * Submit a request to claim rewards for a specific delegation
     * @param options - claim rewards options
     * @return StakingRequest
     */
    claimRewards(options: ClaimRewardsOptions): Promise<StakingRequest>;
    /**
     * Cancel staking request
     * @param stakingRequestId - id of the staking request to cancel
     * @return StakingRequest
     */
    cancelStakingRequest(stakingRequestId: string): Promise<StakingRequest>;
    /**
     * Fetch delegations for a specific wallet
     * @param options - unstake options
     * @return StakingRequest
     */
    delegations(options: DelegationOptions): Promise<DelegationResults>;
    /**
     * Get a staking request by ID
     * @param stakingRequestId - id of the staking request to retrieve
     * @return StakingRequest
     */
    getStakingRequest(stakingRequestId: string): Promise<StakingRequest>;
    /**
     * Get transactions ready to sign
     * @param stakingRequestId
     * @return TransactionsReadyToSign
     */
    getTransactionsReadyToSign(stakingRequestId: string): Promise<TransactionsReadyToSign>;
    /**
     * Build the staking transaction
     * If TSS delete signature shares, else expand build params and then build
     * @param transaction - staking transaction to build
     */
    build(transaction: StakingTransaction): Promise<StakingPrebuildTransactionResult>;
    /**
     * Sign the staking transaction
     * @param signOptions
     * @param stakingPrebuildTransaction
     */
    sign(signOptions: StakingSignOptions, stakingPrebuildTransaction: StakingPrebuildTransactionResult): Promise<StakingSignedTransaction>;
    /**
     * Send the signed staking transaction if required. Send call is not required if api version is full
     * and this method will return the staking transaction from the incoming object.
     * @param signedTransaction
     */
    send(signedTransaction: StakingSignedTransaction): Promise<StakingTransaction>;
    /**
     * Build, sign and send the transaction.
     * @param signOptions
     * @param transaction
     */
    buildSignAndSend(signOptions: StakingSignOptions, transaction: StakingTransaction): Promise<StakingTransaction>;
    /**
     * Build and sign the transaction.
     * @param signOptions
     * @param transaction
     */
    private buildAndSign;
    private expandBuildParams;
    private createStakingRequest;
    private stakingRequestsURL;
    private getDelegations;
    private stakingDelegationsURL;
    private stakingRequestUrl;
    private stakingTransactionURL;
    private getWalletForBuildingAndSigning;
    /**
     * Send API call is only required for TSS TxRequest api version lite or multi-sig transactions.
     * For Full api version, sign transaction moves the transaction to delivered state.
     * @returns true if send API call to staking service is required else false
     */
    private isSendCallRequired;
}
//# sourceMappingURL=stakingWallet.d.ts.map