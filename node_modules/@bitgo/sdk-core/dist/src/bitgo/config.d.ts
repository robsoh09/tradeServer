import { EnvironmentName } from './environments';
export declare type KrsProvider = {
    feeType: 'flatUsd';
    feeAmount: number;
    supportedCoins: string[];
    feeAddresses?: Record<string, string>;
};
export declare const krsProviders: Record<string, KrsProvider>;
export declare const defaults: {
    maxFee: number;
    maxFeeRate: number;
    minFeeRate: number;
    fallbackFeeRate: number;
    minOutputSize: number;
    minInstantFeeRate: number;
    bitgoEthAddress: string;
};
/**
 * Get the default (hardcoded) constants for a particular network.
 *
 * Note that this may not be the complete set of constants, and additional constants may get fetched
 * from BitGo during the lifespan of a BitGo object.
 * @param env
 */
export declare const defaultConstants: (env: EnvironmentName) => {
    maxFee: number;
    maxFeeRate: number;
    minFeeRate: number;
    fallbackFeeRate: number;
    minOutputSize: number;
    minInstantFeeRate: number;
    bitgoEthAddress: string;
} & ({
    eth: {
        tokens: import("@bitgo/statics").BaseContractAddressConfig[];
    };
    xlm: {
        tokens: import("@bitgo/statics").BaseNetworkConfig[];
    };
    algo: {
        tokens: import("@bitgo/statics").AlgoTokenConfig[];
    };
    ofc: {
        tokens: import("@bitgo/statics").OfcTokenConfig[];
    };
    celo: {
        tokens: import("@bitgo/statics").BaseContractAddressConfig[];
    };
    eos: {
        tokens: import("@bitgo/statics").BaseContractAddressConfig[];
    };
    avaxc: {
        tokens: import("@bitgo/statics").BaseContractAddressConfig[];
    };
    polygon: {
        tokens: import("@bitgo/statics").BaseContractAddressConfig[];
    };
    bsc: {
        tokens: import("@bitgo/statics").BaseContractAddressConfig[];
    };
    arbeth: {
        tokens: import("@bitgo/statics").BaseContractAddressConfig[];
    };
    opeth: {
        tokens: import("@bitgo/statics").BaseContractAddressConfig[];
    };
    sol: {
        tokens: import("@bitgo/statics").SolTokenConfig[];
    };
    hbar: {
        tokens: import("@bitgo/statics").BaseNetworkConfig[];
    };
    ada: {
        tokens: import("@bitgo/statics").AdaTokenConfig[];
    };
    trx: {
        tokens: import("@bitgo/statics").BaseContractAddressConfig[];
    };
    xrp: {
        tokens: import("@bitgo/statics").XrpTokenConfig[];
    };
    zketh: {
        tokens: import("@bitgo/statics").BaseContractAddressConfig[];
    };
} | {
    eth: {
        tokens: import("@bitgo/statics").BaseContractAddressConfig[];
    };
    xlm: {
        tokens: import("@bitgo/statics").BaseNetworkConfig[];
    };
    algo: {
        tokens: import("@bitgo/statics").AlgoTokenConfig[];
    };
    ofc: {
        tokens: import("@bitgo/statics").OfcTokenConfig[];
    };
    celo: {
        tokens: import("@bitgo/statics").BaseContractAddressConfig[];
    };
    bsc: {
        tokens: import("@bitgo/statics").BaseContractAddressConfig[];
    };
    eos: {
        tokens: import("@bitgo/statics").BaseContractAddressConfig[];
    };
    avaxc: {
        tokens: import("@bitgo/statics").BaseContractAddressConfig[];
    };
    polygon: {
        tokens: import("@bitgo/statics").BaseContractAddressConfig[];
    };
    arbeth: {
        tokens: import("@bitgo/statics").BaseContractAddressConfig[];
    };
    opeth: {
        tokens: import("@bitgo/statics").BaseContractAddressConfig[];
    };
    sol: {
        tokens: import("@bitgo/statics").SolTokenConfig[];
    };
    hbar: {
        tokens: import("@bitgo/statics").BaseNetworkConfig[];
    };
    ada: {
        tokens: import("@bitgo/statics").AdaTokenConfig[];
    };
    trx: {
        tokens: import("@bitgo/statics").BaseContractAddressConfig[];
    };
    xrp: {
        tokens: import("@bitgo/statics").XrpTokenConfig[];
    };
    zketh: {
        tokens: import("@bitgo/statics").BaseContractAddressConfig[];
    };
});
export declare type Config = {
    krsProviders: Record<string, KrsProvider>;
};
//# sourceMappingURL=config.d.ts.map