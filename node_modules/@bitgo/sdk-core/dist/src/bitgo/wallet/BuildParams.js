"use strict";
/* eslint no-redeclare: off */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildParamKeys = exports.BuildParams = exports.BuildParamsOffchain = exports.BuildParamsStacks = exports.BuildParamsUTXO = void 0;
const t = __importStar(require("io-ts"));
const codecProps_1 = require("../utils/codecProps");
exports.BuildParamsUTXO = t.partial({
    /* deprecated. the change address type */
    addressType: t.unknown,
    /* the change address type */
    changeAddressType: t.unknown,
    /* a fixed change address */
    changeAddress: t.unknown,
    allowExternalChangeAddress: t.boolean,
    cpfpFeeRate: t.unknown,
    cpfpTxIds: t.unknown,
    unspents: t.unknown,
    minValue: t.unknown,
    minConfirms: t.unknown,
    maxValue: t.unknown,
    targetWalletUnspents: t.unknown,
    /* unspent selection strategy */
    strategy: t.unknown,
    strategyAllowFallback: t.unknown,
    noSplitChange: t.unknown,
    smallestChangeSplitSize: t.unknown,
    enforceMinConfirmsForChange: t.unknown,
    /* legacy or psbt */
    txFormat: t.unknown,
    maxChangeOutputs: t.unknown,
    /* rbf */
    rbfTxIds: t.array(t.string),
    isReplaceableByFee: t.boolean,
});
exports.BuildParamsStacks = t.partial({
    contractName: t.unknown,
    functionName: t.unknown,
    functionArgs: t.unknown,
});
exports.BuildParamsOffchain = t.partial({
    idfSignedTimestamp: t.unknown,
    idfVersion: t.unknown,
    idfUserId: t.unknown,
});
exports.BuildParams = t.exact(t.intersection([
    exports.BuildParamsUTXO,
    exports.BuildParamsStacks,
    exports.BuildParamsOffchain,
    t.partial({
        apiVersion: t.unknown,
        consolidateAddresses: t.unknown,
        consolidateId: t.unknown,
        comment: t.string,
        delayMs: t.unknown,
        fee: t.unknown,
        feeRate: t.unknown,
        feeMultiplier: t.unknown,
        enableTokens: t.unknown,
        gasLimit: t.unknown,
        gasPrice: t.unknown,
        hopParams: t.unknown,
        instant: t.unknown,
        lastLedgerSequence: t.unknown,
        ledgerSequenceDelta: t.unknown,
        maxFee: t.unknown,
        maxFeeRate: t.unknown,
        memo: t.unknown,
        transferId: t.unknown,
        message: t.unknown,
        numBlocks: t.unknown,
        nonce: t.unknown,
        pendingApprovalId: t.unknown,
        preview: t.unknown,
        previewPendingTxs: t.unknown,
        senderAddress: t.unknown,
        receiveAddress: t.unknown,
        recipients: t.unknown,
        reservation: t.unknown,
        refundOptions: t.unknown,
        sequenceId: t.unknown,
        sourceChain: t.unknown,
        destinationChain: t.unknown,
        trustlines: t.unknown,
        type: t.unknown,
        limit: t.unknown,
        timeBounds: t.unknown,
        startTime: t.unknown,
        stateProofKey: t.unknown,
        nonParticipation: t.unknown,
        validFromBlock: t.unknown,
        validToBlock: t.unknown,
        messageKey: t.unknown,
        stakingParams: t.unknown,
        stakingOptions: t.unknown,
        unstakingOptions: t.unknown,
        eip1559: t.unknown,
        keyregTxBase64: t.unknown,
        closeRemainderTo: t.unknown,
        tokenName: t.unknown,
        prebuildTx: t.unknown,
        // param to set emergency flag on a custodial transaction.
        // This transaction should be performed in less than 1 hour or it will fail.
        emergency: t.unknown,
    }),
]));
exports.buildParamKeys = (0, codecProps_1.getCodecProperties)(exports.BuildParams);
//# sourceMappingURL=data:application/json;base64,