import * as t from 'io-ts';
export declare const BuildParamsUTXO: t.PartialC<{
    addressType: t.UnknownC;
    changeAddressType: t.UnknownC;
    changeAddress: t.UnknownC;
    allowExternalChangeAddress: t.BooleanC;
    cpfpFeeRate: t.UnknownC;
    cpfpTxIds: t.UnknownC;
    unspents: t.UnknownC;
    minValue: t.UnknownC;
    minConfirms: t.UnknownC;
    maxValue: t.UnknownC;
    targetWalletUnspents: t.UnknownC;
    strategy: t.UnknownC;
    strategyAllowFallback: t.UnknownC;
    noSplitChange: t.UnknownC;
    smallestChangeSplitSize: t.UnknownC;
    enforceMinConfirmsForChange: t.UnknownC;
    txFormat: t.UnknownC;
    maxChangeOutputs: t.UnknownC;
    rbfTxIds: t.ArrayC<t.StringC>;
    isReplaceableByFee: t.BooleanC;
}>;
export declare const BuildParamsStacks: t.PartialC<{
    contractName: t.UnknownC;
    functionName: t.UnknownC;
    functionArgs: t.UnknownC;
}>;
export declare const BuildParamsOffchain: t.PartialC<{
    idfSignedTimestamp: t.UnknownC;
    idfVersion: t.UnknownC;
    idfUserId: t.UnknownC;
}>;
export declare const BuildParams: t.ExactC<t.IntersectionC<[t.PartialC<{
    addressType: t.UnknownC;
    changeAddressType: t.UnknownC;
    changeAddress: t.UnknownC;
    allowExternalChangeAddress: t.BooleanC;
    cpfpFeeRate: t.UnknownC;
    cpfpTxIds: t.UnknownC;
    unspents: t.UnknownC;
    minValue: t.UnknownC;
    minConfirms: t.UnknownC;
    maxValue: t.UnknownC;
    targetWalletUnspents: t.UnknownC;
    strategy: t.UnknownC;
    strategyAllowFallback: t.UnknownC;
    noSplitChange: t.UnknownC;
    smallestChangeSplitSize: t.UnknownC;
    enforceMinConfirmsForChange: t.UnknownC;
    txFormat: t.UnknownC;
    maxChangeOutputs: t.UnknownC;
    rbfTxIds: t.ArrayC<t.StringC>;
    isReplaceableByFee: t.BooleanC;
}>, t.PartialC<{
    contractName: t.UnknownC;
    functionName: t.UnknownC;
    functionArgs: t.UnknownC;
}>, t.PartialC<{
    idfSignedTimestamp: t.UnknownC;
    idfVersion: t.UnknownC;
    idfUserId: t.UnknownC;
}>, t.PartialC<{
    apiVersion: t.UnknownC;
    consolidateAddresses: t.UnknownC;
    consolidateId: t.UnknownC;
    comment: t.StringC;
    delayMs: t.UnknownC;
    fee: t.UnknownC;
    feeRate: t.UnknownC;
    feeMultiplier: t.UnknownC;
    enableTokens: t.UnknownC;
    gasLimit: t.UnknownC;
    gasPrice: t.UnknownC;
    hopParams: t.UnknownC;
    instant: t.UnknownC;
    lastLedgerSequence: t.UnknownC;
    ledgerSequenceDelta: t.UnknownC;
    maxFee: t.UnknownC;
    maxFeeRate: t.UnknownC;
    memo: t.UnknownC;
    transferId: t.UnknownC;
    message: t.UnknownC;
    numBlocks: t.UnknownC;
    nonce: t.UnknownC;
    pendingApprovalId: t.UnknownC;
    preview: t.UnknownC;
    previewPendingTxs: t.UnknownC;
    senderAddress: t.UnknownC;
    receiveAddress: t.UnknownC;
    recipients: t.UnknownC;
    reservation: t.UnknownC;
    refundOptions: t.UnknownC;
    sequenceId: t.UnknownC;
    sourceChain: t.UnknownC;
    destinationChain: t.UnknownC;
    trustlines: t.UnknownC;
    type: t.UnknownC;
    limit: t.UnknownC;
    timeBounds: t.UnknownC;
    startTime: t.UnknownC;
    stateProofKey: t.UnknownC;
    nonParticipation: t.UnknownC;
    validFromBlock: t.UnknownC;
    validToBlock: t.UnknownC;
    messageKey: t.UnknownC;
    stakingParams: t.UnknownC;
    stakingOptions: t.UnknownC;
    unstakingOptions: t.UnknownC;
    eip1559: t.UnknownC;
    keyregTxBase64: t.UnknownC;
    closeRemainderTo: t.UnknownC;
    tokenName: t.UnknownC;
    prebuildTx: t.UnknownC;
    emergency: t.UnknownC;
}>]>>;
export declare type BuildParams = t.TypeOf<typeof BuildParams>;
export declare const buildParamKeys: string[];
//# sourceMappingURL=BuildParams.d.ts.map