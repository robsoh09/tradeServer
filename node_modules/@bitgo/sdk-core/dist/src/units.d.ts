import BigNumber from 'bignumber.js';
/**
 * Converts an amount of coin in base units (such as satoshis, cents, or wei) to full units (such as bitcoin, dollars, or ether)
 * @param baseUnits number of base units
 * @param coin coin ticker
 */
export declare function toFullUnits(baseUnits: number | string | BigNumber, coin: string): string;
/**
 * Converts an amount of coin in base units (such as satoshis, cents, or wei) to full units (such as bitcoin, dollars, or ether) fixed amount
 * @param baseUnits number of base units
 * @param coin coin ticker
 */
export declare function toFullUnitsFixed(baseUnits: number | string | BigNumber, coin: string): string;
/**
 * Converts an amount of coin in full units (such as bitcoin, dollars, or ether) to base units (such as satoshis, cents, or wei)
 * @param fullUnits number of full units
 * @param coin coin ticker
 */
export declare function toBaseUnits(fullUnits: number | string | BigNumber, coin: string): string;
/**
 * Converts price and quantity for a coin into base units market value
 * (note, price might be 2 decimal places longer than priceIn decimal places for base units)
 * @param coin - which coin to calculate for
 * @param price - price of a unit of the coin specified
 * @param quantity - number of coins
 * @param priceIn - numerator of trading pair, for example USD of BTC/USD
 */
export declare function toMarketValueBaseUnits(coin: string, price: number | string | BigNumber, quantity: string | number | bigint, priceIn?: string): bigint;
//# sourceMappingURL=units.d.ts.map