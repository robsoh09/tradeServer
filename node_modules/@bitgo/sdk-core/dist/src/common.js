"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateParams = exports.getNetwork = exports.setNetwork = exports.Environments = void 0;
/**
 * @prettier
 */
const _ = __importStar(require("lodash"));
const bitgo_1 = require("./bitgo");
Object.defineProperty(exports, "Environments", { enumerable: true, get: function () { return bitgo_1.Environments; } });
let bitcoinNetwork;
/**
 * Set the global Bitcoin network. Used for v1 only.
 *
 * @deprecated
 */
function setNetwork(network) {
    if (network === 'bitcoin') {
        bitcoinNetwork = 'bitcoin';
    }
    else {
        // test network
        bitcoinNetwork = 'testnet';
    }
}
exports.setNetwork = setNetwork;
/**
 * Get the global Bitcoin network. Used for v1 only.
 *
 * @deprecated
 */
function getNetwork() {
    return bitcoinNetwork;
}
exports.getNetwork = getNetwork;
/**
 * Helper function to validate the input parameters to an SDK method.
 * Only validates for strings - if parameter is different, check that manually
 *
 * @deprecated
 * @param params dictionary of parameter key-value pairs
 * @param expectedParams list of expected string parameters
 * @param optionalParams list of optional string parameters
 * @param optionalCallback if callback provided, must be a function
 * @returns true if validated, throws with reason otherwise
 */
function validateParams(
// eslint-disable-next-line @typescript-eslint/ban-types
params, expectedParams, optionalParams = [], optionalCallback) {
    if (!_.isObject(params)) {
        throw new Error('Must pass in parameters dictionary');
    }
    expectedParams = expectedParams || [];
    expectedParams.forEach(function (expectedParam) {
        if (!params[expectedParam]) {
            throw new Error('Missing parameter: ' + expectedParam);
        }
        if (!_.isString(params[expectedParam])) {
            throw new Error('Expecting parameter string: ' + expectedParam + ' but found ' + typeof params[expectedParam]);
        }
    });
    optionalParams.forEach(function (optionalParam) {
        if (params[optionalParam] && !_.isString(params[optionalParam])) {
            throw new Error('Expecting parameter string: ' + optionalParam + ' but found ' + typeof params[optionalParam]);
        }
    });
    if (optionalCallback && !_.isFunction(optionalCallback)) {
        throw new Error('illegal callback argument');
    }
    return true;
}
exports.validateParams = validateParams;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztHQUVHO0FBQ0gsMENBQTRCO0FBQzVCLG1DQUFrRDtBQUd6Qyw2RkFIQSxvQkFBWSxPQUdBO0FBRXJCLElBQUksY0FBeUIsQ0FBQztBQUU5Qjs7OztHQUlHO0FBQ0gsU0FBZ0IsVUFBVSxDQUFDLE9BQWtCO0lBQzNDLElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTtRQUN6QixjQUFjLEdBQUcsU0FBUyxDQUFDO0tBQzVCO1NBQU07UUFDTCxlQUFlO1FBQ2YsY0FBYyxHQUFHLFNBQVMsQ0FBQztLQUM1QjtBQUNILENBQUM7QUFQRCxnQ0FPQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFnQixVQUFVO0lBQ3hCLE9BQU8sY0FBYyxDQUFDO0FBQ3hCLENBQUM7QUFGRCxnQ0FFQztBQUVEOzs7Ozs7Ozs7O0dBVUc7QUFDSCxTQUFnQixjQUFjO0FBQzVCLHdEQUF3RDtBQUN4RCxNQUFjLEVBQ2QsY0FBd0IsRUFDeEIsaUJBQTJCLEVBQUUsRUFDN0IsZ0JBQWtEO0lBRWxELElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQztLQUN2RDtJQUVELGNBQWMsR0FBRyxjQUFjLElBQUksRUFBRSxDQUFDO0lBRXRDLGNBQWMsQ0FBQyxPQUFPLENBQUMsVUFBVSxhQUFhO1FBQzVDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDMUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsR0FBRyxhQUFhLENBQUMsQ0FBQztTQUN4RDtRQUNELElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFO1lBQ3RDLE1BQU0sSUFBSSxLQUFLLENBQUMsOEJBQThCLEdBQUcsYUFBYSxHQUFHLGFBQWEsR0FBRyxPQUFPLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1NBQ2hIO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxjQUFjLENBQUMsT0FBTyxDQUFDLFVBQVUsYUFBYTtRQUM1QyxJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUU7WUFDL0QsTUFBTSxJQUFJLEtBQUssQ0FBQyw4QkFBOEIsR0FBRyxhQUFhLEdBQUcsYUFBYSxHQUFHLE9BQU8sTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7U0FDaEg7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksZ0JBQWdCLElBQUksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLEVBQUU7UUFDdkQsTUFBTSxJQUFJLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0tBQzlDO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBakNELHdDQWlDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHByZXR0aWVyXG4gKi9cbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IEVudmlyb25tZW50cywgVjFOZXR3b3JrIH0gZnJvbSAnLi9iaXRnbyc7XG5cbi8vIHJlLWV4cG9ydCBmcm9tIGhlcmUgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHJlYXNvbnNcbmV4cG9ydCB7IEVudmlyb25tZW50cyB9O1xuXG5sZXQgYml0Y29pbk5ldHdvcms6IFYxTmV0d29yaztcblxuLyoqXG4gKiBTZXQgdGhlIGdsb2JhbCBCaXRjb2luIG5ldHdvcmsuIFVzZWQgZm9yIHYxIG9ubHkuXG4gKlxuICogQGRlcHJlY2F0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldE5ldHdvcmsobmV0d29yazogVjFOZXR3b3JrKTogdm9pZCB7XG4gIGlmIChuZXR3b3JrID09PSAnYml0Y29pbicpIHtcbiAgICBiaXRjb2luTmV0d29yayA9ICdiaXRjb2luJztcbiAgfSBlbHNlIHtcbiAgICAvLyB0ZXN0IG5ldHdvcmtcbiAgICBiaXRjb2luTmV0d29yayA9ICd0ZXN0bmV0JztcbiAgfVxufVxuXG4vKipcbiAqIEdldCB0aGUgZ2xvYmFsIEJpdGNvaW4gbmV0d29yay4gVXNlZCBmb3IgdjEgb25seS5cbiAqXG4gKiBAZGVwcmVjYXRlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV0d29yaygpOiBWMU5ldHdvcmsge1xuICByZXR1cm4gYml0Y29pbk5ldHdvcms7XG59XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIHZhbGlkYXRlIHRoZSBpbnB1dCBwYXJhbWV0ZXJzIHRvIGFuIFNESyBtZXRob2QuXG4gKiBPbmx5IHZhbGlkYXRlcyBmb3Igc3RyaW5ncyAtIGlmIHBhcmFtZXRlciBpcyBkaWZmZXJlbnQsIGNoZWNrIHRoYXQgbWFudWFsbHlcbiAqXG4gKiBAZGVwcmVjYXRlZFxuICogQHBhcmFtIHBhcmFtcyBkaWN0aW9uYXJ5IG9mIHBhcmFtZXRlciBrZXktdmFsdWUgcGFpcnNcbiAqIEBwYXJhbSBleHBlY3RlZFBhcmFtcyBsaXN0IG9mIGV4cGVjdGVkIHN0cmluZyBwYXJhbWV0ZXJzXG4gKiBAcGFyYW0gb3B0aW9uYWxQYXJhbXMgbGlzdCBvZiBvcHRpb25hbCBzdHJpbmcgcGFyYW1ldGVyc1xuICogQHBhcmFtIG9wdGlvbmFsQ2FsbGJhY2sgaWYgY2FsbGJhY2sgcHJvdmlkZWQsIG11c3QgYmUgYSBmdW5jdGlvblxuICogQHJldHVybnMgdHJ1ZSBpZiB2YWxpZGF0ZWQsIHRocm93cyB3aXRoIHJlYXNvbiBvdGhlcndpc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlUGFyYW1zKFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xuICBwYXJhbXM6IG9iamVjdCxcbiAgZXhwZWN0ZWRQYXJhbXM6IHN0cmluZ1tdLFxuICBvcHRpb25hbFBhcmFtczogc3RyaW5nW10gPSBbXSxcbiAgb3B0aW9uYWxDYWxsYmFjaz86IDxSPihlcnI6IEVycm9yLCByZXM6IFIpID0+IHZvaWRcbik6IGJvb2xlYW4ge1xuICBpZiAoIV8uaXNPYmplY3QocGFyYW1zKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBwYXNzIGluIHBhcmFtZXRlcnMgZGljdGlvbmFyeScpO1xuICB9XG5cbiAgZXhwZWN0ZWRQYXJhbXMgPSBleHBlY3RlZFBhcmFtcyB8fCBbXTtcblxuICBleHBlY3RlZFBhcmFtcy5mb3JFYWNoKGZ1bmN0aW9uIChleHBlY3RlZFBhcmFtKSB7XG4gICAgaWYgKCFwYXJhbXNbZXhwZWN0ZWRQYXJhbV0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBwYXJhbWV0ZXI6ICcgKyBleHBlY3RlZFBhcmFtKTtcbiAgICB9XG4gICAgaWYgKCFfLmlzU3RyaW5nKHBhcmFtc1tleHBlY3RlZFBhcmFtXSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0aW5nIHBhcmFtZXRlciBzdHJpbmc6ICcgKyBleHBlY3RlZFBhcmFtICsgJyBidXQgZm91bmQgJyArIHR5cGVvZiBwYXJhbXNbZXhwZWN0ZWRQYXJhbV0pO1xuICAgIH1cbiAgfSk7XG5cbiAgb3B0aW9uYWxQYXJhbXMuZm9yRWFjaChmdW5jdGlvbiAob3B0aW9uYWxQYXJhbSkge1xuICAgIGlmIChwYXJhbXNbb3B0aW9uYWxQYXJhbV0gJiYgIV8uaXNTdHJpbmcocGFyYW1zW29wdGlvbmFsUGFyYW1dKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RpbmcgcGFyYW1ldGVyIHN0cmluZzogJyArIG9wdGlvbmFsUGFyYW0gKyAnIGJ1dCBmb3VuZCAnICsgdHlwZW9mIHBhcmFtc1tvcHRpb25hbFBhcmFtXSk7XG4gICAgfVxuICB9KTtcblxuICBpZiAob3B0aW9uYWxDYWxsYmFjayAmJiAhXy5pc0Z1bmN0aW9uKG9wdGlvbmFsQ2FsbGJhY2spKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbGxlZ2FsIGNhbGxiYWNrIGFyZ3VtZW50Jyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbiJdfQ==