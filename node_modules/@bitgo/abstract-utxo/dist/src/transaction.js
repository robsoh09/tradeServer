"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.explainTx = exports.explainPsbt = exports.getTxInputs = exports.getPsbtTxInputs = void 0;
const utxolib = require("@bitgo/utxo-lib");
const utxo_lib_1 = require("@bitgo/utxo-lib");
/**
 * Get the inputs for a psbt from a prebuild.
 */
function getPsbtTxInputs(psbtArg, network) {
    const psbt = psbtArg instanceof utxolib.bitgo.UtxoPsbt ? psbtArg : utxolib.bitgo.createPsbtFromHex(psbtArg, network);
    const txInputs = psbt.txInputs;
    return psbt.data.inputs.map((input, index) => {
        let address;
        let value;
        if (input.witnessUtxo) {
            address = utxolib.address.fromOutputScript(input.witnessUtxo.script, network);
            value = input.witnessUtxo.value;
        }
        else if (input.nonWitnessUtxo) {
            const tx = utxolib.bitgo.createTransactionFromBuffer(input.nonWitnessUtxo, network, {
                amountType: 'bigint',
            });
            const txId = Buffer.from(txInputs[index].hash).reverse().toString('hex');
            if (tx.getId() !== txId) {
                throw new Error('input transaction hex does not match id');
            }
            const prevTxOutputIndex = txInputs[index].index;
            address = utxolib.address.fromOutputScript(tx.outs[prevTxOutputIndex].script, network);
            value = tx.outs[prevTxOutputIndex].value;
        }
        else {
            throw new Error('psbt input is missing both witnessUtxo and nonWitnessUtxo');
        }
        return { address, value, valueString: value.toString() };
    });
}
exports.getPsbtTxInputs = getPsbtTxInputs;
/**
 * Get the inputs for a transaction from a prebuild.
 */
async function getTxInputs(params) {
    const { txPrebuild, bitgo, coin, disableNetworking, reqId } = params;
    if (!txPrebuild.txHex) {
        throw new Error(`txPrebuild.txHex not set`);
    }
    const transaction = coin.createTransactionFromHex(txPrebuild.txHex);
    const transactionCache = {};
    return await Promise.all(transaction.ins.map(async (currentInput) => {
        var _a, _b;
        const transactionId = Buffer.from(currentInput.hash).reverse().toString('hex');
        const txHex = (_b = (_a = txPrebuild.txInfo) === null || _a === void 0 ? void 0 : _a.txHexes) === null || _b === void 0 ? void 0 : _b[transactionId];
        if (txHex) {
            const localTx = coin.createTransactionFromHex(txHex);
            if (localTx.getId() !== transactionId) {
                throw new Error('input transaction hex does not match id');
            }
            const currentOutput = localTx.outs[currentInput.index];
            const address = utxolib.address.fromOutputScript(currentOutput.script, coin.network);
            return {
                address,
                value: currentOutput.value,
                valueString: currentOutput.value.toString(),
            };
        }
        else if (!transactionCache[transactionId]) {
            if (disableNetworking) {
                throw new Error('attempting to retrieve transaction details externally with networking disabled');
            }
            if (reqId) {
                bitgo.setRequestTracer(reqId);
            }
            transactionCache[transactionId] = await bitgo.get(coin.url(`/public/tx/${transactionId}`)).result();
        }
        const transactionDetails = transactionCache[transactionId];
        return transactionDetails.outputs[currentInput.index];
    }));
}
exports.getTxInputs = getTxInputs;
function explainCommon(tx, params, network) {
    var _a;
    const displayOrder = ['id', 'outputAmount', 'changeAmount', 'outputs', 'changeOutputs'];
    let spendAmount = BigInt(0);
    let changeAmount = BigInt(0);
    const changeOutputs = [];
    const outputs = [];
    const { changeAddresses = [] } = (_a = params.txInfo) !== null && _a !== void 0 ? _a : {};
    tx.outs.forEach((currentOutput) => {
        const currentAddress = utxolib.address.fromOutputScript(currentOutput.script, network);
        const currentAmount = BigInt(currentOutput.value);
        if (changeAddresses.includes(currentAddress)) {
            // this is change
            changeAmount += currentAmount;
            changeOutputs.push({
                address: currentAddress,
                amount: currentAmount.toString(),
            });
            return;
        }
        spendAmount += currentAmount;
        outputs.push({
            address: currentAddress,
            amount: currentAmount.toString(),
        });
    });
    const outputDetails = {
        outputAmount: spendAmount.toString(),
        changeAmount: changeAmount.toString(),
        outputs,
        changeOutputs,
    };
    let fee;
    let locktime;
    if (params.feeInfo) {
        displayOrder.push('fee');
        fee = params.feeInfo;
    }
    if (Number.isInteger(tx.locktime) && tx.locktime > 0) {
        displayOrder.push('locktime');
        locktime = tx.locktime;
    }
    return { displayOrder, id: tx.getId(), ...outputDetails, fee, locktime };
}
function getRootWalletKeys(params) {
    var _a;
    const keys = (_a = params.pubs) === null || _a === void 0 ? void 0 : _a.map((xpub) => utxo_lib_1.bip32.fromBase58(xpub));
    return keys && keys.length === 3 ? new utxo_lib_1.bitgo.RootWalletKeys(keys) : undefined;
}
function getPsbtInputSignaturesCount(psbt, params) {
    const rootWalletKeys = getRootWalletKeys(params);
    return rootWalletKeys
        ? utxo_lib_1.bitgo.getSignatureValidationArrayPsbt(psbt, rootWalletKeys).map((sv) => sv[1].filter((v) => v).length)
        : Array(psbt.data.inputs.length).fill(0);
}
function getTxInputSignaturesCount(tx, params, network) {
    var _a, _b, _c;
    const prevOutputs = (_b = (_a = params.txInfo) === null || _a === void 0 ? void 0 : _a.unspents) === null || _b === void 0 ? void 0 : _b.map((u) => utxo_lib_1.bitgo.toOutput(u, network));
    const rootWalletKeys = getRootWalletKeys(params);
    const { unspents = [] } = (_c = params.txInfo) !== null && _c !== void 0 ? _c : {};
    // get the number of signatures per input
    return tx.ins.map((input, idx) => {
        if (unspents.length !== tx.ins.length) {
            return 0;
        }
        if (!prevOutputs) {
            throw new Error(`invalid state`);
        }
        if (!rootWalletKeys) {
            // no pub keys or incorrect number of pub keys
            return 0;
        }
        try {
            return utxo_lib_1.bitgo.verifySignatureWithUnspent(tx, idx, unspents, rootWalletKeys).filter((v) => v).length;
        }
        catch (e) {
            // some other error occurred and we can't validate the signatures
            return 0;
        }
    });
}
/**
 * Decompose a raw psbt into useful information, such as the total amounts,
 * change amounts, and transaction outputs.
 */
function explainPsbt(params, network) {
    const { txHex } = params;
    let psbt;
    try {
        psbt = utxo_lib_1.bitgo.createPsbtFromHex(txHex, network);
    }
    catch (e) {
        throw new Error('failed to parse psbt hex');
    }
    const txOutputs = psbt.txOutputs;
    function getChangeAddresses() {
        try {
            return utxolib.bitgo
                .findInternalOutputIndices(psbt)
                .map((i) => utxolib.address.fromOutputScript(txOutputs[i].script, network));
        }
        catch (e) {
            if (e instanceof utxolib.bitgo.ErrorNoMultiSigInputFound) {
                return [];
            }
            throw e;
        }
    }
    const changeAddresses = getChangeAddresses();
    const tx = psbt.getUnsignedTx();
    const common = explainCommon(tx, { ...params, txInfo: { ...params.txInfo, changeAddresses } }, network);
    const inputSignaturesCount = getPsbtInputSignaturesCount(psbt, params);
    // Set fee from subtracting inputs from outputs
    const outputAmount = txOutputs.reduce((cumulative, curr) => cumulative + BigInt(curr.value), BigInt(0));
    const inputAmount = psbt.txInputs.reduce((cumulative, txInput, i) => {
        const data = psbt.data.inputs[i];
        if (data.witnessUtxo) {
            return cumulative + BigInt(data.witnessUtxo.value);
        }
        else if (data.nonWitnessUtxo) {
            const tx = utxo_lib_1.bitgo.createTransactionFromBuffer(data.nonWitnessUtxo, network, { amountType: 'bigint' });
            return cumulative + BigInt(tx.outs[txInput.index].value);
        }
        else {
            throw new Error('could not find value on input');
        }
    }, BigInt(0));
    return {
        ...common,
        fee: (inputAmount - outputAmount).toString(),
        inputSignatures: inputSignaturesCount,
        signatures: inputSignaturesCount.reduce((prev, curr) => (curr > prev ? curr : prev), 0),
    };
}
exports.explainPsbt = explainPsbt;
/**
 * Decompose a raw transaction into useful information, such as the total amounts,
 * change amounts, and transaction outputs.
 */
function explainTx(params, coin) {
    const { txHex } = params;
    let tx;
    try {
        tx = coin.createTransactionFromHex(txHex);
    }
    catch (e) {
        throw new Error('failed to parse transaction hex');
    }
    const common = explainCommon(tx, params, coin.network);
    const inputSignaturesCount = getTxInputSignaturesCount(tx, params, coin.network);
    return {
        ...common,
        inputSignatures: inputSignaturesCount,
        signatures: inputSignaturesCount.reduce((prev, curr) => (curr > prev ? curr : prev), 0),
    };
}
exports.explainTx = explainTx;
//# sourceMappingURL=data:application/json;base64,