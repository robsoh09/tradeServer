/**
 * @prettier
 */
import * as utxolib from '@bitgo/utxo-lib';
declare type Unspent<TNumber extends number | bigint = number> = utxolib.bitgo.Unspent<TNumber>;
declare type RootWalletKeys = utxolib.bitgo.RootWalletKeys;
export declare class InputSigningError<TNumber extends number | bigint = number> extends Error {
    inputIndex: number;
    unspent: Unspent<TNumber> | {
        id: string;
    };
    reason: Error | string;
    static expectedWalletUnspent<TNumber extends number | bigint>(inputIndex: number, unspent: Unspent<TNumber> | {
        id: string;
    }): InputSigningError<TNumber>;
    constructor(inputIndex: number, unspent: Unspent<TNumber> | {
        id: string;
    }, reason: Error | string);
}
export declare class TransactionSigningError<TNumber extends number | bigint = number> extends Error {
    constructor(signErrors: InputSigningError<TNumber>[], verifyError: InputSigningError<TNumber>[]);
}
/**
 * Sign all inputs of a psbt and verify signatures after signing.
 * Collects and logs signing errors and verification errors, throws error in the end if any of them
 * failed.
 *
 * If it is the last signature, finalize and extract the transaction from the psbt.
 *
 * This function mirrors signAndVerifyWalletTransaction, but is used for signing PSBTs instead of
 * using TransactionBuilder
 *
 * @param psbt
 * @param signerKeychain
 * @param isLastSignature
 */
export declare function signAndVerifyPsbt(psbt: utxolib.bitgo.UtxoPsbt, signerKeychain: utxolib.BIP32Interface, { isLastSignature, allowNonSegwitSigningWithoutPrevTx, }: {
    isLastSignature: boolean;
    allowNonSegwitSigningWithoutPrevTx?: boolean;
}): utxolib.bitgo.UtxoPsbt | utxolib.bitgo.UtxoTransaction<bigint>;
/**
 * Sign all inputs of a wallet transaction and verify signatures after signing.
 * Collects and logs signing errors and verification errors, throws error in the end if any of them
 * failed.
 *
 * @param transaction - wallet transaction (builder) to be signed
 * @param unspents - transaction unspents
 * @param walletSigner - signing parameters
 * @param isLastSignature - Returns full-signed transaction when true. Builds half-signed when false.
 */
export declare function signAndVerifyWalletTransaction<TNumber extends number | bigint>(transaction: utxolib.bitgo.UtxoTransaction<TNumber> | utxolib.bitgo.UtxoTransactionBuilder<TNumber>, unspents: Unspent<TNumber>[], walletSigner: utxolib.bitgo.WalletUnspentSigner<RootWalletKeys>, { isLastSignature }: {
    isLastSignature: boolean;
}): utxolib.bitgo.UtxoTransaction<TNumber>;
export {};
//# sourceMappingURL=sign.d.ts.map