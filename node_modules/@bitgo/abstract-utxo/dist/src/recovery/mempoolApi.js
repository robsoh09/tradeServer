"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MempoolApi = void 0;
/**
 * @prettier
 */
const _ = require("lodash");
const baseApi_1 = require("./baseApi");
class MempoolApi extends baseApi_1.BaseApi {
    static forCoin(coinName) {
        switch (coinName) {
            case 'btc':
            case 'tbtc':
                // FIXME: tbtc is enabled here for legacy reasons;
                return new MempoolApi('https://mempool.space/api/v1');
        }
        throw new baseApi_1.ApiNotImplementedError(coinName);
    }
    constructor(baseUrl) {
        super(baseUrl);
    }
    async getRecoveryFeePerBytes() {
        const res = await this.get('/fees/recommended');
        return res.map((body) => {
            if (body.fastestFee && _.isInteger(body.fastestFee)) {
                return body.fastestFee;
            }
            else if (body.hourFee && _.isInteger(body.hourFee)) {
                return body.hourFee;
            }
            throw new Error('unexpected response');
        });
    }
}
exports.MempoolApi = MempoolApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtcG9vbEFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yZWNvdmVyeS9tZW1wb29sQXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBOztHQUVHO0FBQ0gsNEJBQTRCO0FBRTVCLHVDQUE0RDtBQUU1RCxNQUFhLFVBQVcsU0FBUSxpQkFBTztJQUNyQyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQWdCO1FBQzdCLFFBQVEsUUFBUSxFQUFFO1lBQ2hCLEtBQUssS0FBSyxDQUFDO1lBQ1gsS0FBSyxNQUFNO2dCQUNULGtEQUFrRDtnQkFDbEQsT0FBTyxJQUFJLFVBQVUsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1NBQ3pEO1FBQ0QsTUFBTSxJQUFJLGdDQUFzQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxZQUFZLE9BQWU7UUFDekIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxLQUFLLENBQUMsc0JBQXNCO1FBQzFCLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBTSxtQkFBbUIsQ0FBQyxDQUFDO1FBQ3JELE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ3RCLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtnQkFDbkQsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO2FBQ3hCO2lCQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDcEQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO2FBQ3JCO1lBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBMUJELGdDQTBCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHByZXR0aWVyXG4gKi9cbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgQXBpTm90SW1wbGVtZW50ZWRFcnJvciwgQmFzZUFwaSB9IGZyb20gJy4vYmFzZUFwaSc7XG5cbmV4cG9ydCBjbGFzcyBNZW1wb29sQXBpIGV4dGVuZHMgQmFzZUFwaSB7XG4gIHN0YXRpYyBmb3JDb2luKGNvaW5OYW1lOiBzdHJpbmcpOiBNZW1wb29sQXBpIHtcbiAgICBzd2l0Y2ggKGNvaW5OYW1lKSB7XG4gICAgICBjYXNlICdidGMnOlxuICAgICAgY2FzZSAndGJ0Yyc6XG4gICAgICAgIC8vIEZJWE1FOiB0YnRjIGlzIGVuYWJsZWQgaGVyZSBmb3IgbGVnYWN5IHJlYXNvbnM7XG4gICAgICAgIHJldHVybiBuZXcgTWVtcG9vbEFwaSgnaHR0cHM6Ly9tZW1wb29sLnNwYWNlL2FwaS92MScpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgQXBpTm90SW1wbGVtZW50ZWRFcnJvcihjb2luTmFtZSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihiYXNlVXJsOiBzdHJpbmcpIHtcbiAgICBzdXBlcihiYXNlVXJsKTtcbiAgfVxuXG4gIGFzeW5jIGdldFJlY292ZXJ5RmVlUGVyQnl0ZXMoKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmdldDxhbnk+KCcvZmVlcy9yZWNvbW1lbmRlZCcpO1xuICAgIHJldHVybiByZXMubWFwKChib2R5KSA9PiB7XG4gICAgICBpZiAoYm9keS5mYXN0ZXN0RmVlICYmIF8uaXNJbnRlZ2VyKGJvZHkuZmFzdGVzdEZlZSkpIHtcbiAgICAgICAgcmV0dXJuIGJvZHkuZmFzdGVzdEZlZTtcbiAgICAgIH0gZWxzZSBpZiAoYm9keS5ob3VyRmVlICYmIF8uaXNJbnRlZ2VyKGJvZHkuaG91ckZlZSkpIHtcbiAgICAgICAgcmV0dXJuIGJvZHkuaG91ckZlZTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcigndW5leHBlY3RlZCByZXNwb25zZScpO1xuICAgIH0pO1xuICB9XG59XG4iXX0=