"use strict";
/**
 * @prettier
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.v1BackupKeyRecovery = exports.backupKeyRecovery = void 0;
const assert = require("assert");
const _ = require("lodash");
const utxolib = require("@bitgo/utxo-lib");
const { getInternalChainCode, scriptTypeForChain, outputScripts, getExternalChainCode } = utxolib.bitgo;
const unspents_1 = require("@bitgo/unspents");
const sdk_core_1 = require("@bitgo/sdk-core");
const RecoveryProvider_1 = require("./RecoveryProvider");
const mempoolApi_1 = require("./mempoolApi");
const coingeckoApi_1 = require("./coingeckoApi");
const sign_1 = require("../sign");
const utxo_lib_1 = require("@bitgo/utxo-lib");
/**
 * This transforms the txInfo from recover into the format that offline-signing-tool expects
 * @param coinName
 * @param txInfo
 * @param txHex
 * @returns {{txHex: *, txInfo: {unspents: *}, feeInfo: {}, coin: void}}
 */
function formatForOfflineVault(coinName, txInfo, txHex) {
    return {
        txHex,
        txInfo: {
            unspents: txInfo.inputs.map((input) => {
                assert(input.valueString);
                return { ...input, valueString: input.valueString };
            }),
        },
        feeInfo: {},
        coin: coinName,
    };
}
/**
 * Get the current market price from a third party to be used for recovery
 * This function is only intended for non-bitgo recovery transactions, when it is necessary
 * to calculate the rough fee needed to pay to Keyternal. We are okay with approximating,
 * because the resulting price of this function only has less than 1 dollar influence on the
 * fee that needs to be paid to Keyternal.
 *
 * See calculateFeeAmount function:  return Math.round(feeAmountUsd / currentPrice * self.getBaseFactor());
 *
 * This end function should not be used as an accurate endpoint, since some coins' prices are missing from the provider
 */
async function getRecoveryMarketPrice(coin) {
    return await new coingeckoApi_1.CoingeckoApi().getUSDPrice(coin.getFamily());
}
/**
 * Calculates the amount (in base units) to pay a KRS provider when building a recovery transaction
 * @param coin
 * @param params
 * @param params.provider {String} the KRS provider that holds the backup key
 * @returns {*}
 */
async function calculateFeeAmount(coin, params) {
    const krsProvider = sdk_core_1.krsProviders[params.provider];
    if (krsProvider === undefined) {
        throw new Error(`no fee structure specified for provider ${params.provider}`);
    }
    if (krsProvider.feeType === 'flatUsd') {
        const feeAmountUsd = krsProvider.feeAmount;
        const currentPrice = await getRecoveryMarketPrice(coin);
        return Math.round((feeAmountUsd / currentPrice) * coin.getBaseFactor());
    }
    else {
        // we can add more fee structures here as needed for different providers, such as percentage of recovery amount
        throw new Error('Fee structure not implemented');
    }
}
function getFormattedAddress(coin, address) {
    // Blockchair uses cashaddr format when querying the API for address information. Convert legacy addresses to cashaddr
    // before querying the API.
    return coin.getChain() === 'bch' || coin.getChain() === 'bcha'
        ? coin.canonicalAddress(address.address, 'cashaddr').split(':')[1]
        : address.address;
}
async function queryBlockchainUnspentsPath(coin, params, walletKeys, chain) {
    var _a;
    const scriptType = scriptTypeForChain(chain);
    const fetchPrevTx = !utxolib.bitgo.outputScripts.hasWitnessData(scriptType) && (0, utxo_lib_1.getMainnet)(coin.network) !== utxo_lib_1.networks.zcash;
    const recoveryProvider = (_a = params.recoveryProvider) !== null && _a !== void 0 ? _a : (0, RecoveryProvider_1.forCoin)(coin.getChain(), params.apiKey);
    const MAX_SEQUENTIAL_ADDRESSES_WITHOUT_TXS = params.scan || 20;
    let numSequentialAddressesWithoutTxs = 0;
    const prevTxCache = new Map();
    async function getPrevTx(txid) {
        let prevTxHex = prevTxCache.get(txid);
        if (!prevTxHex) {
            prevTxHex = await recoveryProvider.getTransactionHex(txid);
            prevTxCache.set(txid, prevTxHex);
        }
        return prevTxHex;
    }
    async function gatherUnspents(addrIndex) {
        const walletKeysForUnspent = walletKeys.deriveForChainAndIndex(chain, addrIndex);
        const address = coin.createMultiSigAddress(scriptType, 2, walletKeysForUnspent.publicKeys);
        const formattedAddress = getFormattedAddress(coin, address);
        const addrInfo = await recoveryProvider.getAddressInfo(formattedAddress);
        // we use txCount here because it implies usage - having tx'es means the addr was generated and used
        if (addrInfo.txCount === 0) {
            numSequentialAddressesWithoutTxs++;
        }
        else {
            numSequentialAddressesWithoutTxs = 0;
            if (addrInfo.balance > 0) {
                console.log(`Found an address with balance: ${address.address} with balance ${addrInfo.balance}`);
                const addressUnspents = await recoveryProvider.getUnspentsForAddresses([formattedAddress]);
                const processedUnspents = await Promise.all(addressUnspents.map(async (u) => {
                    const { txid, vout } = utxolib.bitgo.parseOutputId(u.id);
                    let val = BigInt(u.value);
                    if (coin.amountType === 'bigint') {
                        // blockchair returns the number with the correct precision, but in number format
                        // json parse won't parse it correctly, so we requery the txid for the tx hex to decode here
                        if (!Number.isSafeInteger(u.value)) {
                            const txHex = await getPrevTx(txid);
                            const tx = coin.createTransactionFromHex(txHex);
                            val = tx.outs[vout].value;
                        }
                    }
                    // the api may return cashaddr's instead of legacy for BCH and BCHA
                    // downstream processes's only expect legacy addresses
                    u = { ...u, address: coin.canonicalAddress(u.address) };
                    return {
                        ...u,
                        value: val,
                        chain: chain,
                        index: addrIndex,
                        prevTx: fetchPrevTx ? Buffer.from(await getPrevTx(txid), 'hex') : undefined,
                    };
                }));
                walletUnspents.push(...processedUnspents);
            }
        }
        if (numSequentialAddressesWithoutTxs >= MAX_SEQUENTIAL_ADDRESSES_WITHOUT_TXS) {
            // stop searching for addresses with unspents in them, we've found ${MAX_SEQUENTIAL_ADDRESSES_WITHOUT_TXS} in a row with none
            // we are done
            return;
        }
        return gatherUnspents(addrIndex + 1);
    }
    // get unspents for these addresses
    const walletUnspents = [];
    // This will populate walletAddresses
    await gatherUnspents(0);
    if (walletUnspents.length === 0) {
        // Couldn't find any addresses with funds
        return [];
    }
    return walletUnspents;
}
async function getRecoveryFeePerBytes(coin, { defaultValue }) {
    try {
        return await mempoolApi_1.MempoolApi.forCoin(coin.getChain()).getRecoveryFeePerBytes();
    }
    catch (e) {
        console.dir(e);
        return defaultValue;
    }
}
/**
 * Builds a funds recovery transaction without BitGo.
 *
 * Returns transaction hex in legacy format for unsigned sweep transaction, half signed backup recovery transaction with KRS provider (only keyternal),
 * fully signed backup recovery transaction without a KRS provider.
 *
 * Returns PSBT hex for half signed backup recovery transaction with KRS provider (excluding keyternal)
 * For PSBT hex cases, Unspents are not required in response.
 *
 * @param coin
 * @param bitgo
 * @param params
 * - userKey: [encrypted] xprv, or xpub
 * - backupKey: [encrypted] xprv, or xpub if the xprv is held by a KRS provider
 * - walletPassphrase: necessary if one of the xprvs is encrypted
 * - bitgoKey: xpub
 * - krsProvider: necessary if backup key is held by KRS
 * - recoveryDestination: target address to send recovered funds to
 * - scan: the amount of consecutive addresses without unspents to scan through before stopping
 * - ignoreAddressTypes: (optional) scripts to ignore
 *        for example: ['p2shP2wsh', 'p2wsh'] will prevent code from checking for wrapped-segwit and native-segwit chains on the public block explorers
 */
async function backupKeyRecovery(coin, bitgo, params) {
    if (_.isUndefined(params.userKey)) {
        throw new Error('missing userKey');
    }
    if (_.isUndefined(params.backupKey)) {
        throw new Error('missing backupKey');
    }
    if (_.isUndefined(params.recoveryDestination) ||
        !coin.isValidAddress(params.recoveryDestination, { anyFormat: true })) {
        throw new Error('invalid recoveryDestination');
    }
    if (!_.isUndefined(params.scan) && (!_.isInteger(params.scan) || params.scan < 0)) {
        throw new Error('scan must be a positive integer');
    }
    const isKrsRecovery = (0, sdk_core_1.getIsKrsRecovery)(params);
    const isUnsignedSweep = (0, sdk_core_1.getIsUnsignedSweep)(params);
    const responseTxFormat = isUnsignedSweep || !isKrsRecovery || params.krsProvider === 'keyternal' ? 'legacy' : 'psbt';
    const krsProvider = isKrsRecovery ? (0, sdk_core_1.getKrsProvider)(coin, params.krsProvider) : undefined;
    // check whether key material and password authenticate the users and return parent keys of all three keys of the wallet
    const keys = (0, sdk_core_1.getBip32Keys)(bitgo, params, { requireBitGoXpub: true });
    if (!(0, sdk_core_1.isTriple)(keys)) {
        throw new Error(`expected key triple`);
    }
    const walletKeys = new utxolib.bitgo.RootWalletKeys(keys, [
        params.userKeyPath || utxolib.bitgo.RootWalletKeys.defaultPrefix,
        utxolib.bitgo.RootWalletKeys.defaultPrefix,
        utxolib.bitgo.RootWalletKeys.defaultPrefix,
    ]);
    const unspents = (await Promise.all(outputScripts.scriptTypes2Of3
        .filter((addressType) => { var _a; return coin.supportsAddressType(addressType) && !((_a = params.ignoreAddressTypes) === null || _a === void 0 ? void 0 : _a.includes(addressType)); })
        .reduce((queries, addressType) => [
        ...queries,
        queryBlockchainUnspentsPath(coin, params, walletKeys, getExternalChainCode(addressType)),
        queryBlockchainUnspentsPath(coin, params, walletKeys, getInternalChainCode(addressType)),
    ], []))).flat();
    // Execute the queries and gather the unspents
    const totalInputAmount = utxolib.bitgo.unspentSum(unspents, 'bigint');
    if (totalInputAmount <= BigInt(0)) {
        throw new sdk_core_1.ErrorNoInputToRecover();
    }
    // Build the psbt
    const psbt = utxolib.bitgo.createPsbtForNetwork({ network: coin.network });
    // xpubs can become handy for many things.
    utxolib.bitgo.addXpubsToPsbt(psbt, walletKeys);
    const txInfo = {};
    const feePerByte = await getRecoveryFeePerBytes(coin, { defaultValue: 100 });
    // KRS recovery transactions have a 2nd output to pay the recovery fee, like paygo fees. Use p2wsh outputs because
    // they are the largest outputs and thus the most conservative estimate to use in calculating fees. Also use
    // segwit overhead size and p2sh inputs for the same reason.
    const outputSize = (isKrsRecovery ? 2 : 1) * unspents_1.VirtualSizes.txP2wshOutputSize;
    const approximateSize = unspents_1.VirtualSizes.txSegOverheadVSize + outputSize + unspents_1.VirtualSizes.txP2shInputSize * unspents.length;
    const approximateFee = BigInt(approximateSize * feePerByte);
    txInfo.inputs =
        responseTxFormat === 'legacy'
            ? unspents.map((u) => ({ ...u, value: Number(u.value), valueString: u.value.toString(), prevTx: undefined }))
            : undefined;
    unspents.forEach((unspent) => {
        utxolib.bitgo.addWalletUnspentToPsbt(psbt, unspent, walletKeys, 'user', 'backup');
    });
    let krsFee = BigInt(0);
    if (isKrsRecovery && params.krsProvider) {
        try {
            krsFee = BigInt(await calculateFeeAmount(coin, { provider: params.krsProvider }));
        }
        catch (err) {
            // Don't let this error block the recovery -
            console.dir(err);
        }
    }
    const recoveryAmount = totalInputAmount - approximateFee - krsFee;
    if (recoveryAmount < BigInt(0)) {
        throw new Error(`this wallet\'s balance is too low to pay the fees specified by the KRS provider. 
          Existing balance on wallet: ${totalInputAmount.toString()}. Estimated network fee for the recovery transaction
          : ${approximateFee.toString()}, KRS fee to pay: ${krsFee.toString()}. After deducting fees, your total 
          recoverable balance is ${recoveryAmount.toString()}`);
    }
    const recoveryOutputScript = utxolib.address.toOutputScript(params.recoveryDestination, coin.network);
    psbt.addOutput({ script: recoveryOutputScript, value: recoveryAmount });
    if (krsProvider && krsFee > BigInt(0)) {
        if (!krsProvider.feeAddresses) {
            throw new Error(`keyProvider must define feeAddresses`);
        }
        const krsFeeAddress = krsProvider.feeAddresses[coin.getChain()];
        if (!krsFeeAddress) {
            throw new Error('this KRS provider has not configured their fee structure yet - recovery cannot be completed');
        }
        const krsFeeOutputScript = utxolib.address.toOutputScript(krsFeeAddress, coin.network);
        psbt.addOutput({ script: krsFeeOutputScript, value: krsFee });
    }
    if (isUnsignedSweep) {
        // TODO BTC-317 - When ready to PSBTify OVC, send psbt hex and skip unspents in response.
        const txHex = psbt.getUnsignedTx().toBuffer().toString('hex');
        return formatForOfflineVault(coin.getChain(), txInfo, txHex);
    }
    else {
        (0, sign_1.signAndVerifyPsbt)(psbt, walletKeys.user, { isLastSignature: false });
        if (isKrsRecovery) {
            // The KRS provider keyternal solely supports P2SH, P2WSH, and P2SH-P2WSH input script types.
            // It currently uses an outdated BitGoJS SDK, which relies on a legacy transaction builder for cosigning.
            // Unfortunately, upgrading the keyternal code presents challenges,
            // which hinders the integration of the latest BitGoJS SDK with PSBT signing support.
            txInfo.transactionHex =
                params.krsProvider === 'keyternal'
                    ? utxolib.bitgo.extractP2msOnlyHalfSignedTx(psbt).toBuffer().toString('hex')
                    : psbt.toHex();
        }
        else {
            const tx = (0, sign_1.signAndVerifyPsbt)(psbt, walletKeys.backup, { isLastSignature: true });
            txInfo.transactionHex = tx.toBuffer().toString('hex');
        }
    }
    if (isKrsRecovery) {
        txInfo.coin = coin.getChain();
        txInfo.backupKey = params.backupKey;
        txInfo.recoveryAmount = Number(recoveryAmount);
        txInfo.recoveryAmountString = recoveryAmount.toString();
    }
    return txInfo;
}
exports.backupKeyRecovery = backupKeyRecovery;
async function v1BackupKeyRecovery(coin, bitgo, params) {
    if (_.isUndefined(params.recoveryDestination) ||
        !coin.isValidAddress(params.recoveryDestination, { anyFormat: true })) {
        throw new Error('invalid recoveryDestination');
    }
    const recoveryFeePerByte = await getRecoveryFeePerBytes(coin, { defaultValue: 100 });
    const v1wallet = await bitgo.wallets().get({ id: params.walletId });
    return await v1wallet.recover({
        ...params,
        feeRate: recoveryFeePerByte,
    });
}
exports.v1BackupKeyRecovery = v1BackupKeyRecovery;
//# sourceMappingURL=data:application/json;base64,