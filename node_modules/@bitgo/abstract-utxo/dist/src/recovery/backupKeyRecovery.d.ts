/**
 * @prettier
 */
import * as utxolib from '@bitgo/utxo-lib';
declare type WalletUnspent<TNumber extends number | bigint> = utxolib.bitgo.WalletUnspent<TNumber>;
declare type WalletUnspentJSON = utxolib.bitgo.WalletUnspent & {
    valueString: string;
};
declare type ScriptType2Of3 = utxolib.bitgo.outputScripts.ScriptType2Of3;
import { BitGoBase } from '@bitgo/sdk-core';
import { AbstractUtxoCoin } from '../abstractUtxoCoin';
import { RecoveryProvider } from './RecoveryProvider';
export interface OfflineVaultTxInfo {
    inputs: WalletUnspent<number>[];
}
export interface FormattedOfflineVaultTxInfo {
    txInfo: {
        unspents: WalletUnspentJSON[];
    };
    txHex: string;
    feeInfo: Record<string, never>;
    coin: string;
}
export interface RecoverParams {
    scan?: number;
    userKey: string;
    backupKey: string;
    bitgoKey: string;
    recoveryDestination: string;
    krsProvider?: string;
    ignoreAddressTypes: ScriptType2Of3[];
    walletPassphrase?: string;
    apiKey?: string;
    userKeyPath?: string;
    recoveryProvider?: RecoveryProvider;
}
export declare type BackupKeyRecoveryTransansaction = {
    inputs?: WalletUnspent<number>[];
    transactionHex: string;
    coin: string;
    backupKey: string;
    recoveryAmount: number;
    recoveryAmountString: string;
};
/**
 * Builds a funds recovery transaction without BitGo.
 *
 * Returns transaction hex in legacy format for unsigned sweep transaction, half signed backup recovery transaction with KRS provider (only keyternal),
 * fully signed backup recovery transaction without a KRS provider.
 *
 * Returns PSBT hex for half signed backup recovery transaction with KRS provider (excluding keyternal)
 * For PSBT hex cases, Unspents are not required in response.
 *
 * @param coin
 * @param bitgo
 * @param params
 * - userKey: [encrypted] xprv, or xpub
 * - backupKey: [encrypted] xprv, or xpub if the xprv is held by a KRS provider
 * - walletPassphrase: necessary if one of the xprvs is encrypted
 * - bitgoKey: xpub
 * - krsProvider: necessary if backup key is held by KRS
 * - recoveryDestination: target address to send recovered funds to
 * - scan: the amount of consecutive addresses without unspents to scan through before stopping
 * - ignoreAddressTypes: (optional) scripts to ignore
 *        for example: ['p2shP2wsh', 'p2wsh'] will prevent code from checking for wrapped-segwit and native-segwit chains on the public block explorers
 */
export declare function backupKeyRecovery(coin: AbstractUtxoCoin, bitgo: BitGoBase, params: RecoverParams): Promise<BackupKeyRecoveryTransansaction | FormattedOfflineVaultTxInfo>;
interface BitGoV1Unspent {
    value: number;
    tx_hash: string;
    tx_output_n: number;
}
export interface V1RecoverParams {
    walletId: string;
    walletPassphrase: string;
    unspents: BitGoV1Unspent[];
    recoveryDestination: string;
    userKey: string;
    backupKey: string;
}
export declare function v1BackupKeyRecovery(coin: AbstractUtxoCoin, bitgo: BitGoBase, params: V1RecoverParams): Promise<string>;
export {};
//# sourceMappingURL=backupKeyRecovery.d.ts.map