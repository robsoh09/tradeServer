import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { proto } from '@hashgraph/proto';
import { BaseKey } from '@bitgo/sdk-core';
import { Recipient } from './iface';
import { TransactionBuilder } from './transactionBuilder';
import { Transaction } from './transaction';
export declare class TransferBuilder extends TransactionBuilder {
    protected readonly _txBodyData: proto.CryptoTransferTransactionBody;
    protected _recipients: Recipient[];
    constructor(_coinConfig: Readonly<CoinConfig>);
    /** @inheritdoc */
    protected buildImplementation(): Promise<Transaction>;
    /** @inheritdoc */
    protected signImplementation(key: BaseKey): Transaction;
    /**
     * Set the recipient to be transferred
     *
     * @param {Recipient} recipient - recipient to transfer consisting destination address and amount
     * @returns {TransferBuilder} - The builder with the new parameter set
     */
    send(recipient: Recipient): this;
    validateMandatoryFields(): void;
}
//# sourceMappingURL=transferBuilder.d.ts.map