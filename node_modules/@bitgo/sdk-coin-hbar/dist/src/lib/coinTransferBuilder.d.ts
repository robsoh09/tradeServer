import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { proto } from '@hashgraph/proto';
import { Recipient } from './iface';
import { TransferBuilder } from './transferBuilder';
import { Transaction } from './transaction';
export declare class CoinTransferBuilder extends TransferBuilder {
    private _toAddress;
    private _amount;
    constructor(_coinConfig: Readonly<CoinConfig>);
    /** @inheritdoc */
    protected buildImplementation(): Promise<Transaction>;
    private buildTransferData;
    /** @inheritdoc */
    initBuilder(tx: Transaction): void;
    /**
     * Initialize the transfer specific data, getting the recipient account
     * represented by the element with a positive amount on the transfer element.
     * The negative amount represents the source account, so it's ignored.
     *
     * @param {proto} transfers - Array of objects which contains accountID and transferred amount
     */
    protected initTransfers(transfers: proto.IAccountAmount[]): void;
    /**
     * @deprecated - Use the send method instead
     *
     * Set the destination address where the funds will be sent,
     * it may take the format `'<shard>.<realm>.<account>'` or `'<account>'`
     *
     * @param {string} address - The address to transfer funds to
     * @returns {TransferBuilder} - The builder with the new parameter set
     */
    to(address: string): this;
    /**
     * @deprecated - Use the send method instead
     *
     * Set the amount to be transferred
     *
     * @param {string} amount - Amount to transfer in tinyBars (there are 100,000,000 tinyBars in one Hbar)
     * @returns {TransferBuilder} - The builder with the new parameter set
     */
    amount(amount: string): this;
    /** @inheritdoc */
    send(recipient: Recipient): this;
    /** @inheritdoc */
    validateMandatoryFields(): void;
}
//# sourceMappingURL=coinTransferBuilder.d.ts.map