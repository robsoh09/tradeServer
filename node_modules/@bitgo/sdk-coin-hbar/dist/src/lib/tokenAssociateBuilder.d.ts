import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { BaseKey } from '@bitgo/sdk-core';
import { Transaction } from './transaction';
import { TransactionBuilder } from './transactionBuilder';
export declare class TokenAssociateBuilder extends TransactionBuilder {
    private readonly _txBodyData;
    private _account;
    private _tokenIds;
    constructor(_coinConfig: Readonly<CoinConfig>);
    /** @inheritdoc */
    initBuilder(tx: Transaction): void;
    private initTokenAssociation;
    /** @inheritdoc */
    protected signImplementation(key: BaseKey): Transaction;
    /** @inheritdoc */
    protected buildImplementation(): Promise<Transaction>;
    /** @inheritdoc */
    validateMandatoryFields(): void;
    /**
     * Set account to associate with tokens, defaults to this._source.address value
     *
     * @param {string} accountID - The name of the account to associate to the transaction
     * @returns {TokenAssociateBuilder} - This token association builder
     */
    account(accountID: string): this;
    /**
     * Add a token to associate to the multisig wallet.
     *
     * @param {string} tokenName - The name of the token to associate to the transaction
     * @returns {TokenAssociateBuilder} - This token association builder
     */
    tokens(tokenName: string): this;
    private buildTokenData;
    private buildAccountData;
    private validateAccount;
    private validateToken;
}
//# sourceMappingURL=tokenAssociateBuilder.d.ts.map