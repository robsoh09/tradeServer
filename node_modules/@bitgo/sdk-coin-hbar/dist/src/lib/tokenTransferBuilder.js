"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenTransferBuilder = void 0;
const Long = __importStar(require("long"));
const sdk_core_1 = require("@bitgo/sdk-core");
const transferBuilder_1 = require("./transferBuilder");
const utils_1 = require("./utils");
const bignumber_js_1 = require("bignumber.js");
class TokenTransferBuilder extends transferBuilder_1.TransferBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
    }
    /** @inheritdoc */
    async buildImplementation() {
        this._txBodyData.tokenTransfers = this.buildTokenTransferData(); // set to list by the contract
        return await super.buildImplementation();
    }
    buildTokenTransferData() {
        let tokenTransferAmount = new bignumber_js_1.BigNumber(0); // total send amount for each token
        const tokenId = (0, utils_1.getHederaTokenIdFromName)(this._tokenName);
        const tokenTransferData = [
            {
                accountID: (0, utils_1.buildHederaAccountID)(this._source.address),
                amount: Long.fromInt(0),
            },
        ];
        this._recipients.forEach((recipient) => {
            tokenTransferAmount = tokenTransferAmount.plus(recipient.amount);
            tokenTransferData.push({ accountID: (0, utils_1.buildHederaAccountID)(recipient.address), amount: Long.fromString(recipient.amount) } // recipient
            );
        });
        tokenTransferData[0].amount = Long.fromString(tokenTransferAmount.toString()).negate(); // update sender send amount
        return [
            {
                token: (0, utils_1.buildHederaTokenID)(tokenId),
                transfers: tokenTransferData,
            },
        ];
    }
    /** @inheritdoc */
    initBuilder(tx) {
        super.initBuilder(tx);
        const transferData = tx.txBody.cryptoTransfer;
        if ((0, utils_1.isTokenTransfer)(transferData)) {
            this.initTokenTransfers(transferData.tokenTransfers);
        }
    }
    /**
     * Initialize the transfer specific data, getting the recipient account
     * represented by the element with a positive amount on the transfer element.
     * The negative amount represents the source account so it's ignored.
     *
     * @param {proto.IAccountAmount[]} transfers array of objects which contains accountID and transferred amount
     */
    initTokenTransfers(tokenTransfers) {
        tokenTransfers.forEach((tokenTransfer) => {
            if (!tokenTransfer.token) {
                throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing token id');
            }
            if (!tokenTransfer.transfers) {
                throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing transfer data');
            }
            const token = (0, utils_1.getHederaTokenNameFromId)((0, utils_1.stringifyTokenId)(tokenTransfer.token));
            if (!token) {
                throw new sdk_core_1.BuildTransactionError('Invalid transaction: invalid token id');
            }
            tokenTransfer.transfers.forEach((transferData) => {
                const amount = Long.fromValue(transferData.amount);
                if (amount.isPositive()) {
                    this.send({
                        address: (0, utils_1.stringifyAccountId)(transferData.accountID),
                        amount: amount.toString(),
                        tokenName: token.name,
                    });
                }
            });
        });
    }
    // region Transfer fields
    /** @inheritdoc */
    send(recipient) {
        if (!recipient.tokenName) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid missing token name');
        }
        const tokenId = (0, utils_1.getHederaTokenIdFromName)(recipient.tokenName);
        if (!tokenId) {
            throw new sdk_core_1.InvalidParameterValueError(`Invalid token name: ${recipient.tokenName}`);
        }
        if (this._tokenName && this._tokenName !== recipient.tokenName) {
            throw new sdk_core_1.InvalidParameterValueError(`Invalid token: received ${recipient.tokenName} for ${this._tokenName} tx`);
        }
        this._tokenName = recipient.tokenName;
        return super.send(recipient);
    }
}
exports.TokenTransferBuilder = TokenTransferBuilder;
//# sourceMappingURL=data:application/json;base64,