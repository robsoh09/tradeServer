"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenAssociateBuilder = void 0;
const proto_1 = require("@hashgraph/proto");
const sdk_core_1 = require("@bitgo/sdk-core");
const utils_1 = require("./utils");
const transactionBuilder_1 = require("./transactionBuilder");
const constants_1 = require("./constants");
class TokenAssociateBuilder extends transactionBuilder_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._tokenIds = [];
        this._txBodyData = new proto_1.proto.TokenAssociateTransactionBody();
        this._txBody.tokenAssociate = this._txBodyData;
    }
    /** @inheritdoc */
    initBuilder(tx) {
        super.initBuilder(tx);
        const tokenAssociateAccount = tx.txBody.tokenAssociate;
        if (tokenAssociateAccount && tokenAssociateAccount.tokens) {
            this.initTokenAssociation(tokenAssociateAccount);
        }
    }
    initTokenAssociation(tokenAssociateAccount) {
        tokenAssociateAccount.tokens.forEach((tokenId) => {
            const token = (0, utils_1.stringifyTokenId)(tokenId);
            this.validateToken(token);
            this._tokenIds.push(token);
        });
        if (tokenAssociateAccount.account) {
            const accountId = (0, utils_1.stringifyAccountId)(tokenAssociateAccount.account);
            this.account(accountId);
        }
    }
    /** @inheritdoc */
    signImplementation(key) {
        if (this._multiSignerKeyPairs.length >= constants_1.DEFAULT_SIGNER_NUMBER) {
            throw new sdk_core_1.SigningError('A maximum of ' + constants_1.DEFAULT_SIGNER_NUMBER + ' can sign the transaction.');
        }
        return super.signImplementation(key);
    }
    /** @inheritdoc */
    async buildImplementation() {
        this._txBodyData.tokens = this.buildTokenData();
        this._txBodyData.account = this.buildAccountData();
        this.transaction.setTransactionType(sdk_core_1.TransactionType.AssociatedTokenAccountInitialization);
        return await super.buildImplementation();
    }
    /** @inheritdoc */
    validateMandatoryFields() {
        if (!this._tokenIds || this._tokenIds.length < 1) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing tokens to associate');
        }
        super.validateMandatoryFields();
    }
    /**
     * Set account to associate with tokens, defaults to this._source.address value
     *
     * @param {string} accountID - The name of the account to associate to the transaction
     * @returns {TokenAssociateBuilder} - This token association builder
     */
    account(accountID) {
        this.validateAccount(accountID);
        this._account = accountID;
        return this;
    }
    /**
     * Add a token to associate to the multisig wallet.
     *
     * @param {string} tokenName - The name of the token to associate to the transaction
     * @returns {TokenAssociateBuilder} - This token association builder
     */
    tokens(tokenName) {
        const tokenId = (0, utils_1.getHederaTokenIdFromName)(tokenName);
        if (!tokenId) {
            throw new sdk_core_1.BuildTransactionError('Unsupported token: ' + tokenName);
        }
        this.validateToken(tokenId);
        this._tokenIds.push(tokenId);
        return this;
    }
    buildTokenData() {
        return this._tokenIds.map(utils_1.buildHederaTokenID);
    }
    buildAccountData() {
        let accountId = this._account;
        if (!accountId) {
            accountId = this._source.address;
        }
        return (0, utils_1.buildHederaAccountID)(accountId);
    }
    validateAccount(accountID) {
        if (!(0, utils_1.isValidAddress)(accountID)) {
            throw new sdk_core_1.BuildTransactionError('Unsupported account address: ' + accountID);
        }
    }
    validateToken(tokenId) {
        if (this._tokenIds.includes(tokenId)) {
            throw new sdk_core_1.BuildTransactionError('Repeated token ID: ' + tokenId);
        }
        else if (!(0, utils_1.isValidHederaTokenID)(tokenId)) {
            throw new sdk_core_1.BuildTransactionError('Invalid token ID: ' + tokenId);
        }
    }
}
exports.TokenAssociateBuilder = TokenAssociateBuilder;
//# sourceMappingURL=data:application/json;base64,