import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { proto } from '@hashgraph/proto';
import { Recipient } from './iface';
import { TransferBuilder } from './transferBuilder';
import { Transaction } from './transaction';
export declare class TokenTransferBuilder extends TransferBuilder {
    private _tokenName;
    constructor(_coinConfig: Readonly<CoinConfig>);
    /** @inheritdoc */
    protected buildImplementation(): Promise<Transaction>;
    private buildTokenTransferData;
    /** @inheritdoc */
    initBuilder(tx: Transaction): void;
    /**
     * Initialize the transfer specific data, getting the recipient account
     * represented by the element with a positive amount on the transfer element.
     * The negative amount represents the source account so it's ignored.
     *
     * @param {proto.IAccountAmount[]} transfers array of objects which contains accountID and transferred amount
     */
    protected initTokenTransfers(tokenTransfers: proto.ITokenTransferList[]): void;
    /** @inheritdoc */
    send(recipient: Recipient): this;
}
//# sourceMappingURL=tokenTransferBuilder.d.ts.map