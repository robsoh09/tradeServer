"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.shouldBroadcastNow = exports.sleep = exports.normalizeStarttime = exports.validateStartTime = exports.isTokenTransfer = exports.getHederaTokenNameFromId = exports.getHederaTokenIdFromName = exports.isValidHederaTokenID = exports.buildHederaAccountID = exports.buildHederaTokenID = exports.isValidAddressWithPaymentId = exports.normalizeAddress = exports.getAddressDetails = exports.getBaseAddress = exports.isSameBaseAddress = exports.convertFromStellarPub = exports.createRawKey = exports.isValidMemo = exports.removePrefix = exports.stringifyTxTime = exports.stringifyTokenId = exports.stringifyAccountId = exports.isValidRawTransactionFormat = exports.isValidAmount = exports.isValidTimeString = exports.getCurrentTime = exports.isNodeEnvironment = exports.isValidPublicKey = exports.isValidTransactionId = exports.isValidAddress = exports.toUint8Array = exports.toHex = void 0;
const _ = __importStar(require("lodash"));
const sdk_1 = require("@hashgraph/sdk");
const proto_1 = require("@hashgraph/proto");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const stellar = __importStar(require("stellar-sdk"));
const url_1 = __importDefault(require("url"));
const sdk_core_1 = require("@bitgo/sdk-core");
Object.defineProperty(exports, "toHex", { enumerable: true, get: function () { return sdk_core_1.toHex; } });
Object.defineProperty(exports, "toUint8Array", { enumerable: true, get: function () { return sdk_core_1.toUint8Array; } });
const statics_1 = require("@bitgo/statics");
const MAX_TINYBARS_AMOUNT = new bignumber_js_1.default(2).pow(63).minus(1);
/**
 * Returns whether the string is a valid Hedera account address
 *
 * In any form, `shard` and `realm` are assumed to be 0 if not provided.
 *
 * @param {string} address - The address to be validated
 * @returns {boolean} - The validation result
 */
function isValidAddress(address) {
    if (_.isEmpty(address) || !address.match(/^\d+(?:(?=\.)(\.\d+){2}|(?!\.))$/)) {
        return false;
    }
    try {
        const acc = sdk_1.AccountId.fromString(address);
        return !_.isNaN(acc.num);
    }
    catch (e) {
        return false;
    }
}
exports.isValidAddress = isValidAddress;
/**
 * Returns whether the string is a valid Hedera transaction id
 *
 * @param {string} txId - The transaction id to be validated
 * @returns {boolean} - The validation result
 */
function isValidTransactionId(txId) {
    if (_.isEmpty(txId)) {
        return false;
    }
    try {
        const tx = sdk_1.TransactionId.fromString(txId);
        if (_.isNil(tx.accountId)) {
            return false;
        }
        return !_.isNaN(tx.accountId.num);
    }
    catch (e) {
        return false;
    }
}
exports.isValidTransactionId = isValidTransactionId;
/**
 Returns whether the string is a valid Hedera public key
 *
 * @param {string} key - The public key to be validated
 * @returns {boolean} - The validation result
 */
function isValidPublicKey(key) {
    if (_.isEmpty(key)) {
        return false;
    }
    try {
        const pubKey = sdk_1.PublicKey.fromString(key.toLowerCase());
        return !_.isNaN(pubKey.toString());
    }
    catch (e) {
        return false;
    }
}
exports.isValidPublicKey = isValidPublicKey;
/**
 * Checks whether nodeJS.process exist and if a node version is defined to determine if this is an nodeJS environment
 *
 * @returns {boolean} - The validation result
 */
function isNodeEnvironment() {
    return typeof process !== 'undefined' && typeof process.versions.node !== 'undefined';
}
exports.isNodeEnvironment = isNodeEnvironment;
/**
 * Calculate the current time with nanoseconds precision
 *
 * @returns {string} - The current time in seconds
 */
function getCurrentTime() {
    if (isNodeEnvironment()) {
        const nanos = process.hrtime()[1];
        const seconds = (Date.now() * 1000000 + nanos) / 1000000000;
        return seconds.toFixed(9);
    }
    else {
        return (performance.timeOrigin + performance.now()).toFixed(9);
    }
}
exports.getCurrentTime = getCurrentTime;
/**
 * Returns whether the string is a valid timestamp
 *
 * Nanoseconds are optional and can be passed after a dot, for example: 1595374723.356981689
 *
 * @param {string} time - The timestamp to be validated
 * @returns {boolean} - The validation result
 */
function isValidTimeString(time) {
    return /^\d+(\.\d+)?$/.test(time);
}
exports.isValidTimeString = isValidTimeString;
/**
 * Returns whether the string is a valid amount number
 *
 * @param {string} amount - The string to validate
 * @returns {boolean} - The validation result
 */
function isValidAmount(amount) {
    const bigNumberAmount = new bignumber_js_1.default(amount);
    return (bigNumberAmount.isInteger() &&
        bigNumberAmount.isGreaterThanOrEqualTo(0) &&
        bigNumberAmount.isLessThanOrEqualTo(MAX_TINYBARS_AMOUNT));
}
exports.isValidAmount = isValidAmount;
/**
 * Returns whether the provided raw transaction accommodates to bitgo's preferred format
 *
 * @param {any} rawTransaction - The raw transaction to be checked
 * @returns {boolean} - The validation result
 */
function isValidRawTransactionFormat(rawTransaction) {
    const isAlphaNumeric = typeof rawTransaction === 'string' && /^[\da-fA-F]+$/.test(rawTransaction);
    const isValidBuffer = Buffer.isBuffer(rawTransaction) && !!Uint8Array.from(rawTransaction);
    return isAlphaNumeric || isValidBuffer;
}
exports.isValidRawTransactionFormat = isValidRawTransactionFormat;
/**
 * Returns a string representation of an {proto.IAccountID} object
 *
 * @param {proto.IAccountID} accountId - Account id to be cast to string
 * @returns {string} - The string representation of the {proto.IAccountID}
 */
function stringifyAccountId({ shardNum, realmNum, accountNum }) {
    return `${shardNum || 0}.${realmNum || 0}.${accountNum}`;
}
exports.stringifyAccountId = stringifyAccountId;
/**
 * Returns a string representation of an {proto.ITokenID} object
 *
 * @param {proto.ITokenID} - token id to be cast to string
 * @returns {string} - the string representation of the {proto.ITokenID}
 */
function stringifyTokenId({ shardNum, realmNum, tokenNum }) {
    return `${shardNum || 0}.${realmNum || 0}.${tokenNum}`;
}
exports.stringifyTokenId = stringifyTokenId;
/**
 * Returns a string representation of an {proto.ITimestamp} object
 *
 * @param {proto.ITimestamp} timestamp - Timestamp to be cast to string
 * @returns {string} - The string representation of the {proto.ITimestamp}
 */
function stringifyTxTime({ seconds, nanos }) {
    return `${seconds}.${nanos}`;
}
exports.stringifyTxTime = stringifyTxTime;
/**
 * Remove the specified prefix from a string only if it starts with that prefix
 *
 * @param {string} prefix - The prefix to be removed
 * @param {string} key - The original string, usually a private or public key
 * @returns {string} - The string without prefix
 */
function removePrefix(prefix, key) {
    if (key.startsWith(prefix)) {
        return key.slice(prefix.length);
    }
    return key;
}
exports.removePrefix = removePrefix;
/**
 * Check if this is a valid memo
 *
 * @param {string} memo
 * @returns {boolean}
 */
function isValidMemo(memo) {
    return !(_.isEmpty(memo) || Buffer.from(memo).length > 100);
}
exports.isValidMemo = isValidMemo;
/**
 * Uses the native hashgraph SDK function to get a raw key.
 *
 * @param {string} prv - Private key
 * @returns {PrivateKey}
 */
function createRawKey(prv) {
    return sdk_1.PrivateKey.fromString(prv);
}
exports.createRawKey = createRawKey;
/**
 * Converts a stellar public key to ed25519 hex format
 *
 * @param {string} stellarPub
 * @returns {string}
 */
function convertFromStellarPub(stellarPub) {
    if (!stellar.StrKey.isValidEd25519PublicKey(stellarPub)) {
        throw new Error('Not a valid stellar pub.');
    }
    const rawKey = stellar.StrKey.decodeEd25519PublicKey(stellarPub);
    return rawKey.toString('hex');
}
exports.convertFromStellarPub = convertFromStellarPub;
/**
 * Checks if two addresses have the same base address
 *
 * @param {String} address
 * @param {String} baseAddress
 * @returns {boolean}
 */
function isSameBaseAddress(address, baseAddress) {
    if (!isValidAddressWithPaymentId(address)) {
        throw new sdk_core_1.UtilsError(`invalid address: ${address}`);
    }
    return getBaseAddress(address) === getBaseAddress(baseAddress);
}
exports.isSameBaseAddress = isSameBaseAddress;
/**
 * Returns the base address portion of an address
 *
 * @param {String} address
 * @returns {String} - the base address
 */
function getBaseAddress(address) {
    const addressDetails = getAddressDetails(address);
    return addressDetails.address;
}
exports.getBaseAddress = getBaseAddress;
/**
 * Process address into address and memo id
 *
 * @param {string} rawAddress
 * @returns {AddressDetails} - object containing address and memo id
 */
function getAddressDetails(rawAddress) {
    const addressDetails = url_1.default.parse(rawAddress);
    const queryDetails = addressDetails.query ? new URLSearchParams(addressDetails.query) : undefined;
    const baseAddress = addressDetails.pathname;
    if (!isValidAddress(baseAddress)) {
        throw new sdk_core_1.UtilsError(`invalid address: ${rawAddress}`);
    }
    // address doesn't have a memo id or memoId is empty
    if (baseAddress === rawAddress) {
        return {
            address: rawAddress,
            memoId: undefined,
        };
    }
    if (!queryDetails || _.isNil(queryDetails.get('memoId'))) {
        // if there are more properties, the query details need to contain the memo id property
        throw new sdk_core_1.UtilsError(`invalid address with memo id: ${rawAddress}`);
    }
    const memoId = queryDetails.get('memoId');
    if (!isValidMemo(memoId)) {
        throw new sdk_core_1.UtilsError(`invalid address: '${rawAddress}', memoId is not valid`);
    }
    return {
        address: baseAddress,
        memoId,
    };
}
exports.getAddressDetails = getAddressDetails;
/**
 * Validate and return address with appended memo id
 *
 * @param {AddressDetails} addressDetails - Address which to append memo id
 * @returns {string} - Address with appended memo id
 */
function normalizeAddress({ address, memoId }) {
    if (memoId && isValidMemo(memoId)) {
        return `${address}?memoId=${memoId}`;
    }
    return address;
}
exports.normalizeAddress = normalizeAddress;
/**
 * Return boolean indicating whether input is a valid address with memo id
 *
 * @param {string} address - Address in the form <address>?memoId=<memoId>
 * @returns {boolean} - True if input is a valid address
 */
function isValidAddressWithPaymentId(address) {
    try {
        const addressDetails = getAddressDetails(address);
        return address === normalizeAddress(addressDetails);
    }
    catch (e) {
        return false;
    }
}
exports.isValidAddressWithPaymentId = isValidAddressWithPaymentId;
/**
 * Build hedera {proto.TokenID} object from token ID string
 *
 * @param {string} tokenID - The token ID to build
 * @returns {proto.TokenID} - The resulting proto TokenID object
 */
function buildHederaTokenID(tokenID) {
    const tokenData = sdk_1.TokenId.fromString(tokenID);
    return new proto_1.proto.TokenID({
        tokenNum: tokenData.num,
        realmNum: tokenData.realm,
        shardNum: tokenData.shard,
    });
}
exports.buildHederaTokenID = buildHederaTokenID;
/**
 * Build hedera {proto.AccountID} object from account ID string
 *
 * @param {string} accountID - The account ID to build
 * @returns {proto} - The resulting proto AccountID object
 */
function buildHederaAccountID(accountID) {
    const accountId = sdk_1.AccountId.fromString(accountID);
    return new proto_1.proto.AccountID({
        shardNum: accountId.shard,
        realmNum: accountId.realm,
        accountNum: accountId.num,
    });
}
exports.buildHederaAccountID = buildHederaAccountID;
/**
 * Check if Hedera token ID is valid and supported
 *
 * @param {string} tokenId - The token ID to validate
 * @returns {boolean} - True if tokenId is valid and supported
 */
function isValidHederaTokenID(tokenId) {
    const isFormatValid = !_.isEmpty(tokenId) && !!tokenId.match(/^\d+(?:(?=\.)(\.\d+){2}|(?!\.))$/);
    const isTokenSupported = getHederaTokenNameFromId(tokenId) !== undefined;
    return isFormatValid && isTokenSupported;
}
exports.isValidHederaTokenID = isValidHederaTokenID;
/**
 * Get the associated hedera token ID from token name, if supported
 *
 * @param {string} tokenName - The hedera token name
 * @returns {boolean} - The associated token ID or undefined if not supported
 */
function getHederaTokenIdFromName(tokenName) {
    if (statics_1.coins.has(tokenName)) {
        const token = statics_1.coins.get(tokenName);
        if (token.isToken && token instanceof statics_1.HederaToken) {
            return token.tokenId;
        }
    }
    return undefined;
}
exports.getHederaTokenIdFromName = getHederaTokenIdFromName;
/**
 * Get the associated hedera token from token ID, if supported
 *
 * @param tokenId - The token address
 * @returns {BaseCoin} - BaseCoin object for the matching token
 */
function getHederaTokenNameFromId(tokenId) {
    const tokensArray = statics_1.coins
        .filter((coin) => {
        return coin instanceof statics_1.HederaToken && coin.tokenId === tokenId;
    })
        .map((token) => token); // flatten coin map to array
    return tokensArray.length > 0 ? tokensArray[0] : undefined;
}
exports.getHederaTokenNameFromId = getHederaTokenNameFromId;
/**
 * Return boolean indicating whether input is a valid token transfer transaction
 *
 * @param {proto.ICryptoTransferTransactionBody | null} transferTxBody is a transfer transaction body
 * @returns {boolean} true is input is a valid token transfer transaction
 */
function isTokenTransfer(transferTxBody) {
    return !!transferTxBody && !!transferTxBody.tokenTransfers && transferTxBody.tokenTransfers.length > 0;
}
exports.isTokenTransfer = isTokenTransfer;
/** validates a startTime string to be a valid timestamp and in the future
 * @param {string} startTime - The startTime to be validated
 * @throws {Error} - if startTime is not a valid timestamp or is in the past
 * @returns {void}
 * */
function validateStartTime(startTime) {
    if (!isValidTimeString(startTime)) {
        throw new Error('invalid startTime, got: ' + startTime);
    }
    const currentTime = getCurrentTime();
    const startTimeFixed = normalizeStarttime(startTime);
    const result = new bignumber_js_1.default(startTimeFixed).isLessThanOrEqualTo(currentTime);
    if (result) {
        throw new Error('startTime must be a future timestamp, got: ' + startTime);
    }
}
exports.validateStartTime = validateStartTime;
function normalizeStarttime(startTime) {
    return new bignumber_js_1.default(startTime).toFixed(9);
}
exports.normalizeStarttime = normalizeStarttime;
/**
 * Await for a given amount of time in milliseconds
 * @param ms - The amount of time to wait in milliseconds
 * @returns {Promise<void>} - A promise that resolves after the given amount of time
 */
function sleep(ms) {
    console.log(`sleeping for ${ms} ms`);
    return new Promise((resolve) => setTimeout(resolve, ms));
}
exports.sleep = sleep;
/**
 * Check if the startTime is within the broadcast window (5 seconds after and 175 seconds after the startTime)
 */
function shouldBroadcastNow(startTime) {
    const startTimeFixed = normalizeStarttime(startTime);
    const currentTime = getCurrentTime();
    // startTime plus 5 seconds
    const startingTimeWindow = new bignumber_js_1.default(startTimeFixed).plus(5).toFixed(9);
    // startTime plus 170 seconds
    const endingTimeWindow = new bignumber_js_1.default(startTimeFixed).plus(175).toFixed(9);
    if (new bignumber_js_1.default(currentTime).isGreaterThan(endingTimeWindow)) {
        throw new Error('startTime window expired, got: ' +
            startTimeFixed +
            ' - currentTime: ' +
            currentTime +
            ' - endingTimeWindow ' +
            endingTimeWindow);
    }
    return (new bignumber_js_1.default(currentTime).isGreaterThanOrEqualTo(startingTimeWindow) &&
        new bignumber_js_1.default(currentTime).isLessThanOrEqualTo(endingTimeWindow));
}
exports.shouldBroadcastNow = shouldBroadcastNow;
//# sourceMappingURL=data:application/json;base64,