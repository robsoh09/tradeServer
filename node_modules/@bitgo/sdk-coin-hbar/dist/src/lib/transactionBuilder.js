"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const Long = __importStar(require("long"));
const proto_1 = require("@hashgraph/proto");
const sdk_core_1 = require("@bitgo/sdk-core");
const transaction_1 = require("./transaction");
const utils_1 = require("./utils");
const keyPair_1 = require("./keyPair");
class TransactionBuilder extends sdk_core_1.BaseTransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._node = { nodeId: '0.0.4' };
        this._duration = new proto_1.proto.Duration({ seconds: Long.fromNumber(180) });
        this._txBody = new proto_1.proto.TransactionBody();
        this._txBody.transactionValidDuration = this._duration;
        this._multiSignerKeyPairs = [];
        this._signatures = [];
        this.transaction = new transaction_1.Transaction(_coinConfig);
    }
    // region Base Builder
    /** @inheritdoc */
    async buildImplementation() {
        this._txBody.nodeAccountID = (0, utils_1.buildHederaAccountID)(this._node.nodeId);
        this._txBody.transactionFee = Long.fromString(this._fee.fee);
        this._txBody.transactionID = this.buildTxId();
        this._txBody.memo = this._memo;
        const hTransaction = this.transaction.hederaTx || new proto_1.proto.Transaction();
        hTransaction.bodyBytes = proto_1.proto.TransactionBody.encode(this._txBody).finish();
        this.transaction.body(hTransaction);
        for (const kp of this._multiSignerKeyPairs) {
            await this.transaction.sign(kp);
        }
        for (const { signature, keyPair } of this._signatures) {
            this.transaction.addSignature(signature, keyPair);
        }
        return this.transaction;
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        const tx = new transaction_1.Transaction(this._coinConfig);
        this.validateRawTransaction(rawTransaction);
        tx.fromRawTransaction(rawTransaction);
        this.initBuilder(tx);
        return this.transaction;
    }
    /** @inheritdoc */
    signImplementation(key) {
        this.checkDuplicatedKeys(key);
        const signer = new keyPair_1.KeyPair({ prv: key.key });
        // Signing the transaction is an operation that relies on all the data being set,
        // so we set the source here and leave the actual signing for the build step
        this._multiSignerKeyPairs.push(signer);
        return this.transaction;
    }
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     *
     * @param {Transaction} tx - the transaction data
     */
    initBuilder(tx) {
        this.transaction = tx;
        this.transaction.loadPreviousSignatures();
        const txData = tx.toJson();
        this.fee({ fee: txData.fee.toString() });
        this.source({ address: txData.from });
        this.startTime(txData.startTime);
        this.node({ nodeId: txData.node });
        this.validDuration(new bignumber_js_1.default(txData.validDuration).toNumber());
        if (txData.memo) {
            this.memo(txData.memo);
        }
    }
    /**
     * Creates a Hedera TransactionID
     *
     * @returns {proto.TransactionID} - Created TransactionID
     */
    buildTxId() {
        return new proto_1.proto.TransactionID({
            transactionValidStart: this.validStart,
            accountID: (0, utils_1.buildHederaAccountID)(this._source.address),
        });
    }
    // endregion
    // region Common builder methods
    /**
     *  Set the memo
     *
     * @param {string} memo - A hedera memo, can be a maximum of 100 bytes
     * @returns {TransactionBuilder} - This transaction builder
     */
    memo(memo) {
        if (Buffer.from(memo).length > 100) {
            throw new sdk_core_1.InvalidParameterValueError('Memo must not be longer than 100 bytes');
        }
        this._memo = memo;
        return this;
    }
    /**
     *  Set the node, it may take the format `'<shard>.<realm>.<account>'` or `'<account>'`
     *
     * @param {HederaNode} node - A hedera node address
     * @returns {TransactionBuilder} - This transaction builder
     */
    node(node) {
        if (!(0, utils_1.isValidAddress)(node.nodeId)) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid Hedera node address');
        }
        this._node = node;
        return this;
    }
    /**
     * Set the transaction valid duration
     *
     * @param {number} validDuration - The transaction valid duration in seconds
     * @returns {TransactionBuilder} - This transaction builder
     */
    validDuration(validDuration) {
        this.validateValue(new bignumber_js_1.default(validDuration));
        this._duration = new proto_1.proto.Duration({ seconds: Long.fromNumber(validDuration) });
        return this;
    }
    /**
     * Set the transaction fees
     *
     * @param {BaseFee} fee - The maximum gas to pay
     * @returns {TransactionBuilder} - This transaction builder
     */
    fee(fee) {
        this.validateValue(new bignumber_js_1.default(fee.fee));
        this._fee = fee;
        return this;
    }
    /**
     * Set the transaction source
     *
     * @param {BaseAddress} address - The source account
     * @returns {TransactionBuilder} - This transaction builder
     */
    source(address) {
        this.validateAddress(address);
        this._source = address;
        return this;
    }
    /**
     * Set an external transaction signature
     *
     * @param {string} signature - Hex encoded signature string
     * @param {KeyPair} keyPair - The public key keypair that was used to create the signature
     * @returns {TransactionBuilder} - Transaction builder
     */
    signature(signature, keyPair) {
        // if we already have a signature for this key pair, just update it
        for (const oldSignature of this._signatures) {
            if (oldSignature.keyPair.getKeys().pub === keyPair.getKeys().pub) {
                oldSignature.signature = signature;
                return this;
            }
        }
        // otherwise add the new signature
        this._signatures.push({ signature, keyPair });
        return this;
    }
    /**
     * Set the start time
     *
     * @param {string} time - String value of the time to set with format <seconds>.<nanos>
     * @returns {TransactionBuilder} - this
     */
    startTime(time) {
        if (!(0, utils_1.isValidTimeString)(time)) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid value for time parameter');
        }
        const timeParts = time.split('.').map((v) => new bignumber_js_1.default(v).toNumber());
        this._startTime = { seconds: Long.fromNumber(timeParts[0]), nanos: timeParts[1] };
        return this;
    }
    // endregion
    // region Getters and Setters
    get validStart() {
        if (!this._startTime) {
            this.startTime((0, utils_1.getCurrentTime)());
        }
        return this._startTime;
    }
    /** @inheritdoc */
    get transaction() {
        return this._transaction;
    }
    /** @inheritdoc */
    set transaction(transaction) {
        this._transaction = transaction;
    }
    // endregion
    // region Validators
    /** @inheritdoc */
    validateAddress(address, addressFormat) {
        if (!(0, utils_1.isValidAddress)(address.address)) {
            throw new sdk_core_1.BuildTransactionError('Invalid address ' + address.address);
        }
    }
    /** @inheritdoc */
    validateKey(key) {
        if (!new keyPair_1.KeyPair({ prv: key.key })) {
            throw new sdk_core_1.BuildTransactionError('Invalid key');
        }
    }
    /** @inheritdoc */
    validateRawTransaction(rawTransaction) {
        if (!(0, utils_1.isValidRawTransactionFormat)(rawTransaction)) {
            throw new sdk_core_1.ParseTransactionError('Invalid raw transaction');
        }
    }
    /** @inheritdoc */
    validateTransaction(transaction) {
        this.validateMandatoryFields();
    }
    /** @inheritdoc */
    validateValue(value) {
        if (value.isLessThan(0)) {
            throw new sdk_core_1.BuildTransactionError('Value cannot be less than zero');
        }
    }
    validateMandatoryFields() {
        if (this._fee === undefined) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing fee');
        }
        if (this._source === undefined) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing source');
        }
    }
    /**
     * Validates that the given key is not already in this._multiSignerKeyPairs
     *
     * @param {BaseKey} key - The key to check
     */
    checkDuplicatedKeys(key) {
        this._multiSignerKeyPairs.forEach((_sourceKeyPair) => {
            if (_sourceKeyPair.getKeys().prv === key.key) {
                throw new sdk_core_1.SigningError('Repeated sign: ' + key.key);
            }
        });
    }
}
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,