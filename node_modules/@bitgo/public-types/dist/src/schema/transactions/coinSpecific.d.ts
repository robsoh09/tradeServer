import * as t from "io-ts";
export declare const CoinSpecificBuildParams: {
    avaxp: {
        locktime: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
        sourceChain: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
        destinationChain: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
        unspents: t.UnionC<[t.Type<string[], string[], unknown>, t.UndefinedC]>;
    };
    dot: {
        sequenceId: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
        senderAddressIndex: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
        nonce: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
        proxyType: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
        forceProxyType: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
        owner: t.UnionC<[t.Type<{}, {}, unknown>, t.UndefinedC]>;
        delay: t.UnionC<[t.Type<{}, {}, unknown>, t.UndefinedC]>;
        index: t.UnionC<[t.Type<{}, {}, unknown>, t.UndefinedC]>;
        validityWindow: t.UnionC<[t.Type<{}, {}, unknown>, t.UndefinedC]>;
        version: t.UnionC<[t.Type<{}, {}, unknown>, t.UndefinedC]>;
        referenceBlock: t.UnionC<[t.Type<{}, {}, unknown>, t.UndefinedC]>;
        consolidateId: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
        senderAddress: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
        type: t.StringC;
        memo: t.PartialC<{
            type: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
            value: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
        }>;
        comment: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
        ledgerSequenceDelta: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
        lastLedgerSequence: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
        feeRate: t.UnionC<[t.Type<string | number, string | number, unknown>, t.UndefinedC]>;
        messageKey: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
        previewPendingTxs: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
        pendingApprovalId: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    };
    sol: {
        tokenName: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    };
};
