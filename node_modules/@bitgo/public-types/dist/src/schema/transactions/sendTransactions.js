"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxSendResponse = exports.TxSendBody = exports.txSendBody = exports.memo = void 0;
const t = __importStar(require("io-ts"));
const utils_1 = require("../../utils");
const coinSpecific_1 = require("./coinSpecific");
const recipient = t.partial({
    address: t.string,
    amount: t.union([t.string, t.number]),
    feeLimit: utils_1.optionalString,
    data: utils_1.optionalString,
    memo: utils_1.optionalString,
    tokenName: utils_1.optionalString,
});
const recipients = t.array(recipient);
const eip1559 = t.partial({
    maxPriorityFeePerGas: utils_1.optionalString,
    maxFeePerGas: utils_1.optionalString,
});
const lightningPaymentRequest = t.intersection([
    t.type({
        invoice: t.string,
    }),
    t.partial({
        amount: t.number,
        sequenceId: t.string,
        feeLimit: t.number,
        feeLimitRatio: t.number,
    }),
]);
const halfSigned = t.partial({
    txHex: utils_1.optionalString,
    recipients: (0, utils_1.Optional)(recipients),
    eip1559: (0, utils_1.Optional)(eip1559),
    isBatch: utils_1.optionalBoolean,
    expireTime: utils_1.optionalNumber,
    contractSequenceId: utils_1.optionalNumber,
    nextContractSequenceId: utils_1.optionalNumber,
    operationHash: utils_1.optionalString,
    signedChildPsbt: utils_1.optionalString,
    signature: utils_1.optionalString,
    lightningPaymentRequest: (0, utils_1.Optional)(lightningPaymentRequest),
});
exports.memo = t.partial({
    type: utils_1.optionalString,
    value: utils_1.optionalString,
});
const feeOptions = {
    amount: utils_1.optionalStringOrNumber,
    unit: (0, utils_1.Optional)(t.union([t.literal("baseUnit"), t.literal("cpu"), t.literal("ram")])),
    formula: (0, utils_1.Optional)(t.union([
        t.literal("fixed"),
        t.literal("feeRate"),
        t.literal("perKB"),
        t.literal("custom"),
    ])),
    type: (0, utils_1.Optional)(t.union([t.literal("base"), t.literal("max"), t.literal("tip")])),
};
exports.txSendBody = {
    comment: utils_1.optionalString,
    consolidateId: utils_1.optionalString,
    halfSigned: (0, utils_1.Optional)(halfSigned),
    invoice: utils_1.optionalString,
    memo: (0, utils_1.Optional)(exports.memo),
    otp: utils_1.optionalString,
    recipients: (0, utils_1.Optional)(recipients),
    suppressBroadcast: utils_1.optionalBoolean,
    txHex: utils_1.optionalString,
    txRequestId: utils_1.optionalString,
    videoApprovers: (0, utils_1.Optional)(t.array(t.string)),
    numBlocks: utils_1.optionalNumber,
    feeRate: utils_1.optionalNumber,
    maxFeeRate: utils_1.optionalNumber,
    minConfirms: utils_1.optionalNumber,
    enforceMinConfirmsForChange: utils_1.optionalBoolean,
    targetWalletUnspents: utils_1.optionalNumber,
    message: utils_1.optionalString,
    minValue: utils_1.optionalStringOrNumber,
    maxValue: utils_1.optionalStringOrNumber,
    sequenceId: utils_1.optionalStringOrNumber,
    lastLedgerSequence: utils_1.optionalNumber,
    ledgerSequenceDelta: utils_1.optionalNumber,
    gasPrice: utils_1.optionalNumber,
    noSplitChange: utils_1.optionalBoolean,
    unspents: t.array(t.string),
    changeAddress: utils_1.optionalString,
    instant: utils_1.optionalBoolean,
    transferId: utils_1.optionalNumber,
    gasLimit: utils_1.optionalNumber,
    custodianTransactionId: utils_1.optionalString,
    cpfpTxIds: (0, utils_1.Optional)(t.array(t.string)),
    cpfpFeeRate: utils_1.optionalNumber,
    noCpfpFeeRate: utils_1.optionalBoolean,
    maxFee: utils_1.optionalNumber,
    noMaxFee: utils_1.optionalBoolean,
    feeMultiplier: utils_1.optionalNumber,
    addressType: utils_1.optionalString,
    changeAddressType: utils_1.optionalString,
    strategy: utils_1.optionalString,
    strategyAllowFallback: utils_1.optionalBoolean,
    fee: t.union([utils_1.optionalString, t.partial(feeOptions)]),
    timeBounds: (0, utils_1.Optional)(t.partial({
        minTime: utils_1.optionalStringOrNumber,
        maxTime: utils_1.optionalStringOrNumber,
    })),
    idfSignedTimestamp: utils_1.optionalString,
    idfVersion: utils_1.optionalNumber,
    idfUserId: utils_1.optionalString,
    hopParams: t.partial({
        gasPriceMax: utils_1.optionalNumber,
        paymentId: utils_1.optionalString,
        userReqSig: utils_1.optionalString,
    }),
    validFromBlock: utils_1.optionalNumber,
    validToBlock: utils_1.optionalNumber,
    type: utils_1.optionalString,
    trustlines: t.partial({
        token: utils_1.optionalString,
        action: utils_1.optionalString,
        limit: utils_1.optionalString,
    }),
    reservation: t.partial({
        expireTime: utils_1.optionalString,
        pendingApprovalId: utils_1.optionalString,
    }),
    delayMs: utils_1.optionalNumber,
    messageKey: utils_1.optionalString,
    senderAddress: utils_1.optionalString,
    startTime: utils_1.optionalString,
    nonParticipation: utils_1.optionalBoolean,
    keyregTxBase64: utils_1.optionalString,
    closeRemainderTo: utils_1.optionalString,
    stateProofKey: utils_1.optionalString,
    contractName: utils_1.optionalString,
    functionName: utils_1.optionalString,
    eip1559: (0, utils_1.Optional)(eip1559),
    maxChangeOutputs: utils_1.optionalNumber,
    smallestChangeSplitSize: utils_1.optionalNumber,
    emergency: utils_1.optionalBoolean,
    sourceChain: utils_1.optionalString,
    destinationChain: utils_1.optionalString,
    txFormat: utils_1.optionalString,
    previewPendingTxs: utils_1.optionalBoolean,
    pendingApprovalId: utils_1.optionalString,
    stakingOptions: utils_1.optionalUnknown,
    unstakingOptions: utils_1.optionalUnknown,
    refundOptions: utils_1.optionalUnknown,
    stakingParams: t.partial({
        actionType: utils_1.optionalString,
        validator: utils_1.optionalString,
        coin: utils_1.optionalString,
        amount: utils_1.optionalString,
    }),
    isReplaceableByFee: utils_1.optionalBoolean,
    rbfTxIds: (0, utils_1.Optional)(t.array(t.string)),
};
exports.TxSendBody = t.exact(t.intersection([
    t.partial(exports.txSendBody, "TxSendBody"),
    t.partial(coinSpecific_1.CoinSpecificBuildParams.avaxp),
    t.partial(coinSpecific_1.CoinSpecificBuildParams.dot),
    t.partial(coinSpecific_1.CoinSpecificBuildParams.sol),
]));
const entry = t.partial({
    address: t.string,
    wallet: t.string,
    value: t.number,
    valueString: t.string,
    isChange: t.boolean,
    isPayGo: t.boolean,
});
const historyItem = t.partial({
    date: t.string,
    action: t.string,
    user: t.string,
});
exports.TxSendResponse = t.partial({
    baseValue: t.number,
    baseValueString: t.string,
    coin: t.string,
    coinSpecific: t.record(t.string, t.unknown),
    createdTime: t.string,
    date: t.string,
    enterprise: t.string,
    entries: t.array(entry),
    feeString: t.string,
    height: t.number,
    heightId: t.string,
    history: t.array(historyItem),
    id: t.string,
    instant: t.boolean,
    intendedValueString: t.string,
    isFee: t.boolean,
    isReward: t.boolean,
    metadata: t.record(t.string, t.unknown),
    payGoFee: t.number,
    payGoFeeString: t.string,
    signedDate: t.string,
    signedTime: t.string,
    state: t.string,
    tags: t.array(t.string),
    txid: t.string,
    txidType: t.string,
    txRequestId: t.string,
    type: t.string,
    usd: t.number,
    usdRate: t.number,
    value: t.number,
    valueString: t.string,
    vSize: t.number,
    wallet: t.string,
    walletType: t.string,
});
//# sourceMappingURL=sendTransactions.js.map