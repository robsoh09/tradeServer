import * as t from "io-ts";
declare const recipient: t.PartialC<{
    address: t.StringC;
    amount: t.UnionC<[t.StringC, t.NumberC]>;
    feeLimit: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    data: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    memo: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    tokenName: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
}>;
export type TransactionRecipient = t.TypeOf<typeof recipient>;
declare const lightningPaymentRequest: t.IntersectionC<[t.TypeC<{
    invoice: t.StringC;
}>, t.PartialC<{
    amount: t.NumberC;
    sequenceId: t.StringC;
    feeLimit: t.NumberC;
    feeLimitRatio: t.NumberC;
}>]>;
export type LightningPaymentRequest = t.TypeOf<typeof lightningPaymentRequest>;
declare const halfSigned: t.PartialC<{
    txHex: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    recipients: t.UnionC<[t.Type<{
        address?: string | undefined;
        amount?: string | number | undefined;
        feeLimit?: string | undefined;
        data?: string | undefined;
        memo?: string | undefined;
        tokenName?: string | undefined;
    }[], {
        address?: string | undefined;
        amount?: string | number | undefined;
        feeLimit?: string | undefined;
        data?: string | undefined;
        memo?: string | undefined;
        tokenName?: string | undefined;
    }[], unknown>, t.UndefinedC]>;
    eip1559: t.UnionC<[t.Type<{
        maxPriorityFeePerGas?: string | undefined;
        maxFeePerGas?: string | undefined;
    }, {
        maxPriorityFeePerGas?: string | undefined;
        maxFeePerGas?: string | undefined;
    }, unknown>, t.UndefinedC]>;
    isBatch: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    expireTime: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    contractSequenceId: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    nextContractSequenceId: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    operationHash: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    signedChildPsbt: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    signature: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    lightningPaymentRequest: t.UnionC<[t.Type<{
        invoice: string;
    } & {
        amount?: number | undefined;
        sequenceId?: string | undefined;
        feeLimit?: number | undefined;
        feeLimitRatio?: number | undefined;
    }, {
        invoice: string;
    } & {
        amount?: number | undefined;
        sequenceId?: string | undefined;
        feeLimit?: number | undefined;
        feeLimitRatio?: number | undefined;
    }, unknown>, t.UndefinedC]>;
}>;
export type HalfSignedTransaction = t.TypeOf<typeof halfSigned>;
export declare const memo: t.PartialC<{
    type: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    value: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
}>;
export declare const txSendBody: {
    comment: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    consolidateId: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    halfSigned: t.UnionC<[t.Type<{
        txHex?: string | undefined;
        recipients?: {
            address?: string | undefined;
            amount?: string | number | undefined;
            feeLimit?: string | undefined;
            data?: string | undefined;
            memo?: string | undefined;
            tokenName?: string | undefined;
        }[] | undefined;
        eip1559?: {
            maxPriorityFeePerGas?: string | undefined;
            maxFeePerGas?: string | undefined;
        } | undefined;
        isBatch?: boolean | undefined;
        expireTime?: number | undefined;
        contractSequenceId?: number | undefined;
        nextContractSequenceId?: number | undefined;
        operationHash?: string | undefined;
        signedChildPsbt?: string | undefined;
        signature?: string | undefined;
        lightningPaymentRequest?: ({
            invoice: string;
        } & {
            amount?: number | undefined;
            sequenceId?: string | undefined;
            feeLimit?: number | undefined;
            feeLimitRatio?: number | undefined;
        }) | undefined;
    }, {
        txHex?: string | undefined;
        recipients?: {
            address?: string | undefined;
            amount?: string | number | undefined;
            feeLimit?: string | undefined;
            data?: string | undefined;
            memo?: string | undefined;
            tokenName?: string | undefined;
        }[] | undefined;
        eip1559?: {
            maxPriorityFeePerGas?: string | undefined;
            maxFeePerGas?: string | undefined;
        } | undefined;
        isBatch?: boolean | undefined;
        expireTime?: number | undefined;
        contractSequenceId?: number | undefined;
        nextContractSequenceId?: number | undefined;
        operationHash?: string | undefined;
        signedChildPsbt?: string | undefined;
        signature?: string | undefined;
        lightningPaymentRequest?: ({
            invoice: string;
        } & {
            amount?: number | undefined;
            sequenceId?: string | undefined;
            feeLimit?: number | undefined;
            feeLimitRatio?: number | undefined;
        }) | undefined;
    }, unknown>, t.UndefinedC]>;
    invoice: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    memo: t.UnionC<[t.Type<{
        type?: string | undefined;
        value?: string | undefined;
    }, {
        type?: string | undefined;
        value?: string | undefined;
    }, unknown>, t.UndefinedC]>;
    otp: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    recipients: t.UnionC<[t.Type<{
        address?: string | undefined;
        amount?: string | number | undefined;
        feeLimit?: string | undefined;
        data?: string | undefined;
        memo?: string | undefined;
        tokenName?: string | undefined;
    }[], {
        address?: string | undefined;
        amount?: string | number | undefined;
        feeLimit?: string | undefined;
        data?: string | undefined;
        memo?: string | undefined;
        tokenName?: string | undefined;
    }[], unknown>, t.UndefinedC]>;
    suppressBroadcast: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    txHex: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    txRequestId: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    videoApprovers: t.UnionC<[t.Type<string[], string[], unknown>, t.UndefinedC]>;
    numBlocks: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    feeRate: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    maxFeeRate: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    minConfirms: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    enforceMinConfirmsForChange: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    targetWalletUnspents: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    message: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    minValue: t.UnionC<[t.Type<string | number, string | number, unknown>, t.UndefinedC]>;
    maxValue: t.UnionC<[t.Type<string | number, string | number, unknown>, t.UndefinedC]>;
    sequenceId: t.UnionC<[t.Type<string | number, string | number, unknown>, t.UndefinedC]>;
    lastLedgerSequence: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    ledgerSequenceDelta: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    gasPrice: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    noSplitChange: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    unspents: t.ArrayC<t.StringC>;
    changeAddress: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    instant: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    transferId: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    gasLimit: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    custodianTransactionId: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    cpfpTxIds: t.UnionC<[t.Type<string[], string[], unknown>, t.UndefinedC]>;
    cpfpFeeRate: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    noCpfpFeeRate: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    maxFee: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    noMaxFee: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    feeMultiplier: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    addressType: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    changeAddressType: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    strategy: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    strategyAllowFallback: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    fee: t.UnionC<[t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>, t.PartialC<{
        amount: t.UnionC<[t.Type<string | number, string | number, unknown>, t.UndefinedC]>;
        unit: t.UnionC<[t.Type<"baseUnit" | "cpu" | "ram", "baseUnit" | "cpu" | "ram", unknown>, t.UndefinedC]>;
        formula: t.UnionC<[t.Type<"fixed" | "feeRate" | "perKB" | "custom", "fixed" | "feeRate" | "perKB" | "custom", unknown>, t.UndefinedC]>;
        type: t.UnionC<[t.Type<"max" | "base" | "tip", "max" | "base" | "tip", unknown>, t.UndefinedC]>;
    }>]>;
    timeBounds: t.UnionC<[t.Type<{
        minTime?: string | number | undefined;
        maxTime?: string | number | undefined;
    }, {
        minTime?: string | number | undefined;
        maxTime?: string | number | undefined;
    }, unknown>, t.UndefinedC]>;
    idfSignedTimestamp: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    idfVersion: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    idfUserId: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    hopParams: t.PartialC<{
        gasPriceMax: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
        paymentId: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
        userReqSig: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    }>;
    validFromBlock: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    validToBlock: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    type: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    trustlines: t.PartialC<{
        token: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
        action: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
        limit: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    }>;
    reservation: t.PartialC<{
        expireTime: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
        pendingApprovalId: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    }>;
    delayMs: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    messageKey: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    senderAddress: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    startTime: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    nonParticipation: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    keyregTxBase64: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    closeRemainderTo: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    stateProofKey: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    contractName: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    functionName: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    eip1559: t.UnionC<[t.Type<{
        maxPriorityFeePerGas?: string | undefined;
        maxFeePerGas?: string | undefined;
    }, {
        maxPriorityFeePerGas?: string | undefined;
        maxFeePerGas?: string | undefined;
    }, unknown>, t.UndefinedC]>;
    maxChangeOutputs: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    smallestChangeSplitSize: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    emergency: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    sourceChain: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    destinationChain: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    txFormat: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    previewPendingTxs: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    pendingApprovalId: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    stakingOptions: t.UnionC<[t.Type<{}, {}, unknown>, t.UndefinedC]>;
    unstakingOptions: t.UnionC<[t.Type<{}, {}, unknown>, t.UndefinedC]>;
    refundOptions: t.UnionC<[t.Type<{}, {}, unknown>, t.UndefinedC]>;
    stakingParams: t.PartialC<{
        actionType: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
        validator: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
        coin: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
        amount: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    }>;
    isReplaceableByFee: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    rbfTxIds: t.UnionC<[t.Type<string[], string[], unknown>, t.UndefinedC]>;
};
export declare const TxSendBody: t.ExactC<t.IntersectionC<[t.PartialC<{
    comment: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    consolidateId: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    halfSigned: t.UnionC<[t.Type<{
        txHex?: string | undefined;
        recipients?: {
            address?: string | undefined;
            amount?: string | number | undefined;
            feeLimit?: string | undefined;
            data?: string | undefined;
            memo?: string | undefined;
            tokenName?: string | undefined;
        }[] | undefined;
        eip1559?: {
            maxPriorityFeePerGas?: string | undefined;
            maxFeePerGas?: string | undefined;
        } | undefined;
        isBatch?: boolean | undefined;
        expireTime?: number | undefined;
        contractSequenceId?: number | undefined;
        nextContractSequenceId?: number | undefined;
        operationHash?: string | undefined;
        signedChildPsbt?: string | undefined;
        signature?: string | undefined;
        lightningPaymentRequest?: ({
            invoice: string;
        } & {
            amount?: number | undefined;
            sequenceId?: string | undefined;
            feeLimit?: number | undefined;
            feeLimitRatio?: number | undefined;
        }) | undefined;
    }, {
        txHex?: string | undefined;
        recipients?: {
            address?: string | undefined;
            amount?: string | number | undefined;
            feeLimit?: string | undefined;
            data?: string | undefined;
            memo?: string | undefined;
            tokenName?: string | undefined;
        }[] | undefined;
        eip1559?: {
            maxPriorityFeePerGas?: string | undefined;
            maxFeePerGas?: string | undefined;
        } | undefined;
        isBatch?: boolean | undefined;
        expireTime?: number | undefined;
        contractSequenceId?: number | undefined;
        nextContractSequenceId?: number | undefined;
        operationHash?: string | undefined;
        signedChildPsbt?: string | undefined;
        signature?: string | undefined;
        lightningPaymentRequest?: ({
            invoice: string;
        } & {
            amount?: number | undefined;
            sequenceId?: string | undefined;
            feeLimit?: number | undefined;
            feeLimitRatio?: number | undefined;
        }) | undefined;
    }, unknown>, t.UndefinedC]>;
    invoice: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    memo: t.UnionC<[t.Type<{
        type?: string | undefined;
        value?: string | undefined;
    }, {
        type?: string | undefined;
        value?: string | undefined;
    }, unknown>, t.UndefinedC]>;
    otp: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    recipients: t.UnionC<[t.Type<{
        address?: string | undefined;
        amount?: string | number | undefined;
        feeLimit?: string | undefined;
        data?: string | undefined;
        memo?: string | undefined;
        tokenName?: string | undefined;
    }[], {
        address?: string | undefined;
        amount?: string | number | undefined;
        feeLimit?: string | undefined;
        data?: string | undefined;
        memo?: string | undefined;
        tokenName?: string | undefined;
    }[], unknown>, t.UndefinedC]>;
    suppressBroadcast: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    txHex: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    txRequestId: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    videoApprovers: t.UnionC<[t.Type<string[], string[], unknown>, t.UndefinedC]>;
    numBlocks: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    feeRate: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    maxFeeRate: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    minConfirms: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    enforceMinConfirmsForChange: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    targetWalletUnspents: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    message: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    minValue: t.UnionC<[t.Type<string | number, string | number, unknown>, t.UndefinedC]>;
    maxValue: t.UnionC<[t.Type<string | number, string | number, unknown>, t.UndefinedC]>;
    sequenceId: t.UnionC<[t.Type<string | number, string | number, unknown>, t.UndefinedC]>;
    lastLedgerSequence: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    ledgerSequenceDelta: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    gasPrice: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    noSplitChange: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    unspents: t.ArrayC<t.StringC>;
    changeAddress: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    instant: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    transferId: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    gasLimit: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    custodianTransactionId: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    cpfpTxIds: t.UnionC<[t.Type<string[], string[], unknown>, t.UndefinedC]>;
    cpfpFeeRate: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    noCpfpFeeRate: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    maxFee: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    noMaxFee: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    feeMultiplier: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    addressType: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    changeAddressType: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    strategy: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    strategyAllowFallback: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    fee: t.UnionC<[t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>, t.PartialC<{
        amount: t.UnionC<[t.Type<string | number, string | number, unknown>, t.UndefinedC]>;
        unit: t.UnionC<[t.Type<"baseUnit" | "cpu" | "ram", "baseUnit" | "cpu" | "ram", unknown>, t.UndefinedC]>;
        formula: t.UnionC<[t.Type<"fixed" | "feeRate" | "perKB" | "custom", "fixed" | "feeRate" | "perKB" | "custom", unknown>, t.UndefinedC]>;
        type: t.UnionC<[t.Type<"max" | "base" | "tip", "max" | "base" | "tip", unknown>, t.UndefinedC]>;
    }>]>;
    timeBounds: t.UnionC<[t.Type<{
        minTime?: string | number | undefined;
        maxTime?: string | number | undefined;
    }, {
        minTime?: string | number | undefined;
        maxTime?: string | number | undefined;
    }, unknown>, t.UndefinedC]>;
    idfSignedTimestamp: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    idfVersion: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    idfUserId: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    hopParams: t.PartialC<{
        gasPriceMax: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
        paymentId: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
        userReqSig: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    }>;
    validFromBlock: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    validToBlock: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    type: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    trustlines: t.PartialC<{
        token: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
        action: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
        limit: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    }>;
    reservation: t.PartialC<{
        expireTime: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
        pendingApprovalId: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    }>;
    delayMs: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    messageKey: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    senderAddress: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    startTime: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    nonParticipation: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    keyregTxBase64: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    closeRemainderTo: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    stateProofKey: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    contractName: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    functionName: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    eip1559: t.UnionC<[t.Type<{
        maxPriorityFeePerGas?: string | undefined;
        maxFeePerGas?: string | undefined;
    }, {
        maxPriorityFeePerGas?: string | undefined;
        maxFeePerGas?: string | undefined;
    }, unknown>, t.UndefinedC]>;
    maxChangeOutputs: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    smallestChangeSplitSize: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    emergency: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    sourceChain: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    destinationChain: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    txFormat: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    previewPendingTxs: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    pendingApprovalId: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    stakingOptions: t.UnionC<[t.Type<{}, {}, unknown>, t.UndefinedC]>;
    unstakingOptions: t.UnionC<[t.Type<{}, {}, unknown>, t.UndefinedC]>;
    refundOptions: t.UnionC<[t.Type<{}, {}, unknown>, t.UndefinedC]>;
    stakingParams: t.PartialC<{
        actionType: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
        validator: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
        coin: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
        amount: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    }>;
    isReplaceableByFee: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    rbfTxIds: t.UnionC<[t.Type<string[], string[], unknown>, t.UndefinedC]>;
}>, t.PartialC<{
    locktime: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    sourceChain: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    destinationChain: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    unspents: t.UnionC<[t.Type<string[], string[], unknown>, t.UndefinedC]>;
}>, t.PartialC<{
    sequenceId: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    senderAddressIndex: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    nonce: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    proxyType: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    forceProxyType: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    owner: t.UnionC<[t.Type<{}, {}, unknown>, t.UndefinedC]>;
    delay: t.UnionC<[t.Type<{}, {}, unknown>, t.UndefinedC]>;
    index: t.UnionC<[t.Type<{}, {}, unknown>, t.UndefinedC]>;
    validityWindow: t.UnionC<[t.Type<{}, {}, unknown>, t.UndefinedC]>;
    version: t.UnionC<[t.Type<{}, {}, unknown>, t.UndefinedC]>;
    referenceBlock: t.UnionC<[t.Type<{}, {}, unknown>, t.UndefinedC]>;
    consolidateId: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    senderAddress: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    type: t.StringC;
    memo: t.PartialC<{
        type: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
        value: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    }>;
    comment: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    ledgerSequenceDelta: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    lastLedgerSequence: t.UnionC<[t.Type<number, number, unknown>, t.UndefinedC]>;
    feeRate: t.UnionC<[t.Type<string | number, string | number, unknown>, t.UndefinedC]>;
    messageKey: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    previewPendingTxs: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    pendingApprovalId: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
}>, t.PartialC<{
    tokenName: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
}>]>>;
export type TxSendBody = t.TypeOf<typeof TxSendBody>;
export declare const TxSendResponse: t.PartialC<{
    baseValue: t.NumberC;
    baseValueString: t.StringC;
    coin: t.StringC;
    coinSpecific: t.RecordC<t.StringC, t.UnknownC>;
    createdTime: t.StringC;
    date: t.StringC;
    enterprise: t.StringC;
    entries: t.ArrayC<t.PartialC<{
        address: t.StringC;
        wallet: t.StringC;
        value: t.NumberC;
        valueString: t.StringC;
        isChange: t.BooleanC;
        isPayGo: t.BooleanC;
    }>>;
    feeString: t.StringC;
    height: t.NumberC;
    heightId: t.StringC;
    history: t.ArrayC<t.PartialC<{
        date: t.StringC;
        action: t.StringC;
        user: t.StringC;
    }>>;
    id: t.StringC;
    instant: t.BooleanC;
    intendedValueString: t.StringC;
    isFee: t.BooleanC;
    isReward: t.BooleanC;
    metadata: t.RecordC<t.StringC, t.UnknownC>;
    payGoFee: t.NumberC;
    payGoFeeString: t.StringC;
    signedDate: t.StringC;
    signedTime: t.StringC;
    state: t.StringC;
    tags: t.ArrayC<t.StringC>;
    txid: t.StringC;
    txidType: t.StringC;
    txRequestId: t.StringC;
    type: t.StringC;
    usd: t.NumberC;
    usdRate: t.NumberC;
    value: t.NumberC;
    valueString: t.StringC;
    vSize: t.NumberC;
    wallet: t.StringC;
    walletType: t.StringC;
}>;
export type TxSendResponse = t.TypeOf<typeof TxSendResponse>;
export {};
