"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MPCv2SignatureShareRound3Input = exports.MPCv2SignatureShareRound2Output = exports.MPCv2SignatureShareRound2Input = exports.MPCv2SignatureShareRound1Output = exports.MPCv2SignatureShareRound1Input = exports.MPCv2SignatureShareBase = void 0;
const t = __importStar(require("io-ts"));
const common_1 = require("../common");
const mpcv2SigningState_1 = require("./mpcv2SigningState");
exports.MPCv2SignatureShareBase = t.type({
    type: mpcv2SigningState_1.MPCv2SigningState,
});
exports.MPCv2SignatureShareRound1Input = t.intersection([
    exports.MPCv2SignatureShareBase,
    t.type({
        type: t.literal("round1Input"),
        data: t.type({
            msg1: common_1.MPCv2BroadcastMessage,
        }),
    }, "MPCv2SignatureShareRound1"),
]);
exports.MPCv2SignatureShareRound1Output = t.intersection([
    exports.MPCv2SignatureShareBase,
    t.type({
        type: t.literal("round1Output"),
        data: t.type({
            msg1: common_1.MPCv2BroadcastMessage,
            msg2: common_1.MPCv2P2PMessage,
        }),
    }, "MPCv2SignatureShareRound1Output"),
]);
exports.MPCv2SignatureShareRound2Input = t.intersection([
    exports.MPCv2SignatureShareBase,
    t.type({
        type: t.literal("round2Input"),
        data: t.type({
            msg2: common_1.MPCv2P2PMessage,
            msg3: common_1.MPCv2P2PMessage,
        }),
    }, "MPCv2SignatureShareRound2Input"),
]);
exports.MPCv2SignatureShareRound2Output = t.intersection([
    exports.MPCv2SignatureShareBase,
    t.type({
        type: t.literal("round2Output"),
        data: t.type({
            msg3: common_1.MPCv2P2PMessage,
        }),
    }, "MPCv2SignatureShareRound2Output"),
]);
exports.MPCv2SignatureShareRound3Input = t.intersection([
    exports.MPCv2SignatureShareBase,
    t.type({
        type: t.literal("round3Input"),
        data: t.type({
            msg4: common_1.MPCv2BroadcastMessageWithSignatureR,
        }),
    }, "MPCv2SignatureShareRound3Input"),
]);
//# sourceMappingURL=signingRound.js.map