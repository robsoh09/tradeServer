import * as t from "io-ts";
export declare const MPCv2SignatureShareBase: t.TypeC<{
    type: t.UnionC<[t.LiteralC<"round1Input">, t.LiteralC<"round1Output">, t.LiteralC<"round2Input">, t.LiteralC<"round2Output">, t.LiteralC<"round3Input">]>;
}>;
export declare const MPCv2SignatureShareRound1Input: t.IntersectionC<[t.TypeC<{
    type: t.UnionC<[t.LiteralC<"round1Input">, t.LiteralC<"round1Output">, t.LiteralC<"round2Input">, t.LiteralC<"round2Output">, t.LiteralC<"round3Input">]>;
}>, t.TypeC<{
    type: t.LiteralC<"round1Input">;
    data: t.TypeC<{
        msg1: t.TypeC<{
            from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            message: t.StringC;
            signature: t.StringC;
        }>;
    }>;
}>]>;
export type MPCv2SignatureShareRound1Input = t.TypeOf<typeof MPCv2SignatureShareRound1Input>;
export declare const MPCv2SignatureShareRound1Output: t.IntersectionC<[t.TypeC<{
    type: t.UnionC<[t.LiteralC<"round1Input">, t.LiteralC<"round1Output">, t.LiteralC<"round2Input">, t.LiteralC<"round2Output">, t.LiteralC<"round3Input">]>;
}>, t.TypeC<{
    type: t.LiteralC<"round1Output">;
    data: t.TypeC<{
        msg1: t.TypeC<{
            from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            message: t.StringC;
            signature: t.StringC;
        }>;
        msg2: t.TypeC<{
            from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            encryptedMessage: t.StringC;
            signature: t.StringC;
        }>;
    }>;
}>]>;
export type MPCv2SignatureShareRound1Output = t.TypeOf<typeof MPCv2SignatureShareRound1Output>;
export declare const MPCv2SignatureShareRound2Input: t.IntersectionC<[t.TypeC<{
    type: t.UnionC<[t.LiteralC<"round1Input">, t.LiteralC<"round1Output">, t.LiteralC<"round2Input">, t.LiteralC<"round2Output">, t.LiteralC<"round3Input">]>;
}>, t.TypeC<{
    type: t.LiteralC<"round2Input">;
    data: t.TypeC<{
        msg2: t.TypeC<{
            from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            encryptedMessage: t.StringC;
            signature: t.StringC;
        }>;
        msg3: t.TypeC<{
            from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            encryptedMessage: t.StringC;
            signature: t.StringC;
        }>;
    }>;
}>]>;
export type MPCv2SignatureShareRound2Input = t.TypeOf<typeof MPCv2SignatureShareRound2Input>;
export declare const MPCv2SignatureShareRound2Output: t.IntersectionC<[t.TypeC<{
    type: t.UnionC<[t.LiteralC<"round1Input">, t.LiteralC<"round1Output">, t.LiteralC<"round2Input">, t.LiteralC<"round2Output">, t.LiteralC<"round3Input">]>;
}>, t.TypeC<{
    type: t.LiteralC<"round2Output">;
    data: t.TypeC<{
        msg3: t.TypeC<{
            from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            encryptedMessage: t.StringC;
            signature: t.StringC;
        }>;
    }>;
}>]>;
export type MPCv2SignatureShareRound2Output = t.TypeOf<typeof MPCv2SignatureShareRound2Output>;
export declare const MPCv2SignatureShareRound3Input: t.IntersectionC<[t.TypeC<{
    type: t.UnionC<[t.LiteralC<"round1Input">, t.LiteralC<"round1Output">, t.LiteralC<"round2Input">, t.LiteralC<"round2Output">, t.LiteralC<"round3Input">]>;
}>, t.TypeC<{
    type: t.LiteralC<"round3Input">;
    data: t.TypeC<{
        msg4: t.IntersectionC<[t.TypeC<{
            from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            message: t.StringC;
            signature: t.StringC;
        }>, t.TypeC<{
            signatureR: t.StringC;
        }>]>;
    }>;
}>]>;
export type MPCv2SignatureShareRound3Input = t.TypeOf<typeof MPCv2SignatureShareRound3Input>;
