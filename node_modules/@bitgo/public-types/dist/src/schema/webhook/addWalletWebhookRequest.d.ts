import * as t from "io-ts";
export declare const AddWalletWebhookRequestBody: {
    type: t.KeyofC<typeof import("./webhookType").WalletWebhookTypeEnum>;
    url: import("io-ts-types").NonEmptyStringC;
    label: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    numConfirmations: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC, t.UndefinedC]>;
    allToken: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    listenToFailureStates: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    txRequestStates: t.UnionC<[t.Type<("initialized" | "signed" | "delivered" | "rejected" | "pendingApproval" | "canceled" | "pendingDelivery" | "pendingUserSignature" | "pendingUserCommitment" | "pendingUserRShare" | "pendingUserGShare" | "readyToSend" | "failed")[], ("initialized" | "signed" | "delivered" | "rejected" | "pendingApproval" | "canceled" | "pendingDelivery" | "pendingUserSignature" | "pendingUserCommitment" | "pendingUserRShare" | "pendingUserGShare" | "readyToSend" | "failed")[], unknown>, t.UndefinedC]>;
    txRequestTransactionStates: t.UnionC<[t.Type<("initialized" | "pendingSignature" | "eddsaPendingCommitment" | "eddsaPendingRShare" | "eddsaPendingGShare" | "ecdsaMPCv2Round1" | "ecdsaMPCv2Round2" | "ecdsaMPCv2Round3" | "readyToCombineShares" | "signed" | "held" | "delivered" | "invalidSignature" | "rejected")[], ("initialized" | "pendingSignature" | "eddsaPendingCommitment" | "eddsaPendingRShare" | "eddsaPendingGShare" | "ecdsaMPCv2Round1" | "ecdsaMPCv2Round2" | "ecdsaMPCv2Round3" | "readyToCombineShares" | "signed" | "held" | "delivered" | "invalidSignature" | "rejected")[], unknown>, t.UndefinedC]>;
};
export declare const AddWalletWebhookRequestBodyC: t.TypeC<{
    type: t.KeyofC<typeof import("./webhookType").WalletWebhookTypeEnum>;
    url: import("io-ts-types").NonEmptyStringC;
    label: t.UnionC<[t.Type<string, string, unknown>, t.UndefinedC]>;
    numConfirmations: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC, t.UndefinedC]>;
    allToken: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    listenToFailureStates: t.UnionC<[t.Type<boolean, boolean, unknown>, t.UndefinedC]>;
    txRequestStates: t.UnionC<[t.Type<("initialized" | "signed" | "delivered" | "rejected" | "pendingApproval" | "canceled" | "pendingDelivery" | "pendingUserSignature" | "pendingUserCommitment" | "pendingUserRShare" | "pendingUserGShare" | "readyToSend" | "failed")[], ("initialized" | "signed" | "delivered" | "rejected" | "pendingApproval" | "canceled" | "pendingDelivery" | "pendingUserSignature" | "pendingUserCommitment" | "pendingUserRShare" | "pendingUserGShare" | "readyToSend" | "failed")[], unknown>, t.UndefinedC]>;
    txRequestTransactionStates: t.UnionC<[t.Type<("initialized" | "pendingSignature" | "eddsaPendingCommitment" | "eddsaPendingRShare" | "eddsaPendingGShare" | "ecdsaMPCv2Round1" | "ecdsaMPCv2Round2" | "ecdsaMPCv2Round3" | "readyToCombineShares" | "signed" | "held" | "delivered" | "invalidSignature" | "rejected")[], ("initialized" | "pendingSignature" | "eddsaPendingCommitment" | "eddsaPendingRShare" | "eddsaPendingGShare" | "ecdsaMPCv2Round1" | "ecdsaMPCv2Round2" | "ecdsaMPCv2Round3" | "readyToCombineShares" | "signed" | "held" | "delivered" | "invalidSignature" | "rejected")[], unknown>, t.UndefinedC]>;
}>;
export type AddWalletWebhookRequestBody = t.TypeOf<typeof AddWalletWebhookRequestBodyC>;
