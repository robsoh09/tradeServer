import * as t from "io-ts";
import {
  MPCv2P2PMessage,
  MPCv2BroadcastMessage,
  MPCv2BroadcastMessageWithSignatureR,
} from "../common";
import { MPCv2SigningState } from "./mpcv2SigningState";

export const MPCv2SignatureShareBase = t.type({
  type: MPCv2SigningState,
});

/**
 * User to BitGo round 1
 */
export const MPCv2SignatureShareRound1Input = t.intersection([
  MPCv2SignatureShareBase,
  t.type(
    {
      type: t.literal("round1Input"),
      data: t.type({
        msg1: MPCv2BroadcastMessage,
      }),
    },
    "MPCv2SignatureShareRound1",
  ),
]);

export type MPCv2SignatureShareRound1Input = t.TypeOf<
  typeof MPCv2SignatureShareRound1Input
>;

/**
 * BitGo to User round 1
 */
export const MPCv2SignatureShareRound1Output = t.intersection([
  MPCv2SignatureShareBase,
  t.type(
    {
      type: t.literal("round1Output"),
      data: t.type({
        msg1: MPCv2BroadcastMessage,
        msg2: MPCv2P2PMessage,
      }),
    },
    "MPCv2SignatureShareRound1Output",
  ),
]);

export type MPCv2SignatureShareRound1Output = t.TypeOf<
  typeof MPCv2SignatureShareRound1Output
>;

/**
 * User to BitGo round 2
 */
export const MPCv2SignatureShareRound2Input = t.intersection([
  MPCv2SignatureShareBase,
  t.type(
    {
      type: t.literal("round2Input"),
      data: t.type({
        msg2: MPCv2P2PMessage,
        msg3: MPCv2P2PMessage,
      }),
    },
    "MPCv2SignatureShareRound2Input",
  ),
]);

export type MPCv2SignatureShareRound2Input = t.TypeOf<
  typeof MPCv2SignatureShareRound2Input
>;

/**
 * BitGo to User round 2
 */
export const MPCv2SignatureShareRound2Output = t.intersection([
  MPCv2SignatureShareBase,
  t.type(
    {
      type: t.literal("round2Output"),
      data: t.type({
        msg3: MPCv2P2PMessage,
      }),
    },
    "MPCv2SignatureShareRound2Output",
  ),
]);

export type MPCv2SignatureShareRound2Output = t.TypeOf<
  typeof MPCv2SignatureShareRound2Output
>;

/**
 * User to BitGo round 3
 */
export const MPCv2SignatureShareRound3Input = t.intersection([
  MPCv2SignatureShareBase,
  t.type(
    {
      type: t.literal("round3Input"),
      data: t.type({
        msg4: MPCv2BroadcastMessageWithSignatureR,
      }),
    },
    "MPCv2SignatureShareRound3Input",
  ),
]);

export type MPCv2SignatureShareRound3Input = t.TypeOf<
  typeof MPCv2SignatureShareRound3Input
>;
