import { EnterpriseWebhookType } from "./webhookType";
import { NonEmptyString } from "io-ts-types";
import { Optional, optionalString, optionalStringOrNumber } from "../../utils";
import * as t from "io-ts";
import { Webhook } from "./webhook";

export const AddEnterpriseWebhookRequestBody = {
  type: EnterpriseWebhookType,
  url: NonEmptyString,
  label: Optional(t.string),
};
export const AddEnterpriseWebhookRequestBodyC = t.type({
  ...AddEnterpriseWebhookRequestBody,
});

export type AddEnterpriseWebhookRequestBody = t.TypeOf<
  typeof AddEnterpriseWebhookRequestBodyC
>;

export const ListEnterpriseWebhooksRequestBody = {
  type: Optional(EnterpriseWebhookType),
  limit: optionalStringOrNumber,
  prevId: optionalString,
};

export const ListEnterpriseWebhooksRequestBodyC = t.type({
  ...ListEnterpriseWebhooksRequestBody,
});

export type ListEnterpriseWebhooksRequestBody = t.TypeOf<
  typeof ListEnterpriseWebhooksRequestBodyC
>;

export const ListEnterpriseWebhooksResponse = t.intersection([
  t.type({
    webhooks: t.array(Webhook),
  }),
  t.partial({
    nextBatchPrevId: Optional(t.union([t.string, t.undefined])),
  }),
]);
export type ListEnterpriseWebhooksResponse = t.TypeOf<
  typeof ListEnterpriseWebhooksResponse
>;
