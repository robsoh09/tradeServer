import { Xlm } from './xlm';
import { BitGoBase, CoinConstructor, NamedCoinConstructor } from '@bitgo/sdk-core';
import * as stellar from 'stellar-sdk';
import { StellarTokenConfig } from '@bitgo/statics';
export { StellarTokenConfig };
export declare class StellarToken extends Xlm {
    static readonly tokenPattern: RegExp;
    readonly tokenConfig: StellarTokenConfig;
    private readonly _code;
    private readonly _issuer;
    constructor(bitgo: BitGoBase, tokenConfig: StellarTokenConfig);
    static createTokenConstructor(config: StellarTokenConfig): CoinConstructor;
    static createTokenConstructors(): NamedCoinConstructor[];
    get type(): string;
    get name(): string;
    get coin(): string;
    get network(): string;
    get code(): string;
    get issuer(): string;
    get decimalPlaces(): number;
    protected getStellarNetwork(): stellar.Networks;
    getChain(): string;
    getFullName(): string;
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    valuelessTransferAllowed(): boolean;
}
//# sourceMappingURL=stellarToken.d.ts.map