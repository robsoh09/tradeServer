import { BaseTransactionBuilder } from '@bitgo/sdk-core';
import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { DecodedUtxoObj, Tx } from './iface';
import { KeyPair } from './keyPair';
import { Transaction } from './transaction';
export declare abstract class TransactionBuilder extends BaseTransactionBuilder {
    protected _transaction: Transaction;
    protected recoverSigner: boolean;
    _signer: KeyPair[];
    constructor(_coinConfig: Readonly<CoinConfig>);
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     *
     * @param {Transaction} tx the transaction data
     * @returns itself
     */
    initBuilder(tx: Tx): this;
    /**
     * Validates the threshold
     * @param threshold
     */
    validateThreshold(threshold: number): void;
    /**
     * Check the UTXO has expected fields.
     * @param UTXO
     */
    validateUtxo(value: DecodedUtxoObj): void;
    /**
     * Check the list of UTXOS is empty and check each UTXO.
     * @param values
     */
    validateUtxos(values: DecodedUtxoObj[]): void;
    /**
     * Validates locktime
     * @param locktime
     */
    validateLocktime(locktime: bigint): void;
    /**
     * Threshold is an int that names the number of unique signatures required to spend the output.
     * Must be less than or equal to the length of Addresses.
     * @param {number} value
     */
    threshold(value: number): this;
    /**
     * Locktime is a long that contains the unix timestamp that this output can be spent after.
     * The unix timestamp is specific to the second.
     * @param value
     */
    locktime(value: string | number): this;
    /**
     * When using recovery key must be set here
     * TODO: STLX-17317 recovery key signing
     * @param {boolean}[recoverSigner=true] whether it's recovery signer
     */
    recoverMode(recoverSigner?: boolean): this;
    /**
     * fromPubKey is a list of unique addresses that correspond to the private keys that can be used to spend this output
     * @param {string | string[]} senderPubKey
     */
    fromPubKey(senderPubKey: string | string[]): this;
    /**
     * List of UTXO required as inputs.
     * A UTXO is a standalone representation of a transaction output.
     *
     * @param {DecodedUtxoObj[]} list of UTXOS
     */
    utxos(value: DecodedUtxoObj[]): this;
    /** @inheritdoc */
    protected fromImplementation(rawTransaction: string): Transaction;
}
//# sourceMappingURL=transactionBuilder.d.ts.map