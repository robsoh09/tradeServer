"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = void 0;
const avalanchejs_1 = require("@bitgo-forks/avalanchejs");
const sdk_core_1 = require("@bitgo/sdk-core");
const transaction_1 = require("./transaction");
const utils_1 = __importDefault(require("./utils"));
class TransactionBuilder extends sdk_core_1.BaseTransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this.recoverSigner = false;
        this._signer = [];
        this._transaction = new transaction_1.Transaction(_coinConfig);
    }
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     *
     * @param {Transaction} tx the transaction data
     * @returns itself
     */
    initBuilder(tx) {
        const baseTx = tx.tx.baseTx;
        if (baseTx.NetworkId.value() !== this._transaction._networkID ||
            baseTx.BlockchainId.value() !== this._transaction._blockchainID) {
            throw new Error('Network or blockchain is not equals');
        }
        this._transaction.setTransaction(tx);
        return this;
    }
    // region Validators
    /**
     * Validates the threshold
     * @param threshold
     */
    validateThreshold(threshold) {
        if (!threshold || threshold !== 2) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: threshold must be set to 2');
        }
    }
    /**
     * Check the UTXO has expected fields.
     * @param UTXO
     */
    validateUtxo(value) {
        ['outputID', 'amount', 'txid', 'outputidx'].forEach((field) => {
            if (!value.hasOwnProperty(field))
                throw new sdk_core_1.BuildTransactionError(`Utxos required ${field}`);
        });
    }
    /**
     * Check the list of UTXOS is empty and check each UTXO.
     * @param values
     */
    validateUtxos(values) {
        if (values.length === 0) {
            throw new sdk_core_1.BuildTransactionError("Utxos can't be empty array");
        }
        values.forEach(this.validateUtxo);
    }
    /**
     * Validates locktime
     * @param locktime
     */
    validateLocktime(locktime) {
        if (!locktime || locktime < BigInt(0)) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: locktime must be 0 or higher');
        }
    }
    // endregion
    /**
     * Threshold is an int that names the number of unique signatures required to spend the output.
     * Must be less than or equal to the length of Addresses.
     * @param {number} value
     */
    threshold(value) {
        this.validateThreshold(value);
        this._transaction._threshold = value;
        return this;
    }
    /**
     * Locktime is a long that contains the unix timestamp that this output can be spent after.
     * The unix timestamp is specific to the second.
     * @param value
     */
    locktime(value) {
        this.validateLocktime(BigInt(value));
        this._transaction._locktime = BigInt(value);
        return this;
    }
    /**
     * When using recovery key must be set here
     * TODO: STLX-17317 recovery key signing
     * @param {boolean}[recoverSigner=true] whether it's recovery signer
     */
    recoverMode(recoverSigner = true) {
        this.recoverSigner = recoverSigner;
        return this;
    }
    /**
     * fromPubKey is a list of unique addresses that correspond to the private keys that can be used to spend this output
     * @param {string | string[]} senderPubKey
     */
    fromPubKey(senderPubKey) {
        const pubKeys = senderPubKey instanceof Array ? senderPubKey : [senderPubKey];
        this._transaction._fromAddresses = pubKeys.map(utils_1.default.parseAddress);
        return this;
    }
    /**
     * List of UTXO required as inputs.
     * A UTXO is a standalone representation of a transaction output.
     *
     * @param {DecodedUtxoObj[]} list of UTXOS
     */
    utxos(value) {
        this.validateUtxos(value);
        this._transaction._utxos = value;
        return this;
    }
    // TODO(CR-1073):
    // Implement:
    //  buildImplementation
    //  signImplementation
    //  get transaction
    //  set transaction
    //  validateRawTransaction
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        const [tx] = avalanchejs_1.pvmSerial.AddPermissionlessValidatorTx.fromBytes(Buffer.from(rawTransaction, 'hex'), avalanchejs_1.avmSerial.getAVMManager().getDefaultCodec());
        // TODO(CR-1073): check if initBuilder can only use UnsignedTx and pvmSerial.BaseTx is not required
        this.initBuilder(tx);
        return this._transaction;
    }
}
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,