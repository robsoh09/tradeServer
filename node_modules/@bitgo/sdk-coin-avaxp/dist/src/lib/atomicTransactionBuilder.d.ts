/// <reference types="node" />
/// <reference types="bn.js" />
import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { BN, Buffer as BufferAvax } from 'avalanche';
import { DeprecatedTransactionBuilder } from './deprecatedTransactionBuilder';
import { TransferableInput, TransferableOutput } from 'avalanche/dist/apis/platformvm';
import { Credential } from 'avalanche/dist/common';
/**
 * Cross-chain transactions (export and import) are atomic operations.
 */
export declare abstract class AtomicTransactionBuilder extends DeprecatedTransactionBuilder {
    protected _externalChainId: BufferAvax;
    constructor(_coinConfig: Readonly<CoinConfig>);
    /**
     * The internal chain is the one set for the coin in coinConfig.network. The external chain is the other chain involved.
     * The external chain id is the source on import and the destination on export.
     *
     * @param {string} chainId - id of the external chain
     */
    externalChainId(chainId: string | Buffer): this;
    /**
     * Fee is fix for AVM atomic tx.
     *
     * @returns network.txFee
     * @protected
     */
    protected get fixedFee(): string;
    /**
     * Threshold must be 2 and since output always get reordered we want to make sure we can always add signatures in the correct location
     * To find the correct location for the signature, we use the output's addresses to create the signatureIdx in the order that we desire
     * 0: user key, 1: hsm key, 2: recovery key
     * @protected
     */
    protected createInputOutput(amount: BN): {
        inputs: TransferableInput[];
        outputs: TransferableOutput[];
        credentials: Credential[];
    };
}
//# sourceMappingURL=atomicTransactionBuilder.d.ts.map