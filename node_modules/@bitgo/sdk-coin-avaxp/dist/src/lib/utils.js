"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Utils = void 0;
const avalanchejs_1 = require("@bitgo-forks/avalanchejs");
const sdk_core_1 = require("@bitgo/sdk-core");
const avalanche_1 = require("avalanche");
const platformvm_1 = require("avalanche/dist/apis/platformvm");
const keychain_1 = require("avalanche/dist/apis/platformvm/keychain");
const common_1 = require("avalanche/dist/common");
const utils_1 = require("avalanche/dist/utils");
const createHash = __importStar(require("create-hash"));
const elliptic_1 = require("elliptic");
const iface_1 = require("./iface");
class Utils {
    constructor() {
        this.binTools = avalanche_1.BinTools.getInstance();
        this.cb58Decode = this.binTools.cb58Decode;
        this.cb58Encode = this.binTools.cb58Encode;
        this.stringToBuffer = this.binTools.stringToBuffer;
        this.bufferToString = this.binTools.bufferToString;
        this.NodeIDStringToBuffer = utils_1.NodeIDStringToBuffer;
        this.addressToString = this.binTools.addressToString;
        this.parseAddress = (pub) => this.binTools.stringToAddress(pub);
    }
    includeIn(walletAddresses, otxoOutputAddresses) {
        return walletAddresses.map((a) => otxoOutputAddresses.includes(a)).reduce((a, b) => a && b, true);
    }
    /**
     * Checks if it is a valid address no illegal characters
     *
     * @param {string} address - address to be validated
     * @returns {boolean} - the validation result
     */
    /** @inheritdoc */
    isValidAddress(address) {
        const addressArr = Array.isArray(address) ? address : address.split('~');
        for (const address of addressArr) {
            if (!this.isValidAddressRegex(address)) {
                return false;
            }
        }
        return true;
    }
    isValidAddressRegex(address) {
        return /^(^P||NodeID)-[a-zA-Z0-9]+$/.test(address);
    }
    /**
     * Checks if it is a valid blockId with length 66 including 0x
     *
     * @param {string} hash - blockId to be validated
     * @returns {boolean} - the validation result
     */
    /** @inheritdoc */
    isValidBlockId(hash) {
        return this.binTools.isCB58(hash) && this.binTools.b58ToBuffer(hash).length === 36;
    }
    /**
     * Checks if the string is a valid protocol public key or
     * extended public key.
     *
     * @param {string} pub - the  public key to be validated
     * @returns {boolean} - the validation result
     */
    isValidPublicKey(pub) {
        if ((0, sdk_core_1.isValidXpub)(pub))
            return true;
        let pubBuf;
        if (pub.length === 50) {
            try {
                pubBuf = utils.cb58Decode(pub);
            }
            catch {
                return false;
            }
        }
        else {
            if (pub.length !== 66 && pub.length !== 130)
                return false;
            const firstByte = pub.slice(0, 2);
            // uncompressed public key
            if (pub.length === 130 && firstByte !== '04')
                return false;
            // compressed public key
            if (pub.length === 66 && firstByte !== '02' && firstByte !== '03')
                return false;
            if (!this.allHexChars(pub))
                return false;
            pubBuf = avalanche_1.Buffer.from(pub, 'hex');
        }
        // validate the public key
        const secp256k1 = new elliptic_1.ec('secp256k1');
        try {
            const keyPair = secp256k1.keyFromPublic(pubBuf);
            const { result } = keyPair.validate();
            return result;
        }
        catch (e) {
            return false;
        }
    }
    /**
     * Returns whether or not the string is a valid protocol private key, or extended
     * private key.
     *
     * The protocol key format is described in the @stacks/transactions npm package, in the
     * createStacksPrivateKey function:
     * https://github.com/blockstack/stacks.js/blob/master/packages/transactions/src/keys.ts#L125
     *
     * @param {string} prv - the private key (or extended private key) to be validated
     * @returns {boolean} - the validation result
     */
    isValidPrivateKey(prv) {
        if ((0, sdk_core_1.isValidXprv)(prv))
            return true;
        if (prv.length !== 64 && prv.length !== 66)
            return false;
        if (prv.length === 66 && prv.slice(64) !== '01')
            return false;
        return this.allHexChars(prv);
    }
    /**
     * Returns whether or not the string is a composed of hex chars only
     *
     * @param {string} maybe - the  string to be validated
     * @returns {boolean} - the validation result
     */
    allHexChars(maybe) {
        return /^(0x){0,1}([0-9a-f])+$/i.test(maybe);
    }
    /** @inheritdoc */
    isValidSignature(signature) {
        throw new sdk_core_1.NotImplementedError('isValidSignature not implemented');
    }
    /** @inheritdoc */
    isValidTransactionId(txId) {
        throw new sdk_core_1.NotImplementedError('isValidTransactionId not implemented');
    }
    getCredentials(tx) {
        return tx.getIns().map((ins) => (0, platformvm_1.SelectCredentialClass)(ins.getInput().getCredentialID()));
    }
    /**
     * Avaxp wrapper to create signature and return it for credentials using Avalanche's buffer
     * @param network
     * @param message
     * @param prv
     * @return signature
     */
    createSignatureAvaxBuffer(network, message, prv) {
        const ky = new keychain_1.KeyPair(network.hrp, network.networkID.toString());
        ky.importKey(prv);
        return ky.sign(message);
    }
    /**
     * Avaxp wrapper to create signature and return it for credentials
     * @param network
     * @param message
     * @param prv
     * @return signature
     */
    createSignature(network, message, prv) {
        return Buffer.from(this.createSignatureAvaxBuffer(network, avalanche_1.Buffer.from(message), avalanche_1.Buffer.from(prv)));
    }
    /**
     * Avaxp wrapper to verify signature using Avalanche's buffer
     * @param network
     * @param message
     * @param signature
     * @param prv
     * @return true if it's verify successful
     */
    verifySignatureAvaxBuffer(network, message, signature, prv) {
        const ky = new keychain_1.KeyPair(network.hrp, network.networkID.toString());
        ky.importKey(prv);
        return ky.verify(message, signature);
    }
    /**
     * Avaxp wrapper to verify signature
     * @param network
     * @param message
     * @param signature
     * @param prv
     * @return true if it's verify successful
     */
    verifySignature(network, message, signature, prv) {
        return this.verifySignatureAvaxBuffer(network, avalanche_1.Buffer.from(message), avalanche_1.Buffer.from(signature), avalanche_1.Buffer.from(prv));
    }
    createSig(sigHex) {
        const sig = new common_1.Signature();
        sig.fromBuffer(avalanche_1.Buffer.from(sigHex.padStart(130, '0'), 'hex'));
        return sig;
    }
    createNewSig(sigHex) {
        const buffer = avalanche_1.Buffer.from(sigHex.padStart(130, '0'), 'hex');
        return new avalanchejs_1.Signature(buffer);
    }
    /**
     * Avaxp wrapper to recovery signature using Avalanche's buffer
     * @param network
     * @param message
     * @param signature
     * @return
     */
    recoverySignatureAvaxBuffer(network, message, signature) {
        const ky = new keychain_1.KeyPair(network.hrp, network.networkID.toString());
        return ky.recover(message, signature);
    }
    /**
     * Avaxp wrapper to verify signature
     * @param network
     * @param message
     * @param signature
     * @return true if it's verify successful
     */
    recoverySignature(network, message, signature) {
        return Buffer.from(this.recoverySignatureAvaxBuffer(network, avalanche_1.Buffer.from(message), avalanche_1.Buffer.from(signature)));
    }
    sha256(buf) {
        return createHash.default('sha256').update(buf).digest();
    }
    /**
     * Check the raw transaction has a valid format in the blockchain context, throw otherwise.
     * It's to reuse in TransactionBuilder and TransactionBuilderFactory
     *
     * @param rawTransaction Transaction as hex string
     */
    validateRawTransaction(rawTransaction) {
        if (!rawTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Raw transaction is empty');
        }
        if (!utils.allHexChars(rawTransaction)) {
            throw new sdk_core_1.ParseTransactionError('Raw transaction is not hex string');
        }
    }
    /**
     * Check if tx is for the blockchainId
     *
     * @param {DeprecatedTx} tx
     * @param {string} blockchainId
     * @returns true if tx is for blockchainId
     */
    isTransactionOf(tx, blockchainId) {
        return utils.cb58Encode(tx.getUnsignedTx().getTransaction().getBlockchainID()) === blockchainId;
    }
    /**
     * Check if Output is from PVM.
     * Output could be EVM or PVM output.
     * @param {DeprecatedOutput} output
     * @returns {boolean} output is DeprecatedTransferableOutput
     */
    deprecatedIsTransferableOutput(output) {
        return 'getOutput' in output;
    }
    /**
     * Check if Output is from PVM.
     * Output could be EVM or PVM output.
     * @param {Output} output
     * @returns {boolean} output is TransferableOutput
     */
    isTransferableOutput(output) {
        return (output === null || output === void 0 ? void 0 : output._type) === avalanchejs_1.TypeSymbols.TransferableOutput;
    }
    /**
     * Return a mapper function to that network address representation.
     * @param network required to stringify addresses
     * @return mapper function
     */
    deprecatedMapOutputToEntry(network) {
        return (output) => {
            if (this.deprecatedIsTransferableOutput(output)) {
                const amountOutput = output.getOutput();
                const address = amountOutput
                    .getAddresses()
                    .map((a) => this.addressToString(network.hrp, network.alias, a))
                    .sort()
                    .join(iface_1.ADDRESS_SEPARATOR);
                return {
                    value: amountOutput.getAmount().toString(),
                    address,
                };
            }
            else {
                const evmOutput = output;
                return {
                    // it should be evmOuput.getAmount(), but it returns a 0.
                    value: new avalanche_1.BN(evmOutput.amount).toString(),
                    // C-Chain address.
                    address: '0x' + evmOutput.getAddressString(),
                };
            }
        };
    }
    /**
     * Return a mapper function to that network address representation.
     * @param network required to stringify addresses
     * @return mapper function
     */
    mapOutputToEntry(network) {
        return (output) => {
            if (this.isTransferableOutput(output)) {
                const outputAmount = output.amount();
                const address = output.output
                    .getOwners()
                    .map((a) => this.addressToString(network.hrp, network.alias, avalanche_1.Buffer.from(a)))
                    .sort()
                    .join(iface_1.ADDRESS_SEPARATOR);
                return {
                    value: outputAmount.toString(),
                    address,
                };
            }
            else {
                throw new Error('Invalid output type');
            }
        };
    }
    /**
     * remove hex prefix (0x)
     * @param hex string
     * @returns hex without 0x
     */
    removeHexPrefix(hex) {
        if (hex.startsWith('0x')) {
            return hex.substring(2);
        }
        return hex;
    }
    /**
     * Outputidx convert from number (as string) to buffer.
     * @param {string} outputidx number
     * @return {BufferAvax} buffer of size 4 with that number value
     */
    outputidxNumberToBuffer(outputidx) {
        return avalanche_1.Buffer.from(Number(outputidx).toString(16).padStart(8, '0'), 'hex');
    }
    /**
     * Outputidx buffer to number (as string)
     * @param {BufferAvax} outputidx
     * @return {string} outputidx number
     */
    outputidxBufferToNumber(outputidx) {
        return parseInt(outputidx.toString('hex'), 16).toString();
    }
}
exports.Utils = Utils;
const utils = new Utils();
exports.default = utils;
//# sourceMappingURL=data:application/json;base64,