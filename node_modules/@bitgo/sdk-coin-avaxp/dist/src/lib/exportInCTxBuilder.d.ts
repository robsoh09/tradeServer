/// <reference types="bn.js" />
import { TransactionType } from '@bitgo/sdk-core';
import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { BN } from 'avalanche';
import { ExportTx } from 'avalanche/dist/apis/evm';
import { AtomicInCTransactionBuilder } from './atomicInCTransactionBuilder';
import { DeprecatedTransaction } from './deprecatedTransaction';
import { DecodedUtxoObj, DeprecatedBaseTx, DeprecatedTx } from './iface';
export declare class ExportInCTxBuilder extends AtomicInCTransactionBuilder {
    private _amount;
    private _nonce;
    constructor(_coinConfig: Readonly<CoinConfig>);
    /**
     * Utxos are not required in Export Tx in C-Chain.
     * Override utxos to prevent used by throwing a error.
     *
     * @param {DecodedUtxoObj[]} value ignored
     */
    utxos(value: DecodedUtxoObj[]): this;
    /**
     * Amount is a long that specifies the quantity of the asset that this output owns. Must be positive.
     * The transaction output amount add a fixed fee that will be paid upon import.
     *
     * @param {BN | string} amount The withdrawal amount
     */
    amount(amount: BN | string): this;
    /**
     * Set the nonce of C-Chain sender address
     *
     * @param {number | string} nonce - number that can be only used once
     */
    nonce(nonce: number | string): this;
    /**
     * Export tx target P wallet.
     *
     * @param pAddresses
     */
    to(pAddresses: string | string[]): this;
    protected get transactionType(): TransactionType;
    initBuilder(tx: DeprecatedTx): this;
    static verifyTxType(baseTx: DeprecatedBaseTx): baseTx is ExportTx;
    verifyTxType(baseTx: DeprecatedBaseTx): baseTx is ExportTx;
    /**
     * Build the export in C-chain transaction
     * @protected
     */
    protected buildAvaxTransaction(): void;
    /** @inheritdoc */
    protected fromImplementation(rawTransaction: string): DeprecatedTransaction;
    /**
     * Check the amount is positive.
     * @param amount
     */
    validateNonce(nonce: BN): void;
}
//# sourceMappingURL=exportInCTxBuilder.d.ts.map