/// <reference types="bn.js" />
import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { TransactionType } from '@bitgo/sdk-core';
import { ImportTx, TransferableInput } from 'avalanche/dist/apis/evm';
import { BN } from 'avalanche';
import { Credential } from 'avalanche/dist/common';
import { DeprecatedBaseTx, DeprecatedTx } from './iface';
import { AtomicInCTransactionBuilder } from './atomicInCTransactionBuilder';
export declare class ImportInCTxBuilder extends AtomicInCTransactionBuilder {
    constructor(_coinConfig: Readonly<CoinConfig>);
    /**
     * C-chain address who is target of the import.
     * Address format is eth like
     * @param {string} cAddress
     */
    to(cAddress: string): this;
    protected get transactionType(): TransactionType;
    /** @inheritdoc */
    initBuilder(tx: DeprecatedTx): this;
    static verifyTxType(baseTx: DeprecatedBaseTx): baseTx is ImportTx;
    verifyTxType(baseTx: DeprecatedBaseTx): baseTx is ImportTx;
    /**
     * Build the import in C-chain transaction
     * @protected
     */
    protected buildAvaxTransaction(): void;
    /**
     * Create inputs by mapping {@see utxoEngine.utxoToInput} result.
     * Reorder sender to handle recover signer.
     * TransferableInput is a EVM Tx.
     * @return {
     *     inputs: TransferableInput[];
     *     credentials: Credential[];
     *     amount: BN;
     *   } where amount is the sum of inputs amount and credentials has signer address to be replaced with correct signature.
     * @protected
     *
     */
    protected createInputs(): {
        inputs: TransferableInput[];
        credentials: Credential[];
        amount: BN;
    };
}
//# sourceMappingURL=importInCTxBuilder.d.ts.map