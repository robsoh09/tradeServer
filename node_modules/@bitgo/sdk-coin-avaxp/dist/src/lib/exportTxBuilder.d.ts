/// <reference types="bn.js" />
import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { TransactionType } from '@bitgo/sdk-core';
import { AtomicTransactionBuilder } from './atomicTransactionBuilder';
import { ExportTx, TransferableOutput } from 'avalanche/dist/apis/platformvm';
import { BN } from 'avalanche';
import { DeprecatedTx, DeprecatedBaseTx } from './iface';
export declare class ExportTxBuilder extends AtomicTransactionBuilder {
    private _amount;
    constructor(_coinConfig: Readonly<CoinConfig>);
    protected get transactionType(): TransactionType;
    /**
     * Amount is a long that specifies the quantity of the asset that this output owns. Must be positive.
     *
     * @param {BN | string} amount The withdrawal amount
     */
    amount(value: BN | string): this;
    /** @inheritdoc */
    initBuilder(tx: DeprecatedTx): this;
    static verifyTxType(baseTx: DeprecatedBaseTx): baseTx is ExportTx;
    verifyTxType(baseTx: DeprecatedBaseTx): baseTx is ExportTx;
    /**
     * Create the internal avalanche transaction.
     * @protected
     */
    protected buildAvaxTransaction(): void;
    /**
     * Create the ExportedOut where the recipient address are the sender.
     * Later a importTx should complete the operations signing with the same keys.
     * @protected
     */
    protected exportedOutputs(): TransferableOutput[];
}
//# sourceMappingURL=exportTxBuilder.d.ts.map