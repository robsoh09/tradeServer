"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DelegatorTxBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const deprecatedTransactionBuilder_1 = require("./deprecatedTransactionBuilder");
const platformvm_1 = require("avalanche/dist/apis/platformvm");
const avalanche_1 = require("avalanche");
const iface_1 = require("./iface");
const utils_1 = __importDefault(require("./utils"));
const utxoEngine_1 = require("./utxoEngine");
class DelegatorTxBuilder extends deprecatedTransactionBuilder_1.DeprecatedTransactionBuilder {
    /**
     *
     * @param coinConfig
     */
    constructor(coinConfig) {
        super(coinConfig);
        const network = coinConfig.network;
        this._stakeAmount = new avalanche_1.BN(network.minStake);
    }
    /**
     * get transaction type
     * @protected
     */
    get transactionType() {
        return sdk_core_1.TransactionType.AddDelegator;
    }
    /**
     * Addresses where reward should be deposit
     * @param {string | string[]} address - single address or array of addresses to receive rewards
     */
    rewardAddresses(address) {
        const rewardAddresses = address instanceof Array ? address : [address];
        this.transaction._rewardAddresses = rewardAddresses.map(utils_1.default.parseAddress);
        return this;
    }
    /**
     *
     * @param nodeID
     */
    nodeID(value) {
        this.validateNodeID(value);
        this._nodeID = value;
        return this;
    }
    /**
     * start time of staking period
     * @param value
     */
    startTime(value) {
        this._startTime = new avalanche_1.BN(value);
        return this;
    }
    /**
     * end time of staking period
     * @param value
     */
    endTime(value) {
        this._endTime = new avalanche_1.BN(value);
        return this;
    }
    /**
     *
     * @param value
     */
    stakeAmount(value) {
        const valueBN = avalanche_1.BN.isBN(value) ? value : new avalanche_1.BN(value);
        this.validateStakeAmount(valueBN);
        this._stakeAmount = valueBN;
        return this;
    }
    // region Validators
    /**
     * validates a correct NodeID is used
     * @param nodeID
     */
    validateNodeID(nodeID) {
        if (!nodeID) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing nodeID');
        }
        if (nodeID.slice(0, 6) !== 'NodeID') {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: invalid NodeID tag');
        }
        const bintools = avalanche_1.BinTools.getInstance();
        if (!(bintools.b58ToBuffer(nodeID.slice(7)).length === 24)) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: NodeID is not in cb58 format');
        }
    }
    /**
     *
     *   protected _startTime: Date;
     *   protected _endTime: Date;
     *   2 weeks = 1209600
     *   1 year = 31556926
     *   unix time stamp based off seconds
     */
    validateStakeDuration(startTime, endTime) {
        const oneDayLater = new avalanche_1.BN(Date.now()).add(new avalanche_1.BN(86400));
        if (!startTime.gt(oneDayLater)) {
            throw new sdk_core_1.BuildTransactionError('Start time needs to be one day greater than current time');
        }
        if (endTime < startTime) {
            throw new sdk_core_1.BuildTransactionError('End date cannot be less than start date');
        }
        if (startTime.add(new avalanche_1.BN(this.transaction._network.minStakeDuration)).gt(endTime)) {
            throw new sdk_core_1.BuildTransactionError('End date must be greater than or equal to two weeks');
        }
        if (endTime.gt(startTime.add(new avalanche_1.BN(this.transaction._network.maxStakeDuration)))) {
            throw new sdk_core_1.BuildTransactionError('End date must be less than or equal to one year');
        }
    }
    /**
     *
     * @param amount
     */
    validateStakeAmount(amount) {
        const minStake = new avalanche_1.BN(this.transaction._network.minStake);
        if (amount.lt(minStake)) {
            throw new sdk_core_1.BuildTransactionError('Minimum staking amount is ' + Number(minStake) / 1000000000 + ' AVAX.');
        }
    }
    // endregion
    /** @inheritdoc */
    initBuilder(tx) {
        super.initBuilder(tx);
        const baseTx = tx.getUnsignedTx().getTransaction();
        if (!this.verifyTxType(baseTx)) {
            throw new sdk_core_1.NotSupported('Transaction cannot be parsed or has an unsupported transaction type');
        }
        // The StakeOuts is a {@link stakeTransferOut} result.
        // It's expected to have only one outputs with the addresses of the sender.
        const outputs = baseTx.getStakeOuts();
        if (outputs.length != 1) {
            throw new sdk_core_1.BuildTransactionError('Transaction can have one external output');
        }
        const output = outputs[0];
        if (!output.getAssetID().equals(this.transaction._assetId)) {
            throw new Error('The Asset ID of the output does not match the transaction');
        }
        const secpOut = output.getOutput();
        this.transaction._locktime = secpOut.getLocktime();
        this.transaction._threshold = secpOut.getThreshold();
        // output addresses are the sender addresses
        this.transaction._fromAddresses = secpOut.getAddresses();
        this._nodeID = baseTx.getNodeIDString();
        this._startTime = baseTx.getStartTime();
        this._endTime = baseTx.getEndTime();
        this._stakeAmount = baseTx.getStakeAmount();
        this.transaction._utxos = (0, utxoEngine_1.deprecatedRecoverUtxos)(baseTx.getIns());
        return this;
    }
    static verifyTxType(baseTx) {
        return baseTx.getTypeID() === platformvm_1.PlatformVMConstants.ADDVALIDATORTX;
    }
    verifyTxType(baseTx) {
        return DelegatorTxBuilder.verifyTxType(baseTx);
    }
    /**
     *
     * @protected
     */
    buildAvaxTransaction() {
        this.validateStakeDuration(this._startTime, this._endTime);
        const { inputs, outputs, credentials } = this.createInputOutput();
        this.transaction.setTransaction(new platformvm_1.Tx(new platformvm_1.UnsignedTx(new platformvm_1.AddDelegatorTx(this.transaction._networkID, this.transaction._blockchainID, outputs, inputs, undefined, utils_1.default.NodeIDStringToBuffer(this._nodeID), this._startTime, this._endTime, this._stakeAmount, [this.stakeTransferOut()], this.rewardOwnersOutput())), credentials));
    }
    /**
     * Create the StakeOut where the recipient address are the sender.
     * @protected
     *
     */
    stakeTransferOut() {
        return new platformvm_1.TransferableOutput(this.transaction._assetId, new platformvm_1.SECPTransferOutput(this._stakeAmount, this.transaction._fromAddresses, this.transaction._locktime, this.transaction._threshold));
    }
    rewardOwnersOutput() {
        // if there are no reward addresses, the sender gets the rewards
        if (!this.transaction._rewardAddresses || this.transaction._rewardAddresses.length === 0) {
            this.transaction._rewardAddresses = this.transaction._fromAddresses;
        }
        return new platformvm_1.ParseableOutput(new platformvm_1.SECPOwnerOutput(this.transaction._rewardAddresses, this.transaction._locktime, this.transaction._threshold));
    }
    /**
     * Threshold must be 2 and since output always get reordered we want to make sure we can always add signatures in the correct location
     * To find the correct location for the signature, we use the ouput's addresses to create the signatureIdx in the order that we desire
     * 0: user key, 1: hsm key, 2: recovery key
     * @protected
     */
    createInputOutput() {
        const inputs = [];
        const outputs = [];
        // amount spent so far
        let currentTotal = new avalanche_1.BN(0);
        // delegating and validating have no fees
        const totalTarget = this._stakeAmount.clone();
        const credentials = [];
        // convert fromAddresses to string
        // fromAddresses = bitgo order if we are in WP
        // fromAddresses = onchain order if we are in from
        const bitgoAddresses = this.transaction._fromAddresses.map((b) => utils_1.default.addressToString(this.transaction._network.hrp, this.transaction._network.alias, b));
        /*
        A = user key
        B = hsm key
        C = backup key
        bitgoAddresses = bitgo addresses [ A, B, C ]
        utxo.addresses = IMS addresses [ B, C, A ]
        utxo.addressesIndex = [ 2, 0, 1 ]
        we pick 0, 1 for non-recovery
        we pick 1, 2 for recovery
        */
        this.transaction._utxos.forEach((utxo) => {
            // in WP, output.addressesIndex is empty, so fill it
            if (!utxo.addressesIndex || utxo.addressesIndex.length === 0) {
                utxo.addressesIndex = bitgoAddresses.map((a) => utxo.addresses.indexOf(a));
            }
            // in OVC, output.addressesIndex is defined correctly from the previous iteration
        });
        // validate the utxos
        this.transaction._utxos.forEach((utxo) => {
            var _a;
            if (!utxo) {
                throw new sdk_core_1.BuildTransactionError('Utxo is undefined');
            }
            // addressesIndex should neve have a mismatch
            if ((_a = utxo.addressesIndex) === null || _a === void 0 ? void 0 : _a.includes(-1)) {
                throw new sdk_core_1.BuildTransactionError('Addresses are inconsistent');
            }
            if (utxo.threshold !== this.transaction._threshold) {
                throw new sdk_core_1.BuildTransactionError('Threshold is inconsistent');
            }
        });
        // if we are in OVC, none of the utxos will have addresses since they come from
        // deserialized inputs (which don't have addresses), not the IMS
        const buildOutputs = this.transaction._utxos[0].addresses.length !== 0;
        this.transaction._utxos.forEach((utxo, i) => {
            var _a;
            if (utxo.outputID === iface_1.SECP256K1_Transfer_Output) {
                const txidBuf = utils_1.default.cb58Decode(utxo.txid);
                const amt = new avalanche_1.BN(utxo.amount);
                const outputidx = utils_1.default.outputidxNumberToBuffer(utxo.outputidx);
                const addressesIndex = (_a = utxo.addressesIndex) !== null && _a !== void 0 ? _a : [];
                // either user (0) or recovery (2)
                const firstIndex = this.recoverSigner ? 2 : 0;
                const bitgoIndex = 1;
                currentTotal = currentTotal.add(amt);
                const secpTransferInput = new platformvm_1.SECPTransferInput(amt);
                if (!buildOutputs) {
                    addressesIndex.forEach((i) => secpTransferInput.addSignatureIdx(i, this.transaction._fromAddresses[i]));
                }
                else {
                    // if user/backup > bitgo
                    if (addressesIndex[bitgoIndex] < addressesIndex[firstIndex]) {
                        secpTransferInput.addSignatureIdx(addressesIndex[bitgoIndex], this.transaction._fromAddresses[bitgoIndex]);
                        secpTransferInput.addSignatureIdx(addressesIndex[firstIndex], this.transaction._fromAddresses[firstIndex]);
                        credentials.push((0, platformvm_1.SelectCredentialClass)(secpTransferInput.getCredentialID(), // 9
                        ['', this.transaction._fromAddresses[firstIndex].toString('hex')].map(utils_1.default.createSig)));
                    }
                    else {
                        secpTransferInput.addSignatureIdx(addressesIndex[firstIndex], this.transaction._fromAddresses[firstIndex]);
                        secpTransferInput.addSignatureIdx(addressesIndex[bitgoIndex], this.transaction._fromAddresses[bitgoIndex]);
                        credentials.push((0, platformvm_1.SelectCredentialClass)(secpTransferInput.getCredentialID(), [this.transaction._fromAddresses[firstIndex].toString('hex'), ''].map(utils_1.default.createSig)));
                    }
                }
                const input = new platformvm_1.TransferableInput(txidBuf, outputidx, this.transaction._assetId, secpTransferInput);
                inputs.push(input);
            }
        });
        if (buildOutputs) {
            if (currentTotal.lt(totalTarget)) {
                throw new sdk_core_1.BuildTransactionError(`Utxo outputs get ${currentTotal.toString()} and ${totalTarget.toString()} is required`);
            }
            else if (currentTotal.gt(totalTarget)) {
                outputs.push(new platformvm_1.TransferableOutput(this.transaction._assetId, new platformvm_1.SECPTransferOutput(currentTotal.sub(totalTarget), this.transaction._fromAddresses, this.transaction._locktime, this.transaction._threshold)));
            }
        }
        // get outputs and credentials from the deserialized transaction if we are in OVC
        return {
            inputs,
            outputs: !buildOutputs ? this.transaction.avaxPTransaction.getOuts() : outputs,
            credentials: credentials.length === 0 ? this.transaction.credentials : credentials,
        };
    }
}
exports.DelegatorTxBuilder = DelegatorTxBuilder;
//# sourceMappingURL=data:application/json;base64,