"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
const avalanchejs_1 = require("@bitgo-forks/avalanchejs");
const sdk_core_1 = require("@bitgo/sdk-core");
const avalanche_1 = require("avalanche");
const iface_1 = require("./iface");
const utils_1 = __importDefault(require("./utils"));
/**
 * Checks if a signature is empty
 * @param signature
 * @returns {boolean}
 */
function isEmptySignature(signature) {
    return !!signature && utils_1.default.removeHexPrefix(signature).startsWith(''.padStart(90, '0'));
}
function generateSelectorSignature(signatures) {
    if (signatures.length > 1 && signatures.every((sig) => isEmptySignature(sig))) {
        // Look for address.
        return function (sig, address) {
            try {
                if (!isEmptySignature(sig)) {
                    return false;
                }
                if (sig.startsWith('0x'))
                    sig = sig.substring(2);
                const pub = sig.substring(90);
                return pub === address;
            }
            catch (e) {
                return false;
            }
        };
    }
    else {
        // Look for empty string
        return function (sig, address) {
            return isEmptySignature(sig);
        };
    }
}
// end region utils for sign
class Transaction extends sdk_core_1.BaseTransaction {
    constructor(coinConfig) {
        super(coinConfig);
        this._threshold = 2;
        this._locktime = BigInt(0);
        this._fromAddresses = [];
        this._rewardAddresses = [];
        this._utxos = [];
        this._fee = {};
        this._network = coinConfig.network;
        this._assetId = this._network.avaxAssetID;
        this._blockchainID = this._network.blockchainID;
        this._networkID = this._network.networkID;
    }
    get avaxPTransaction() {
        return this._avaxTransaction.getTx().baseTx;
    }
    get signature() {
        if (this.credentials.length === 0) {
            return [];
        }
        return this.credentials[0].getSignatures().filter((s) => !isEmptySignature(s));
    }
    get credentials() {
        var _a;
        return (_a = this._avaxTransaction) === null || _a === void 0 ? void 0 : _a.credentials;
    }
    get hasCredentials() {
        return this.credentials !== undefined && this.credentials.length > 0;
    }
    /** @inheritdoc */
    canSign({ key }) {
        // TODO(BG-56700):  Improve canSign by check in addresses in empty credentials match signer
        return true;
    }
    /**
     * Sign an avaxp transaction and update the transaction hex
     * @param {KeyPair} keyPair
     */
    async sign(keyPair) {
        const prv = keyPair.getPrivateKey();
        const addressHex = keyPair.getAddressBuffer().toString('hex');
        if (!prv) {
            throw new sdk_core_1.SigningError('Missing private key');
        }
        if (!this.avaxPTransaction) {
            throw new sdk_core_1.InvalidTransactionError('empty transaction to sign');
        }
        if (!this.hasCredentials) {
            throw new sdk_core_1.InvalidTransactionError('empty credentials to sign');
        }
        const unsignedTx = this._avaxTransaction;
        const unsignedBytes = unsignedTx.toBytes();
        const publicKey = avalanchejs_1.secp256k1.getPublicKey(prv);
        if (unsignedTx.hasPubkey(publicKey)) {
            const signature = await avalanchejs_1.secp256k1.sign(unsignedBytes, prv);
            let checkSign = undefined;
            unsignedTx.credentials.forEach((c, index) => {
                if (checkSign === undefined) {
                    checkSign = generateSelectorSignature(c.getSignatures());
                }
                let find = false;
                c.getSignatures().forEach((sig, index) => {
                    if (checkSign && checkSign(sig, addressHex)) {
                        c.setSignature(index, signature);
                        find = true;
                    }
                });
                if (!find) {
                    throw new sdk_core_1.SigningError(`Private key cannot sign the transaction, address hex ${addressHex}, public key: ${publicKey}`);
                }
            });
        }
    }
    toHexString(byteArray) {
        return avalanchejs_1.utils.bufferToHex(byteArray);
    }
    /** @inheritdoc */
    /**
     * should be of signedTx doing this with baseTx
     */
    toBroadcastFormat() {
        if (!this.avaxPTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction data');
        }
        return this.toHexString(avalanchejs_1.utils.addChecksum(this._avaxTransaction.getSignedTx().toBytes()));
    }
    // types - stakingTransaction, import, export
    toJson() {
        if (!this.avaxPTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction data');
        }
        return {
            id: this.id,
            inputs: this.inputs,
            fromAddresses: this.fromAddresses,
            threshold: this._threshold,
            locktime: this._locktime.toString(),
            type: this.type,
            signatures: this.signature,
            outputs: this.outputs,
            changeOutputs: this.changeOutputs,
        };
    }
    setTransaction(tx) {
        this._avaxTransaction = tx;
    }
    /**
     * Set the transaction type
     *
     * @param {TransactionType} transactionType The transaction type to be set
     */
    setTransactionType(transactionType) {
        if (![sdk_core_1.TransactionType.AddPermissionlessValidator].includes(transactionType)) {
            throw new Error(`Transaction type ${transactionType} is not supported`);
        }
        this._type = transactionType;
    }
    /**
     * Returns the portion of the transaction that needs to be signed in Buffer format.
     * Only needed for coins that support adding signatures directly (e.g. TSS).
     */
    get signablePayload() {
        return utils_1.default.sha256(this._avaxTransaction.toBytes());
    }
    get id() {
        const bufferArray = utils_1.default.sha256(this._avaxTransaction.toBytes());
        return utils_1.default.cb58Encode(avalanche_1.Buffer.from(bufferArray));
    }
    get fromAddresses() {
        return this._fromAddresses.map((a) => avalanchejs_1.utils.format(this._network.alias, this._network.hrp, a));
    }
    get rewardAddresses() {
        return this._rewardAddresses.map((a) => avalanchejs_1.utils.format(this._network.alias, this._network.hrp, a));
    }
    /**
     * Get the list of outputs. Amounts are expressed in absolute value.
     */
    get outputs() {
        switch (this.type) {
            case sdk_core_1.TransactionType.AddPermissionlessValidator:
                return [
                    {
                        address: this._avaxTransaction.getTx().subnetValidator.validator.nodeId.toString(),
                        value: this._avaxTransaction.getTx().subnetValidator.validator.weight.toJSON(),
                    },
                ];
            default:
                return [];
        }
    }
    get fee() {
        return { fee: '0', ...this._fee };
    }
    get changeOutputs() {
        return this._avaxTransaction.getTx().baseTx.outputs.map(utils_1.default.mapOutputToEntry(this._network));
    }
    get inputs() {
        let inputs;
        switch (this.type) {
            case sdk_core_1.TransactionType.AddPermissionlessValidator:
            default:
                inputs = this._avaxTransaction.getTx().baseTx
                    .inputs;
                break;
        }
        return inputs.map((input) => {
            return {
                id: input.utxoID.txID.toString() + iface_1.INPUT_SEPARATOR + input.utxoID.outputIdx.value(),
                address: this.fromAddresses.sort().join(iface_1.ADDRESS_SEPARATOR),
                value: input.amount().toString(),
            };
        });
    }
    /**
     * Avax wrapper to create signature and return it for credentials
     * @param prv
     * @return hexstring
     */
    createSignature(prv) {
        const signval = utils_1.default.createSignatureAvaxBuffer(this._network, avalanche_1.Buffer.from(this.signablePayload), avalanche_1.Buffer.from(prv));
        return signval.toString('hex');
    }
    /** @inheritdoc */
    explainTransaction() {
        const txJson = this.toJson();
        const displayOrder = ['id', 'inputs', 'outputAmount', 'changeAmount', 'outputs', 'changeOutputs', 'fee', 'type'];
        const outputAmount = txJson.outputs.reduce((p, n) => p.add(new avalanche_1.BN(n.value)), new avalanche_1.BN(0)).toString();
        const changeAmount = txJson.changeOutputs.reduce((p, n) => p.add(new avalanche_1.BN(n.value)), new avalanche_1.BN(0)).toString();
        let rewardAddresses;
        if ([sdk_core_1.TransactionType.AddPermissionlessValidator].includes(txJson.type)) {
            rewardAddresses = this.rewardAddresses;
            displayOrder.splice(6, 0, 'rewardAddresses');
        }
        return {
            displayOrder,
            id: txJson.id,
            inputs: txJson.inputs,
            outputs: txJson.outputs.map((o) => ({ address: o.address, amount: o.value })),
            outputAmount,
            changeOutputs: txJson.changeOutputs.map((o) => ({ address: o.address, amount: o.value })),
            changeAmount,
            rewardAddresses,
            fee: this.fee,
            type: txJson.type,
        };
    }
}
exports.Transaction = Transaction;
//# sourceMappingURL=data:application/json;base64,