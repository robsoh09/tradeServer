"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionlessValidatorTxBuilder = void 0;
const avalanchejs_1 = require("@bitgo-forks/avalanchejs");
const sdk_core_1 = require("@bitgo/sdk-core");
const avalanche_1 = require("avalanche");
const iface_1 = require("./iface");
const keyPair_1 = require("./keyPair");
const transactionBuilder_1 = require("./transactionBuilder");
const utils_1 = __importDefault(require("./utils"));
const utxoEngine_1 = require("./utxoEngine");
class PermissionlessValidatorTxBuilder extends transactionBuilder_1.TransactionBuilder {
    /**
     *
     * @param coinConfig
     */
    constructor(coinConfig) {
        super(coinConfig);
        this._signer = [];
        this.recoverSigner = false;
    }
    /**
     * get transaction type
     * @protected
     */
    get transactionType() {
        return sdk_core_1.TransactionType.AddPermissionlessValidator;
    }
    // region Validators
    /**
     * Validates locktime
     * @param locktime
     */
    validateLocktime(locktime) {
        if (locktime < BigInt(0)) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: locktime must be 0 or higher');
        }
    }
    /**
     * Validate that the delegation fee is at least the minDelegationFee
     * @param delegationFeeRate number
     */
    validateDelegationFeeRate(delegationFeeRate) {
        if (delegationFeeRate < Number(this.transaction._network.minDelegationFee)) {
            throw new sdk_core_1.BuildTransactionError(`Delegation fee cannot be less than ${this.transaction._network.minDelegationFee}`);
        }
    }
    /**
     * Check the UTXO has expected fields.
     * @param UTXO
     */
    validateUtxo(value) {
        ['outputID', 'amount', 'txid', 'outputidx'].forEach((field) => {
            if (!value.hasOwnProperty(field))
                throw new sdk_core_1.BuildTransactionError(`Utxos required ${field}`);
        });
    }
    // endregion
    /**
     * Addresses where reward should be deposit
     * @param {string | string[]} address - single address or array of addresses to receive rewards
     */
    rewardAddresses(address) {
        const rewardAddresses = address instanceof Array ? address : [address];
        this.transaction._rewardAddresses = rewardAddresses.map(utils_1.default.parseAddress);
        return this;
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        const manager = avalanchejs_1.utils.getManagerForVM('PVM');
        const [codec, rest] = manager.getCodecFromBuffer(avalanchejs_1.utils.hexToBuffer(rawTransaction));
        const tx = codec.UnpackPrefix(rest)[0];
        this.initBuilder(tx);
        return this.transaction;
    }
    /** @inheritdoc */
    async buildImplementation() {
        this.buildAvaxTransaction();
        this.transaction.setTransactionType(this.transactionType);
        if (this.hasSigner()) {
            for (const keyPair of this._signer) {
                await this.transaction.sign(keyPair);
            }
        }
        return this.transaction;
    }
    /**
     *
     * @param nodeID
     */
    nodeID(nodeID) {
        this.validateNodeID(nodeID);
        this._nodeID = nodeID;
        return this;
    }
    /**
     *
     * @param blsPublicKey
     */
    blsPublicKey(blsPublicKey) {
        (0, sdk_core_1.isValidBLSPublicKey)(blsPublicKey);
        this._blsPublicKey = blsPublicKey;
        return this;
    }
    /**
     *
     * @param blsSignature
     */
    blsSignature(blsSignature) {
        (0, sdk_core_1.isValidBLSSignature)(blsSignature);
        this._blsSignature = blsSignature;
        return this;
    }
    /**
     * Locktime is a long that contains the unix timestamp that this output can be spent after.
     * The unix timestamp is specific to the second.
     * @param value
     */
    locktime(value) {
        this.validateLocktime(BigInt(value));
        this._transaction._locktime = BigInt(value);
        return this;
    }
    /**
     * set the delegationFeeRate
     * @param value number
     */
    delegationFeeRate(value) {
        this.validateDelegationFeeRate(value);
        this._delegationFeeRate = value;
        return this;
    }
    /**
     * start time of staking period
     * @param value
     */
    startTime(value) {
        this._startTime = BigInt(value);
        return this;
    }
    /**
     * end time of staking period
     * @param value
     */
    endTime(value) {
        this._endTime = BigInt(value);
        return this;
    }
    /**
     *
     * @param value
     */
    stakeAmount(value) {
        const valueBigInt = typeof value === 'bigint' ? value : BigInt(value);
        this.validateStakeAmount(valueBigInt);
        this._stakeAmount = valueBigInt;
        return this;
    }
    // region Validators
    /**
     * validates a correct NodeID is used
     * @param nodeID
     */
    validateNodeID(nodeID) {
        if (!nodeID) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing nodeID');
        }
        if (nodeID.slice(0, 6) !== 'NodeID') {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: invalid NodeID tag');
        }
        if (!(avalanchejs_1.utils.base58.decode(nodeID.slice(7)).length === 24)) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: NodeID is not in cb58 format');
        }
    }
    /**
     * Validate stake duration
     * @param startTime
     * @param endTime
     */
    validateStakeDuration(startTime, endTime) {
        if (endTime < startTime) {
            throw new sdk_core_1.BuildTransactionError('End date cannot be less than start date');
        }
    }
    /**
     * Validate stake amount
     * @param amount
     */
    validateStakeAmount(amount) {
        const minStake = BigInt(this.transaction._network.minStake);
        if (amount < minStake) {
            throw new sdk_core_1.BuildTransactionError('Minimum staking amount is ' + Number(minStake) / 1000000000 + ' AVAX.');
        }
        return;
    }
    // endregion
    /** @inheritdoc */
    initBuilder(tx) {
        super.initBuilder(tx);
        const permissionlessValidatorTx = tx.tx;
        if (!this.verifyTxType(permissionlessValidatorTx)) {
            throw new sdk_core_1.NotSupported('Transaction cannot be parsed or has an unsupported transaction type');
        }
        const outputs = permissionlessValidatorTx.baseTx.outputs;
        if (outputs.length !== 1) {
            throw new sdk_core_1.BuildTransactionError('Transaction can have one external output');
        }
        const output = outputs[0].output;
        if (outputs[0].getAssetId() !== this.transaction._assetId) {
            throw new Error('The Asset ID of the output does not match the transaction');
        }
        this.transaction._blsPublicKey = avalanchejs_1.utils.bufferToHex(permissionlessValidatorTx.signer.proof.publicKey);
        this._blsPublicKey = this.transaction._blsPublicKey;
        this.transaction._blsSignature = avalanchejs_1.utils.bufferToHex(permissionlessValidatorTx.signer.proof.signature);
        this._blsSignature = this.transaction._blsSignature;
        this.transaction._locktime = output.outputOwners.locktime.value();
        this.transaction._threshold = output.outputOwners.threshold.value();
        this.transaction._nodeID = permissionlessValidatorTx.subnetValidator.validator.nodeId.toString();
        this._nodeID = this.transaction._nodeID;
        this.transaction._startTime = permissionlessValidatorTx.subnetValidator.validator.startTime.value();
        this._startTime = this.transaction._startTime;
        this.transaction._endTime = permissionlessValidatorTx.subnetValidator.validator.endTime.value();
        this._endTime = this.transaction._endTime;
        this.transaction._fromAddresses = output.outputOwners.addrs.map((a) => a.toBytes());
        this.transaction._stakeAmount = permissionlessValidatorTx.stake[0].output.amount();
        this.stakeAmount(permissionlessValidatorTx.stake[0].output.amount());
        this.transaction._utxos = (0, utxoEngine_1.recoverUtxos)(permissionlessValidatorTx.getInputs());
        // TODO(CR-1073): remove log
        console.log('utxos: ', this.transaction._utxos);
        console.log('fromAddresses: ', this.transaction.fromAddresses);
        return this;
    }
    static verifyTxType(type) {
        return type === avalanchejs_1.TypeSymbols.AddPermissionlessValidatorTx;
    }
    verifyTxType(tx) {
        return PermissionlessValidatorTxBuilder.verifyTxType(tx._type);
    }
    /**
     * Since addresses in outputs get reordered, we need to make sure signatures
     * are added in the correct position
     * To find the position, we use the output's addresses to create the
     * signatureIdx in the order needed (i.e. [user, bitgo, backup])
     * @protected
     */
    calculateUtxos() {
        var _a, _b;
        const inputs = [];
        const stakeOutputs = [];
        const changeOutputs = [];
        const utxos = [];
        let currentTotal = BigInt(0);
        // delegating and validating have no fees
        const totalTarget = this._stakeAmount.valueOf();
        const credentials = (_a = this.transaction.credentials) !== null && _a !== void 0 ? _a : [];
        // Convert fromAddresses to string
        // The order of fromAddresses is determined by the source of the data
        // When building from params, the order is [user, bitgo, backup]
        // The order from tx hex is [bitgo, backup, user]
        const bitgoAddresses = this.transaction._fromAddresses.map((b) => avalanchejs_1.utils.format(this.transaction._network.alias, this.transaction._network.hrp, b));
        // TODO(CR-1073): remove log
        console.log(`bitgoAddress: ${bitgoAddresses}`);
        // if we are in OVC, none of the utxos will have addresses since they come from
        // deserialized inputs (which don't have addresses), not the IMS
        const buildOutputs = this.transaction._utxos[0].addresses.length !== 0 || ((_b = this.transaction._utxos[0].addressesIndex) === null || _b === void 0 ? void 0 : _b.length) !== 0;
        const assetId = avalanchejs_1.Id.fromString(this.transaction._assetId);
        this.transaction._utxos.forEach((utxo, index) => {
            var _a;
            // validate the utxos
            if (!utxo) {
                throw new sdk_core_1.BuildTransactionError('Utxo is undefined');
            }
            // addressesIndex should never have a mismatch
            if ((_a = utxo.addressesIndex) === null || _a === void 0 ? void 0 : _a.includes(-1)) {
                throw new sdk_core_1.BuildTransactionError('Addresses are inconsistent');
            }
            if (utxo.threshold < this.transaction._threshold) {
                throw new sdk_core_1.BuildTransactionError('Threshold is inconsistent');
            }
            const bitgoIndexToOnChainIndex = new Map();
            // in WP, output.addressesIndex is empty, so fill it
            if (!utxo.addressesIndex || utxo.addressesIndex.length === 0) {
                utxo.addressesIndex = bitgoAddresses.map((a) => utxo.addresses.indexOf(a));
            }
            // utxo.addresses is null when build from raw
            // but utxo.addressesIndex has only 2 elements when build from raw
            // so the bitgoIndexToOnChainIndex map will be empty
            utxo.addresses.forEach((a) => {
                bitgoIndexToOnChainIndex.set(bitgoAddresses.indexOf(a), utxo.addresses.indexOf(a));
            });
            // TODO(CR-1073): remove log
            console.log(`utxo.addresses: ${utxo.addresses}`);
            console.log(`bitgoIndexToOnChainIndex: ${Array.from(bitgoIndexToOnChainIndex)}`);
            // in OVC, output.addressesIndex is defined correctly from the previous iteration
            if (utxo.outputID === iface_1.SECP256K1_Transfer_Output) {
                const utxoAmount = BigInt(utxo.amount);
                // either user (0) or recovery (2)
                // On regular mode: [user, bitgo] (i.e. [0, 1])
                // On recovery mode: [backup, bitgo] (i.e. [2, 1])
                const userOrBackupIndex = this.recoverSigner ? 2 : 0;
                const bitgoIndex = 1;
                currentTotal = currentTotal + utxoAmount;
                const utxoId = avalanchejs_1.avaxSerial.UTXOID.fromNative(utxo.txid, Number(utxo.outputidx));
                let addressesIndex = [];
                if (utxo.addressesIndex && bitgoIndexToOnChainIndex.size === 0) {
                    addressesIndex = [...utxo.addressesIndex];
                }
                else {
                    addressesIndex.push(bitgoIndexToOnChainIndex.get(userOrBackupIndex));
                    addressesIndex.push(bitgoIndexToOnChainIndex.get(bitgoIndex));
                }
                const transferInputs = new avalanchejs_1.TransferInput(new avalanchejs_1.BigIntPr(utxoAmount), new avalanchejs_1.Input([...addressesIndex].sort().map((num) => new avalanchejs_1.Int(num))));
                // TODO(CR-1073): remove log
                console.log(`using addressesIndex sorted: ${[...addressesIndex].sort()}`);
                const input = new avalanchejs_1.avaxSerial.TransferableInput(utxoId, assetId, transferInputs);
                utxos.push(new avalanchejs_1.Utxo(utxoId, assetId, transferInputs));
                inputs.push(input);
                if (!this.transaction.credentials || this.transaction.credentials.length == 0) {
                    if (buildOutputs) {
                        // For the bitgo signature we create an empty signature
                        // For the user/backup signature we store the address that matches the key
                        // if bitgo address comes before  < user/backup address
                        // TODO(CR-1073): remove log
                        console.log(`bitgo index on chain: ${utxo.addressesIndex[bitgoIndex]}`);
                        console.log(`user Or Backup Index: ${utxo.addressesIndex[userOrBackupIndex]}`);
                        if (utxo.addressesIndex[bitgoIndex] < utxo.addressesIndex[userOrBackupIndex]) {
                            // TODO(CR-1073): remove log
                            console.log(`user or backup credentials after bitgo`);
                            credentials.push(new avalanchejs_1.Credential([
                                utils_1.default.createNewSig(avalanche_1.Buffer.from('').toString('hex')),
                                utils_1.default.createNewSig(avalanche_1.Buffer.from(this.transaction._fromAddresses[userOrBackupIndex]).toString('hex')),
                            ]));
                        }
                        else {
                            // TODO(CR-1073): remove log
                            console.log(`user or backup credentials before bitgo`);
                            credentials.push(new avalanchejs_1.Credential([
                                utils_1.default.createNewSig(avalanche_1.Buffer.from(this.transaction._fromAddresses[userOrBackupIndex]).toString('hex')),
                                utils_1.default.createNewSig(avalanche_1.Buffer.from('').toString('hex')),
                            ]));
                        }
                    }
                    else {
                        // TODO(CR-1073): verify this else case for OVC
                        credentials.push(new avalanchejs_1.Credential(addressesIndex.map((i) => utils_1.default.createNewSig(avalanche_1.Buffer.from(this.transaction._fromAddresses[i]).toString('hex')))));
                    }
                }
                else {
                    // TODO(CR-1073): remove log
                    console.log(`reusing credentials from transaction`);
                }
            }
        });
        if (buildOutputs) {
            if (currentTotal < totalTarget) {
                throw new sdk_core_1.BuildTransactionError(`Utxo outputs get ${currentTotal.toString()} and ${totalTarget.toString()} is required`);
            }
            else if (currentTotal >= totalTarget) {
                const stakeOutput = new avalanchejs_1.avaxSerial.TransferableOutput(assetId, new avalanchejs_1.TransferOutput(new avalanchejs_1.BigIntPr(totalTarget), new avalanchejs_1.OutputOwners(new avalanchejs_1.BigIntPr(this.transaction._locktime), new avalanchejs_1.Int(this.transaction._threshold), [...this.transaction._fromAddresses]
                    .sort((a, b) => avalanchejs_1.utils.bytesCompare(a, b))
                    .map((a) => avalanchejs_1.Address.fromBytes(a)[0]))));
                stakeOutputs.push(stakeOutput);
                if (currentTotal > totalTarget) {
                    const changeOutput = new avalanchejs_1.avaxSerial.TransferableOutput(assetId, new avalanchejs_1.TransferOutput(new avalanchejs_1.BigIntPr(currentTotal - totalTarget), new avalanchejs_1.OutputOwners(new avalanchejs_1.BigIntPr(this.transaction._locktime), new avalanchejs_1.Int(this.transaction._threshold), [...this.transaction._fromAddresses]
                        .sort((a, b) => avalanchejs_1.utils.bytesCompare(a, b))
                        .map((a) => avalanchejs_1.Address.fromBytes(a)[0]))));
                    changeOutputs.push(changeOutput);
                }
            }
        }
        inputs.sort((a, b) => {
            if (avalanchejs_1.utils.bytesEqual(a.utxoID.txID.toBytes(), b.utxoID.txID.toBytes())) {
                return a.utxoID.outputIdx.value() - b.utxoID.outputIdx.value();
            }
            return avalanchejs_1.utils.bytesCompare(a.utxoID.txID.toBytes(), b.utxoID.txID.toBytes());
        });
        return { inputs, stakeOutputs, changeOutputs, utxos, credentials };
    }
    /**
     * Build the add validator transaction
     * @protected
     */
    buildAvaxTransaction() {
        this.validateStakeDuration(this.transaction._startTime, this.transaction._endTime);
        const { inputs, stakeOutputs, changeOutputs, utxos, credentials } = this.calculateUtxos();
        const baseTx = avalanchejs_1.avaxSerial.BaseTx.fromNative(this.transaction._networkID, this.transaction._blockchainID, changeOutputs, inputs, new Uint8Array() // default empty memo
        );
        const subnetValidator = avalanchejs_1.pvmSerial.SubnetValidator.fromNative(this._nodeID, this._startTime, this._endTime, this._stakeAmount, avalanchejs_1.networkIDs.PrimaryNetworkID);
        const signer = new avalanchejs_1.pvmSerial.Signer(new avalanchejs_1.pvmSerial.ProofOfPossession(avalanchejs_1.utils.hexToBuffer(this._blsPublicKey), avalanchejs_1.utils.hexToBuffer(this._blsSignature)));
        const outputOwners = new avalanchejs_1.OutputOwners(new avalanchejs_1.BigIntPr(this.transaction._locktime), new avalanchejs_1.Int(this.transaction._threshold), [...this.transaction._fromAddresses]
            .sort((a, b) => avalanchejs_1.utils.bytesCompare(a, b))
            .map((a) => avalanchejs_1.Address.fromBytes(a)[0]));
        // TODO(CR-1073): check this value
        //  Shares 10,000 times percentage of reward taken from delegators
        //  https://docs.avax.network/reference/avalanchego/p-chain/txn-format#unsigned-add-validator-tx
        const shares = new avalanchejs_1.Int(1e4 * 2);
        const addressMaps = [...this.transaction._fromAddresses]
            .sort((a, b) => avalanchejs_1.utils.bytesCompare(a, b))
            .map((address) => new avalanchejs_1.utils.AddressMap([[new avalanchejs_1.Address(address), 0]]));
        this.transaction.setTransaction(new avalanchejs_1.UnsignedTx(new avalanchejs_1.pvmSerial.AddPermissionlessValidatorTx(baseTx, subnetValidator, signer, stakeOutputs, outputOwners, outputOwners, shares), utxos, new avalanchejs_1.utils.AddressMaps(addressMaps), credentials));
    }
    /** @inheritdoc */
    signImplementation({ key }) {
        this._signer.push(new keyPair_1.KeyPair({ prv: key }));
        return this.transaction;
    }
    /** @inheritdoc */
    validateAddress(address, addressFormat) {
        if (!utils_1.default.isValidAddress(address.address)) {
            throw new sdk_core_1.BuildTransactionError('Invalid address');
        }
    }
    /** @inheritdoc */
    get transaction() {
        return this._transaction;
    }
    set transaction(transaction) {
        this._transaction = transaction;
    }
    hasSigner() {
        return this._signer !== undefined && this._signer.length > 0;
    }
    /** @inheritdoc */
    validateKey({ key }) {
        if (!new keyPair_1.KeyPair({ prv: key })) {
            throw new sdk_core_1.BuildTransactionError('Invalid key');
        }
    }
    /**
     * Check the raw transaction has a valid format in the blockchain context, throw otherwise.
     *
     * @param rawTransaction Transaction in any format
     */
    validateRawTransaction(rawTransaction) {
        utils_1.default.validateRawTransaction(rawTransaction);
    }
    /** @inheritdoc */
    validateTransaction(transaction) {
        // throw new NotImplementedError('validateTransaction not implemented');
    }
    /** @inheritdoc */
    validateValue(value) {
        if (value.isLessThan(0)) {
            throw new sdk_core_1.BuildTransactionError('Value cannot be less than zero');
        }
    }
}
exports.PermissionlessValidatorTxBuilder = PermissionlessValidatorTxBuilder;
//# sourceMappingURL=data:application/json;base64,