"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeprecatedTransaction = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const iface_1 = require("./iface");
const avalanche_1 = require("avalanche");
const utils_1 = __importDefault(require("./utils"));
function isEmptySignature(s) {
    return !!s && s.startsWith(''.padStart(90, '0'));
}
/**
 * Signatures are prestore as empty buffer for hsm and address of signar for first signature.
 * When sign is required, this method return the function that identify a signature to be replaced.
 * @param signatures any signatures as samples to identify which signature required replace.
 */
function generateSelectorSignature(signatures) {
    if (signatures.length > 1 && signatures.every((sig) => isEmptySignature(sig.bytes))) {
        // Look for address.
        return function (sig, address) {
            try {
                if (!isEmptySignature(sig.bytes)) {
                    return false;
                }
                const pub = sig.bytes.substring(90);
                return pub === address;
            }
            catch (e) {
                return false;
            }
        };
    }
    else {
        // Look for empty string
        return function (sig, address) {
            if (isEmptySignature(sig.bytes))
                return true;
            return false;
        };
    }
}
// end region utils for sign
class DeprecatedTransaction extends sdk_core_1.BaseTransaction {
    constructor(coinConfig) {
        super(coinConfig);
        this._threshold = 2;
        this._locktime = new avalanche_1.BN(0);
        this._fromAddresses = [];
        this._utxos = [];
        this._fee = {};
        this._network = coinConfig.network;
        this._assetId = utils_1.default.cb58Decode(this._network.avaxAssetID);
        this._blockchainID = utils_1.default.cb58Decode(this._network.blockchainID);
        this._networkID = this._network.networkID;
    }
    get avaxPTransaction() {
        return this._avaxTransaction.getUnsignedTx().getTransaction();
    }
    get signature() {
        if (this.credentials.length === 0) {
            return [];
        }
        const obj = this.credentials[0].serialize();
        return obj.sigArray.map((s) => s.bytes).filter((s) => !isEmptySignature(s));
    }
    get credentials() {
        var _a;
        return (_a = this._avaxTransaction) === null || _a === void 0 ? void 0 : _a.credentials;
    }
    get hasCredentials() {
        return this.credentials !== undefined && this.credentials.length > 0;
    }
    /** @inheritdoc */
    canSign({ key }) {
        // TODO(BG-56700):  Improve canSign by check in addresses in empty credentials match signer
        return true;
    }
    /**
     * Sign a avaxp transaction and update the transaction hex
     * validator, delegator, import, exports extend baseTx
     * unsignedTx: UnsignedTx = new UnsignedTx(baseTx)  (baseTx = addValidatorTx)
     * const tx: Tx = unsignedTx.sign(keychain) (tx is type standard signed tx)
     * get baseTx then create new unsignedTx then sign
     *
     * @param {KeyPair} keyPair
     */
    sign(keyPair) {
        const prv = keyPair.getPrivateKey();
        const addressHex = keyPair.getAddressBuffer().toString('hex');
        if (!prv) {
            throw new sdk_core_1.SigningError('Missing private key');
        }
        if (!this.avaxPTransaction) {
            throw new sdk_core_1.InvalidTransactionError('empty transaction to sign');
        }
        if (!this.hasCredentials) {
            throw new sdk_core_1.InvalidTransactionError('empty credentials to sign');
        }
        const signature = this.createSignature(prv);
        let checkSign = undefined;
        this.credentials.forEach((c, index) => {
            const cs = c.serialize();
            if (checkSign === undefined) {
                checkSign = generateSelectorSignature(cs.sigArray);
            }
            let find = false;
            cs.sigArray.forEach((sig) => {
                if (checkSign && checkSign(sig, addressHex)) {
                    sig.bytes = signature;
                    find = true;
                }
            });
            if (!find)
                throw new sdk_core_1.SigningError('Private key cannot sign the transaction');
            c.deserialize(cs);
        });
    }
    /** @inheritdoc */
    /**
     * should be of signedTx doing this with baseTx
     */
    toBroadcastFormat() {
        if (!this.avaxPTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction data');
        }
        return this._avaxTransaction.toStringHex();
    }
    // types - stakingTransaction, import, export
    toJson() {
        if (!this.avaxPTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction data');
        }
        return {
            id: this.id,
            inputs: this.inputs,
            fromAddresses: this.fromAddresses,
            threshold: this._threshold,
            locktime: this._locktime.toString(),
            type: this.type,
            signatures: this.signature,
            outputs: this.outputs,
            changeOutputs: this.changeOutputs,
            sourceChain: this.sourceChain,
            destinationChain: this.destinationChain,
        };
    }
    setTransaction(tx) {
        this._avaxTransaction = tx;
    }
    /**
     * Set the transaction type
     *
     * @param {TransactionType} transactionType The transaction type to be set
     */
    setTransactionType(transactionType) {
        this._type = transactionType;
    }
    /**
     * Returns the portion of the transaction that needs to be signed in Buffer format.
     * Only needed for coins that support adding signatures directly (e.g. TSS).
     */
    get signablePayload() {
        return utils_1.default.sha256(this._avaxTransaction.getUnsignedTx().toBuffer());
    }
    get id() {
        return utils_1.default.cb58Encode(avalanche_1.Buffer.from(utils_1.default.sha256(this._avaxTransaction.toBuffer())));
    }
    get fromAddresses() {
        return this._fromAddresses.map((a) => utils_1.default.addressToString(this._network.hrp, this._network.alias, a));
    }
    get rewardAddresses() {
        return this._rewardAddresses.map((a) => utils_1.default.addressToString(this._network.hrp, this._network.alias, a));
    }
    /**
     * Get the list of outputs. Amounts are expressed in absolute value.
     */
    get outputs() {
        switch (this.type) {
            case sdk_core_1.TransactionType.Import:
                return this.avaxPTransaction
                    .getOuts()
                    .map(utils_1.default.deprecatedMapOutputToEntry(this._network));
            case sdk_core_1.TransactionType.Export:
                if (utils_1.default.isTransactionOf(this._avaxTransaction, this._network.cChainBlockchainID)) {
                    return this.avaxPTransaction
                        .getExportedOutputs()
                        .map(utils_1.default.deprecatedMapOutputToEntry(this._network));
                }
                else {
                    return this.avaxPTransaction
                        .getExportOutputs()
                        .map(utils_1.default.deprecatedMapOutputToEntry(this._network));
                }
            case sdk_core_1.TransactionType.AddDelegator:
            case sdk_core_1.TransactionType.AddValidator:
                // Get staked outputs
                const addValidatorTx = this.avaxPTransaction;
                return [
                    {
                        address: addValidatorTx.getNodeIDString(),
                        value: addValidatorTx.getStakeAmount().toString(),
                    },
                ];
            default:
                return [];
        }
    }
    /**
     * Get a Transasction Fee.
     */
    get fee() {
        return { fee: '0', ...this._fee };
    }
    get changeOutputs() {
        // C-chain tx adn Import Txs don't have change outputs
        if (this.type === sdk_core_1.TransactionType.Import ||
            utils_1.default.isTransactionOf(this._avaxTransaction, this._network.cChainBlockchainID)) {
            return [];
        }
        // general support any transaction type, but it's scoped yet
        return this.avaxPTransaction.getOuts().map(utils_1.default.deprecatedMapOutputToEntry(this._network));
    }
    get inputs() {
        let inputs;
        switch (this.type) {
            case sdk_core_1.TransactionType.Import:
                inputs = this.avaxPTransaction.getImportInputs();
                break;
            case sdk_core_1.TransactionType.Export:
                if (utils_1.default.isTransactionOf(this._avaxTransaction, this._network.cChainBlockchainID)) {
                    return this.avaxPTransaction.getInputs().map((evmInput) => ({
                        address: '0x' + evmInput.getAddressString(),
                        value: new avalanche_1.BN(evmInput.amount).toString(),
                        nonce: evmInput.getNonce().toNumber(),
                    }));
                }
                inputs = this.avaxPTransaction.getIns();
                break;
            default:
                inputs = this.avaxPTransaction.getIns();
        }
        return inputs.map((input) => {
            const amountInput = input.getInput();
            return {
                id: utils_1.default.cb58Encode(input.getTxID()) + iface_1.INPUT_SEPARATOR + utils_1.default.outputidxBufferToNumber(input.getOutputIdx()),
                address: this.fromAddresses.sort().join(iface_1.ADDRESS_SEPARATOR),
                value: amountInput.getAmount().toString(),
            };
        });
    }
    /**
     * Avax wrapper to create signature and return it for credentials
     * @param prv
     * @return hexstring
     */
    createSignature(prv) {
        const signval = utils_1.default.createSignatureAvaxBuffer(this._network, avalanche_1.Buffer.from(this.signablePayload), avalanche_1.Buffer.from(prv));
        return signval.toString('hex');
    }
    /** @inheritdoc */
    explainTransaction() {
        const txJson = this.toJson();
        const displayOrder = ['id', 'inputs', 'outputAmount', 'changeAmount', 'outputs', 'changeOutputs', 'fee', 'type'];
        const outputAmount = txJson.outputs.reduce((p, n) => p.add(new avalanche_1.BN(n.value)), new avalanche_1.BN(0)).toString();
        const changeAmount = txJson.changeOutputs.reduce((p, n) => p.add(new avalanche_1.BN(n.value)), new avalanche_1.BN(0)).toString();
        let rewardAddresses;
        if ([sdk_core_1.TransactionType.AddValidator, sdk_core_1.TransactionType.AddDelegator].includes(txJson.type)) {
            rewardAddresses = this.rewardAddresses;
            displayOrder.splice(6, 0, 'rewardAddresses');
        }
        return {
            displayOrder,
            id: txJson.id,
            inputs: txJson.inputs,
            outputs: txJson.outputs.map((o) => ({ address: o.address, amount: o.value })),
            outputAmount,
            changeOutputs: txJson.changeOutputs.map((o) => ({ address: o.address, amount: o.value })),
            changeAmount,
            rewardAddresses,
            fee: this.fee,
            type: txJson.type,
        };
    }
    /**
     * Check if this transaction is a P chain
     */
    get isTransactionForCChain() {
        return utils_1.default.isTransactionOf(this._avaxTransaction, this._network.cChainBlockchainID);
    }
    /**
     * get the source chain id or undefined if it's a cross chain transfer.
     */
    get sourceChain() {
        let blockchainID;
        switch (this.type) {
            case sdk_core_1.TransactionType.Import:
                blockchainID = this.avaxPTransaction.getSourceChain();
                break;
            case sdk_core_1.TransactionType.Export:
                blockchainID = this.avaxPTransaction.getBlockchainID();
                break;
            default:
                return undefined;
        }
        return this.blockchainIDtoAlias(blockchainID);
    }
    /**
     * get the destinationChain or undefined if it's a cross chain transfer.
     */
    get destinationChain() {
        let blockchainID;
        switch (this.type) {
            case sdk_core_1.TransactionType.Import:
                blockchainID = this.avaxPTransaction.getBlockchainID();
                break;
            case sdk_core_1.TransactionType.Export:
                blockchainID = this.avaxPTransaction.getDestinationChain();
                break;
            default:
                return undefined;
        }
        return this.blockchainIDtoAlias(blockchainID);
    }
    /**
     * Convert a blockchainId buffer to string and return P or C alias if match of any of that chains.
     * @param {BufferAvax} blockchainIDBuffer
     * @return {string} blocchainID or alias if exists.
     * @private
     */
    blockchainIDtoAlias(blockchainIDBuffer) {
        const blockchainId = utils_1.default.cb58Encode(blockchainIDBuffer);
        switch (blockchainId) {
            case this._network.cChainBlockchainID:
                return 'C';
            case this._network.blockchainID:
                return 'P';
            default:
                return blockchainId;
        }
    }
}
exports.DeprecatedTransaction = DeprecatedTransaction;
//# sourceMappingURL=data:application/json;base64,