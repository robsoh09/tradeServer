"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
require("should");
const utils_1 = __importDefault(require("../../../src/lib/utils"));
const testData = __importStar(require("../../resources/avaxp"));
const errorMessage = __importStar(require("../../resources/errors"));
const lib_1 = require("../../../src/lib");
const statics_1 = require("@bitgo/statics");
const avalanche_1 = require("avalanche");
describe('AvaxP Validate Tx Builder', () => {
    const factory = new lib_1.TransactionBuilderFactory(statics_1.coins.get('avaxp'));
    describe('validate txBuilder fields', () => {
        const txBuilder = factory.getValidatorBuilder();
        it('should fail nodeID tag incorrect', () => {
            assert_1.default.throws(() => {
                txBuilder.validateNodeID(testData.INVALID_NODE_ID_MISSING_NODE_ID);
            }, (e) => e.message === errorMessage.ERROR_NODE_ID);
        });
        it('should fail nodeID length incorrect', () => {
            assert_1.default.throws(() => {
                txBuilder.validateNodeID(testData.INVALID_NODE_ID_LENGTH);
            }, (e) => e.message === errorMessage.ERROR_NODE_ID_LENGTH);
        });
        it('should suucess nodeID length incorrect', () => {
            txBuilder.validateNodeID(testData.NODE_ID_2);
        });
        it('should fail endTime less than 2 weeks', () => {
            assert_1.default.throws(() => {
                txBuilder.validateStakeDuration(testData.START_TIME, testData.START_TIME.add(testData.ONE_WEEK));
            }, (e) => e.message === errorMessage.ERROR_STAKE_DURATION_SHORT_TIME);
        });
        it('should fail endTime greater than 1 year', () => {
            assert_1.default.throws(() => {
                txBuilder.validateStakeDuration(testData.START_TIME, testData.START_TIME.add(testData.TWO_YEAR));
            }, (e) => e.message === errorMessage.ERROR_STAKE_DURATION_LONG_TIME);
        });
        it('should fail startTime too soon', () => {
            assert_1.default.throws(() => {
                txBuilder.validateStakeDuration(new avalanche_1.BN(Date.now()), testData.ONE_WEEK);
            }, (e) => e.message === errorMessage.ERROR_STAKE_START_TIME_TOO_SHORT);
        });
        it('should fail stake amount less than 2000', () => {
            assert_1.default.throws(() => {
                txBuilder.validateStakeAmount(testData.INVALID_STAKE_AMOUNT);
            }, (e) => e.message === errorMessage.ERROR_STAKE_AMOUNT);
        });
        it('should fail delegationFeeRate too low', () => {
            assert_1.default.throws(() => {
                txBuilder.validateDelegationFeeRate(testData.INVALID_DELEGATION_FEE);
            }, (e) => e.message === errorMessage.ERROR_DELEGATION_FEE);
        });
        it('should fail validate Utxos empty string', () => {
            assert_1.default.throws(() => {
                txBuilder.validateUtxos([]);
            }, (e) => e.message === errorMessage.ERROR_UTXOS_EMPTY);
        });
        it('should fail validate Utxos without amount field', () => {
            assert_1.default.throws(() => {
                txBuilder.validateUtxos([{ outputID: '' }]);
            }, (e) => e.message === errorMessage.ERROR_UTXOS_AMOUNT);
        });
    });
    describe('Utils tests', () => {
        it('should fail address is invalid', () => {
            utils_1.default.isValidAddress(testData.INVALID_ADDRESS).should.be.false();
        });
        it('should fail blockId is invalid', () => {
            utils_1.default.isValidBlockId(testData.INVALID_BLOCK_ID).should.be.false();
        });
        it('should fail blockId length is invalid', () => {
            utils_1.default.isValidBlockId(testData.INVALID_BLOCK_ID_LENGTH).should.be.false();
        });
        it('should pass blockId is valid', () => {
            utils_1.default.isValidBlockId(testData.VALID_BLOCK_ID).should.be.true();
        });
        it('should pass address is valid', () => {
            utils_1.default.isValidAddress(testData.VALID_ADDRESS).should.be.true();
        });
    });
    describe('should build ', () => {
        it('Should create AddValidator tx for same values', async () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp'))
                .getValidatorBuilder()
                .threshold(testData.ADDVALIDATOR_SAMPLES.threshold)
                .locktime(testData.ADDVALIDATOR_SAMPLES.locktime)
                .fromPubKey(testData.ADDVALIDATOR_SAMPLES.pAddresses)
                .startTime(testData.ADDVALIDATOR_SAMPLES.startTime)
                .endTime(testData.ADDVALIDATOR_SAMPLES.endTime)
                .stakeAmount(testData.ADDVALIDATOR_SAMPLES.minValidatorStake)
                .delegationFeeRate(testData.ADDVALIDATOR_SAMPLES.delegationFee)
                .nodeID(testData.ADDVALIDATOR_SAMPLES.nodeID)
                .utxos(testData.ADDVALIDATOR_SAMPLES.outputs);
            const tx = await txBuilder.build();
            const rawTx = tx.toBroadcastFormat();
            rawTx.should.equal(testData.ADDVALIDATOR_SAMPLES.unsignedTxHex);
        });
        it('Should create AddValidator tx when change amount is 0', async () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp'))
                .getValidatorBuilder()
                .threshold(testData.ADDVALIDATOR_SAMPLES.threshold)
                .locktime(testData.ADDVALIDATOR_SAMPLES.locktime)
                .fromPubKey(testData.ADDVALIDATOR_SAMPLES.pAddresses)
                .startTime(testData.ADDVALIDATOR_SAMPLES.startTime)
                .endTime(testData.ADDVALIDATOR_SAMPLES.endTime)
                .stakeAmount('24938830298') // stake amount is total amount in outputs
                .delegationFeeRate(testData.ADDVALIDATOR_SAMPLES.delegationFee)
                .nodeID(testData.ADDVALIDATOR_SAMPLES.nodeID)
                .utxos(testData.ADDVALIDATOR_SAMPLES.outputs);
            await txBuilder.build().should.not.throw();
        });
        it('Should recover AddValidator tx from raw tx', async () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(testData.ADDVALIDATOR_SAMPLES.unsignedTxHex);
            const tx = await txBuilder.build();
            const rawTx = tx.toBroadcastFormat();
            rawTx.should.equal(testData.ADDVALIDATOR_SAMPLES.unsignedTxHex);
        });
        it('Should create half signed AddValidator tx for same values', async () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp'))
                .getValidatorBuilder()
                .threshold(testData.ADDVALIDATOR_SAMPLES.threshold)
                .locktime(testData.ADDVALIDATOR_SAMPLES.locktime)
                .fromPubKey(testData.ADDVALIDATOR_SAMPLES.pAddresses)
                .startTime(testData.ADDVALIDATOR_SAMPLES.startTime)
                .endTime(testData.ADDVALIDATOR_SAMPLES.endTime)
                .stakeAmount(testData.ADDVALIDATOR_SAMPLES.minValidatorStake)
                .delegationFeeRate(testData.ADDVALIDATOR_SAMPLES.delegationFee)
                .nodeID(testData.ADDVALIDATOR_SAMPLES.nodeID)
                .utxos(testData.ADDVALIDATOR_SAMPLES.outputs);
            txBuilder.sign({ key: testData.ADDVALIDATOR_SAMPLES.privKey.prv1 });
            const tx = await txBuilder.build();
            const rawTx = tx.toBroadcastFormat();
            rawTx.should.equal(testData.ADDVALIDATOR_SAMPLES.halfsigntxHex);
        });
        it('Should recover half signed AddValidator from raw tx', async () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(testData.ADDVALIDATOR_SAMPLES.halfsigntxHex);
            const tx = await txBuilder.build();
            const rawTx = tx.toBroadcastFormat();
            rawTx.should.equal(testData.ADDVALIDATOR_SAMPLES.halfsigntxHex);
        });
        it('Should half sign a AddValidator tx from unsigned raw tx', async () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(testData.ADDVALIDATOR_SAMPLES.unsignedTxHex);
            txBuilder.sign({ key: testData.ADDVALIDATOR_SAMPLES.privKey.prv1 });
            const tx = await txBuilder.build();
            const rawTx = tx.toBroadcastFormat();
            rawTx.should.equal(testData.ADDVALIDATOR_SAMPLES.halfsigntxHex);
        });
        it('Should recover half signed AddValidator from half signed raw tx', async () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(testData.ADDVALIDATOR_SAMPLES.halfsigntxHex);
            const tx = await txBuilder.build();
            const rawTx = tx.toBroadcastFormat();
            rawTx.should.equal(testData.ADDVALIDATOR_SAMPLES.halfsigntxHex);
        });
        it('Should recover signed AddValidator from signed raw tx', async () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(testData.ADDVALIDATOR_SAMPLES.fullsigntxHex);
            const tx = await txBuilder.build();
            const rawTx = tx.toBroadcastFormat();
            rawTx.should.equal(testData.ADDVALIDATOR_SAMPLES.fullsigntxHex);
        });
        it('Should full sign a AddValidator tx for same values', async () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp'))
                .getValidatorBuilder()
                .threshold(testData.ADDVALIDATOR_SAMPLES.threshold)
                .locktime(testData.ADDVALIDATOR_SAMPLES.locktime)
                .fromPubKey(testData.ADDVALIDATOR_SAMPLES.pAddresses)
                .startTime(testData.ADDVALIDATOR_SAMPLES.startTime)
                .endTime(testData.ADDVALIDATOR_SAMPLES.endTime)
                .stakeAmount(testData.ADDVALIDATOR_SAMPLES.minValidatorStake)
                .delegationFeeRate(testData.ADDVALIDATOR_SAMPLES.delegationFee)
                .nodeID(testData.ADDVALIDATOR_SAMPLES.nodeID)
                .utxos(testData.ADDVALIDATOR_SAMPLES.outputs);
            txBuilder.sign({ key: testData.ADDVALIDATOR_SAMPLES.privKey.prv1 });
            txBuilder.sign({ key: testData.ADDVALIDATOR_SAMPLES.privKey.prv2 });
            const tx = await txBuilder.build();
            const rawTx = tx.toBroadcastFormat();
            rawTx.should.equal(testData.ADDVALIDATOR_SAMPLES.fullsigntxHex);
        });
        it('Should full sign a AddValidator tx from half signed raw tx', async () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(testData.ADDVALIDATOR_SAMPLES.halfsigntxHex);
            txBuilder.sign({ key: testData.ADDVALIDATOR_SAMPLES.privKey.prv2 });
            const tx = await txBuilder.build();
            const rawTx = tx.toBroadcastFormat();
            rawTx.should.equal(testData.ADDVALIDATOR_SAMPLES.fullsigntxHex);
        });
        it('Should full sign a AddValidator tx from unsigned raw tx', async () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(testData.ADDVALIDATOR_SAMPLES.unsignedTxHex);
            txBuilder.sign({ key: testData.ADDVALIDATOR_SAMPLES.privKey.prv1 });
            txBuilder.sign({ key: testData.ADDVALIDATOR_SAMPLES.privKey.prv2 });
            const tx = await txBuilder.build();
            const rawTx = tx.toBroadcastFormat();
            rawTx.should.equal(testData.ADDVALIDATOR_SAMPLES.fullsigntxHex);
        });
        it('Should full sign a AddValidator tx with recovery key for same values', async () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp'))
                .getValidatorBuilder()
                .threshold(testData.ADDVALIDATOR_SAMPLES.threshold)
                .locktime(testData.ADDVALIDATOR_SAMPLES.locktime)
                .fromPubKey(testData.ADDVALIDATOR_SAMPLES.pAddresses)
                .startTime(testData.ADDVALIDATOR_SAMPLES.startTime)
                .endTime(testData.ADDVALIDATOR_SAMPLES.endTime)
                .stakeAmount(testData.ADDVALIDATOR_SAMPLES.minValidatorStake)
                .delegationFeeRate(testData.ADDVALIDATOR_SAMPLES.delegationFee)
                .nodeID(testData.ADDVALIDATOR_SAMPLES.nodeID)
                .utxos(testData.ADDVALIDATOR_SAMPLES.outputs)
                .recoverMode();
            txBuilder.sign({ key: testData.ADDVALIDATOR_SAMPLES.privKey.prv3 });
            txBuilder.sign({ key: testData.ADDVALIDATOR_SAMPLES.privKey.prv2 });
            const tx = await txBuilder.build();
            const rawTx = tx.toBroadcastFormat();
            rawTx.should.equal(testData.ADDVALIDATOR_SAMPLES.recoveryFullsigntxHexWithoutMemo);
        });
        it('Should recover half sign a AddValidator tx with recovery key from half signed raw tx', async () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(testData.ADDVALIDATOR_SAMPLES.recoveryHalfsigntxHex);
            const tx = await txBuilder.build();
            const rawTx = tx.toBroadcastFormat();
            rawTx.should.equal(testData.ADDVALIDATOR_SAMPLES.recoveryHalfsigntxHex);
        });
        it('Should full sign a AddValidator tx with recovery key from half signed raw tx', async () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(testData.ADDVALIDATOR_SAMPLES.recoveryHalfsigntxHex);
            txBuilder.sign({ key: testData.ADDVALIDATOR_SAMPLES.privKey.prv2 });
            const tx = await txBuilder.build();
            const rawTx = tx.toBroadcastFormat();
            rawTx.should.equal(testData.ADDVALIDATOR_SAMPLES.recoveryFullsigntxHex);
        });
        it('Should full sign a AddValidator tx with recovery key from unsigned raw tx', async () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(testData.ADDVALIDATOR_SAMPLES.recoveryUnsignedTxHex);
            // txBuilder.recoverMode()
            txBuilder.sign({ key: testData.ADDVALIDATOR_SAMPLES.privKey.prv3 });
            txBuilder.sign({ key: testData.ADDVALIDATOR_SAMPLES.privKey.prv2 });
            const tx = await txBuilder.build();
            const rawTx = tx.toBroadcastFormat();
            rawTx.should.equal(testData.ADDVALIDATOR_SAMPLES.recoveryFullsigntxHexWithMemo);
        });
        it('Compare size and location of signatures in credentials for halfsign', async () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(testData.ADDVALIDATOR_SAMPLES.unsignedTxHex);
            txBuilder.sign({ key: testData.ADDVALIDATOR_SAMPLES.privKey.prv1 });
            // look into credentials make sure that index 0 is signed with user key
        });
        it('Compare size and location of signatures in credentials for full sign', async () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(testData.ADDVALIDATOR_SAMPLES.unsignedTxHex);
            txBuilder.sign({ key: testData.ADDVALIDATOR_SAMPLES.privKey.prv1 });
            txBuilder.sign({ key: testData.ADDVALIDATOR_SAMPLES.privKey.prv1 });
            // look into credentials make sure that index 0 and 2 is signed
        });
    });
    describe('Key cannot sign the transaction ', () => {
        it('Should full sign a AddValidator tx from unsigned raw tx', () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(testData.ADDVALIDATOR_SAMPLES.unsignedTxHex);
            txBuilder.sign({ key: testData.ADDVALIDATOR_SAMPLES.privKey.prv2 });
            txBuilder
                .build()
                .then(() => assert_1.default.fail('it can sign'))
                .catch((err) => {
                err.message.should.be.equal(errorMessage.ERROR_KEY_CANNOT_SIGN);
            });
        });
        it('Should 2 full sign a AddValidator tx from unsigned raw tx', () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(testData.ADDVALIDATOR_SAMPLES.recoveryUnsignedTxHex);
            txBuilder.sign({ key: testData.ADDVALIDATOR_SAMPLES.privKey.prv1 });
            txBuilder
                .build()
                .then(() => assert_1.default.fail('it can sign'))
                .catch((err) => {
                err.message.should.be.equal(errorMessage.ERROR_KEY_CANNOT_SIGN);
            });
        });
        // HSM expected empty credential, we cannot verify if the next signature is the correct.
        it('Should full sign a AddValidator tx from unsigned raw tx', () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(testData.ADDVALIDATOR_SAMPLES.halfsigntxHex);
            txBuilder.sign({ key: testData.ADDVALIDATOR_SAMPLES.privKey.prv2 });
            txBuilder
                .build()
                .then(() => assert_1.default.fail('it can sign'))
                .catch((err) => {
                err.message.should.be.equal(errorMessage.ERROR_KEY_CANNOT_SIGN);
            });
        });
        // HSM expected empty credential, we cannot verify if the next signature is the correct.
        it('Should full sign a AddValidator tx from unsigned raw tx', () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(testData.ADDVALIDATOR_SAMPLES.recoveryHalfsigntxHex);
            txBuilder.sign({ key: testData.ADDVALIDATOR_SAMPLES.privKey.prv1 });
            txBuilder
                .build()
                .then(() => assert_1.default.fail('it can sign'))
                .catch((err) => {
                err.message.should.be.equal(errorMessage.ERROR_KEY_CANNOT_SIGN);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,