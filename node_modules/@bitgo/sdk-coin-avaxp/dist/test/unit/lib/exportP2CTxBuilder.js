"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
require("should");
const testData = __importStar(require("../../resources/avaxp"));
const errorMessage = __importStar(require("../../resources/errors"));
const lib_1 = require("../../../src/lib");
const statics_1 = require("@bitgo/statics");
const signFlowTestSuit_1 = __importDefault(require("./signFlowTestSuit"));
describe('AvaxP Export P2C Tx Builder', () => {
    const factory = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp'));
    describe('validate txBuilder fields', () => {
        const txBuilder = factory.getExportBuilder();
        it('should fail amount low than zero', () => {
            assert_1.default.throws(() => {
                txBuilder.amount('-1');
            }, (e) => e.message === errorMessage.ERROR_AMOUNT);
        });
        it('should fail target chain id length incorrect', () => {
            assert_1.default.throws(() => {
                txBuilder.externalChainId(Buffer.from(testData.INVALID_CHAIN_ID));
            }, (e) => e.message === errorMessage.ERROR_CHAIN_ID_LENGTH);
        });
        it('should fail target chain id not a vaild base58 string', () => {
            assert_1.default.throws(() => {
                txBuilder.externalChainId(testData.INVALID_CHAIN_ID);
            }, (e) => e.message === errorMessage.ERROR_CHAIN_ID_NOT_BASE58);
        });
        it('should fail target chain id cb58 invalid checksum', () => {
            assert_1.default.throws(() => {
                txBuilder.externalChainId(testData.VALID_C_CHAIN_ID.slice(2));
            }, (e) => e.message === errorMessage.ERROR_CHAIN_ID_INVALID_CHECKSUM);
        });
        it('should fail validate Utxos empty string', () => {
            assert_1.default.throws(() => {
                txBuilder.validateUtxos([]);
            }, (e) => e.message === errorMessage.ERROR_UTXOS_EMPTY);
        });
        it('should fail validate Utxos without amount field', () => {
            assert_1.default.throws(() => {
                txBuilder.validateUtxos([{ outputID: '' }]);
            }, (e) => e.message === errorMessage.ERROR_UTXOS_AMOUNT);
        });
    });
    (0, signFlowTestSuit_1.default)({
        transactionType: 'Export P2C with changeoutput',
        newTxFactory: () => new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')),
        newTxBuilder: () => new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp'))
            .getExportBuilder()
            .threshold(testData.EXPORT_P_2_C.threshold)
            .locktime(testData.EXPORT_P_2_C.locktime)
            .fromPubKey(testData.EXPORT_P_2_C.pAddresses)
            .amount(testData.EXPORT_P_2_C.amount)
            .externalChainId(testData.EXPORT_P_2_C.targetChainId)
            .utxos(testData.EXPORT_P_2_C.outputs),
        unsignedTxHex: testData.EXPORT_P_2_C.unsignedTxHex,
        halfsigntxHex: testData.EXPORT_P_2_C.halfsigntxHex,
        fullsigntxHex: testData.EXPORT_P_2_C.fullsigntxHex,
        privKey: {
            prv1: testData.EXPORT_P_2_C.privKey.prv1,
            prv2: testData.EXPORT_P_2_C.privKey.prv2,
        },
    });
    (0, signFlowTestSuit_1.default)({
        transactionType: 'Export P2C recovery with changeoutput',
        newTxFactory: () => new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')),
        newTxBuilder: () => new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp'))
            .getExportBuilder()
            .threshold(testData.EXPORT_P_2_C.threshold)
            .locktime(testData.EXPORT_P_2_C.locktime)
            .fromPubKey(testData.EXPORT_P_2_C.pAddresses)
            .amount(testData.EXPORT_P_2_C.amount)
            .externalChainId(testData.EXPORT_P_2_C.targetChainId)
            .utxos(testData.EXPORT_P_2_C.outputs)
            .recoverMode(),
        unsignedTxHex: testData.EXPORT_P_2_C.rUnsignedTxHex,
        halfsigntxHex: testData.EXPORT_P_2_C.rHalfsigntxHex,
        fullsigntxHex: testData.EXPORT_P_2_C.rFullsigntxHex,
        privKey: {
            prv1: testData.EXPORT_P_2_C.privKey.prv3,
            prv2: testData.EXPORT_P_2_C.privKey.prv2,
        },
    });
    (0, signFlowTestSuit_1.default)({
        transactionType: 'Export P2C without changeoutput',
        newTxFactory: () => new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')),
        newTxBuilder: () => new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp'))
            .getExportBuilder()
            .threshold(testData.EXPORT_P_2_C_WITHOUT_CHANGEOUTPUT.threshold)
            .locktime(testData.EXPORT_P_2_C_WITHOUT_CHANGEOUTPUT.locktime)
            .fromPubKey(testData.EXPORT_P_2_C_WITHOUT_CHANGEOUTPUT.pAddresses)
            .amount(testData.EXPORT_P_2_C_WITHOUT_CHANGEOUTPUT.amount)
            .externalChainId(testData.EXPORT_P_2_C_WITHOUT_CHANGEOUTPUT.targetChainId)
            .utxos(testData.EXPORT_P_2_C_WITHOUT_CHANGEOUTPUT.outputs),
        unsignedTxHex: testData.EXPORT_P_2_C_WITHOUT_CHANGEOUTPUT.unsignedTxHex,
        halfsigntxHex: testData.EXPORT_P_2_C_WITHOUT_CHANGEOUTPUT.halfsigntxHex,
        fullsigntxHex: testData.EXPORT_P_2_C_WITHOUT_CHANGEOUTPUT.fullsigntxHex,
        privKey: {
            prv1: testData.EXPORT_P_2_C_WITHOUT_CHANGEOUTPUT.privKey.prv1,
            prv2: testData.EXPORT_P_2_C_WITHOUT_CHANGEOUTPUT.privKey.prv2,
        },
    });
    (0, signFlowTestSuit_1.default)({
        transactionType: 'Export P2C recovery without changeoutput',
        newTxFactory: () => new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')),
        newTxBuilder: () => new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp'))
            .getExportBuilder()
            .threshold(testData.EXPORT_P_2_C_WITHOUT_CHANGEOUTPUT.threshold)
            .locktime(testData.EXPORT_P_2_C_WITHOUT_CHANGEOUTPUT.locktime)
            .fromPubKey(testData.EXPORT_P_2_C_WITHOUT_CHANGEOUTPUT.pAddresses)
            .amount(testData.EXPORT_P_2_C_WITHOUT_CHANGEOUTPUT.amount)
            .externalChainId(testData.EXPORT_P_2_C_WITHOUT_CHANGEOUTPUT.targetChainId)
            .utxos(testData.EXPORT_P_2_C_WITHOUT_CHANGEOUTPUT.outputs)
            .recoverMode(),
        unsignedTxHex: testData.EXPORT_P_2_C_WITHOUT_CHANGEOUTPUT.rUnsignedTxHex,
        halfsigntxHex: testData.EXPORT_P_2_C_WITHOUT_CHANGEOUTPUT.rHalfsigntxHex,
        fullsigntxHex: testData.EXPORT_P_2_C_WITHOUT_CHANGEOUTPUT.rFullsigntxHex,
        privKey: {
            prv1: testData.EXPORT_P_2_C_WITHOUT_CHANGEOUTPUT.privKey.prv3,
            prv2: testData.EXPORT_P_2_C_WITHOUT_CHANGEOUTPUT.privKey.prv2,
        },
    });
    describe('Key cannot sign the transaction ', () => {
        const data = testData.EXPORT_P_2_C;
        it('Should full sign a export tx from unsigned raw tx', () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(data.unsignedTxHex);
            txBuilder.sign({ key: data.privKey.prv2 });
            txBuilder
                .build()
                .then(() => assert_1.default.fail('it can sign'))
                .catch((err) => {
                err.message.should.be.equal(errorMessage.ERROR_KEY_CANNOT_SIGN);
            });
        });
        it('Should 2 full sign a export tx from unsigned raw tx', () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(data.rUnsignedTxHex);
            txBuilder.sign({ key: data.privKey.prv1 });
            txBuilder
                .build()
                .then(() => assert_1.default.fail('it can sign'))
                .catch((err) => {
                err.message.should.be.equal(errorMessage.ERROR_KEY_CANNOT_SIGN);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,