"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
require("should");
const errorMessage = __importStar(require("../../resources/errors"));
const lib_1 = require("../../../src/lib");
const statics_1 = require("@bitgo/statics");
const importC_1 = require("../../resources/tx/importC");
const signFlowTestSuit_1 = __importDefault(require("./signFlowTestSuit"));
describe('AvaxP Import C2P Tx Builder', () => {
    const factory = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp'));
    describe('validate txBuilder fields', () => {
        const txBuilder = factory.getImportInCBuilder();
        it('should fail validate Utxos empty string', () => {
            assert_1.default.throws(() => {
                txBuilder.validateUtxos([]);
            }, (e) => e.message === errorMessage.ERROR_UTXOS_EMPTY);
        });
        it('should fail validate Utxos without amount field', () => {
            assert_1.default.throws(() => {
                txBuilder.validateUtxos([{ outputID: '' }]);
            }, (e) => e.message === errorMessage.ERROR_UTXOS_AMOUNT);
        });
    });
    (0, signFlowTestSuit_1.default)({
        transactionType: 'Import C2P',
        newTxFactory: () => new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')),
        newTxBuilder: () => new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp'))
            .getImportInCBuilder()
            .threshold(importC_1.IMPORT_C.threshold)
            .fromPubKey(importC_1.IMPORT_C.pAddresses)
            .utxos(importC_1.IMPORT_C.outputs)
            .to(importC_1.IMPORT_C.to)
            .feeRate(importC_1.IMPORT_C.fee),
        unsignedTxHex: importC_1.IMPORT_C.unsignedTxHex,
        halfsigntxHex: importC_1.IMPORT_C.halfsigntxHex,
        fullsigntxHex: importC_1.IMPORT_C.fullsigntxHex,
        privKey: {
            prv1: importC_1.IMPORT_C.privKey.prv1,
            prv2: importC_1.IMPORT_C.privKey.prv2,
        },
    });
    (0, signFlowTestSuit_1.default)({
        transactionType: 'Import C2P recovery',
        newTxFactory: () => new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')),
        newTxBuilder: () => new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp'))
            .getImportInCBuilder()
            .threshold(importC_1.IMPORT_C.threshold)
            .fromPubKey(importC_1.IMPORT_C.pAddresses)
            .utxos(importC_1.IMPORT_C.outputs)
            .to(importC_1.IMPORT_C.to)
            .feeRate(importC_1.IMPORT_C.fee)
            .recoverMode(),
        unsignedTxHex: importC_1.IMPORT_C.rUnsignedTxHex,
        halfsigntxHex: importC_1.IMPORT_C.rHalfsigntxHex,
        fullsigntxHex: importC_1.IMPORT_C.rFullsigntxHex,
        privKey: {
            prv1: importC_1.IMPORT_C.privKey.prv3,
            prv2: importC_1.IMPORT_C.privKey.prv2,
        },
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wb3J0QzJQVHhCdWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdGVzdC91bml0L2xpYi9pbXBvcnRDMlBUeEJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLG9EQUE0QjtBQUM1QixrQkFBZ0I7QUFDaEIscUVBQXVEO0FBQ3ZELDBDQUE2RTtBQUM3RSw0Q0FBdUM7QUFDdkMsd0RBQXNEO0FBQ3RELDBFQUE4QztBQUU5QyxRQUFRLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxFQUFFO0lBQzNDLE1BQU0sT0FBTyxHQUFHLElBQUksK0JBQXlCLENBQUMsZUFBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ25FLFFBQVEsQ0FBQywyQkFBMkIsRUFBRSxHQUFHLEVBQUU7UUFDekMsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFFaEQsRUFBRSxDQUFDLHlDQUF5QyxFQUFFLEdBQUcsRUFBRTtZQUNqRCxnQkFBTSxDQUFDLE1BQU0sQ0FDWCxHQUFHLEVBQUU7Z0JBQ0gsU0FBUyxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM5QixDQUFDLEVBQ0QsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEtBQUssWUFBWSxDQUFDLGlCQUFpQixDQUN6RCxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsaURBQWlELEVBQUUsR0FBRyxFQUFFO1lBQ3pELGdCQUFNLENBQUMsTUFBTSxDQUNYLEdBQUcsRUFBRTtnQkFDSCxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUEyQixDQUFDLENBQUMsQ0FBQztZQUN2RSxDQUFDLEVBQ0QsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEtBQUssWUFBWSxDQUFDLGtCQUFrQixDQUMxRCxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUEsMEJBQVksRUFBQztRQUNYLGVBQWUsRUFBRSxZQUFZO1FBQzdCLFlBQVksRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLCtCQUF5QixDQUFDLGVBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEUsWUFBWSxFQUFFLEdBQUcsRUFBRSxDQUNqQixJQUFJLCtCQUF5QixDQUFDLGVBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDL0MsbUJBQW1CLEVBQUU7YUFDckIsU0FBUyxDQUFDLGtCQUFRLENBQUMsU0FBUyxDQUFDO2FBQzdCLFVBQVUsQ0FBQyxrQkFBUSxDQUFDLFVBQVUsQ0FBQzthQUMvQixLQUFLLENBQUMsa0JBQVEsQ0FBQyxPQUFPLENBQUM7YUFDdkIsRUFBRSxDQUFDLGtCQUFRLENBQUMsRUFBRSxDQUFDO2FBQ2YsT0FBTyxDQUFDLGtCQUFRLENBQUMsR0FBRyxDQUFDO1FBQzFCLGFBQWEsRUFBRSxrQkFBUSxDQUFDLGFBQWE7UUFDckMsYUFBYSxFQUFFLGtCQUFRLENBQUMsYUFBYTtRQUNyQyxhQUFhLEVBQUUsa0JBQVEsQ0FBQyxhQUFhO1FBQ3JDLE9BQU8sRUFBRTtZQUNQLElBQUksRUFBRSxrQkFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJO1lBQzNCLElBQUksRUFBRSxrQkFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJO1NBQzVCO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsSUFBQSwwQkFBWSxFQUFDO1FBQ1gsZUFBZSxFQUFFLHFCQUFxQjtRQUN0QyxZQUFZLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSwrQkFBeUIsQ0FBQyxlQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RFLFlBQVksRUFBRSxHQUFHLEVBQUUsQ0FDakIsSUFBSSwrQkFBeUIsQ0FBQyxlQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQy9DLG1CQUFtQixFQUFFO2FBQ3JCLFNBQVMsQ0FBQyxrQkFBUSxDQUFDLFNBQVMsQ0FBQzthQUM3QixVQUFVLENBQUMsa0JBQVEsQ0FBQyxVQUFVLENBQUM7YUFDL0IsS0FBSyxDQUFDLGtCQUFRLENBQUMsT0FBTyxDQUFDO2FBQ3ZCLEVBQUUsQ0FBQyxrQkFBUSxDQUFDLEVBQUUsQ0FBQzthQUNmLE9BQU8sQ0FBQyxrQkFBUSxDQUFDLEdBQUcsQ0FBQzthQUNyQixXQUFXLEVBQUU7UUFDbEIsYUFBYSxFQUFFLGtCQUFRLENBQUMsY0FBYztRQUN0QyxhQUFhLEVBQUUsa0JBQVEsQ0FBQyxjQUFjO1FBQ3RDLGFBQWEsRUFBRSxrQkFBUSxDQUFDLGNBQWM7UUFDdEMsT0FBTyxFQUFFO1lBQ1AsSUFBSSxFQUFFLGtCQUFRLENBQUMsT0FBTyxDQUFDLElBQUk7WUFDM0IsSUFBSSxFQUFFLGtCQUFRLENBQUMsT0FBTyxDQUFDLElBQUk7U0FDNUI7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcbmltcG9ydCAnc2hvdWxkJztcbmltcG9ydCAqIGFzIGVycm9yTWVzc2FnZSBmcm9tICcuLi8uLi9yZXNvdXJjZXMvZXJyb3JzJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uQnVpbGRlckZhY3RvcnksIERlY29kZWRVdHhvT2JqIH0gZnJvbSAnLi4vLi4vLi4vc3JjL2xpYic7XG5pbXBvcnQgeyBjb2lucyB9IGZyb20gJ0BiaXRnby9zdGF0aWNzJztcbmltcG9ydCB7IElNUE9SVF9DIH0gZnJvbSAnLi4vLi4vcmVzb3VyY2VzL3R4L2ltcG9ydEMnO1xuaW1wb3J0IHNpZ25GbG93VGVzdCBmcm9tICcuL3NpZ25GbG93VGVzdFN1aXQnO1xuXG5kZXNjcmliZSgnQXZheFAgSW1wb3J0IEMyUCBUeCBCdWlsZGVyJywgKCkgPT4ge1xuICBjb25zdCBmYWN0b3J5ID0gbmV3IFRyYW5zYWN0aW9uQnVpbGRlckZhY3RvcnkoY29pbnMuZ2V0KCd0YXZheHAnKSk7XG4gIGRlc2NyaWJlKCd2YWxpZGF0ZSB0eEJ1aWxkZXIgZmllbGRzJywgKCkgPT4ge1xuICAgIGNvbnN0IHR4QnVpbGRlciA9IGZhY3RvcnkuZ2V0SW1wb3J0SW5DQnVpbGRlcigpO1xuXG4gICAgaXQoJ3Nob3VsZCBmYWlsIHZhbGlkYXRlIFV0eG9zIGVtcHR5IHN0cmluZycsICgpID0+IHtcbiAgICAgIGFzc2VydC50aHJvd3MoXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICB0eEJ1aWxkZXIudmFsaWRhdGVVdHhvcyhbXSk7XG4gICAgICAgIH0sXG4gICAgICAgIChlOiBhbnkpID0+IGUubWVzc2FnZSA9PT0gZXJyb3JNZXNzYWdlLkVSUk9SX1VUWE9TX0VNUFRZXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBmYWlsIHZhbGlkYXRlIFV0eG9zIHdpdGhvdXQgYW1vdW50IGZpZWxkJywgKCkgPT4ge1xuICAgICAgYXNzZXJ0LnRocm93cyhcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIHR4QnVpbGRlci52YWxpZGF0ZVV0eG9zKFt7IG91dHB1dElEOiAnJyB9IGFzIGFueSBhcyBEZWNvZGVkVXR4b09ial0pO1xuICAgICAgICB9LFxuICAgICAgICAoZTogYW55KSA9PiBlLm1lc3NhZ2UgPT09IGVycm9yTWVzc2FnZS5FUlJPUl9VVFhPU19BTU9VTlRcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHNpZ25GbG93VGVzdCh7XG4gICAgdHJhbnNhY3Rpb25UeXBlOiAnSW1wb3J0IEMyUCcsXG4gICAgbmV3VHhGYWN0b3J5OiAoKSA9PiBuZXcgVHJhbnNhY3Rpb25CdWlsZGVyRmFjdG9yeShjb2lucy5nZXQoJ3RhdmF4cCcpKSxcbiAgICBuZXdUeEJ1aWxkZXI6ICgpID0+XG4gICAgICBuZXcgVHJhbnNhY3Rpb25CdWlsZGVyRmFjdG9yeShjb2lucy5nZXQoJ3RhdmF4cCcpKVxuICAgICAgICAuZ2V0SW1wb3J0SW5DQnVpbGRlcigpXG4gICAgICAgIC50aHJlc2hvbGQoSU1QT1JUX0MudGhyZXNob2xkKVxuICAgICAgICAuZnJvbVB1YktleShJTVBPUlRfQy5wQWRkcmVzc2VzKVxuICAgICAgICAudXR4b3MoSU1QT1JUX0Mub3V0cHV0cylcbiAgICAgICAgLnRvKElNUE9SVF9DLnRvKVxuICAgICAgICAuZmVlUmF0ZShJTVBPUlRfQy5mZWUpLFxuICAgIHVuc2lnbmVkVHhIZXg6IElNUE9SVF9DLnVuc2lnbmVkVHhIZXgsXG4gICAgaGFsZnNpZ250eEhleDogSU1QT1JUX0MuaGFsZnNpZ250eEhleCxcbiAgICBmdWxsc2lnbnR4SGV4OiBJTVBPUlRfQy5mdWxsc2lnbnR4SGV4LFxuICAgIHByaXZLZXk6IHtcbiAgICAgIHBydjE6IElNUE9SVF9DLnByaXZLZXkucHJ2MSxcbiAgICAgIHBydjI6IElNUE9SVF9DLnByaXZLZXkucHJ2MixcbiAgICB9LFxuICB9KTtcblxuICBzaWduRmxvd1Rlc3Qoe1xuICAgIHRyYW5zYWN0aW9uVHlwZTogJ0ltcG9ydCBDMlAgcmVjb3ZlcnknLFxuICAgIG5ld1R4RmFjdG9yeTogKCkgPT4gbmV3IFRyYW5zYWN0aW9uQnVpbGRlckZhY3RvcnkoY29pbnMuZ2V0KCd0YXZheHAnKSksXG4gICAgbmV3VHhCdWlsZGVyOiAoKSA9PlxuICAgICAgbmV3IFRyYW5zYWN0aW9uQnVpbGRlckZhY3RvcnkoY29pbnMuZ2V0KCd0YXZheHAnKSlcbiAgICAgICAgLmdldEltcG9ydEluQ0J1aWxkZXIoKVxuICAgICAgICAudGhyZXNob2xkKElNUE9SVF9DLnRocmVzaG9sZClcbiAgICAgICAgLmZyb21QdWJLZXkoSU1QT1JUX0MucEFkZHJlc3NlcylcbiAgICAgICAgLnV0eG9zKElNUE9SVF9DLm91dHB1dHMpXG4gICAgICAgIC50byhJTVBPUlRfQy50bylcbiAgICAgICAgLmZlZVJhdGUoSU1QT1JUX0MuZmVlKVxuICAgICAgICAucmVjb3Zlck1vZGUoKSxcbiAgICB1bnNpZ25lZFR4SGV4OiBJTVBPUlRfQy5yVW5zaWduZWRUeEhleCxcbiAgICBoYWxmc2lnbnR4SGV4OiBJTVBPUlRfQy5ySGFsZnNpZ250eEhleCxcbiAgICBmdWxsc2lnbnR4SGV4OiBJTVBPUlRfQy5yRnVsbHNpZ250eEhleCxcbiAgICBwcml2S2V5OiB7XG4gICAgICBwcnYxOiBJTVBPUlRfQy5wcml2S2V5LnBydjMsXG4gICAgICBwcnYyOiBJTVBPUlRfQy5wcml2S2V5LnBydjIsXG4gICAgfSxcbiAgfSk7XG59KTtcbiJdfQ==