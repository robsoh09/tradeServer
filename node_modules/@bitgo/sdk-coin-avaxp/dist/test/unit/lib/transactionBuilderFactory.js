"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const testData = __importStar(require("../../resources/avaxp"));
const errorMessage = __importStar(require("../../resources/errors"));
const lib_1 = require("../../../src/lib");
const statics_1 = require("@bitgo/statics");
const sdk_core_1 = require("@bitgo/sdk-core");
const importP_1 = require("../../resources/tx/importP");
const importC_1 = require("../../resources/tx/importC");
const exportC_1 = require("../../resources/tx/exportC");
const avaxp_1 = require("../../resources/avaxp");
describe('AvaxP Transaction Builder Factory', () => {
    const factory = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp'));
    describe('should validate', () => {
        it('an empty raw transaction', () => {
            assert_1.default.throws(() => {
                factory.from('');
            }, (e) => e.message === errorMessage.ERROR_EMPTY_RAW_TRANSACTION);
        });
        it('an invalid raw transfer transaction', () => {
            assert_1.default.throws(() => {
                factory.from(testData.INVALID_RAW_TRANSACTION);
            }, (e) => e.message === errorMessage.ERROR_RAW_PARSING);
        });
        it('Should validate a correct raw tx', () => {
            factory.from(testData.ADDVALIDATOR_SAMPLES.unsignedTxHex);
            // should not throw a error!
        });
        it("Shouldn't get a wallet initialization builder", () => {
            assert_1.default.throws(() => {
                factory.getWalletInitializationBuilder();
            }, (e) => e.message === errorMessage.ERROR_WALLET_INITIALIZATION);
        });
    });
    describe('Transaction readable', () => {
        const rawTxs = [
            testData.ADD_VALIDATOR_ID_SAMPLE.fullsigntxHex,
            testData.EXPORT_P_2_C.fullsigntxHex,
            testData.EXPORT_P_2_C.halfsigntxHex,
            testData.EXPORT_P_2_C.unsignedTxHex,
            importP_1.IMPORT_P.fullsigntxHex,
            importP_1.IMPORT_P.halfsigntxHex,
            importP_1.IMPORT_P.unsignedTxHex,
        ];
        let tx;
        before(async () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(testData.ADD_VALIDATOR_ID_SAMPLE.fullsigntxHex);
            tx = await txBuilder.build();
        });
        it('Should json stringifiy any transaction object', async () => {
            for (const rawTx of rawTxs) {
                const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(rawTx);
                const tx = await txBuilder.build();
                const txJson = tx.toJson();
                (0, assert_1.default)(typeof JSON.stringify(txJson), 'string');
            }
        });
        it('Should json stringifiy addValidator transaction', async () => {
            const txJson = tx.toJson();
            (0, assert_1.default)(typeof JSON.stringify(tx.toJson()), 'string');
            txJson.id.should.equal(testData.ADD_VALIDATOR_ID_SAMPLE.txid);
        });
        it('Should get a txid', async () => {
            tx.id.should.equal(testData.ADD_VALIDATOR_ID_SAMPLE.txid);
        });
    });
    describe('should explains transaction', () => {
        it('should explains a Signed AddValidatorTx', async () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(testData.ADDVALIDATOR_SAMPLES.fullsigntxHex);
            const tx = await txBuilder.build();
            const txExplain = tx.explainTransaction();
            txExplain.outputAmount.should.equal(testData.ADDVALIDATOR_SAMPLES.minValidatorStake);
            txExplain.type.should.equal(sdk_core_1.TransactionType.AddValidator);
            txExplain.outputs[0].address.should.equal(testData.ADDVALIDATOR_SAMPLES.nodeID);
        });
        it('should explains a Half Signed AddValidatorTx', async () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(testData.ADDVALIDATOR_SAMPLES.halfsigntxHex);
            const tx = await txBuilder.build();
            const txExplain = tx.explainTransaction();
            txExplain.outputAmount.should.equal(testData.ADDVALIDATOR_SAMPLES.minValidatorStake);
            txExplain.type.should.equal(sdk_core_1.TransactionType.AddValidator);
            txExplain.outputs[0].address.should.equal(testData.ADDVALIDATOR_SAMPLES.nodeID);
        });
        it('should explains a unsigned AddValidatorTx', async () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(testData.ADDVALIDATOR_SAMPLES.unsignedTxHex);
            const tx = await txBuilder.build();
            const txExplain = tx.explainTransaction();
            txExplain.outputAmount.should.equal(testData.ADDVALIDATOR_SAMPLES.minValidatorStake);
            txExplain.type.should.equal(sdk_core_1.TransactionType.AddValidator);
            txExplain.outputs[0].address.should.equal(testData.ADDVALIDATOR_SAMPLES.nodeID);
        });
    });
    describe('Cross chain transfer has source and destination chains', () => {
        const p2cTxs = [
            importP_1.IMPORT_P.fullsigntxHex,
            importP_1.IMPORT_P.halfsigntxHex,
            importP_1.IMPORT_P.unsignedTxHex,
            exportC_1.EXPORT_C.fullsigntxHex,
            exportC_1.EXPORT_C.unsignedTxHex,
        ];
        const c2pTxs = [
            importC_1.IMPORT_C.fullsigntxHex,
            importC_1.IMPORT_C.halfsigntxHex,
            importC_1.IMPORT_C.unsignedTxHex,
            testData.EXPORT_P_2_C.fullsigntxHex,
            testData.EXPORT_P_2_C.halfsigntxHex,
            testData.EXPORT_P_2_C.unsignedTxHex,
        ];
        const noCrossChainTxs = [
            avaxp_1.ADDVALIDATOR_SAMPLES.fullsigntxHex,
            avaxp_1.ADDVALIDATOR_SAMPLES.halfsigntxHex,
            avaxp_1.ADDVALIDATOR_SAMPLES.unsignedTxHex,
        ];
        async function toJson(txHex) {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(txHex);
            const tx = await txBuilder.build();
            return tx.toJson();
        }
        it('Should json have sourceChain C and destinationChain P', async () => {
            for (const rawTx of p2cTxs) {
                const txJson = await toJson(rawTx);
                txJson.sourceChain.should.equal('C');
                txJson.destinationChain.should.equal('P');
            }
        });
        it('Should json have sourceChain P and destinationChain C', async () => {
            for (const rawTx of c2pTxs) {
                const txJson = await toJson(rawTx);
                txJson.sourceChain.should.equal('P');
                txJson.destinationChain.should.equal('C');
            }
        });
        it('Should json have not sourceChain either destinationChain ', async () => {
            for (const rawTx of noCrossChainTxs) {
                const txJson = await toJson(rawTx);
                txJson.should.property('sourceChain').be.undefined();
                txJson.should.property('destinationChain').be.undefined();
            }
        });
    });
});
//# sourceMappingURL=data:application/json;base64,