"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
require("should");
const testData = __importStar(require("../../resources/avaxp"));
const errorMessage = __importStar(require("../../resources/errors"));
const lib_1 = require("../../../src/lib");
const statics_1 = require("@bitgo/statics");
const signFlowTestSuit_1 = __importDefault(require("./signFlowTestSuit"));
const importP_1 = require("../../resources/tx/importP");
describe('AvaxP Import P2C Tx Builder', () => {
    const factory = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp'));
    describe('validate txBuilder fields', () => {
        const txBuilder = factory.getImportBuilder();
        it('should fail target chain id length incorrect', () => {
            assert_1.default.throws(() => {
                txBuilder.externalChainId(Buffer.from(testData.INVALID_CHAIN_ID));
            }, (e) => e.message === errorMessage.ERROR_CHAIN_ID_LENGTH);
        });
        it('should fail target chain id not a vaild base58 string', () => {
            assert_1.default.throws(() => {
                txBuilder.externalChainId(testData.INVALID_CHAIN_ID);
            }, (e) => e.message === errorMessage.ERROR_CHAIN_ID_NOT_BASE58);
        });
        it('should fail target chain id cb58 invalid checksum', () => {
            assert_1.default.throws(() => {
                txBuilder.externalChainId(testData.VALID_C_CHAIN_ID.slice(2));
            }, (e) => e.message === errorMessage.ERROR_CHAIN_ID_INVALID_CHECKSUM);
        });
        it('should fail validate Utxos empty string', () => {
            assert_1.default.throws(() => {
                txBuilder.validateUtxos([]);
            }, (e) => e.message === errorMessage.ERROR_UTXOS_EMPTY);
        });
        it('should fail validate Utxos without amount field', () => {
            assert_1.default.throws(() => {
                txBuilder.validateUtxos([{ outputID: '' }]);
            }, (e) => e.message === errorMessage.ERROR_UTXOS_AMOUNT);
        });
    });
    (0, signFlowTestSuit_1.default)({
        transactionType: 'Import P2C',
        newTxFactory: () => new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')),
        newTxBuilder: () => new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp'))
            .getImportBuilder()
            .threshold(importP_1.IMPORT_P.threshold)
            .locktime(importP_1.IMPORT_P.locktime)
            .fromPubKey(importP_1.IMPORT_P.pAddresses)
            .externalChainId(importP_1.IMPORT_P.targetChainId)
            .utxos(importP_1.IMPORT_P.outputs),
        unsignedTxHex: importP_1.IMPORT_P.unsignedTxHex,
        halfsigntxHex: importP_1.IMPORT_P.halfsigntxHex,
        fullsigntxHex: importP_1.IMPORT_P.fullsigntxHex,
        privKey: {
            prv1: importP_1.IMPORT_P.privKey.prv1,
            prv2: importP_1.IMPORT_P.privKey.prv2,
        },
    });
    (0, signFlowTestSuit_1.default)({
        transactionType: 'Import P2C recovery',
        newTxFactory: () => new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')),
        newTxBuilder: () => new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp'))
            .getImportBuilder()
            .threshold(importP_1.IMPORT_P.threshold)
            .locktime(importP_1.IMPORT_P.locktime)
            .fromPubKey(importP_1.IMPORT_P.pAddresses)
            .externalChainId(importP_1.IMPORT_P.targetChainId)
            .utxos(importP_1.IMPORT_P.outputs)
            .recoverMode(),
        unsignedTxHex: importP_1.IMPORT_P.rUnsignedTxHex,
        halfsigntxHex: importP_1.IMPORT_P.rHalfsigntxHex,
        fullsigntxHex: importP_1.IMPORT_P.rFullsigntxHex,
        privKey: {
            prv1: importP_1.IMPORT_P.privKey.prv3,
            prv2: importP_1.IMPORT_P.privKey.prv2,
        },
    });
    describe('Key cannot sign the transaction ', () => {
        it('Should full sign a import tx from unsigned raw tx', () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(importP_1.IMPORT_P.unsignedTxHex);
            txBuilder.sign({ key: importP_1.IMPORT_P.privKey.prv2 });
            txBuilder
                .build()
                .then(() => assert_1.default.fail('it can sign'))
                .catch((err) => {
                err.message.should.be.equal(errorMessage.ERROR_KEY_CANNOT_SIGN);
            });
        });
        it('Should 2 full sign a import tx from unsigned raw tx', () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(importP_1.IMPORT_P.rUnsignedTxHex);
            txBuilder.sign({ key: importP_1.IMPORT_P.privKey.prv1 });
            txBuilder
                .build()
                .then(() => assert_1.default.fail('it can sign'))
                .catch((err) => {
                err.message.should.be.equal(errorMessage.ERROR_KEY_CANNOT_SIGN);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,