/// <reference types="bn.js" />
import { BN } from 'avalanche';
export declare const SEED_ACCOUNT: {
    seed: string;
    privateKey: string;
    privateKeyAvax: string;
    publicKey: string;
    publicKeyCb58: string;
    xPrivateKey: string;
    xPublicKey: string;
    addressTestnet: string;
    addressTestnetWithoutPrefix: string;
    addressMainnet: string;
    addressMainnetWithoutPrefix: string;
};
export declare const ACCOUNT_1: {
    privkey: string;
    privkey_cb58: string;
    pubkey: string;
    addressTestnet: string;
    addressTestnetWithoutPrefix: string;
    addressMainnet: string;
    addressMainnetWithoutPrefix: string;
};
export declare const ACCOUNT_2: {
    privkey: string;
    pubkey: string;
};
export declare const ACCOUNT_3: {
    privkey: string;
    privkeyHex: string;
    pubkey: string;
    pubkeyHex: string;
    address: string;
};
export declare const ACCOUNT_4: {
    privkey: string;
    privkeyHex: string;
    pubkey: string;
    pubkeyHex: string;
    address: string;
};
export declare const INVALID_NODE_ID_MISSING_NODE_ID = "NodeI-NFBbbJ4qCmNaCzeW7sxErhvWqvEQMnYcN";
export declare const INVALID_NODE_ID_LENGTH = "NodeID-test";
export declare const NODE_ID_2 = "NodeID-P1KjdPNrap8LHfx5AstcXxsHjk3jbbyF";
export declare const INVALID_STAKE_AMOUNT: BN;
export declare const INVALID_DELEGATION_FEE = 0;
export declare const START_TIME: BN;
export declare const ONE_WEEK: BN;
export declare const TWO_YEAR: BN;
export declare const INVALID_SHORT_KEYPAIR_KEY = "82A34E";
export declare const INVALID_PRIVATE_KEY_ERROR_MESSAGE = "Unsupported private key";
export declare const INVALID_PUBLIC_KEY_ERROR_MESSAGE = "Unsupported public key";
export declare const INVALID_LONG_KEYPAIR_PRV: string;
export declare const INVALID_RAW_TRANSACTION = "This is an invalid raw transaction";
export declare const INVALID_ADDRESS = "INVALID-ADDRESS";
export declare const VALID_ADDRESS = "P-avax14hhmsl9um7e9xjwqgvkf9rswq0y0zk9te8plfv";
export declare const VALID_BLOCK_ID = "nQna7h6aAe2kN26eViH3qWU9yProgc4abr1SzKYwjX6HA7v6d";
export declare const INVALID_BLOCK_ID = "b78aad20239b2f9de8efa1a6ee1f44cd50ca67bd3e431e43e5f359937d25c3e3";
export declare const INVALID_BLOCK_ID_LENGTH = "0xb78aad20239b2f9de8efa1a6ee1f44cd50ca67bd3e431e43e5f359937d25c3e";
export declare const INVALID_CHAIN_ID = "wrong chain id";
export declare const VALID_C_CHAIN_ID = "yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp";
export declare const ADDVALIDATOR_SAMPLES: {
    unsignedTxHex: string;
    halfsigntxHex: string;
    fullsigntxHex: string;
    recoveryUnsignedTxHex: string;
    recoveryHalfsigntxHex: string;
    recoveryFullsigntxHexWithoutMemo: string;
    recoveryFullsigntxHex: string;
    recoveryFullsigntxHexWithMemo: string;
    privKey: {
        prv1: string;
        prv2: string;
        prv3: string;
    };
    outputs: {
        outputID: number;
        amount: string;
        txid: string;
        outputidx: string;
        addresses: string[];
        threshold: number;
    }[];
    nodeID: string;
    startTime: string;
    endTime: string;
    minValidatorStake: string;
    pAddresses: string[];
    delegationFee: number;
    threshold: number;
    locktime: number;
};
export declare const BUILD_AND_SIGN_ADD_VALIDATOR_SAMPLE: {
    threshold: number;
    locktime: number;
    bitgoAddresses: string[];
    startTime: string;
    endTime: string;
    stakeAmount: string;
    delegationFeeRate: number;
    nodeId: string;
    utxos: {
        outputID: number;
        amount: string;
        txid: string;
        outputidx: string;
        addresses: string[];
        threshold: number;
    }[];
    unsignedRawTxNonRecovery: string;
    halfSignedRawTxNonRecovery: string;
    unsignedRawtxRecovery: string;
    halfSignedRawTxRecovery: string;
    userPrivateKey: string;
    backupPrivateKey: string;
};
export declare const BUILD_AND_SIGN_ADD_PERMISSIONLESS_SAMPLE: {
    threshold: number;
    locktime: number;
    bitgoAddresses: string[];
    startTime: string;
    endTime: string;
    stakeAmount: string;
    delegationFeeRate: number;
    nodeId: string;
    blsPublicKey: string;
    blsSignature: string;
    utxos: {
        outputID: number;
        amount: string;
        txid: string;
        outputidx: string;
        addresses: string[];
        threshold: number;
    }[];
    unsignedRawTxNonRecovery: string;
    halfSignedRawTxNonRecovery: string;
    unsignedRawtxRecovery: string;
    halfSignedRawTxRecovery: string;
    userPrivateKey: string;
    backupPrivateKey: string;
};
/**
 * Test accounts:
 * [
 *   {
 *     source: 'user',
 *     pub: '02abb451c0cc240e9a4fb97a130846d90a87247264e57014e41dc226ebf4965724',
 *     prv: 'f45d1c9bf57d3c02299a727d6e5d8d4e76498846b1a289b4e31a2ecccbc212fb',
 *     address: 'P-fuji1w4jjs4qfugq0m3nu0d3htx6662dlq87zq5nz33'
 *   },
 *   {
 *     source: 'backup',
 *     pub: '025523fa48a5b0c8ed4a8344aab8396061fb42cb4f168ba5d3ae19f034c4ea2d4d',
 *     prv: '2e0ffe6efbfcc27e9aaf4bce6af78d4c66e89b0955b85f02d7e15910e16ed4cd',
 *     address: 'P-fuji1wzr0hsm8zlr6gpaakxvt67f999nj044ete07uw'
 *   },
 *   {
 *     source: 'bitgo',
 *     pub: '03d71cda3b1c32eed044866ec96c2ac54af43e7edb8f1535df51f341e49674ffaa',
 *     prv: '5a360c848021024528dfc02e79ba441f1727c765b4d0dcec288ffbd2772cd432',
 *     address: 'P-fuji1k3ca2njcunzl4hhxy24avca7htf66cmjjukl0n'
 *   }
 * ]
 */
export declare const BUILD_AND_SIGN_ADD_PERMISSIONLESS_VALIDATOR_SAMPLE: {
    threshold: number;
    locktime: number;
    bitgoAddresses: string[];
    startTime: string;
    endTime: string;
    stakeAmount: string;
    stakeAmountNoOutput: string;
    delegationFeeRate: number;
    nodeId: string;
    blsPublicKey: string;
    blsSignature: string;
    utxos: {
        outputID: number;
        amount: string;
        txid: string;
        threshold: number;
        addresses: string[];
        outputidx: string;
        locktime: string;
    }[];
    halfSignedTx: string;
    unsignedRawTxNonRecovery: string;
    halfSignedRawTxNonRecovery: string;
    unsignedRawtxRecovery: string;
    halfSignedRawTxRecovery: string;
    userPrivateKey: string;
    backupPrivateKey: string;
};
export declare const ADD_VALIDATOR_ID_SAMPLE: {
    fullsigntxHex: string;
    txid: string;
};
export declare const EXPORT_P_2_C: {
    txhash: string;
    unsignedTxHex: string;
    halfsigntxHex: string;
    fullsigntxHex: string;
    rUnsignedTxHex: string;
    rHalfsigntxHex: string;
    rFullsigntxHex: string;
    privKey: {
        prv1: string;
        prv2: string;
        prv3: string;
    };
    outputs: {
        outputID: number;
        amount: string;
        txid: string;
        outputidx: string;
        addresses: string[];
        threshold: number;
    }[];
    amount: string;
    pAddresses: string[];
    targetChainId: string;
    threshold: number;
    locktime: number;
};
export declare const EXPORT_P_2_C_VERIFY: {
    txHex: string;
    amount: string;
    receiveAddress: string;
    receiveAddress2: string;
};
export declare const EXPORT_P_2_C_WITHOUT_CHANGEOUTPUT: {
    txhash: string;
    unsignedTxHex: string;
    halfsigntxHex: string;
    fullsigntxHex: string;
    rUnsignedTxHex: string;
    rHalfsigntxHex: string;
    rFullsigntxHex: string;
    privKey: {
        prv1: string;
        prv2: string;
        prv3: string;
    };
    outputs: {
        outputID: number;
        amount: string;
        txid: string;
        outputidx: string;
        addresses: string[];
        threshold: number;
    }[];
    amount: string;
    pAddresses: string[];
    targetChainId: string;
    threshold: number;
    locktime: number;
};
//# sourceMappingURL=avaxp.d.ts.map