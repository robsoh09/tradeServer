"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ERROR_CHAIN_ID_INVALID_CHECKSUM = exports.ERROR_CHAIN_ID_NOT_BASE58 = exports.ERROR_NONCE = exports.ERROR_AMOUNT = exports.ERROR_KEY_CANNOT_SIGN = exports.ERROR_CHAIN_ID_LENGTH = exports.ERROR_UTXOS_AMOUNT = exports.ERROR_UTXOS_EMPTY = exports.ERROR_WALLET_INITIALIZATION = exports.ERROR_DELEGATION_FEE = exports.ERROR_STAKE_AMOUNT = exports.ERROR_STAKE_DURATION_LONG_TIME = exports.ERROR_STAKE_DURATION_SHORT_TIME = exports.ERROR_STAKE_START_TIME_TOO_SHORT = exports.ERROR_RAW_PARSING = exports.ERROR_EMPTY_RAW_TRANSACTION = exports.ERROR_NODE_ID_LENGTH = exports.ERROR_NODE_ID = void 0;
exports.ERROR_NODE_ID = 'Invalid transaction: invalid NodeID tag';
exports.ERROR_NODE_ID_LENGTH = 'Invalid transaction: NodeID is not in cb58 format';
exports.ERROR_EMPTY_RAW_TRANSACTION = 'Raw transaction is empty';
exports.ERROR_RAW_PARSING = 'Raw transaction is not hex string';
exports.ERROR_STAKE_START_TIME_TOO_SHORT = 'Start time needs to be one day greater than current time';
exports.ERROR_STAKE_DURATION_SHORT_TIME = 'End date must be greater than or equal to two weeks';
exports.ERROR_STAKE_DURATION_LONG_TIME = 'End date must be less than or equal to one year';
exports.ERROR_STAKE_AMOUNT = 'Minimum staking amount is 2000 AVAX.';
exports.ERROR_DELEGATION_FEE = 'Delegation fee cannot be less than 2';
exports.ERROR_WALLET_INITIALIZATION = 'Wallet initialization is not needed';
exports.ERROR_UTXOS_EMPTY = "Utxos can't be empty array";
exports.ERROR_UTXOS_AMOUNT = 'Utxos required amount';
exports.ERROR_CHAIN_ID_LENGTH = 'Chain id are 32 byte size';
exports.ERROR_KEY_CANNOT_SIGN = 'Private key cannot sign the transaction';
exports.ERROR_AMOUNT = 'Amount must be greater than 0';
exports.ERROR_NONCE = 'Nonce must be greater or equal than 0';
exports.ERROR_CHAIN_ID_NOT_BASE58 = 'Error - Base58.decode: not a valid base58 string';
exports.ERROR_CHAIN_ID_INVALID_CHECKSUM = 'Error - BinTools.cb58Decode: invalid checksum';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vdGVzdC9yZXNvdXJjZXMvZXJyb3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFhLFFBQUEsYUFBYSxHQUFHLHlDQUF5QyxDQUFDO0FBRTFELFFBQUEsb0JBQW9CLEdBQUcsbURBQW1ELENBQUM7QUFFM0UsUUFBQSwyQkFBMkIsR0FBRywwQkFBMEIsQ0FBQztBQUV6RCxRQUFBLGlCQUFpQixHQUFHLG1DQUFtQyxDQUFDO0FBRXhELFFBQUEsZ0NBQWdDLEdBQUcsMERBQTBELENBQUM7QUFFOUYsUUFBQSwrQkFBK0IsR0FBRyxxREFBcUQsQ0FBQztBQUV4RixRQUFBLDhCQUE4QixHQUFHLGlEQUFpRCxDQUFDO0FBRW5GLFFBQUEsa0JBQWtCLEdBQUcsc0NBQXNDLENBQUM7QUFFNUQsUUFBQSxvQkFBb0IsR0FBRyxzQ0FBc0MsQ0FBQztBQUU5RCxRQUFBLDJCQUEyQixHQUFHLHFDQUFxQyxDQUFDO0FBRXBFLFFBQUEsaUJBQWlCLEdBQUcsNEJBQTRCLENBQUM7QUFFakQsUUFBQSxrQkFBa0IsR0FBRyx1QkFBdUIsQ0FBQztBQUU3QyxRQUFBLHFCQUFxQixHQUFHLDJCQUEyQixDQUFDO0FBRXBELFFBQUEscUJBQXFCLEdBQUcseUNBQXlDLENBQUM7QUFFbEUsUUFBQSxZQUFZLEdBQUcsK0JBQStCLENBQUM7QUFFL0MsUUFBQSxXQUFXLEdBQUcsdUNBQXVDLENBQUM7QUFFdEQsUUFBQSx5QkFBeUIsR0FBRyxrREFBa0QsQ0FBQztBQUUvRSxRQUFBLCtCQUErQixHQUFHLCtDQUErQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEVSUk9SX05PREVfSUQgPSAnSW52YWxpZCB0cmFuc2FjdGlvbjogaW52YWxpZCBOb2RlSUQgdGFnJztcblxuZXhwb3J0IGNvbnN0IEVSUk9SX05PREVfSURfTEVOR1RIID0gJ0ludmFsaWQgdHJhbnNhY3Rpb246IE5vZGVJRCBpcyBub3QgaW4gY2I1OCBmb3JtYXQnO1xuXG5leHBvcnQgY29uc3QgRVJST1JfRU1QVFlfUkFXX1RSQU5TQUNUSU9OID0gJ1JhdyB0cmFuc2FjdGlvbiBpcyBlbXB0eSc7XG5cbmV4cG9ydCBjb25zdCBFUlJPUl9SQVdfUEFSU0lORyA9ICdSYXcgdHJhbnNhY3Rpb24gaXMgbm90IGhleCBzdHJpbmcnO1xuXG5leHBvcnQgY29uc3QgRVJST1JfU1RBS0VfU1RBUlRfVElNRV9UT09fU0hPUlQgPSAnU3RhcnQgdGltZSBuZWVkcyB0byBiZSBvbmUgZGF5IGdyZWF0ZXIgdGhhbiBjdXJyZW50IHRpbWUnO1xuXG5leHBvcnQgY29uc3QgRVJST1JfU1RBS0VfRFVSQVRJT05fU0hPUlRfVElNRSA9ICdFbmQgZGF0ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0d28gd2Vla3MnO1xuXG5leHBvcnQgY29uc3QgRVJST1JfU1RBS0VfRFVSQVRJT05fTE9OR19USU1FID0gJ0VuZCBkYXRlIG11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIG9uZSB5ZWFyJztcblxuZXhwb3J0IGNvbnN0IEVSUk9SX1NUQUtFX0FNT1VOVCA9ICdNaW5pbXVtIHN0YWtpbmcgYW1vdW50IGlzIDIwMDAgQVZBWC4nO1xuXG5leHBvcnQgY29uc3QgRVJST1JfREVMRUdBVElPTl9GRUUgPSAnRGVsZWdhdGlvbiBmZWUgY2Fubm90IGJlIGxlc3MgdGhhbiAyJztcblxuZXhwb3J0IGNvbnN0IEVSUk9SX1dBTExFVF9JTklUSUFMSVpBVElPTiA9ICdXYWxsZXQgaW5pdGlhbGl6YXRpb24gaXMgbm90IG5lZWRlZCc7XG5cbmV4cG9ydCBjb25zdCBFUlJPUl9VVFhPU19FTVBUWSA9IFwiVXR4b3MgY2FuJ3QgYmUgZW1wdHkgYXJyYXlcIjtcblxuZXhwb3J0IGNvbnN0IEVSUk9SX1VUWE9TX0FNT1VOVCA9ICdVdHhvcyByZXF1aXJlZCBhbW91bnQnO1xuXG5leHBvcnQgY29uc3QgRVJST1JfQ0hBSU5fSURfTEVOR1RIID0gJ0NoYWluIGlkIGFyZSAzMiBieXRlIHNpemUnO1xuXG5leHBvcnQgY29uc3QgRVJST1JfS0VZX0NBTk5PVF9TSUdOID0gJ1ByaXZhdGUga2V5IGNhbm5vdCBzaWduIHRoZSB0cmFuc2FjdGlvbic7XG5cbmV4cG9ydCBjb25zdCBFUlJPUl9BTU9VTlQgPSAnQW1vdW50IG11c3QgYmUgZ3JlYXRlciB0aGFuIDAnO1xuXG5leHBvcnQgY29uc3QgRVJST1JfTk9OQ0UgPSAnTm9uY2UgbXVzdCBiZSBncmVhdGVyIG9yIGVxdWFsIHRoYW4gMCc7XG5cbmV4cG9ydCBjb25zdCBFUlJPUl9DSEFJTl9JRF9OT1RfQkFTRTU4ID0gJ0Vycm9yIC0gQmFzZTU4LmRlY29kZTogbm90IGEgdmFsaWQgYmFzZTU4IHN0cmluZyc7XG5cbmV4cG9ydCBjb25zdCBFUlJPUl9DSEFJTl9JRF9JTlZBTElEX0NIRUNLU1VNID0gJ0Vycm9yIC0gQmluVG9vbHMuY2I1OERlY29kZTogaW52YWxpZCBjaGVja3N1bSc7XG4iXX0=