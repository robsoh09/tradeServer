"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractCallWrapper = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const sdk_core_1 = require("@bitgo/sdk-core");
/**
 * Contains parameters to call a Near Function Call action
 */
class ContractCallWrapper {
    /** Set method contract name */
    set methodName(methodName) {
        this._methodName = methodName;
    }
    /** Get method contract name */
    get methodName() {
        return this._methodName;
    }
    /** Set gas, expresed on yocto */
    set gas(gas) {
        if (!this.isValidAmount(new bignumber_js_1.default(gas))) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid gas value');
        }
        this._gas = gas;
    }
    /** Get gas, expresed on yocto*/
    get gas() {
        return this._gas;
    }
    /** Set deposit, expresed on yocto */
    set deposit(deposit) {
        if (!this.isValidAmount(new bignumber_js_1.default(deposit))) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid deposit value');
        }
        this._deposit = deposit;
    }
    /** Get deposit, expresed on yocto */
    get deposit() {
        return this._deposit;
    }
    /** Get args, which are the parameters of a method */
    set args(args) {
        this._args = args;
    }
    /** Set args, which are the parameters of a method */
    get args() {
        return this._args;
    }
    /**
     * Get all parameters of the contractCallWrapper
     * @returns {FunctionCall}
     */
    getParams() {
        return {
            methodName: this._methodName,
            args: this._args,
            gas: this._gas,
            deposit: this._deposit,
        };
    }
    isValidAmount(value) {
        return !value.isLessThan(0);
    }
}
exports.ContractCallWrapper = ContractCallWrapper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3RDYWxsV3JhcHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvY29udHJhY3RDYWxsV3JhcHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxnRUFBcUM7QUFDckMsOENBQTZEO0FBRzdEOztHQUVHO0FBQ0gsTUFBYSxtQkFBbUI7SUFNOUIsK0JBQStCO0lBQy9CLElBQVcsVUFBVSxDQUFDLFVBQWtCO1FBQ3RDLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDO0lBQ2hDLENBQUM7SUFFRCwrQkFBK0I7SUFDL0IsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBRUQsaUNBQWlDO0lBQ2pDLElBQVcsR0FBRyxDQUFDLEdBQVc7UUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxzQkFBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDM0MsTUFBTSxJQUFJLHFDQUEwQixDQUFDLG1CQUFtQixDQUFDLENBQUM7U0FDM0Q7UUFDRCxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztJQUNsQixDQUFDO0lBRUQsZ0NBQWdDO0lBQ2hDLElBQVcsR0FBRztRQUNaLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuQixDQUFDO0lBRUQscUNBQXFDO0lBQ3JDLElBQVcsT0FBTyxDQUFDLE9BQWU7UUFDaEMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxzQkFBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUU7WUFDL0MsTUFBTSxJQUFJLHFDQUEwQixDQUFDLHVCQUF1QixDQUFDLENBQUM7U0FDL0Q7UUFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztJQUMxQixDQUFDO0lBRUQscUNBQXFDO0lBQ3JDLElBQVcsT0FBTztRQUNoQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUVELHFEQUFxRDtJQUNyRCxJQUFXLElBQUksQ0FBQyxJQUE2QjtRQUMzQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztJQUNwQixDQUFDO0lBRUQscURBQXFEO0lBQ3JELElBQVcsSUFBSTtRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsU0FBUztRQUNQLE9BQU87WUFDTCxVQUFVLEVBQUUsSUFBSSxDQUFDLFdBQVc7WUFDNUIsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2hCLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNkLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUTtTQUN2QixDQUFDO0lBQ0osQ0FBQztJQUVPLGFBQWEsQ0FBQyxLQUFnQjtRQUNwQyxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QixDQUFDO0NBQ0Y7QUFwRUQsa0RBb0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJpZ051bWJlciBmcm9tICdiaWdudW1iZXIuanMnO1xuaW1wb3J0IHsgSW52YWxpZFBhcmFtZXRlclZhbHVlRXJyb3IgfSBmcm9tICdAYml0Z28vc2RrLWNvcmUnO1xuaW1wb3J0IHsgRnVuY3Rpb25DYWxsIH0gZnJvbSAnLi9pZmFjZSc7XG5cbi8qKlxuICogQ29udGFpbnMgcGFyYW1ldGVycyB0byBjYWxsIGEgTmVhciBGdW5jdGlvbiBDYWxsIGFjdGlvblxuICovXG5leHBvcnQgY2xhc3MgQ29udHJhY3RDYWxsV3JhcHBlciB7XG4gIHByaXZhdGUgX21ldGhvZE5hbWU6IHN0cmluZztcbiAgcHJpdmF0ZSBfYXJnczogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gIHByaXZhdGUgX2dhczogc3RyaW5nO1xuICBwcml2YXRlIF9kZXBvc2l0OiBzdHJpbmc7XG5cbiAgLyoqIFNldCBtZXRob2QgY29udHJhY3QgbmFtZSAqL1xuICBwdWJsaWMgc2V0IG1ldGhvZE5hbWUobWV0aG9kTmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fbWV0aG9kTmFtZSA9IG1ldGhvZE5hbWU7XG4gIH1cblxuICAvKiogR2V0IG1ldGhvZCBjb250cmFjdCBuYW1lICovXG4gIHB1YmxpYyBnZXQgbWV0aG9kTmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9tZXRob2ROYW1lO1xuICB9XG5cbiAgLyoqIFNldCBnYXMsIGV4cHJlc2VkIG9uIHlvY3RvICovXG4gIHB1YmxpYyBzZXQgZ2FzKGdhczogc3RyaW5nKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWRBbW91bnQobmV3IEJpZ051bWJlcihnYXMpKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRQYXJhbWV0ZXJWYWx1ZUVycm9yKCdJbnZhbGlkIGdhcyB2YWx1ZScpO1xuICAgIH1cbiAgICB0aGlzLl9nYXMgPSBnYXM7XG4gIH1cblxuICAvKiogR2V0IGdhcywgZXhwcmVzZWQgb24geW9jdG8qL1xuICBwdWJsaWMgZ2V0IGdhcygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9nYXM7XG4gIH1cblxuICAvKiogU2V0IGRlcG9zaXQsIGV4cHJlc2VkIG9uIHlvY3RvICovXG4gIHB1YmxpYyBzZXQgZGVwb3NpdChkZXBvc2l0OiBzdHJpbmcpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZEFtb3VudChuZXcgQmlnTnVtYmVyKGRlcG9zaXQpKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRQYXJhbWV0ZXJWYWx1ZUVycm9yKCdJbnZhbGlkIGRlcG9zaXQgdmFsdWUnKTtcbiAgICB9XG4gICAgdGhpcy5fZGVwb3NpdCA9IGRlcG9zaXQ7XG4gIH1cblxuICAvKiogR2V0IGRlcG9zaXQsIGV4cHJlc2VkIG9uIHlvY3RvICovXG4gIHB1YmxpYyBnZXQgZGVwb3NpdCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9kZXBvc2l0O1xuICB9XG5cbiAgLyoqIEdldCBhcmdzLCB3aGljaCBhcmUgdGhlIHBhcmFtZXRlcnMgb2YgYSBtZXRob2QgKi9cbiAgcHVibGljIHNldCBhcmdzKGFyZ3M6IFJlY29yZDxzdHJpbmcsIHVua25vd24+KSB7XG4gICAgdGhpcy5fYXJncyA9IGFyZ3M7XG4gIH1cblxuICAvKiogU2V0IGFyZ3MsIHdoaWNoIGFyZSB0aGUgcGFyYW1ldGVycyBvZiBhIG1ldGhvZCAqL1xuICBwdWJsaWMgZ2V0IGFyZ3MoKTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4ge1xuICAgIHJldHVybiB0aGlzLl9hcmdzO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbGwgcGFyYW1ldGVycyBvZiB0aGUgY29udHJhY3RDYWxsV3JhcHBlclxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb25DYWxsfVxuICAgKi9cbiAgZ2V0UGFyYW1zKCk6IEZ1bmN0aW9uQ2FsbCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1ldGhvZE5hbWU6IHRoaXMuX21ldGhvZE5hbWUsXG4gICAgICBhcmdzOiB0aGlzLl9hcmdzLFxuICAgICAgZ2FzOiB0aGlzLl9nYXMsXG4gICAgICBkZXBvc2l0OiB0aGlzLl9kZXBvc2l0LFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGlzVmFsaWRBbW91bnQodmFsdWU6IEJpZ051bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdmFsdWUuaXNMZXNzVGhhbigwKTtcbiAgfVxufVxuIl19