"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const transaction_1 = require("./transaction");
const nearAPI = __importStar(require("near-api-js"));
const errors_1 = require("./errors");
const utils_1 = __importDefault(require("./utils"));
const assert_1 = __importDefault(require("assert"));
const keyPair_1 = require("./keyPair");
const hex = __importStar(require("@stablelib/hex"));
class TransactionBuilder extends sdk_core_1.BaseTransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._signatures = []; // only support single sig for now
        this._transaction = new transaction_1.Transaction(_coinConfig);
    }
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     *
     * @param {Transaction} tx the transaction data
     */
    initBuilder(tx) {
        this._transaction = tx;
        const nearTransaction = tx.nearTransaction;
        this._sender = nearTransaction.signerId;
        this._nonce = nearTransaction.nonce;
        this._receiverId = nearTransaction.receiverId;
        this._publicKey = hex.encode(nearTransaction.publicKey.data);
        this._recentBlockHash = nearAPI.utils.serialize.base_encode(nearTransaction.blockHash);
        this._actions = nearTransaction.actions;
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        this.validateRawTransaction(rawTransaction);
        this.buildImplementation();
        return this.transaction;
    }
    /** @inheritdoc */
    async buildImplementation() {
        var _a;
        this.transaction.nearTransaction = this.buildNearTransaction();
        if (this._signer) {
            this.transaction.sign(this._signer);
        }
        if (((_a = this._signatures) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            this.transaction.constructSignedPayload(this._signatures[0].signature);
        }
        this.transaction.loadInputsAndOutputs();
        return this.transaction;
    }
    /** @inheritdoc */
    signImplementation(key) {
        this._signer = new keyPair_1.KeyPair({ prv: key.key });
        return this._transaction;
    }
    // region Getters and Setters
    /** @inheritdoc */
    get transaction() {
        return this._transaction;
    }
    /** @inheritdoc */
    set transaction(transaction) {
        this._transaction = transaction;
    }
    // endregion
    // region Validators
    /** @inheritdoc */
    validateAddress(address, addressFormat) {
        if (!utils_1.default.isValidAddress(address.address)) {
            throw new errors_1.AddressValidationError(address.address);
        }
    }
    /** @inheritdoc */
    validateKey(key) {
        try {
            new keyPair_1.KeyPair({ prv: key.key });
        }
        catch {
            throw new sdk_core_1.BuildTransactionError(`Key validation failed`);
        }
    }
    /** @inheritdoc */
    validateRawTransaction(rawTransaction) {
        try {
            nearAPI.utils.serialize.deserialize(nearAPI.transactions.SCHEMA, nearAPI.transactions.SignedTransaction, rawTransaction);
        }
        catch {
            try {
                nearAPI.utils.serialize.deserialize(nearAPI.transactions.SCHEMA, nearAPI.transactions.Transaction, rawTransaction);
            }
            catch {
                throw new sdk_core_1.BuildTransactionError('invalid raw transaction');
            }
        }
    }
    /** @inheritdoc */
    validateTransaction(transaction) {
        if (!transaction.nearTransaction) {
            return;
        }
        this.validateAddress({ address: transaction.nearTransaction.signerId });
        this.validateAddress({ address: transaction.nearTransaction.receiverId });
    }
    /** @inheritdoc */
    validateValue(value) {
        if (value.isLessThan(0)) {
            throw new sdk_core_1.BuildTransactionError('Value cannot be less than zero');
        }
    }
    // endregion
    /**
     * Sets the public key and the address of the sender of this transaction.
     *
     * @param {string} address the account that is sending this transaction
     * @param {string} pubKey the public key that is sending this transaction
     * @returns {TransactionBuilder} This transaction builder
     */
    sender(address, pubKey) {
        if (!address || !utils_1.default.isValidAddress(address.toString())) {
            throw new sdk_core_1.BuildTransactionError('Invalid or missing address, got: ' + address);
        }
        if (!pubKey || !utils_1.default.isValidPublicKey(pubKey)) {
            throw new sdk_core_1.BuildTransactionError('Invalid or missing pubKey, got: ' + pubKey);
        }
        this._sender = address;
        this._publicKey = pubKey;
        return this;
    }
    /**
     * Sets the account Id of the receiver of this transaction.
     *
     * @param {string} accountId the account id of the account that is receiving this transaction
     * @returns {TransactionBuilder} This transaction builder
     */
    receiverId(accountId) {
        utils_1.default.isValidAddress(accountId);
        this._receiverId = accountId;
        return this;
    }
    /**
     * Set the nonce
     *
     * @param {number} nonce - number that can be only used once
     * @returns {TransactionBuilder} This transaction builder
     */
    nonce(nonce) {
        if (nonce < 0) {
            throw new sdk_core_1.BuildTransactionError(`Invalid nonce: ${nonce}`);
        }
        this._nonce = nonce;
        return this;
    }
    /**
     * Sets the blockHash of this transaction.
     *
     * @param {string} blockHash the blockHash of this transaction
     * @returns {TransactionBuilder} This transaction builder
     */
    recentBlockHash(blockHash) {
        if (!utils_1.default.isValidBlockId(blockHash)) {
            throw new sdk_core_1.BuildTransactionError(`Invalid blockHash ${blockHash}`);
        }
        this._recentBlockHash = blockHash;
        return this;
    }
    /**
     * Sets the list of actions of this transaction.
     *
     * @param {nearAPI.transactions.Action[]} value the the list of actions
     * @returns {TransactionBuilder} This transaction builder
     */
    actions(value) {
        this._actions = value;
        return this;
    }
    /**
     * Builds the NEAR transaction.
     *
     * @return {Transaction} near sdk transaction
     */
    buildNearTransaction() {
        (0, assert_1.default)(this._sender, new sdk_core_1.BuildTransactionError('sender is required before building'));
        (0, assert_1.default)(this._recentBlockHash, new sdk_core_1.BuildTransactionError('recent blockhash is required before building'));
        const tx = nearAPI.transactions.createTransaction(this._sender, nearAPI.utils.PublicKey.fromString(nearAPI.utils.serialize.base_encode(hex.decode(this._publicKey))), this._receiverId, this._nonce, this._actions, nearAPI.utils.serialize.base_decode(this._recentBlockHash));
        return tx;
    }
    /** @inheritDoc */
    addSignature(publicKey, signature) {
        this._signatures.push({ publicKey, signature });
    }
}
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,