import { AbstractUtxoCoin, SignTransactionOptions, ExplainTransactionOptions, TransactionExplanation, UtxoNetwork, ParseTransactionOptions, ParsedTransaction, VerifyTransactionOptions, CrossChainRecoverySigned, CrossChainRecoveryUnsigned, RecoverFromWrongChainOptions, TransactionInfo, TransactionPrebuild } from '@bitgo/abstract-utxo';
import { BaseCoin, BitGoBase, HalfSignedUtxoTransaction, SignedTransaction } from '@bitgo/sdk-core';
import { bitgo } from '@bitgo/utxo-lib';
declare type UnspentJSON = bitgo.Unspent<number> & {
    valueString: string;
};
declare type TransactionInfoJSON = TransactionInfo<number> & {
    unspents: UnspentJSON[];
};
declare type TransactionPrebuildJSON = TransactionPrebuild<number> & {
    txInfo: TransactionInfoJSON;
};
export declare class Doge extends AbstractUtxoCoin {
    constructor(bitgo: BitGoBase, network?: UtxoNetwork);
    static createInstance(bitgo: BitGoBase): BaseCoin;
    getChain(): string;
    getFamily(): string;
    getFullName(): string;
    supportsBlockTarget(): boolean;
    createTransactionFromHex<TNumber extends number | bigint = bigint>(hex: string): bitgo.UtxoTransaction<TNumber>;
    parseTransaction<TNumber extends number | bigint = bigint>(params: ParseTransactionOptions<TNumber>): Promise<ParsedTransaction<TNumber>>;
    verifyTransaction<TNumber extends number | bigint = bigint>(params: VerifyTransactionOptions<TNumber> | (VerifyTransactionOptions<TNumber> & {
        txPrebuild: TransactionPrebuildJSON;
    })): Promise<boolean>;
    signTransaction<TNumber extends number | bigint = bigint>(params: SignTransactionOptions<TNumber>): Promise<SignedTransaction | HalfSignedUtxoTransaction>;
    explainTransaction<TNumber extends number | bigint = bigint>(params: ExplainTransactionOptions<TNumber> | (ExplainTransactionOptions<TNumber> & {
        txInfo: TransactionInfoJSON;
    })): Promise<TransactionExplanation>;
    recoverFromWrongChain<TNumber extends number | bigint = bigint>(params: RecoverFromWrongChainOptions): Promise<CrossChainRecoverySigned<TNumber> | CrossChainRecoveryUnsigned<TNumber>>;
}
export {};
//# sourceMappingURL=doge.d.ts.map