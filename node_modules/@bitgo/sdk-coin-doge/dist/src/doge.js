"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Doge = void 0;
const abstract_utxo_1 = require("@bitgo/abstract-utxo");
const utxo_lib_1 = require("@bitgo/utxo-lib");
function parseUnspents(unspents) {
    return unspents.map((unspent) => {
        if (typeof unspent.value === 'bigint') {
            return unspent;
        }
        if ('valueString' in unspent) {
            return { ...unspent, value: BigInt(unspent.valueString) };
        }
        if (typeof unspent.value === 'number') {
            throw new Error(`received Unspent<number> where Unspent<bigint> or UnspentJSON was expected`);
        }
        throw new Error('invalid unspent');
    });
}
function parseTransactionInfo(txInfo) {
    if (txInfo.unspents) {
        return { ...txInfo, unspents: parseUnspents(txInfo.unspents) };
    }
    return { ...txInfo, unspents: undefined };
}
function parseTransactionPrebuild(txPrebuild) {
    if (txPrebuild === null || txPrebuild === void 0 ? void 0 : txPrebuild.txInfo) {
        return { ...txPrebuild, txInfo: parseTransactionInfo(txPrebuild.txInfo) };
    }
    return txPrebuild;
}
class Doge extends abstract_utxo_1.AbstractUtxoCoin {
    constructor(bitgo, network) {
        super(bitgo, network || utxo_lib_1.networks.dogecoin, 'bigint');
    }
    static createInstance(bitgo) {
        return new Doge(bitgo);
    }
    getChain() {
        return 'doge';
    }
    getFamily() {
        return 'doge';
    }
    getFullName() {
        return 'Dogecoin';
    }
    supportsBlockTarget() {
        return true;
    }
    /* amountType is set in constructor. Functions below override the default TNumber of AbstractUtxoCoin to bigint */
    /* postProcessPrebuild, isBitGoTaintedUnspent, verifyCustomChangeKeySignatures do not care whether they receive number or bigint */
    createTransactionFromHex(hex) {
        return super.createTransactionFromHex(hex);
    }
    async parseTransaction(params) {
        return (await super.parseTransaction({
            ...params,
            txPrebuild: parseTransactionPrebuild(params.txPrebuild),
        })) /* cast to satisfy superclass signature */;
    }
    async verifyTransaction(params) {
        return super.verifyTransaction({
            ...params,
            txPrebuild: parseTransactionPrebuild(params.txPrebuild),
        });
    }
    async signTransaction(params) {
        return super.signTransaction({
            ...params,
            txPrebuild: {
                ...params.txPrebuild,
                txInfo: params.txPrebuild.txInfo === undefined ? undefined : parseTransactionInfo(params.txPrebuild.txInfo),
            },
        });
    }
    async explainTransaction(params) {
        return super.explainTransaction({
            ...params,
            txInfo: params.txInfo ? parseTransactionInfo(params.txInfo) : undefined,
        });
    }
    async recoverFromWrongChain(params) {
        return super.recoverFromWrongChain(params);
    }
}
exports.Doge = Doge;
//# sourceMappingURL=data:application/json;base64,