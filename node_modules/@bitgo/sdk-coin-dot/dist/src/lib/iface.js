"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionTypes = exports.ProxyType = exports.MethodNames = exports.SectionNames = void 0;
/**
 * Section names for the transaction methods.
 */
var SectionNames;
(function (SectionNames) {
    SectionNames["Proxy"] = "proxy";
    SectionNames["Staking"] = "staking";
})(SectionNames = exports.SectionNames || (exports.SectionNames = {}));
/**
 * Method names for the transaction method. Names change based on the type of transaction e.g 'bond' for the staking transaction
 */
var MethodNames;
(function (MethodNames) {
    /**
     * Register a proxy account for the sender that is able to make calls on its behalf.
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#addproxydelegate-multiaddress-proxy_type-kitchensinkruntimeproxytype-delay-u32
     */
    MethodNames["AddProxy"] = "addProxy";
    /**
     * Unregister a proxy account for the sender.
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#removeproxydelegate-multiaddress-proxy_type-kitchensinkruntimeproxytype-delay-u32
     */
    MethodNames["RemoveProxy"] = "removeProxy";
    /**
     * Dispatch the given call from an account that the sender is authorised for through add_proxy.
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#proxyreal-multiaddress-force_proxy_type-optionkitchensinkruntimeproxytype-call-call
     */
    MethodNames["Proxy"] = "proxy";
    /**
     * Take the origin account as a stash and lock up value of its balance. controller will be the account that controls it.
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#bondcontroller-multiaddress-value-compactu128-payee-palletstakingrewarddestination
     */
    MethodNames["Bond"] = "bond";
    /**
     * Add some extra amount that have appeared in the stash free_balance into the balance up for staking.
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#bondextramax_additional-compactu128
     */
    MethodNames["BondExtra"] = "bondExtra";
    /**
     * Transfer the entire transferable balance from the caller account.
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#transferalldest-multiaddress-keep_alive-bool
     */
    MethodNames["TransferAll"] = "transferAll";
    /**
     * Same as the transfer call, but with a check that the transfer will not kill the origin account.
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#transferkeepalivedest-multiaddress-value-compactu128
     */
    MethodNames["TransferKeepAlive"] = "transferKeepAlive";
    /**
     * Schedule a portion of the stash to be unlocked ready for transfer out after the bond period ends.
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#unbondvalue-compactu128
     */
    MethodNames["Unbond"] = "unbond";
    /**
     * @deprecated Anonymous proxies were renamed to pure proxies.
     *
     * @see PureProxy
     * @see https://polkadot.polkassembly.io/referendum/84
     */
    MethodNames["Anonymous"] = "anonymous";
    /**
     * Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and initialize it with a proxy of proxy_type for origin sender.
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#createpureproxy_type-kitchensinkruntimeproxytype-delay-u32-index-u16
     */
    MethodNames["PureProxy"] = "createPure";
    /**
     * Send a batch of dispatch calls.
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#batchcalls-veccall
     */
    MethodNames["Batch"] = "batch";
    /**
     * Send a batch of dispatch calls and atomically execute them. The whole transaction will rollback and fail if any of the calls failed.
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#batchallcalls-veccall
     */
    MethodNames["BatchAll"] = "batchAll";
    /**
     * Declare no desire to either validate or nominate.
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#chill
     */
    MethodNames["Chill"] = "chill";
    /**
     * Remove any unlocked chunks from the unlocking queue from our management.
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#withdrawunbondednum_slashing_spans-u32
     */
    MethodNames["WithdrawUnbonded"] = "withdrawUnbonded";
    /**
     * Pay out all the stakers behind a single validator for a single era.
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#payoutstakersvalidator_stash-accountid32-era-u32
     */
    MethodNames["PayoutStakers"] = "payoutStakers";
})(MethodNames = exports.MethodNames || (exports.MethodNames = {}));
/**
 * The types of proxies that can be setup and used
 * https://wiki.polkadot.network/docs/learn-proxies#proxy-types
 */
var ProxyType;
(function (ProxyType) {
    ProxyType["ANY"] = "Any";
    ProxyType["NON_TRANSFER"] = "NonTransfer";
    ProxyType["STAKING"] = "Staking";
    ProxyType["IDENTTITY_JUDGEMENT"] = "IdentityJudgement";
    ProxyType["CANCEL_PROXY"] = "CancelProxy";
})(ProxyType = exports.ProxyType || (exports.ProxyType = {}));
var TransactionTypes;
(function (TransactionTypes) {
    TransactionTypes["TRANSFER"] = "transfer";
    TransactionTypes["STAKING"] = "staking";
    TransactionTypes["ADDR_INIT"] = "addressInitialization";
    TransactionTypes["UNSTAKING"] = "unstaking";
})(TransactionTypes = exports.TransactionTypes || (exports.TransactionTypes = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWZhY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2lmYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQU1BOztHQUVHO0FBQ0gsSUFBWSxZQUdYO0FBSEQsV0FBWSxZQUFZO0lBQ3RCLCtCQUFlLENBQUE7SUFDZixtQ0FBbUIsQ0FBQTtBQUNyQixDQUFDLEVBSFcsWUFBWSxHQUFaLG9CQUFZLEtBQVosb0JBQVksUUFHdkI7QUFFRDs7R0FFRztBQUNILElBQVksV0E0Rlg7QUE1RkQsV0FBWSxXQUFXO0lBQ3JCOzs7O09BSUc7SUFDSCxvQ0FBcUIsQ0FBQTtJQUNyQjs7OztPQUlHO0lBQ0gsMENBQTJCLENBQUE7SUFDM0I7Ozs7T0FJRztJQUNILDhCQUFlLENBQUE7SUFDZjs7OztPQUlHO0lBQ0gsNEJBQWEsQ0FBQTtJQUNiOzs7O09BSUc7SUFDSCxzQ0FBdUIsQ0FBQTtJQUN2Qjs7OztPQUlHO0lBQ0gsMENBQTJCLENBQUE7SUFDM0I7Ozs7T0FJRztJQUNILHNEQUF1QyxDQUFBO0lBQ3ZDOzs7O09BSUc7SUFDSCxnQ0FBaUIsQ0FBQTtJQUNqQjs7Ozs7T0FLRztJQUNILHNDQUF1QixDQUFBO0lBQ3ZCOzs7O09BSUc7SUFDSCx1Q0FBd0IsQ0FBQTtJQUN4Qjs7OztPQUlHO0lBQ0gsOEJBQWUsQ0FBQTtJQUNmOzs7O09BSUc7SUFDSCxvQ0FBcUIsQ0FBQTtJQUNyQjs7OztPQUlHO0lBQ0gsOEJBQWUsQ0FBQTtJQUNmOzs7O09BSUc7SUFDSCxvREFBcUMsQ0FBQTtJQUNyQzs7OztPQUlHO0lBQ0gsOENBQStCLENBQUE7QUFDakMsQ0FBQyxFQTVGVyxXQUFXLEdBQVgsbUJBQVcsS0FBWCxtQkFBVyxRQTRGdEI7QUFpR0Q7OztHQUdHO0FBQ0gsSUFBWSxTQU1YO0FBTkQsV0FBWSxTQUFTO0lBQ25CLHdCQUFXLENBQUE7SUFDWCx5Q0FBNEIsQ0FBQTtJQUM1QixnQ0FBbUIsQ0FBQTtJQUNuQixzREFBeUMsQ0FBQTtJQUN6Qyx5Q0FBNEIsQ0FBQTtBQUM5QixDQUFDLEVBTlcsU0FBUyxHQUFULGlCQUFTLEtBQVQsaUJBQVMsUUFNcEI7QUFnSkQsSUFBWSxnQkFLWDtBQUxELFdBQVksZ0JBQWdCO0lBQzFCLHlDQUFxQixDQUFBO0lBQ3JCLHVDQUFtQixDQUFBO0lBQ25CLHVEQUFtQyxDQUFBO0lBQ25DLDJDQUF1QixDQUFBO0FBQ3pCLENBQUMsRUFMVyxnQkFBZ0IsR0FBaEIsd0JBQWdCLEtBQWhCLHdCQUFnQixRQUszQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyYW5zYWN0aW9uVHlwZSwgVHJhbnNhY3Rpb25FeHBsYW5hdGlvbiBhcyBCYXNlVHJhbnNhY3Rpb25FeHBsYW5hdGlvbiB9IGZyb20gJ0BiaXRnby9zZGstY29yZSc7XG5pbXBvcnQgeyBQb2xrYWRvdFNwZWNOYW1lVHlwZSB9IGZyb20gJ0BiaXRnby9zdGF0aWNzJztcbmltcG9ydCB7IEJhc2VUeEluZm8sIFR5cGVSZWdpc3RyeSwgRGVjb2RlZFVuc2lnbmVkVHggfSBmcm9tICdAc3Vic3RyYXRlL3R4d3JhcHBlci1jb3JlL2xpYi90eXBlcyc7XG5cbmV4cG9ydCB7IEhleFN0cmluZyB9IGZyb20gJ0Bwb2xrYWRvdC91dGlsL3R5cGVzJztcblxuLyoqXG4gKiBTZWN0aW9uIG5hbWVzIGZvciB0aGUgdHJhbnNhY3Rpb24gbWV0aG9kcy5cbiAqL1xuZXhwb3J0IGVudW0gU2VjdGlvbk5hbWVzIHtcbiAgUHJveHkgPSAncHJveHknLFxuICBTdGFraW5nID0gJ3N0YWtpbmcnLFxufVxuXG4vKipcbiAqIE1ldGhvZCBuYW1lcyBmb3IgdGhlIHRyYW5zYWN0aW9uIG1ldGhvZC4gTmFtZXMgY2hhbmdlIGJhc2VkIG9uIHRoZSB0eXBlIG9mIHRyYW5zYWN0aW9uIGUuZyAnYm9uZCcgZm9yIHRoZSBzdGFraW5nIHRyYW5zYWN0aW9uXG4gKi9cbmV4cG9ydCBlbnVtIE1ldGhvZE5hbWVzIHtcbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgcHJveHkgYWNjb3VudCBmb3IgdGhlIHNlbmRlciB0aGF0IGlzIGFibGUgdG8gbWFrZSBjYWxscyBvbiBpdHMgYmVoYWxmLlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vcG9sa2Fkb3QuanMub3JnL2RvY3Mvc3Vic3RyYXRlL2V4dHJpbnNpY3MvI2FkZHByb3h5ZGVsZWdhdGUtbXVsdGlhZGRyZXNzLXByb3h5X3R5cGUta2l0Y2hlbnNpbmtydW50aW1lcHJveHl0eXBlLWRlbGF5LXUzMlxuICAgKi9cbiAgQWRkUHJveHkgPSAnYWRkUHJveHknLFxuICAvKipcbiAgICogVW5yZWdpc3RlciBhIHByb3h5IGFjY291bnQgZm9yIHRoZSBzZW5kZXIuXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9wb2xrYWRvdC5qcy5vcmcvZG9jcy9zdWJzdHJhdGUvZXh0cmluc2ljcy8jcmVtb3ZlcHJveHlkZWxlZ2F0ZS1tdWx0aWFkZHJlc3MtcHJveHlfdHlwZS1raXRjaGVuc2lua3J1bnRpbWVwcm94eXR5cGUtZGVsYXktdTMyXG4gICAqL1xuICBSZW1vdmVQcm94eSA9ICdyZW1vdmVQcm94eScsXG4gIC8qKlxuICAgKiBEaXNwYXRjaCB0aGUgZ2l2ZW4gY2FsbCBmcm9tIGFuIGFjY291bnQgdGhhdCB0aGUgc2VuZGVyIGlzIGF1dGhvcmlzZWQgZm9yIHRocm91Z2ggYWRkX3Byb3h5LlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vcG9sa2Fkb3QuanMub3JnL2RvY3Mvc3Vic3RyYXRlL2V4dHJpbnNpY3MvI3Byb3h5cmVhbC1tdWx0aWFkZHJlc3MtZm9yY2VfcHJveHlfdHlwZS1vcHRpb25raXRjaGVuc2lua3J1bnRpbWVwcm94eXR5cGUtY2FsbC1jYWxsXG4gICAqL1xuICBQcm94eSA9ICdwcm94eScsXG4gIC8qKlxuICAgKiBUYWtlIHRoZSBvcmlnaW4gYWNjb3VudCBhcyBhIHN0YXNoIGFuZCBsb2NrIHVwIHZhbHVlIG9mIGl0cyBiYWxhbmNlLiBjb250cm9sbGVyIHdpbGwgYmUgdGhlIGFjY291bnQgdGhhdCBjb250cm9scyBpdC5cbiAgICpcbiAgICogQHNlZSBodHRwczovL3BvbGthZG90LmpzLm9yZy9kb2NzL3N1YnN0cmF0ZS9leHRyaW5zaWNzLyNib25kY29udHJvbGxlci1tdWx0aWFkZHJlc3MtdmFsdWUtY29tcGFjdHUxMjgtcGF5ZWUtcGFsbGV0c3Rha2luZ3Jld2FyZGRlc3RpbmF0aW9uXG4gICAqL1xuICBCb25kID0gJ2JvbmQnLFxuICAvKipcbiAgICogQWRkIHNvbWUgZXh0cmEgYW1vdW50IHRoYXQgaGF2ZSBhcHBlYXJlZCBpbiB0aGUgc3Rhc2ggZnJlZV9iYWxhbmNlIGludG8gdGhlIGJhbGFuY2UgdXAgZm9yIHN0YWtpbmcuXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9wb2xrYWRvdC5qcy5vcmcvZG9jcy9zdWJzdHJhdGUvZXh0cmluc2ljcy8jYm9uZGV4dHJhbWF4X2FkZGl0aW9uYWwtY29tcGFjdHUxMjhcbiAgICovXG4gIEJvbmRFeHRyYSA9ICdib25kRXh0cmEnLFxuICAvKipcbiAgICogVHJhbnNmZXIgdGhlIGVudGlyZSB0cmFuc2ZlcmFibGUgYmFsYW5jZSBmcm9tIHRoZSBjYWxsZXIgYWNjb3VudC5cbiAgICpcbiAgICogQHNlZSBodHRwczovL3BvbGthZG90LmpzLm9yZy9kb2NzL3N1YnN0cmF0ZS9leHRyaW5zaWNzLyN0cmFuc2ZlcmFsbGRlc3QtbXVsdGlhZGRyZXNzLWtlZXBfYWxpdmUtYm9vbFxuICAgKi9cbiAgVHJhbnNmZXJBbGwgPSAndHJhbnNmZXJBbGwnLFxuICAvKipcbiAgICogU2FtZSBhcyB0aGUgdHJhbnNmZXIgY2FsbCwgYnV0IHdpdGggYSBjaGVjayB0aGF0IHRoZSB0cmFuc2ZlciB3aWxsIG5vdCBraWxsIHRoZSBvcmlnaW4gYWNjb3VudC5cbiAgICpcbiAgICogQHNlZSBodHRwczovL3BvbGthZG90LmpzLm9yZy9kb2NzL3N1YnN0cmF0ZS9leHRyaW5zaWNzLyN0cmFuc2ZlcmtlZXBhbGl2ZWRlc3QtbXVsdGlhZGRyZXNzLXZhbHVlLWNvbXBhY3R1MTI4XG4gICAqL1xuICBUcmFuc2ZlcktlZXBBbGl2ZSA9ICd0cmFuc2ZlcktlZXBBbGl2ZScsXG4gIC8qKlxuICAgKiBTY2hlZHVsZSBhIHBvcnRpb24gb2YgdGhlIHN0YXNoIHRvIGJlIHVubG9ja2VkIHJlYWR5IGZvciB0cmFuc2ZlciBvdXQgYWZ0ZXIgdGhlIGJvbmQgcGVyaW9kIGVuZHMuXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9wb2xrYWRvdC5qcy5vcmcvZG9jcy9zdWJzdHJhdGUvZXh0cmluc2ljcy8jdW5ib25kdmFsdWUtY29tcGFjdHUxMjhcbiAgICovXG4gIFVuYm9uZCA9ICd1bmJvbmQnLFxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgQW5vbnltb3VzIHByb3hpZXMgd2VyZSByZW5hbWVkIHRvIHB1cmUgcHJveGllcy5cbiAgICpcbiAgICogQHNlZSBQdXJlUHJveHlcbiAgICogQHNlZSBodHRwczovL3BvbGthZG90LnBvbGthc3NlbWJseS5pby9yZWZlcmVuZHVtLzg0XG4gICAqL1xuICBBbm9ueW1vdXMgPSAnYW5vbnltb3VzJyxcbiAgLyoqXG4gICAqIFNwYXduIGEgZnJlc2ggbmV3IGFjY291bnQgdGhhdCBpcyBndWFyYW50ZWVkIHRvIGJlIG90aGVyd2lzZSBpbmFjY2Vzc2libGUsIGFuZCBpbml0aWFsaXplIGl0IHdpdGggYSBwcm94eSBvZiBwcm94eV90eXBlIGZvciBvcmlnaW4gc2VuZGVyLlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vcG9sa2Fkb3QuanMub3JnL2RvY3Mvc3Vic3RyYXRlL2V4dHJpbnNpY3MvI2NyZWF0ZXB1cmVwcm94eV90eXBlLWtpdGNoZW5zaW5rcnVudGltZXByb3h5dHlwZS1kZWxheS11MzItaW5kZXgtdTE2XG4gICAqL1xuICBQdXJlUHJveHkgPSAnY3JlYXRlUHVyZScsIC8vIEFub255bW91cyBwcm94aWVzIHdlcmUgcmVuYW1lZCB0byBwdXJlIHByb3hpZXNcbiAgLyoqXG4gICAqIFNlbmQgYSBiYXRjaCBvZiBkaXNwYXRjaCBjYWxscy5cbiAgICpcbiAgICogQHNlZSBodHRwczovL3BvbGthZG90LmpzLm9yZy9kb2NzL3N1YnN0cmF0ZS9leHRyaW5zaWNzLyNiYXRjaGNhbGxzLXZlY2NhbGxcbiAgICovXG4gIEJhdGNoID0gJ2JhdGNoJyxcbiAgLyoqXG4gICAqIFNlbmQgYSBiYXRjaCBvZiBkaXNwYXRjaCBjYWxscyBhbmQgYXRvbWljYWxseSBleGVjdXRlIHRoZW0uIFRoZSB3aG9sZSB0cmFuc2FjdGlvbiB3aWxsIHJvbGxiYWNrIGFuZCBmYWlsIGlmIGFueSBvZiB0aGUgY2FsbHMgZmFpbGVkLlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vcG9sa2Fkb3QuanMub3JnL2RvY3Mvc3Vic3RyYXRlL2V4dHJpbnNpY3MvI2JhdGNoYWxsY2FsbHMtdmVjY2FsbFxuICAgKi9cbiAgQmF0Y2hBbGwgPSAnYmF0Y2hBbGwnLFxuICAvKipcbiAgICogRGVjbGFyZSBubyBkZXNpcmUgdG8gZWl0aGVyIHZhbGlkYXRlIG9yIG5vbWluYXRlLlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vcG9sa2Fkb3QuanMub3JnL2RvY3Mvc3Vic3RyYXRlL2V4dHJpbnNpY3MvI2NoaWxsXG4gICAqL1xuICBDaGlsbCA9ICdjaGlsbCcsXG4gIC8qKlxuICAgKiBSZW1vdmUgYW55IHVubG9ja2VkIGNodW5rcyBmcm9tIHRoZSB1bmxvY2tpbmcgcXVldWUgZnJvbSBvdXIgbWFuYWdlbWVudC5cbiAgICpcbiAgICogQHNlZSBodHRwczovL3BvbGthZG90LmpzLm9yZy9kb2NzL3N1YnN0cmF0ZS9leHRyaW5zaWNzLyN3aXRoZHJhd3VuYm9uZGVkbnVtX3NsYXNoaW5nX3NwYW5zLXUzMlxuICAgKi9cbiAgV2l0aGRyYXdVbmJvbmRlZCA9ICd3aXRoZHJhd1VuYm9uZGVkJyxcbiAgLyoqXG4gICAqIFBheSBvdXQgYWxsIHRoZSBzdGFrZXJzIGJlaGluZCBhIHNpbmdsZSB2YWxpZGF0b3IgZm9yIGEgc2luZ2xlIGVyYS5cbiAgICpcbiAgICogQHNlZSBodHRwczovL3BvbGthZG90LmpzLm9yZy9kb2NzL3N1YnN0cmF0ZS9leHRyaW5zaWNzLyNwYXlvdXRzdGFrZXJzdmFsaWRhdG9yX3N0YXNoLWFjY291bnRpZDMyLWVyYS11MzJcbiAgICovXG4gIFBheW91dFN0YWtlcnMgPSAncGF5b3V0U3Rha2VycycsXG59XG5cbi8qKlxuICogVGhlIHRyYW5zYWN0aW9uIGRhdGEgcmV0dXJuZWQgZnJvbSB0aGUgdG9Kc29uKCkgZnVuY3Rpb24gb2YgYSB0cmFuc2FjdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIFR4RGF0YSB7XG4gIGlkOiBzdHJpbmc7XG4gIHNlbmRlcjogc3RyaW5nO1xuICByZWZlcmVuY2VCbG9jazogc3RyaW5nO1xuICBibG9ja051bWJlcjogbnVtYmVyO1xuICBnZW5lc2lzSGFzaDogc3RyaW5nO1xuICBub25jZTogbnVtYmVyO1xuICBzcGVjVmVyc2lvbjogbnVtYmVyO1xuICB0cmFuc2FjdGlvblZlcnNpb246IG51bWJlcjtcbiAgY2hhaW5OYW1lOiBzdHJpbmc7XG4gIG1ldGhvZD86IHN0cmluZztcbiAgc3BlY05hbWU/OiBzdHJpbmc7XG4gIGFtb3VudD86IHN0cmluZztcbiAgdG8/OiBzdHJpbmc7XG4gIHRpcD86IG51bWJlcjtcbiAgZXJhUGVyaW9kPzogbnVtYmVyO1xuICBjb250cm9sbGVyPzogc3RyaW5nO1xuICBwYXllZT86IHN0cmluZztcbiAgb3duZXI/OiBzdHJpbmc7XG4gIHByb3h5VHlwZT86IHN0cmluZztcbiAgZGVsYXk/OiBzdHJpbmc7XG4gIGZvcmNlUHJveHlUeXBlPzogUHJveHlUeXBlO1xuICBpbmRleD86IHN0cmluZztcbiAgYmF0Y2hDYWxscz86IEJhdGNoQ2FsbE9iamVjdFtdO1xuICBudW1TbGFzaGluZ1NwYW5zPzogbnVtYmVyO1xuICB2YWxpZGF0b3JTdGFzaD86IHN0cmluZztcbiAgY2xhaW1FcmE/OiBzdHJpbmc7XG4gIGtlZXBBbGl2ZT86IGJvb2xlYW47XG59XG5cbi8qKlxuICogVHJhbnNhY3Rpb24gbWV0aG9kIHNwZWNpZmljIGFyZ3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUcmFuc2ZlckFyZ3Mge1xuICBkZXN0OiB7IGlkOiBzdHJpbmcgfTtcbiAgdmFsdWU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBUcmFuc2FjdGlvbiBtZXRob2Qgc3BlY2lmaWMgYXJnc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zZmVyQWxsQXJncyB7XG4gIGRlc3Q6IHsgaWQ6IHN0cmluZyB9O1xuICBrZWVwQWxpdmU6IGJvb2xlYW47XG59XG5cbi8qKlxuICogVHJhbnNhY3Rpb24gbWV0aG9kIHNwZWNpZmljIGFyZ3NcbiAqL1xuZXhwb3J0IHR5cGUgU3Rha2VBcmdzUGF5ZWUgPVxuICB8ICdTdGFrZWQnXG4gIHwgJ1N0YXNoJ1xuICB8ICdDb250cm9sbGVyJ1xuICB8IHtcbiAgICAgIEFjY291bnQ6IHN0cmluZztcbiAgICB9O1xuXG4vKipcbiAqIFRyYW5zYWN0aW9uIG1ldGhvZCBzcGVjaWZpYyBhcmdzXG4gKi9cbmV4cG9ydCB0eXBlIFN0YWtlQXJnc1BheWVlUmF3ID0geyBjb250cm9sbGVyPzogbnVsbDsgc3Rhc2g/OiBudWxsOyBzdGFrZWQ/OiBudWxsOyBhY2NvdW50Pzogc3RyaW5nIH07XG5cbi8qKlxuICogVHJhbnNhY3Rpb24gbWV0aG9kIHNwZWNpZmljIGFyZ3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTdGFrZUFyZ3Mge1xuICB2YWx1ZTogc3RyaW5nO1xuICBjb250cm9sbGVyOiB7IGlkOiBzdHJpbmcgfTtcbiAgcGF5ZWU6IFN0YWtlQXJnc1BheWVlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0YWtlTW9yZUFyZ3Mge1xuICBtYXhBZGRpdGlvbmFsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3Rha2VNb3JlQ2FsbEFyZ3Mge1xuICBtYXhfYWRkaXRpb25hbDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVuc3Rha2VBcmdzIHtcbiAgdmFsdWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXaXRoZHJhd1Vuc3Rha2VkQXJncyB7XG4gIG51bVNsYXNoaW5nU3BhbnM6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDbGFpbUFyZ3Mge1xuICB2YWxpZGF0b3JTdGFzaDogc3RyaW5nO1xuICBlcmE6IHN0cmluZztcbn1cblxuLyoqXG4gKiBUaGUgdHlwZXMgb2YgcHJveGllcyB0aGF0IGNhbiBiZSBzZXR1cCBhbmQgdXNlZFxuICogaHR0cHM6Ly93aWtpLnBvbGthZG90Lm5ldHdvcmsvZG9jcy9sZWFybi1wcm94aWVzI3Byb3h5LXR5cGVzXG4gKi9cbmV4cG9ydCBlbnVtIFByb3h5VHlwZSB7XG4gIEFOWSA9ICdBbnknLFxuICBOT05fVFJBTlNGRVIgPSAnTm9uVHJhbnNmZXInLFxuICBTVEFLSU5HID0gJ1N0YWtpbmcnLFxuICBJREVOVFRJVFlfSlVER0VNRU5UID0gJ0lkZW50aXR5SnVkZ2VtZW50JyxcbiAgQ0FOQ0VMX1BST1hZID0gJ0NhbmNlbFByb3h5Jyxcbn1cblxuLyoqXG4gKiBUcmFuc2FjdGlvbiBtZXRob2Qgc3BlY2lmaWMgYXJnc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEFkZFByb3h5QXJncyB7XG4gIGRlbGVnYXRlOiBzdHJpbmcgfCBBY2NvdW50SWQ7XG4gIGRlbGF5OiBzdHJpbmc7XG4gIHByb3h5VHlwZTogUHJveHlUeXBlO1xufVxuXG4vKipcbiAqIFRyYW5zYWN0aW9uIG1ldGhvZCBzcGVjaWZpYyBhcmdzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWRkQW5vbnltb3VzUHJveHlBcmdzIHtcbiAgcHJveHlUeXBlOiBQcm94eVR5cGU7XG4gIGluZGV4OiBzdHJpbmc7XG4gIGRlbGF5OiBzdHJpbmc7XG59XG5cbi8qKlxuICogVHJhbnNhY3Rpb24gbWV0aG9kIHNwZWNpZmljIGFyZ3NcbiAqL1xuZXhwb3J0IHR5cGUgQmF0Y2hDYWxsT2JqZWN0ID0ge1xuICBjYWxsSW5kZXg6IHN0cmluZztcbiAgYXJnczpcbiAgICB8IFJlY29yZDxzdHJpbmcsIGFueT5cbiAgICB8IEFkZFByb3h5QmF0Y2hDYWxsQXJnc1xuICAgIHwgQWRkQW5vbnltb3VzUHJveHlCYXRjaENhbGxBcmdzXG4gICAgfCBTdGFrZUJhdGNoQ2FsbEFyZ3NcbiAgICB8IFN0YWtlTW9yZUFyZ3NcbiAgICB8IFN0YWtlTW9yZUNhbGxBcmdzXG4gICAgfCBVbmJvbmRDYWxsQXJncztcbn07XG5leHBvcnQgaW50ZXJmYWNlIEJhdGNoQXJncyB7XG4gIGNhbGxzOiBCYXRjaENhbGxPYmplY3RbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBZGRBbm9ueW1vdXNQcm94eUJhdGNoQ2FsbEFyZ3Mge1xuICAvLyBVc2luZyBzbmFrZV9jYXNlIGhlcmUgdG8gYmUgY29tcGF0aWJsZSB3aXRoIHRoZSBsaWJyYXJ5IHdlIHVzZSB0byBkZWNvZGVcbiAgLy8gcG9sa2Fkb3QgdHJhbnNhY3Rpb25zXG4gIHByb3h5X3R5cGU6IFByb3h5VHlwZTtcbiAgaW5kZXg6IG51bWJlcjtcbiAgZGVsYXk6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBZGRQcm94eUJhdGNoQ2FsbEFyZ3Mge1xuICBkZWxlZ2F0ZTogc3RyaW5nIHwgQWNjb3VudElkO1xuICBwcm94eV90eXBlOiBQcm94eVR5cGU7XG4gIGRlbGF5OiBudW1iZXI7XG59XG5cbmV4cG9ydCB0eXBlIEFjY291bnRJZCA9IHsgaWQ6IHN0cmluZyB9O1xuXG5leHBvcnQgdHlwZSBTdGFrZUJhdGNoQ2FsbFBheWVlU3Rha2VkID0geyBzdGFrZWQ6IG51bGwgfTtcbmV4cG9ydCB0eXBlIFN0YWtlQmF0Y2hDYWxsUGF5ZWVTdGFzaCA9IHsgc3Rhc2g6IG51bGwgfTtcbmV4cG9ydCB0eXBlIFN0YWtlQmF0Y2hDYWxsUGF5ZWVDb250cm9sbGVyID0geyBjb250cm9sbGVyOiBudWxsIH07XG5leHBvcnQgdHlwZSBTdGFrZUJhdGNoQ2FsbFBheWVlQWNjb3VudCA9IHsgYWNjb3VudDogc3RyaW5nIH07XG5cbmV4cG9ydCB0eXBlIFN0YWtlQmF0Y2hDYWxsUGF5ZWUgPVxuICB8IFN0YWtlQmF0Y2hDYWxsUGF5ZWVTdGFrZWRcbiAgfCBTdGFrZUJhdGNoQ2FsbFBheWVlU3Rhc2hcbiAgfCBTdGFrZUJhdGNoQ2FsbFBheWVlQ29udHJvbGxlclxuICB8IFN0YWtlQmF0Y2hDYWxsUGF5ZWVBY2NvdW50O1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0YWtlQmF0Y2hDYWxsQXJncyB7XG4gIHZhbHVlOiBzdHJpbmc7XG4gIGNvbnRyb2xsZXI/OiB7IGlkOiBzdHJpbmcgfTtcbiAgcGF5ZWU6IFN0YWtlQmF0Y2hDYWxsUGF5ZWU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVW5zdGFrZUJhdGNoQ2FsbEFyZ3Mge1xuICB2YWx1ZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVuYm9uZENhbGxBcmdzIHtcbiAgdmFsdWU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBUcmFuc2FjdGlvbiBtZXRob2Qgc3BlY2lmaWMgYXJnc1xuICovXG5leHBvcnQgdHlwZSBQcm94eUNhbGxBcmdzID0ge1xuICBjYWxsSW5kZXg6IHN0cmluZztcbiAgYXJnczogVHJhbnNmZXJBcmdzO1xufTtcblxuLyoqXG4gKiBUcmFuc2FjdGlvbiBtZXRob2Qgc3BlY2lmaWMgYXJnc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFByb3h5QXJncyB7XG4gIHJlYWw6IHN0cmluZyB8IEFjY291bnRJZDtcbiAgZm9yY2VQcm94eVR5cGU6IFByb3h5VHlwZTtcbn1cblxuLyoqXG4gKiBEZWNvZGVkIFR4TWV0aG9kIGZyb20gYSB0cmFuc2FjdGlvbiBoZXhcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUeE1ldGhvZCB7XG4gIGFyZ3M6XG4gICAgfCBUcmFuc2ZlckFyZ3NcbiAgICB8IFRyYW5zZmVyQWxsQXJnc1xuICAgIHwgU3Rha2VBcmdzXG4gICAgfCBTdGFrZU1vcmVBcmdzXG4gICAgfCBBZGRQcm94eUFyZ3NcbiAgICB8IFByb3h5QXJnc1xuICAgIHwgVW5zdGFrZUFyZ3NcbiAgICB8IEFkZEFub255bW91c1Byb3h5QXJnc1xuICAgIHwgQmF0Y2hBcmdzXG4gICAgfCBXaXRoZHJhd1Vuc3Rha2VkQXJnc1xuICAgIHwgQ2xhaW1BcmdzO1xuICBuYW1lOiBNZXRob2ROYW1lcztcbiAgcGFsbGV0OiBzdHJpbmc7XG59XG5cbi8qKlxuICogTW9kaWZpZWQgdW5zaWduZWQgdHJhbnNhY3Rpb24gd2l0aCBhIGRlY29kZWQgbWV0aG9kIGluc3RlYWQgb2YgYSBtZXRob2QgaGV4XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGVjb2RlZFR4IGV4dGVuZHMgT21pdDxEZWNvZGVkVW5zaWduZWRUeCwgJ21ldGhvZCc+IHtcbiAgbWV0aG9kOiBUeE1ldGhvZDtcbn1cblxuLyoqXG4gKiBCYXNlIHRyYW5zYWN0aW9uIGluZm8gc2hhcmVkIGFjcm9zcyBhbGwgdHlwZXMgb2YgdHJhbnNhY3Rpb25zXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlQmFzZVR4SW5mbyB7XG4gIGJhc2VUeEluZm86IEJhc2VUeEluZm87XG4gIG9wdGlvbnM6IHtcbiAgICBtZXRhZGF0YVJwYzogYDB4JHtzdHJpbmd9YDtcbiAgICByZWdpc3RyeTogVHlwZVJlZ2lzdHJ5O1xuICAgIGlzSW1tb3J0YWxFcmE/OiBib29sZWFuO1xuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zYWN0aW9uRXhwbGFuYXRpb24gZXh0ZW5kcyBCYXNlVHJhbnNhY3Rpb25FeHBsYW5hdGlvbiB7XG4gIHR5cGU6IFRyYW5zYWN0aW9uVHlwZTtcbiAgZm9yY2VQcm94eVR5cGU/OiBQcm94eVR5cGU7XG4gIGNvbnRyb2xsZXI/OiBzdHJpbmc7XG4gIHBheWVlPzogc3RyaW5nO1xuICBvd25lcj86IHN0cmluZztcbiAgcHJveHlUeXBlPzogc3RyaW5nO1xuICBkZWxheT86IHN0cmluZztcbn1cblxuZXhwb3J0IGVudW0gVHJhbnNhY3Rpb25UeXBlcyB7XG4gIFRSQU5TRkVSID0gJ3RyYW5zZmVyJyxcbiAgU1RBS0lORyA9ICdzdGFraW5nJyxcbiAgQUREUl9JTklUID0gJ2FkZHJlc3NJbml0aWFsaXphdGlvbicsXG4gIFVOU1RBS0lORyA9ICd1bnN0YWtpbmcnLFxufVxuZXhwb3J0IGludGVyZmFjZSBNYXRlcmlhbCB7XG4gIGdlbmVzaXNIYXNoOiBzdHJpbmc7XG4gIGNoYWluTmFtZTogc3RyaW5nO1xuICBzcGVjTmFtZTogUG9sa2Fkb3RTcGVjTmFtZVR5cGU7XG4gIHNwZWNWZXJzaW9uOiBudW1iZXI7XG4gIHR4VmVyc2lvbjogbnVtYmVyO1xuICBtZXRhZGF0YTogYDB4JHtzdHJpbmd9YDtcbn1cbiJdfQ==