"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClaimBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const txwrapper_polkadot_1 = require("@substrate/txwrapper-polkadot");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const iface_1 = require("./iface");
const transactionBuilder_1 = require("./transactionBuilder");
const txnSchema_1 = require("./txnSchema");
const utils_1 = __importDefault(require("./utils"));
class ClaimBuilder extends transactionBuilder_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
    }
    /**
     *
     * Pay out all the stakers behind a single validator for a single era.
     * Any account can create this transaction.
     *
     * @returns {UnsignedTransaction} an unsigned Dot transaction
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#payoutstakersvalidator_stash-accountid32-era-u32
     */
    buildTransaction() {
        const baseTxInfo = this.createBaseTxInfo();
        return txwrapper_polkadot_1.methods.staking.payoutStakers({
            validatorStash: this._validatorStash,
            era: this._claimEra,
        }, baseTxInfo.baseTxInfo, baseTxInfo.options);
    }
    /**
     * Get the transaction type.
     */
    get transactionType() {
        return sdk_core_1.TransactionType.StakingClaim;
    }
    /**
     *
     * The stash account of the validator.
     *
     * @param {string} validatorStash
     * @returns {ClaimBuilder} This claim builder.
     *
     */
    validatorStash(validatorStash) {
        this.validateAddress(validatorStash);
        this._validatorStash = validatorStash.address;
        return this;
    }
    /**
     * The era to claim.
     *
     * @param {string} claimEra
     * @returns {ClaimBuilder} This claim builder.
     *
     */
    claimEra(claimEra) {
        this.validateValue(new bignumber_js_1.default(claimEra));
        this._claimEra = claimEra;
        return this;
    }
    /** @inheritdoc */
    validateDecodedTransaction(decodedTxn) {
        var _a;
        if (((_a = decodedTxn.method) === null || _a === void 0 ? void 0 : _a.name) === iface_1.MethodNames.PayoutStakers) {
            const txMethod = decodedTxn.method.args;
            const claimEra = txMethod.era;
            const validatorStash = txMethod.validatorStash;
            const validationResult = txnSchema_1.ClaimTransactionSchema.validate({ claimEra, validatorStash });
            if (validationResult.error) {
                throw new sdk_core_1.InvalidTransactionError(`Claim Transaction validation failed: ${validationResult.error.message}`);
            }
        }
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        var _a, _b;
        const tx = super.fromImplementation(rawTransaction);
        if (((_a = this._method) === null || _a === void 0 ? void 0 : _a.name) === iface_1.MethodNames.PayoutStakers) {
            const txMethod = this._method.args;
            this.validatorStash({
                address: utils_1.default.decodeDotAddress(txMethod.validatorStash, utils_1.default.getAddressFormat(this._coinConfig.name)),
            });
            this.claimEra(txMethod.era);
        }
        else {
            throw new sdk_core_1.InvalidTransactionError(`Invalid Transaction Type: ${(_b = this._method) === null || _b === void 0 ? void 0 : _b.name}. Expected payoutStakers`);
        }
        return tx;
    }
    /** @inheritdoc */
    validateTransaction(_) {
        super.validateTransaction(_);
        this.validateFields(this._claimEra, this._validatorStash);
    }
    /**
     *
     * The stash account of the validator.
     *
     * @param {string} claimEra
     * @param {string} validatorStash
     * @throws {Error} If the expected fields are not valid.
     *
     */
    validateFields(claimEra, validatorStash) {
        const validationResult = txnSchema_1.ClaimTransactionSchema.validate({
            claimEra,
            validatorStash,
        });
        if (validationResult.error) {
            throw new sdk_core_1.InvalidTransactionError(`Claim Builder Transaction validation failed: ${validationResult.error.message}`);
        }
    }
}
exports.ClaimBuilder = ClaimBuilder;
//# sourceMappingURL=data:application/json;base64,