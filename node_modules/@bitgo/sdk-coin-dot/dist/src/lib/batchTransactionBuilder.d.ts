import { TransactionType } from '@bitgo/sdk-core';
import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { DecodedSignedTx, DecodedSigningPayload, UnsignedTransaction } from '@substrate/txwrapper-core';
import { Transaction } from './transaction';
import { TransactionBuilder } from './transactionBuilder';
export declare class BatchTransactionBuilder extends TransactionBuilder {
    protected _calls: string[];
    protected _type: TransactionType;
    private _atomic;
    constructor(_coinConfig: Readonly<CoinConfig>);
    /** @inheritDoc */
    protected buildTransaction(): UnsignedTransaction;
    /**
     * Build a transaction which batches together multiple transactions.
     * The transactions which are batched together are passed in as an array of hex strings
     * which are composed of the method to call and the arguments to pass into the method.
     *
     * @returns {UnsignedTransaction}
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#batchcalls-veccall
     */
    protected buildBatchTransaction(): UnsignedTransaction;
    protected get transactionType(): TransactionType;
    /**
     * Set multiple unsigned transactions to be batched and broadcast as a single transaction
     *
     * @param {BatchCall[]} calls unsigned transactions
     * @returns {BatchTransactionBuilder} This batch transaction builder.
     */
    calls(calls: string[]): this;
    /**
     * If true when a batched call fails the entire transactions is rolled back, if false no roll back
     * is performed and the effects of any successful call prior to the error remain.
     *
     * @param atomic true if calls must succeed atomically, false otherwise.
     */
    atomic(atomic: boolean): this;
    /** @inheritdoc */
    validateDecodedTransaction(decodedTxn: DecodedSigningPayload | DecodedSignedTx): void;
    /** @inheritdoc */
    protected fromImplementation(rawTransaction: string): Transaction;
    /** @inheritdoc */
    validateTransaction(_: Transaction): void;
    /**
     * Validate list of unsigned transactions added to batch
     *
     * @param {string[]} calls
     *
     */
    validateCalls(calls: string[]): void;
    private validateFields;
    private validateBatchTransactionFields;
    private getPureProxyCall;
    private getBondCall;
    private getUnbondCall;
    private getPayee;
    private getAddProxyCall;
    private getBondExtraCall;
    private getRemoveProxyCall;
    private getChillCall;
}
//# sourceMappingURL=batchTransactionBuilder.d.ts.map