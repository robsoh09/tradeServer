"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StakingBuilder = void 0;
const txwrapper_polkadot_1 = require("@substrate/txwrapper-polkadot");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const utils_1 = __importDefault(require("./utils"));
const sdk_core_1 = require("@bitgo/sdk-core");
const iface_1 = require("./iface");
const transactionBuilder_1 = require("./transactionBuilder");
const txnSchema_1 = require("./txnSchema");
class StakingBuilder extends transactionBuilder_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
    }
    /**
     * Take the origin account as a stash and lock up value of its balance.
     * Controller will be the account that controls it.
     *
     * @returns {UnsignedTransaction} an unsigned Dot transaction
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#staking
     */
    buildTransaction() {
        const baseTxInfo = this.createBaseTxInfo();
        if (this._addToStake) {
            return txwrapper_polkadot_1.methods.staking.bondExtra({
                maxAdditional: this._amount,
            }, baseTxInfo.baseTxInfo, baseTxInfo.options);
        }
        else {
            return txwrapper_polkadot_1.methods.staking.bond({
                value: this._amount,
                payee: this._payee,
            }, baseTxInfo.baseTxInfo, baseTxInfo.options);
        }
    }
    get transactionType() {
        return sdk_core_1.TransactionType.StakingActivate;
    }
    /**
     * The amount to stake.
     *
     * @param {string} amount
     * @returns {StakeBuilder} This staking builder.
     *
     * @see https://wiki.polkadot.network/docs/learn-nominator#required-minimum-stake
     */
    amount(amount) {
        this.validateValue(new bignumber_js_1.default(amount));
        this._amount = amount;
        return this;
    }
    /**
     * true if we should add to an existing stake, false otherwise.
     *
     * @param {boolean} addToStake
     * @returns {StakeBuilder} This staking builder.
     */
    addToStake(addToStake) {
        this._addToStake = addToStake;
        return this;
    }
    /**
     * The controller of the staked amount.
     *
     * @param {string} controller
     * @returns {StakeBuilder} This staking builder.
     *
     * @see https://wiki.polkadot.network/docs/learn-staking#accounts
     */
    owner(controller) {
        this.validateAddress(controller);
        this._controller = controller.address;
        return this;
    }
    /**
     * The rewards destination of the staked amount.
     * Can be set to another accounts address.
     *
     * @param {string} payee
     * @returns {StakeBuilder} This staking builder.
     *
     * @see https://wiki.polkadot.network/docs/learn-staking#4-rewards-mechanism
     */
    payee(payee) {
        if (typeof payee !== 'string') {
            this.validateAddress({ address: payee.Account });
            this._payee = { Account: payee.Account };
        }
        else {
            this._payee = payee;
        }
        return this;
    }
    /** @inheritdoc */
    validateDecodedTransaction(decodedTxn) {
        var _a, _b;
        if (((_a = decodedTxn.method) === null || _a === void 0 ? void 0 : _a.name) === iface_1.MethodNames.Bond) {
            const txMethod = decodedTxn.method.args;
            const value = txMethod.value;
            const controller = this._sender;
            const payee = txMethod.payee;
            const validationResult = txnSchema_1.StakeTransactionSchema.validate({ value, controller, payee });
            if (validationResult.error) {
                throw new sdk_core_1.InvalidTransactionError(`Transaction validation failed: ${validationResult.error.message}`);
            }
        }
        else if (((_b = decodedTxn.method) === null || _b === void 0 ? void 0 : _b.name) === iface_1.MethodNames.BondExtra) {
            const txMethod = decodedTxn.method.args;
            const value = txMethod.maxAdditional;
            const validationResult = txnSchema_1.StakeTransactionSchema.validate({ value, addToStake: true });
            if (validationResult.error) {
                throw new sdk_core_1.InvalidTransactionError(`Transaction validation failed: ${validationResult.error.message}`);
            }
        }
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        var _a, _b, _c;
        const tx = super.fromImplementation(rawTransaction);
        if (((_a = this._method) === null || _a === void 0 ? void 0 : _a.name) === iface_1.MethodNames.Bond) {
            const txMethod = this._method.args;
            this.amount(txMethod.value);
            this.owner({
                address: utils_1.default.decodeDotAddress(this._sender, utils_1.default.getAddressFormat(this._coinConfig.name)),
            });
            const payee = txMethod.payee;
            if (payee.account) {
                this.payee({
                    Account: utils_1.default.decodeDotAddress(payee.account, utils_1.default.getAddressFormat(this._coinConfig.name)),
                });
            }
            else {
                const payeeType = utils_1.default.capitalizeFirstLetter(Object.keys(payee)[0]);
                this.payee(payeeType);
            }
        }
        else if (((_b = this._method) === null || _b === void 0 ? void 0 : _b.name) === iface_1.MethodNames.BondExtra) {
            const txMethod = this._method.args;
            this.amount(txMethod.maxAdditional);
            this.addToStake(true);
        }
        else {
            throw new sdk_core_1.InvalidTransactionError(`Invalid Transaction Type: ${(_c = this._method) === null || _c === void 0 ? void 0 : _c.name}. Expected bond or bondExtra`);
        }
        return tx;
    }
    /** @inheritdoc */
    validateTransaction(_) {
        super.validateTransaction(_);
        this.validateFields(this._amount, this._controller, this._payee, this._addToStake);
    }
    validateFields(value, controller, payee, addToStake) {
        const validationResult = txnSchema_1.StakeTransactionSchema.validate({
            value,
            controller,
            payee,
            addToStake,
        });
        if (validationResult.error) {
            throw new sdk_core_1.InvalidTransactionError(`Stake Builder Transaction validation failed: ${validationResult.error.message}`);
        }
    }
}
exports.StakingBuilder = StakingBuilder;
//# sourceMappingURL=data:application/json;base64,