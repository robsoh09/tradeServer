"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Utils = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const keyring_1 = require("@polkadot/keyring");
const decode_1 = require("@polkadot/keyring/pair/decode");
const types_1 = require("@polkadot/types");
const Extrinsic_1 = require("@polkadot/types/extrinsic/v4/Extrinsic");
const util_1 = require("@polkadot/util");
const util_crypto_1 = require("@polkadot/util-crypto");
const txwrapper_core_1 = require("@substrate/txwrapper-core");
const txwrapper_polkadot_1 = require("@substrate/txwrapper-polkadot");
const bs58_1 = __importDefault(require("bs58"));
const hi_base32_1 = __importDefault(require("hi-base32"));
const _ = __importStar(require("lodash"));
const tweetnacl_1 = __importDefault(require("tweetnacl"));
const _1 = require(".");
const resources_1 = require("../resources");
const PROXY_METHOD_ARG = 2;
// map to retrieve the address encoding format when the key is the asset name
const coinToAddressMap = new Map([
    ['dot', sdk_core_1.DotAddressFormat.polkadot],
    ['tdot', sdk_core_1.DotAddressFormat.substrate],
]);
class Utils {
    /** @inheritdoc */
    isValidAddress(address) {
        try {
            (0, keyring_1.encodeAddress)((0, util_1.isHex)(address) ? (0, util_1.hexToU8a)(address) : (0, keyring_1.decodeAddress)(address));
            return true;
        }
        catch (error) {
            return false;
        }
    }
    /** @inheritdoc */
    isValidBlockId(hash) {
        return (0, util_1.isHex)(hash, 256);
    }
    /** @inheritdoc */
    isValidPrivateKey(key) {
        try {
            const decodedPrv = (0, util_1.hexToU8a)(key);
            return decodedPrv.length === tweetnacl_1.default.sign.secretKeyLength / 2;
        }
        catch (e) {
            return false;
        }
    }
    /** @inheritdoc */
    isValidPublicKey(key) {
        let pubKey = key;
        // convert base58 pub key to hex format
        // tss common pub is in base58 format and decodes to length of 32
        if ((0, sdk_core_1.isBase58)(pubKey, 32)) {
            const base58Decode = bs58_1.default.decode(pubKey);
            pubKey = base58Decode.toString('hex');
        }
        return (0, sdk_core_1.isValidEd25519PublicKey)(pubKey);
    }
    /** @inheritdoc */
    isValidSignature(signature) {
        const signatureU8a = (0, util_1.u8aToU8a)(signature);
        return [64, 65, 66].includes(signatureU8a.length);
    }
    /**
     * Verifies the signature on a given message
     *
     * @param {string} signedMessage the signed message for the signature
     * @param {string} signature the signature to verify
     * @param {string} address the address of the signer
     * @returns {boolean} whether the signature is valid or not
     */
    verifySignature(signedMessage, signature, address) {
        const publicKey = (0, keyring_1.decodeAddress)(address);
        const hexPublicKey = (0, util_1.u8aToHex)(publicKey);
        return (0, util_crypto_1.signatureVerify)(signedMessage, signature, hexPublicKey).isValid;
    }
    /** @inheritdoc */
    isValidTransactionId(txId) {
        return (0, util_1.isHex)(txId, 256);
    }
    /**
     * decodeSeed decodes a dot seed
     *
     * @param {string} seed - the seed to be validated.
     * @returns {Seed} - the object Seed
     */
    decodeSeed(seed) {
        const decoded = hi_base32_1.default.decode.asBytes(seed);
        return {
            seed: Buffer.from(decoded),
        };
    }
    /**
     * Helper function to capitalize the first letter of a string
     *
     * @param {string} val
     * @returns {string}
     */
    capitalizeFirstLetter(val) {
        return val.charAt(0).toUpperCase() + val.slice(1);
    }
    /**
     * Helper function to decode the internal method hex in case of a proxy transaction
     *
     * @param {string | UnsignedTransaction} tx
     * @param { metadataRpc: string; registry: TypeRegistry } options
     * @returns {TransferArgs}
     */
    decodeCallMethod(tx, options) {
        const { registry } = options;
        let methodCall;
        if (typeof tx === 'string') {
            try {
                const payload = (0, types_1.createTypeUnsafe)(registry, 'ExtrinsicPayload', [
                    tx,
                    { version: Extrinsic_1.EXTRINSIC_VERSION },
                ]);
                methodCall = (0, types_1.createTypeUnsafe)(registry, 'Call', [payload.method]);
            }
            catch (e) {
                methodCall = registry.createType('Extrinsic', (0, util_1.hexToU8a)(tx), {
                    isSigned: true,
                });
            }
        }
        else {
            methodCall = registry.createType('Call', tx.method);
        }
        const method = methodCall.args[PROXY_METHOD_ARG];
        const decodedArgs = method.toJSON();
        return decodedArgs.args;
    }
    /**
     * keyPairFromSeed generates an object with secretKey and publicKey using the polkadot sdk
     * @param seed 32 bytes long seed
     * @returns KeyPair
     */
    keyPairFromSeed(seed) {
        const keyring = new keyring_1.Keyring({ type: 'ed25519' });
        const keyringPair = keyring.addFromSeed(seed);
        const pairJson = keyringPair.toJson();
        const decodedKeyPair = (0, decode_1.decodePair)('', (0, util_crypto_1.base64Decode)(pairJson.encoded), pairJson.encoding.type);
        return new _1.KeyPair({ prv: Buffer.from(decodedKeyPair.secretKey).toString('hex') });
    }
    /**
     * Signing function. Implement this on the OFFLINE signing device.
     *
     * @param {KeyringPair} pair - The signing pair.
     * @param {string} signingPayload - Payload to sign.
     * @param {UnsignedTransaction} transaction - raw transaction to sign
     * @param {Object} options
     * @param {HexString} options.metadataRpc - metadata that is needed for dot to sign
     * @param {TypeRegistry} options.registry - metadata that is needed for dot to sign
     */
    createSignedTx(pair, signingPayload, transaction, options) {
        const { registry, metadataRpc } = options;
        const { signature } = registry
            .createType('ExtrinsicPayload', signingPayload, {
            version: Extrinsic_1.EXTRINSIC_VERSION,
        })
            .sign(pair);
        // Serialize a signed transaction.
        return this.serializeSignedTransaction(transaction, signature, metadataRpc, registry);
    }
    /**
     * Serializes the signed transaction
     *
     * @param transaction Transaction to serialize
     * @param signature Signature of the message
     * @param metadataRpc Network metadata
     * @param registry Transaction registry
     * @returns string Serialized transaction
     */
    serializeSignedTransaction(transaction, signature, metadataRpc, registry) {
        return txwrapper_polkadot_1.construct.signedTx(transaction, signature, {
            metadataRpc,
            registry,
        });
    }
    /**
     * Decodes the dot address from the given format
     *
     * @param {string} address
     * @param {number} [ss58Format]
     * @returns {string}
     */
    decodeDotAddress(address, ss58Format) {
        const keypair = new _1.KeyPair({ pub: Buffer.from((0, keyring_1.decodeAddress)(address, undefined, ss58Format)).toString('hex') });
        return keypair.getAddress(ss58Format);
    }
    /**
     * Decodes the dot address from the given format
     *
     * @param {string} address
     * @param {number} [ss58Format]
     * @returns {string}
     */
    encodeDotAddress(address, ss58Format) {
        return (0, keyring_1.encodeAddress)(address, ss58Format);
    }
    /**
     * Retrieves the txHash of a signed txHex
     *
     * @param txHex signed transaction hex
     * @returns {string}
     */
    getTxHash(txHex) {
        return txwrapper_polkadot_1.construct.txHash(txHex);
    }
    getMaterial(coinConfig) {
        const networkConfig = coinConfig.network;
        const { specName, specVersion, chainName, txVersion, genesisHash } = networkConfig;
        const metadataRpc = networkConfig.specName === 'westend' ? resources_1.westendMetadataRpc : resources_1.mainnetMetadataRpc;
        return {
            specName,
            specVersion,
            chainName,
            metadata: metadataRpc,
            txVersion,
            genesisHash,
        };
    }
    isSigningPayload(payload) {
        return payload.blockHash !== undefined;
    }
    isProxyTransfer(arg) {
        return arg.real !== undefined;
    }
    isTransfer(arg) {
        var _a;
        return ((_a = arg.dest) === null || _a === void 0 ? void 0 : _a.id) !== undefined && arg.value !== undefined;
    }
    isTransferAll(arg) {
        var _a;
        return ((_a = arg.dest) === null || _a === void 0 ? void 0 : _a.id) !== undefined && arg.keepAlive !== undefined;
    }
    /**
     * Returns true if arg is of type BatchArgs, false otherwise.
     *
     * @param arg The object to test.
     *
     * @return true if arg is of type BatchArgs, false otherwise.
     */
    isBatch(arg) {
        return arg.calls !== undefined;
    }
    /**
     * Returns true if arg is of type BatchArgs and the calls of the batch are staking calls: a stake
     * call (bond) followed by an add proxy call (addProxy), false otherwise.
     *
     * @param arg The object to test.
     *
     * @return true if arg is of type BatchArgs and the calls of the batch are staking calls: a stake
     * call (bond) followed by an add proxy call (addProxy), false otherwise.
     */
    isStakingBatch(arg) {
        const calls = arg.calls;
        if (calls !== undefined) {
            return (calls.length === 2 &&
                (this.isStakeBatchCallArgs(calls[0].args) || this.isBondBatchExtra(calls[0].args)) &&
                this.isAddProxyBatchCallArgs(calls[1].args));
        }
        return false;
    }
    /**
     * Returns true if arg is of type StakeBatchCallArgs, false otherwise.
     *
     * @param arg The object to test.
     *
     * @return true if arg is of type StakeBatchCallArgs, false otherwise.
     */
    isStakeBatchCallArgs(arg) {
        return arg.value !== undefined && arg.payee !== undefined;
    }
    /**
     * Returns true if arg is of type AddProxyBatchCallArgs, false otherwise.
     *
     * @param arg The object to test.
     *
     * @return true if arg is of type AddProxyBatchCallArgs, false otherwise.
     */
    isAddProxyBatchCallArgs(arg) {
        return (arg.delegate !== undefined &&
            arg.proxy_type !== undefined &&
            arg.delay !== undefined);
    }
    /**
     * Returns true if arg is of type BatchArgs and the calls of the batch are unstaking calls: a remove
     * proxy call (removeProxy), followed by a chill call, and an unstake call (unbond), false otherwise.
     *
     * @param arg The object to test.
     *
     * @return true if arg is of type BatchArgs and the calls of the batch are unstaking calls: a remove
     * proxy call (removeProxy), followed by a chill call, and an unstake call (unbond), false otherwise.
     */
    isUnstakingBatch(arg) {
        const calls = arg.calls;
        if (calls !== undefined) {
            return (calls.length === 3 &&
                this.isRemoveProxyBatchCallArgs(calls[0].args) &&
                _.isEmpty(calls[1].args) &&
                this.isUnstakeBatchCallArgs(calls[2].args));
        }
        return false;
    }
    /**
     * Returns true if arg is of type AddProxyBatchCallArgs, false otherwise.
     *
     * @param arg The object to test.
     *
     * @return true if arg is of type AddProxyBatchCallArgs, false otherwise.
     */
    isRemoveProxyBatchCallArgs(arg) {
        return (arg.delegate !== undefined &&
            arg.proxy_type !== undefined &&
            arg.delay !== undefined);
    }
    /**
     * Returns true if arg is of type UnstakeBatchCallArgs, false otherwise.
     *
     * @param arg The object to test.
     *
     * @return true if arg is of type UnstakeBatchCallArgs, false otherwise.
     */
    isUnstakeBatchCallArgs(arg) {
        return arg.value !== undefined;
    }
    /**
     * Returns true if arg is of type StakeArgs, false otherwise.
     *
     * @param arg The object to test.
     *
     * @return true if arg is of type StakeArgs, false otherwise.
     */
    isBond(arg) {
        return arg.value !== undefined && arg.payee !== undefined;
    }
    /**
     * Returns true if arg is of type StakeMoreArgs, false otherwise.
     *
     * @param arg The object to test.
     *
     * @return true if arg is of type StakeMoreArgs, false otherwise.
     */
    isBondExtra(arg) {
        return arg.maxAdditional !== undefined;
    }
    /**
     * Returns true if arg is of type StakeMoreArgs, false otherwise.
     *
     * @param arg The object to test.
     *
     * @return true if arg is of type StakeMoreArgs, false otherwise.
     */
    isBondBatchExtra(arg) {
        return arg.max_additional !== undefined;
    }
    /**
     * extracts and returns the signature in hex format given a raw signed transaction
     *
     * @param {string} rawTx signed raw transaction
     * @param options registry dot registry used to retrieve the signature
     */
    recoverSignatureFromRawTx(rawTx, options) {
        const { registry } = options;
        const methodCall = registry.createType('Extrinsic', rawTx, {
            isSigned: true,
        });
        let signature = (0, util_1.u8aToHex)(methodCall.signature);
        // remove 0x from the signature since this is how it's returned from TSS signing
        if (signature.startsWith('0x')) {
            signature = signature.substr(2);
        }
        return signature;
    }
    /**
     * Decodes the dot address from the given format
     *
     * @param {string} address
     * @param {number} [ss58Format]
     * @returns {KeyPair}
     */
    decodeDotAddressToKeyPair(address, ss58Format) {
        return new _1.KeyPair({ pub: Buffer.from((0, keyring_1.decodeAddress)(address, undefined, ss58Format)).toString('hex') });
    }
    /**
     * Checks whether the given input is a hex string with with 0 value
     * used to check whether a given transaction is immortal or mortal
     * @param hexValue
     */
    isZeroHex(hexValue) {
        return hexValue === '0x00';
    }
    /**
     * Takes an asset name and returns the respective address to format to
     * since polkadot addresses differ depending on the network
     * ref: https://wiki.polkadot.network/docs/learn-accounts
     * @param networkCoinName
     */
    getAddressFormat(networkCoinName) {
        return coinToAddressMap.get(networkCoinName);
    }
    /**
     * Creates a pure proxy extrinsic. Polkadot has renamed anonymous proxies to pure proxies, but
     * the libraries we are using to build transactions have not been updated, as a stop gap we are
     * defining the pure proxy extrinsic here.
     *
     * @param args Arguments to the createPure extrinsic.
     * @param info Common information to all transactions.
     * @param options Chain registry and metadata.
     */
    pureProxy(args, info, options) {
        return (0, txwrapper_core_1.defineMethod)({
            method: {
                args,
                name: 'createPure',
                pallet: 'proxy',
            },
            ...info,
        }, options);
    }
    /**
     * Removes '0x' from a given `string` if present.
     *
     * @param {string} str the string value.
     *
     * @return {string} a string without a '0x' prefix.
     */
    stripHexPrefix(str) {
        return this.isHexPrefixed(str) ? str.slice(2) : str;
    }
    /**
     * Returns true if a string starts with '0x', false otherwise.
     *
     * @param {string} str the string value.
     *
     * @return {boolean} true if a string starts with '0x', false otherwise.
     */
    isHexPrefixed(str) {
        return str.slice(0, 2) === '0x';
    }
}
exports.Utils = Utils;
const utils = new Utils();
exports.default = utils;
//# sourceMappingURL=data:application/json;base64,