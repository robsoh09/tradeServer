"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchTransactionBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const txwrapper_polkadot_1 = require("@substrate/txwrapper-polkadot");
const iface_1 = require("./iface");
const iface_utils_1 = require("./iface_utils");
const transactionBuilder_1 = require("./transactionBuilder");
const txnSchema_1 = require("./txnSchema");
const utils_1 = __importDefault(require("./utils"));
class BatchTransactionBuilder extends transactionBuilder_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._atomic = false;
    }
    /** @inheritDoc */
    buildTransaction() {
        return this.buildBatchTransaction();
    }
    /**
     * Build a transaction which batches together multiple transactions.
     * The transactions which are batched together are passed in as an array of hex strings
     * which are composed of the method to call and the arguments to pass into the method.
     *
     * @returns {UnsignedTransaction}
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#batchcalls-veccall
     */
    buildBatchTransaction() {
        const baseTxInfo = this.createBaseTxInfo();
        if (this._atomic) {
            return txwrapper_polkadot_1.methods.utility.batchAll({
                calls: this._calls,
            }, baseTxInfo.baseTxInfo, baseTxInfo.options);
        }
        else {
            return txwrapper_polkadot_1.methods.utility.batch({
                calls: this._calls,
            }, baseTxInfo.baseTxInfo, baseTxInfo.options);
        }
    }
    get transactionType() {
        return sdk_core_1.TransactionType.Batch;
    }
    /**
     * Set multiple unsigned transactions to be batched and broadcast as a single transaction
     *
     * @param {BatchCall[]} calls unsigned transactions
     * @returns {BatchTransactionBuilder} This batch transaction builder.
     */
    calls(calls) {
        this.validateCalls(calls);
        this._calls = calls;
        return this;
    }
    /**
     * If true when a batched call fails the entire transactions is rolled back, if false no roll back
     * is performed and the effects of any successful call prior to the error remain.
     *
     * @param atomic true if calls must succeed atomically, false otherwise.
     */
    atomic(atomic) {
        this._atomic = atomic;
        return this;
    }
    /** @inheritdoc */
    validateDecodedTransaction(decodedTxn) {
        const txMethod = decodedTxn.method.args;
        const validationResult = this.validateBatchTransactionFields(txMethod.calls);
        if (validationResult.error) {
            throw new sdk_core_1.InvalidTransactionError(`Transaction validation failed: ${validationResult.error.message}`);
        }
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        var _a, _b, _c, _d;
        const tx = super.fromImplementation(rawTransaction);
        if (((_a = this._method) === null || _a === void 0 ? void 0 : _a.name) === iface_1.MethodNames.Batch || ((_b = this._method) === null || _b === void 0 ? void 0 : _b.name) === iface_1.MethodNames.BatchAll) {
            if (((_c = this._method) === null || _c === void 0 ? void 0 : _c.name) === iface_1.MethodNames.BatchAll) {
                this.atomic(true);
            }
            const txMethod = this._method.args;
            if (!txMethod.calls) {
                throw new sdk_core_1.InvalidTransactionError('failed to decode calls from batch transaction');
            }
            const callsToBatch = [];
            txMethod.calls.forEach((call) => {
                const method = call.callIndex;
                const decodedMethod = (0, sdk_core_1.toUint8Array)(utils_1.default.stripHexPrefix(method));
                const decodedCall = this._registry.findMetaCall(decodedMethod);
                if (decodedCall.section === iface_1.SectionNames.Proxy &&
                    (decodedCall.method === iface_1.MethodNames.Anonymous || decodedCall.method === iface_1.MethodNames.PureProxy)) {
                    callsToBatch.push(this.getPureProxyCall(call.args));
                }
                else if (decodedCall.section === iface_1.SectionNames.Proxy && decodedCall.method === iface_1.MethodNames.AddProxy) {
                    callsToBatch.push(this.getAddProxyCall(call.args));
                }
                else if (decodedCall.section === iface_1.SectionNames.Staking && decodedCall.method === iface_1.MethodNames.BondExtra) {
                    callsToBatch.push(this.getBondExtraCall(call.args));
                }
                else if (decodedCall.section === iface_1.SectionNames.Staking && decodedCall.method === iface_1.MethodNames.Bond) {
                    callsToBatch.push(this.getBondCall(call.args));
                }
                else if (decodedCall.section === iface_1.SectionNames.Staking && decodedCall.method === iface_1.MethodNames.Unbond) {
                    callsToBatch.push(this.getUnbondCall(call.args));
                }
                else if (decodedCall.section === iface_1.SectionNames.Staking && decodedCall.method === iface_1.MethodNames.Chill) {
                    callsToBatch.push(this.getChillCall());
                }
                else if (decodedCall.section === iface_1.SectionNames.Proxy && decodedCall.method === iface_1.MethodNames.RemoveProxy) {
                    callsToBatch.push(this.getRemoveProxyCall(call.args));
                }
                else {
                    throw new sdk_core_1.NotImplementedError(`batching of transaction with index ${method} unsupported`);
                }
            });
            this.calls(callsToBatch);
        }
        else {
            throw new sdk_core_1.InvalidTransactionError(`Invalid Transaction Type: ${(_d = this._method) === null || _d === void 0 ? void 0 : _d.name}. Expected ${iface_1.MethodNames.Batch}`);
        }
        return tx;
    }
    /** @inheritdoc */
    validateTransaction(_) {
        super.validateTransaction(_);
        this.validateFields();
    }
    /**
     * Validate list of unsigned transactions added to batch
     *
     * @param {string[]} calls
     *
     */
    validateCalls(calls) {
        calls.forEach((call) => {
            if (call.slice(0, 2) !== '0x') {
                // example: '0x160400000000000000'
                throw new sdk_core_1.BuildTransactionError('call in string format must be hex format of a method and its arguments');
            }
        });
    }
    validateFields() {
        const validationResult = this.validateBatchTransactionFields(this._calls);
        if (validationResult.error) {
            throw new sdk_core_1.InvalidTransactionError(`AddressInitialization Transaction validation failed: ${validationResult.error.message}`);
        }
    }
    validateBatchTransactionFields(calls) {
        return txnSchema_1.BatchTransactionSchema.validate({
            calls,
        });
    }
    getPureProxyCall(args) {
        const baseTxInfo = this.createBaseTxInfo();
        const unsigned = utils_1.default.pureProxy({
            proxyType: args.proxy_type,
            index: args.index,
            delay: args.delay,
        }, baseTxInfo.baseTxInfo, baseTxInfo.options);
        return unsigned.method;
    }
    getBondCall(args) {
        const baseTxInfo = this.createBaseTxInfo();
        const unsigned = txwrapper_polkadot_1.methods.staking.bond({
            value: args.value,
            payee: this.getPayee(args.payee),
        }, baseTxInfo.baseTxInfo, baseTxInfo.options);
        return unsigned.method;
    }
    getUnbondCall(args) {
        const baseTxInfo = this.createBaseTxInfo();
        const unsigned = txwrapper_polkadot_1.methods.staking.unbond({
            value: args.value,
        }, baseTxInfo.baseTxInfo, baseTxInfo.options);
        return unsigned.method;
    }
    getPayee(payee) {
        if ((0, iface_utils_1.isStakeBatchCallPayeeStash)(payee)) {
            return 'Stash';
        }
        else if ((0, iface_utils_1.isStakeBatchCallPayeeController)(payee)) {
            return 'Controller';
        }
        else if ((0, iface_utils_1.isStakeBatchCallPayeeAccount)(payee)) {
            return { Account: payee.account };
        }
        else if ((0, iface_utils_1.isStakeBatchCallPayeeStaked)(payee)) {
            return 'Staked';
        }
        else {
            throw new Error(`Invalid payee: ${payee}`);
        }
    }
    getAddProxyCall(args) {
        const baseTxInfo = this.createBaseTxInfo();
        const unsigned = txwrapper_polkadot_1.methods.proxy.addProxy({
            delegate: (0, iface_utils_1.getDelegateAddress)(args),
            proxyType: args.proxy_type,
            delay: args.delay,
        }, baseTxInfo.baseTxInfo, baseTxInfo.options);
        return unsigned.method;
    }
    getBondExtraCall(args) {
        const baseTxInfo = this.createBaseTxInfo();
        const unsigned = txwrapper_polkadot_1.methods.staking.bondExtra({
            maxAdditional: args.max_additional,
        }, baseTxInfo.baseTxInfo, baseTxInfo.options);
        return unsigned.method;
    }
    getRemoveProxyCall(args) {
        const baseTxInfo = this.createBaseTxInfo();
        const unsigned = txwrapper_polkadot_1.methods.proxy.removeProxy({
            delegate: (0, iface_utils_1.getDelegateAddress)(args),
            proxyType: args.proxy_type,
            delay: args.delay,
        }, baseTxInfo.baseTxInfo, baseTxInfo.options);
        return unsigned.method;
    }
    getChillCall() {
        const baseTxInfo = this.createBaseTxInfo();
        const unsigned = txwrapper_polkadot_1.methods.staking.chill({}, baseTxInfo.baseTxInfo, baseTxInfo.options);
        return unsigned.method;
    }
}
exports.BatchTransactionBuilder = BatchTransactionBuilder;
//# sourceMappingURL=data:application/json;base64,