"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NativeTransferBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const txwrapper_polkadot_1 = require("@substrate/txwrapper-polkadot");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const iface_1 = require("./iface");
const iface_utils_1 = require("./iface_utils");
const singletonRegistry_1 = require("./singletonRegistry");
const transactionBuilder_1 = require("./transactionBuilder");
const txnSchema_1 = require("./txnSchema");
const utils_1 = __importDefault(require("./utils"));
class NativeTransferBuilder extends transactionBuilder_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._sweepFreeBalance = false;
        this._keepAddressAlive = true;
    }
    /**
     *
     * Dispatch the given call from an account that the sender is authorised for through add_proxy.
     *
     * @returns {UnsignedTransaction} an unsigned Dot transaction
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#proxy
     */
    buildTransaction() {
        const baseTxInfo = this.createBaseTxInfo();
        let transferTx;
        if (this._sweepFreeBalance) {
            transferTx = txwrapper_polkadot_1.methods.balances.transferAll({
                dest: { id: this._to },
                keepAlive: this._keepAddressAlive,
            }, baseTxInfo.baseTxInfo, baseTxInfo.options);
        }
        else {
            transferTx = txwrapper_polkadot_1.methods.balances.transferKeepAlive({
                value: this._amount,
                dest: { id: this._to },
            }, baseTxInfo.baseTxInfo, baseTxInfo.options);
        }
        if (!this._owner) {
            return transferTx;
        }
        return txwrapper_polkadot_1.methods.proxy.proxy({
            real: this._owner,
            forceProxyType: this._forceProxyType,
            call: transferTx.method,
        }, baseTxInfo.baseTxInfo, baseTxInfo.options);
    }
    get transactionType() {
        return sdk_core_1.TransactionType.Send;
    }
    /**
     *
     * Set this to be a sweep transaction, using TransferAll with keepAlive set to true by default.
     * If keepAlive is false, the entire address will be swept (including the 1 DOT minimum).
     *
     * @param {boolean} keepAlive - keep the address alive after this sweep
     * @returns {TransferBuilder} This transfer builder.
     *
     * @see https://github.com/paritytech/txwrapper-core/blob/main/docs/modules/txwrapper_substrate_src.methods.balances.md#transferall
     */
    sweep(keepAlive) {
        this._sweepFreeBalance = true;
        if (keepAlive !== undefined) {
            this._keepAddressAlive = keepAlive;
        }
        return this;
    }
    /**
     *
     * The amount for transfer transaction.
     *
     * @param {string} amount
     * @returns {TransferBuilder} This transfer builder.
     *
     * @see https://wiki.polkadot.network/docs/build-protocol-info
     */
    amount(amount) {
        this.validateValue(new bignumber_js_1.default(amount));
        this._amount = amount;
        return this;
    }
    /**
     *
     * The destination address for transfer transaction.
     *
     * @param {string} dest
     * @returns {TransferBuilder} This transfer builder.
     *
     * @see https://wiki.polkadot.network/docs/build-protocol-info
     */
    to({ address }) {
        this.validateAddress({ address });
        this._to = address;
        return this;
    }
    /**
     *
     * The real address of the original tx
     *
     * @param {BaseAddress} real
     * @returns {TransferBuilder} This builder.
     *
     * @see https://wiki.polkadot.network/docs/learn-proxies#why-use-a-proxy
     */
    owner(owner) {
        this.validateAddress({ address: owner.address });
        this._owner = owner.address;
        return this;
    }
    /**
     *
     * The proxy type to execute
     *
     * @param {proxyType} forceProxyType
     * @returns {TransferBuilder} This builder.
     *
     * @see https://wiki.polkadot.network/docs/learn-proxies#proxy-types
     */
    forceProxyType(forceProxyType) {
        this._forceProxyType = forceProxyType;
        return this;
    }
    /** @inheritdoc */
    validateDecodedTransaction(decodedTxn, rawTransaction) {
        var _a, _b;
        if (((_a = decodedTxn.method) === null || _a === void 0 ? void 0 : _a.name) === iface_1.MethodNames.TransferKeepAlive) {
            const txMethod = decodedTxn.method.args;
            const amount = `${txMethod.value}`;
            const to = txMethod.dest.id;
            const validationResult = txnSchema_1.TransferTransactionSchema.validate({ amount, to });
            if (validationResult.error) {
                throw new sdk_core_1.InvalidTransactionError(`Transfer Transaction validation failed: ${validationResult.error.message}`);
            }
        }
        else if (((_b = decodedTxn.method) === null || _b === void 0 ? void 0 : _b.name) === iface_1.MethodNames.Proxy) {
            const txMethod = decodedTxn.method.args;
            const real = (0, iface_utils_1.getAddress)(txMethod);
            const forceProxyType = txMethod.forceProxyType;
            const decodedCall = utils_1.default.decodeCallMethod(rawTransaction, {
                registry: singletonRegistry_1.SingletonRegistry.getInstance(this._material),
                metadataRpc: this._material.metadata,
            });
            const amount = `${decodedCall.value}`;
            const to = decodedCall.dest.id;
            const validationResult = txnSchema_1.ProxyTransactionSchema.validate({ real, forceProxyType, amount, to });
            if (validationResult.error) {
                throw new sdk_core_1.InvalidTransactionError(`Proxy Transaction validation failed: ${validationResult.error.message}`);
            }
        }
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        var _a, _b, _c, _d, _e;
        const tx = super.fromImplementation(rawTransaction);
        if (((_a = this._method) === null || _a === void 0 ? void 0 : _a.name) === iface_1.MethodNames.TransferKeepAlive) {
            const txMethod = this._method.args;
            this.amount(txMethod.value);
            this.to({
                address: utils_1.default.decodeDotAddress(txMethod.dest.id, utils_1.default.getAddressFormat(this._coinConfig.name)),
            });
        }
        else if (((_b = this._method) === null || _b === void 0 ? void 0 : _b.name) === iface_1.MethodNames.TransferAll) {
            this._sweepFreeBalance = true;
            const txMethod = this._method.args;
            this.sweep(txMethod.keepAlive);
            this.to({
                address: utils_1.default.decodeDotAddress(txMethod.dest.id, utils_1.default.getAddressFormat(this._coinConfig.name)),
            });
        }
        else if (((_c = this._method) === null || _c === void 0 ? void 0 : _c.name) === iface_1.MethodNames.Proxy) {
            const txMethod = this._method.args;
            this.owner({
                address: utils_1.default.decodeDotAddress((0, iface_utils_1.getAddress)(txMethod), utils_1.default.getAddressFormat(this._coinConfig.name)),
            });
            this.forceProxyType(txMethod.forceProxyType);
            const decodedCall = utils_1.default.decodeCallMethod(rawTransaction, {
                registry: singletonRegistry_1.SingletonRegistry.getInstance(this._material),
                metadataRpc: this._material.metadata,
            });
            if (!decodedCall.value || !decodedCall.dest) {
                throw new sdk_core_1.InvalidTransactionError(`Invalid Proxy Transaction Method: ${(_d = this._method) === null || _d === void 0 ? void 0 : _d.name}. Expected transferKeepAlive`);
            }
            this.amount(`${decodedCall.value}`);
            this.to({
                address: utils_1.default.decodeDotAddress(decodedCall.dest.id, utils_1.default.getAddressFormat(this._coinConfig.name)),
            });
        }
        else {
            throw new sdk_core_1.InvalidTransactionError(`Invalid Transaction Type: ${(_e = this._method) === null || _e === void 0 ? void 0 : _e.name}. Expected a transferKeepAlive or a proxy transferKeepAlive transaction`);
        }
        return tx;
    }
    /** @inheritdoc */
    validateTransaction(_) {
        super.validateTransaction(_);
        this.validateFields(this._to, this._amount, this._owner, this._forceProxyType);
    }
    validateFields(to, amount, real, forceProxyType) {
        let validationResult;
        if (forceProxyType) {
            validationResult = txnSchema_1.ProxyTransactionSchema.validate({ to, amount, real, forceProxyType });
        }
        else if (this._sweepFreeBalance) {
            validationResult = txnSchema_1.TransferAllTransactionSchema.validate({ to });
        }
        else {
            validationResult = txnSchema_1.TransferTransactionSchema.validate({ amount, to });
        }
        if (validationResult.error) {
            throw new sdk_core_1.InvalidTransactionError(`Proxy/TransferAll/TransferKeepAlive Transaction validation failed: ${validationResult.error.message}`);
        }
    }
}
exports.NativeTransferBuilder = NativeTransferBuilder;
//# sourceMappingURL=data:application/json;base64,