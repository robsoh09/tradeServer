"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilderFactory = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const txwrapper_polkadot_1 = require("@substrate/txwrapper-polkadot");
const addressInitializationBuilder_1 = require("./addressInitializationBuilder");
const iface_1 = require("./iface");
const proxyBuilder_1 = require("./proxyBuilder");
const singletonRegistry_1 = require("./singletonRegistry");
const stakingBuilder_1 = require("./stakingBuilder");
const transferBuilder_1 = require("./transferBuilder");
const unnominateBuilder_1 = require("./unnominateBuilder");
const utils_1 = __importDefault(require("./utils"));
const _1 = require(".");
class TransactionBuilderFactory extends sdk_core_1.BaseTransactionBuilderFactory {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._material = utils_1.default.getMaterial(_coinConfig);
    }
    getTransferBuilder() {
        return new transferBuilder_1.TransferBuilder(this._coinConfig).material(this._material);
    }
    getStakingBuilder() {
        return new stakingBuilder_1.StakingBuilder(this._coinConfig).material(this._material);
    }
    getAddressInitializationBuilder() {
        return new addressInitializationBuilder_1.AddressInitializationBuilder(this._coinConfig).material(this._material);
    }
    getRemoveProxyBuilder() {
        return new proxyBuilder_1.RemoveProxyBuilder(this._coinConfig).material(this._material);
    }
    getBatchTransactionBuilder() {
        return new _1.BatchTransactionBuilder(this._coinConfig).material(this._material);
    }
    getWalletInitializationBuilder() {
        throw new sdk_core_1.NotImplementedError(`walletInitialization for ${this._coinConfig.name} not implemented`);
    }
    getUnstakeBuilder() {
        return new _1.UnstakeBuilder(this._coinConfig).material(this._material);
    }
    getWithdrawUnstakedBuilder() {
        return new _1.WithdrawUnstakedBuilder(this._coinConfig).material(this._material);
    }
    getClaimBuilder() {
        return new _1.ClaimBuilder(this._coinConfig).material(this._material);
    }
    getUnnominateBuilder() {
        return new unnominateBuilder_1.UnnominateBuilder(this._coinConfig);
    }
    from(rawTxn) {
        const builder = this.getBuilder(rawTxn);
        builder.from(rawTxn);
        return builder;
    }
    material(material) {
        this._material = material;
        return this;
    }
    getBuilder(rawTxn) {
        var _a;
        const registry = singletonRegistry_1.SingletonRegistry.getInstance(this._material);
        const decodedTxn = (0, txwrapper_polkadot_1.decode)(rawTxn, {
            metadataRpc: this._material.metadata,
            registry: registry,
        });
        const methodName = (_a = decodedTxn.method) === null || _a === void 0 ? void 0 : _a.name;
        if (methodName === iface_1.MethodNames.TransferKeepAlive ||
            methodName === iface_1.MethodNames.TransferAll ||
            methodName === iface_1.MethodNames.Proxy) {
            return this.getTransferBuilder();
        }
        else if (methodName === iface_1.MethodNames.Bond || methodName === iface_1.MethodNames.BondExtra) {
            return this.getStakingBuilder();
        }
        else if (methodName === iface_1.MethodNames.AddProxy) {
            return this.getAddressInitializationBuilder();
        }
        else if (methodName === iface_1.MethodNames.RemoveProxy) {
            return this.getRemoveProxyBuilder();
        }
        else if (methodName === iface_1.MethodNames.Unbond) {
            return this.getUnstakeBuilder();
        }
        else if (methodName === iface_1.MethodNames.Chill) {
            return this.getUnnominateBuilder();
        }
        else if (methodName === iface_1.MethodNames.WithdrawUnbonded) {
            return this.getWithdrawUnstakedBuilder();
        }
        else if (methodName === iface_1.MethodNames.PayoutStakers) {
            return this.getClaimBuilder();
        }
        else if (methodName === iface_1.MethodNames.Batch || methodName === iface_1.MethodNames.BatchAll) {
            return this.getBatchTransactionBuilder();
        }
        else {
            throw new sdk_core_1.NotSupported('Transaction cannot be parsed or has an unsupported transaction type');
        }
    }
}
exports.TransactionBuilderFactory = TransactionBuilderFactory;
//# sourceMappingURL=data:application/json;base64,