"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAddress = exports.isStakeBatchCallPayeeAccount = exports.isStakeBatchCallPayeeController = exports.isStakeBatchCallPayeeStash = exports.isStakeBatchCallPayeeStaked = exports.getDelegateAddress = exports.isAccountId = void 0;
/**
 * Returns true if value is of type AccountId, false otherwise.
 *
 * @param value The object to test.
 *
 * @return true if value is of type AccountId, false otherwise.
 */
function isAccountId(value) {
    return value.hasOwnProperty('id');
}
exports.isAccountId = isAccountId;
/**
 * Extracts the proxy address being added from an add proxy batch call or an add proxy call.

 * @param call A batched add proxy call or an add proxy call from which to extract the proxy
 * address.
 *
 * @return the proxy address being added from an add proxy batch call or an add proxy call.
 */
function getDelegateAddress(call) {
    if (isAccountId(call.delegate)) {
        return call.delegate.id;
    }
    else {
        return call.delegate;
    }
}
exports.getDelegateAddress = getDelegateAddress;
/**
 * Returns true if value is of type StakeBatchCallPayeeStaked, false otherwise.
 *
 * @param value The object to test.
 *
 * @return true if value is of type StakeBatchCallPayeeStaked, false otherwise.
 */
function isStakeBatchCallPayeeStaked(value) {
    return value.hasOwnProperty('staked');
}
exports.isStakeBatchCallPayeeStaked = isStakeBatchCallPayeeStaked;
/**
 * Returns true if value is of type StakeBatchCallPayeeStash, false otherwise.
 *
 * @param value The object to test.
 *
 * @return true if value is of type StakeBatchCallPayeeStash, false otherwise.
 */
function isStakeBatchCallPayeeStash(value) {
    return value.hasOwnProperty('stash');
}
exports.isStakeBatchCallPayeeStash = isStakeBatchCallPayeeStash;
/**
 * Returns true if value is of type StakeBatchCallPayeeController, false otherwise.
 *
 * @param value The object to test.
 *
 * @return true if value is of type StakeBatchCallPayeeController, false otherwise.
 */
function isStakeBatchCallPayeeController(value) {
    return value.hasOwnProperty('controller');
}
exports.isStakeBatchCallPayeeController = isStakeBatchCallPayeeController;
/**
 * Returns true if value is of type StakeBatchCallPayeeAccount, false otherwise.
 *
 * @param value The object to test.
 *
 * @return true if value is of type StakeBatchCallPayeeAccount, false otherwise.
 */
function isStakeBatchCallPayeeAccount(value) {
    return (value.account !== undefined &&
        value.account !== null);
}
exports.isStakeBatchCallPayeeAccount = isStakeBatchCallPayeeAccount;
/**
 * Extracts the proxy address being added from ProxyArgs.

 * @param args the ProxyArgs object from which to extract the proxy address.
 *
 * @return the proxy address being added.
 */
function getAddress(args) {
    if (isAccountId(args.real)) {
        return args.real.id;
    }
    else {
        return args.real;
    }
}
exports.getAddress = getAddress;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWZhY2VfdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2lmYWNlX3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQVlBOzs7Ozs7R0FNRztBQUNILFNBQWdCLFdBQVcsQ0FBQyxLQUF5QjtJQUNuRCxPQUFPLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDcEMsQ0FBQztBQUZELGtDQUVDO0FBRUQ7Ozs7Ozs7R0FPRztBQUNILFNBQWdCLGtCQUFrQixDQUFDLElBQTBDO0lBQzNFLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUM5QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO0tBQ3pCO1NBQU07UUFDTCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7S0FDdEI7QUFDSCxDQUFDO0FBTkQsZ0RBTUM7QUFFRDs7Ozs7O0dBTUc7QUFDSCxTQUFnQiwyQkFBMkIsQ0FBQyxLQUEwQjtJQUNwRSxPQUFRLEtBQW1DLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3ZFLENBQUM7QUFGRCxrRUFFQztBQUVEOzs7Ozs7R0FNRztBQUNILFNBQWdCLDBCQUEwQixDQUFDLEtBQTBCO0lBQ25FLE9BQVEsS0FBa0MsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDckUsQ0FBQztBQUZELGdFQUVDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsK0JBQStCLENBQUMsS0FBMEI7SUFDeEUsT0FBUSxLQUF1QyxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUMvRSxDQUFDO0FBRkQsMEVBRUM7QUFFRDs7Ozs7O0dBTUc7QUFDSCxTQUFnQiw0QkFBNEIsQ0FBQyxLQUEwQjtJQUNyRSxPQUFPLENBQ0osS0FBb0MsQ0FBQyxPQUFPLEtBQUssU0FBUztRQUMxRCxLQUFvQyxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQ3ZELENBQUM7QUFDSixDQUFDO0FBTEQsb0VBS0M7QUFFRDs7Ozs7O0dBTUc7QUFDSCxTQUFnQixVQUFVLENBQUMsSUFBZTtJQUN4QyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDMUIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztLQUNyQjtTQUFNO1FBQ0wsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0tBQ2xCO0FBQ0gsQ0FBQztBQU5ELGdDQU1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWNjb3VudElkLFxuICBBZGRQcm94eUFyZ3MsXG4gIEFkZFByb3h5QmF0Y2hDYWxsQXJncyxcbiAgU3Rha2VCYXRjaENhbGxQYXllZSxcbiAgU3Rha2VCYXRjaENhbGxQYXllZUFjY291bnQsXG4gIFN0YWtlQmF0Y2hDYWxsUGF5ZWVDb250cm9sbGVyLFxuICBTdGFrZUJhdGNoQ2FsbFBheWVlU3Rha2VkLFxuICBTdGFrZUJhdGNoQ2FsbFBheWVlU3Rhc2gsXG4gIFByb3h5QXJncyxcbn0gZnJvbSAnLi9pZmFjZSc7XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHZhbHVlIGlzIG9mIHR5cGUgQWNjb3VudElkLCBmYWxzZSBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHZhbHVlIFRoZSBvYmplY3QgdG8gdGVzdC5cbiAqXG4gKiBAcmV0dXJuIHRydWUgaWYgdmFsdWUgaXMgb2YgdHlwZSBBY2NvdW50SWQsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQWNjb3VudElkKHZhbHVlOiBzdHJpbmcgfCBBY2NvdW50SWQpOiB2YWx1ZSBpcyBBY2NvdW50SWQge1xuICByZXR1cm4gdmFsdWUuaGFzT3duUHJvcGVydHkoJ2lkJyk7XG59XG5cbi8qKlxuICogRXh0cmFjdHMgdGhlIHByb3h5IGFkZHJlc3MgYmVpbmcgYWRkZWQgZnJvbSBhbiBhZGQgcHJveHkgYmF0Y2ggY2FsbCBvciBhbiBhZGQgcHJveHkgY2FsbC5cblxuICogQHBhcmFtIGNhbGwgQSBiYXRjaGVkIGFkZCBwcm94eSBjYWxsIG9yIGFuIGFkZCBwcm94eSBjYWxsIGZyb20gd2hpY2ggdG8gZXh0cmFjdCB0aGUgcHJveHlcbiAqIGFkZHJlc3MuXG4gKlxuICogQHJldHVybiB0aGUgcHJveHkgYWRkcmVzcyBiZWluZyBhZGRlZCBmcm9tIGFuIGFkZCBwcm94eSBiYXRjaCBjYWxsIG9yIGFuIGFkZCBwcm94eSBjYWxsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVsZWdhdGVBZGRyZXNzKGNhbGw6IEFkZFByb3h5QmF0Y2hDYWxsQXJncyB8IEFkZFByb3h5QXJncyk6IHN0cmluZyB7XG4gIGlmIChpc0FjY291bnRJZChjYWxsLmRlbGVnYXRlKSkge1xuICAgIHJldHVybiBjYWxsLmRlbGVnYXRlLmlkO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjYWxsLmRlbGVnYXRlO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHZhbHVlIGlzIG9mIHR5cGUgU3Rha2VCYXRjaENhbGxQYXllZVN0YWtlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSBUaGUgb2JqZWN0IHRvIHRlc3QuXG4gKlxuICogQHJldHVybiB0cnVlIGlmIHZhbHVlIGlzIG9mIHR5cGUgU3Rha2VCYXRjaENhbGxQYXllZVN0YWtlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTdGFrZUJhdGNoQ2FsbFBheWVlU3Rha2VkKHZhbHVlOiBTdGFrZUJhdGNoQ2FsbFBheWVlKTogdmFsdWUgaXMgU3Rha2VCYXRjaENhbGxQYXllZVN0YWtlZCB7XG4gIHJldHVybiAodmFsdWUgYXMgU3Rha2VCYXRjaENhbGxQYXllZVN0YWtlZCkuaGFzT3duUHJvcGVydHkoJ3N0YWtlZCcpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB2YWx1ZSBpcyBvZiB0eXBlIFN0YWtlQmF0Y2hDYWxsUGF5ZWVTdGFzaCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSBUaGUgb2JqZWN0IHRvIHRlc3QuXG4gKlxuICogQHJldHVybiB0cnVlIGlmIHZhbHVlIGlzIG9mIHR5cGUgU3Rha2VCYXRjaENhbGxQYXllZVN0YXNoLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N0YWtlQmF0Y2hDYWxsUGF5ZWVTdGFzaCh2YWx1ZTogU3Rha2VCYXRjaENhbGxQYXllZSk6IHZhbHVlIGlzIFN0YWtlQmF0Y2hDYWxsUGF5ZWVTdGFzaCB7XG4gIHJldHVybiAodmFsdWUgYXMgU3Rha2VCYXRjaENhbGxQYXllZVN0YXNoKS5oYXNPd25Qcm9wZXJ0eSgnc3Rhc2gnKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdmFsdWUgaXMgb2YgdHlwZSBTdGFrZUJhdGNoQ2FsbFBheWVlQ29udHJvbGxlciwgZmFsc2Ugb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSBUaGUgb2JqZWN0IHRvIHRlc3QuXG4gKlxuICogQHJldHVybiB0cnVlIGlmIHZhbHVlIGlzIG9mIHR5cGUgU3Rha2VCYXRjaENhbGxQYXllZUNvbnRyb2xsZXIsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3Rha2VCYXRjaENhbGxQYXllZUNvbnRyb2xsZXIodmFsdWU6IFN0YWtlQmF0Y2hDYWxsUGF5ZWUpOiB2YWx1ZSBpcyBTdGFrZUJhdGNoQ2FsbFBheWVlQ29udHJvbGxlciB7XG4gIHJldHVybiAodmFsdWUgYXMgU3Rha2VCYXRjaENhbGxQYXllZUNvbnRyb2xsZXIpLmhhc093blByb3BlcnR5KCdjb250cm9sbGVyJyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHZhbHVlIGlzIG9mIHR5cGUgU3Rha2VCYXRjaENhbGxQYXllZUFjY291bnQsIGZhbHNlIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgVGhlIG9iamVjdCB0byB0ZXN0LlxuICpcbiAqIEByZXR1cm4gdHJ1ZSBpZiB2YWx1ZSBpcyBvZiB0eXBlIFN0YWtlQmF0Y2hDYWxsUGF5ZWVBY2NvdW50LCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N0YWtlQmF0Y2hDYWxsUGF5ZWVBY2NvdW50KHZhbHVlOiBTdGFrZUJhdGNoQ2FsbFBheWVlKTogdmFsdWUgaXMgU3Rha2VCYXRjaENhbGxQYXllZUFjY291bnQge1xuICByZXR1cm4gKFxuICAgICh2YWx1ZSBhcyBTdGFrZUJhdGNoQ2FsbFBheWVlQWNjb3VudCkuYWNjb3VudCAhPT0gdW5kZWZpbmVkICYmXG4gICAgKHZhbHVlIGFzIFN0YWtlQmF0Y2hDYWxsUGF5ZWVBY2NvdW50KS5hY2NvdW50ICE9PSBudWxsXG4gICk7XG59XG5cbi8qKlxuICogRXh0cmFjdHMgdGhlIHByb3h5IGFkZHJlc3MgYmVpbmcgYWRkZWQgZnJvbSBQcm94eUFyZ3MuXG5cbiAqIEBwYXJhbSBhcmdzIHRoZSBQcm94eUFyZ3Mgb2JqZWN0IGZyb20gd2hpY2ggdG8gZXh0cmFjdCB0aGUgcHJveHkgYWRkcmVzcy5cbiAqXG4gKiBAcmV0dXJuIHRoZSBwcm94eSBhZGRyZXNzIGJlaW5nIGFkZGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWRkcmVzcyhhcmdzOiBQcm94eUFyZ3MpOiBzdHJpbmcge1xuICBpZiAoaXNBY2NvdW50SWQoYXJncy5yZWFsKSkge1xuICAgIHJldHVybiBhcmdzLnJlYWwuaWQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGFyZ3MucmVhbDtcbiAgfVxufVxuIl19