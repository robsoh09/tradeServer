"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dot = exports.DEFAULT_SCAN_FACTOR = void 0;
const _ = __importStar(require("lodash"));
const sdk_core_1 = require("@bitgo/sdk-core");
const statics_1 = require("@bitgo/statics");
const lib_1 = require("./lib");
const api_1 = require("@polkadot/api");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const sdk_lib_mpc_1 = require("@bitgo/sdk-lib-mpc");
exports.DEFAULT_SCAN_FACTOR = 20; // default number of receive addresses to scan for funds
const dotUtils = lib_1.Utils.default;
class Dot extends sdk_core_1.BaseCoin {
    constructor(bitgo, staticsCoin) {
        super(bitgo);
        this.MAX_VALIDITY_DURATION = 2400;
        this.SWEEP_TXN_DURATION = 64;
        if (!staticsCoin) {
            throw new Error('missing required constructor parameter staticsCoin');
        }
        this._staticsCoin = staticsCoin;
    }
    static createInstance(bitgo, staticsCoin) {
        return new Dot(bitgo, staticsCoin);
    }
    getChain() {
        return 'dot';
    }
    getBaseChain() {
        return 'dot';
    }
    getFamily() {
        return 'dot';
    }
    getFullName() {
        return 'Polkadot';
    }
    getBaseFactor() {
        return Math.pow(10, this._staticsCoin.decimalPlaces);
    }
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    valuelessTransferAllowed() {
        return true;
    }
    /** @inheritDoc */
    supportsTss() {
        return true;
    }
    getMPCAlgorithm() {
        return 'eddsa';
    }
    allowsAccountConsolidations() {
        return true;
    }
    /**
     * Generate ed25519 key pair
     *
     * @param seed
     * @returns {Object} object with generated pub, prv
     */
    generateKeyPair(seed) {
        const keyPair = seed ? dotUtils.keyPairFromSeed(new Uint8Array(seed)) : new lib_1.KeyPair();
        const keys = keyPair.getKeys();
        if (!keys.prv) {
            throw new Error('Missing prv in key generation.');
        }
        return {
            pub: keys.pub,
            prv: keys.prv,
        };
    }
    /**
     * Return boolean indicating whether input is valid public key for the coin.
     *
     * @param {String} pub the pub to be checked
     * @returns {Boolean} is it valid?
     */
    isValidPub(pub) {
        return dotUtils.isValidPublicKey(pub);
    }
    /**
     * Return boolean indicating whether the supplied private key is a valid dot private key
     *
     * @param {String} prv the prv to be checked
     * @returns {Boolean} is it valid?
     */
    isValidPrv(prv) {
        return dotUtils.isValidPrivateKey(prv);
    }
    /**
     * Return boolean indicating whether input is valid public key for the coin
     *
     * @param {String} address the pub to be checked
     * @returns {Boolean} is it valid?
     */
    isValidAddress(address) {
        return dotUtils.isValidAddress(address);
    }
    /**
     * Sign message with private key
     *
     * @param key
     * @param message
     * @return {Buffer} A signature over the given message using the given key
     */
    async signMessage(key, message) {
        const msg = Buffer.isBuffer(message) ? message.toString('utf8') : message;
        // reconstitute keys and sign
        return Buffer.from(new lib_1.KeyPair({ prv: key.prv }).signMessage(msg));
    }
    /**
     * Explain/parse transaction
     * @param unsignedTransaction
     */
    async explainTransaction(unsignedTransaction) {
        var _a, _b;
        let outputAmount = 0;
        unsignedTransaction.parsedTx.outputs.forEach((o) => {
            outputAmount += parseInt(o.valueString, 10);
        });
        const explanationResult = {
            displayOrder: [
                'outputAmount',
                'changeAmount',
                'outputs',
                'changeOutputs',
                'fee',
                'type',
                'sequenceId',
                'id',
                'blockNumber',
            ],
            sequenceId: unsignedTransaction.parsedTx.sequenceId,
            fee: (_a = unsignedTransaction.feeInfo) === null || _a === void 0 ? void 0 : _a.feeString,
            id: unsignedTransaction.parsedTx.id,
            type: unsignedTransaction.parsedTx.type,
            outputs: unsignedTransaction.parsedTx.outputs,
            blockNumber: (_b = unsignedTransaction.coinSpecific) === null || _b === void 0 ? void 0 : _b.blockNumber,
            outputAmount: outputAmount,
            changeOutputs: [],
            changeAmount: '0',
        };
        return explanationResult;
    }
    verifySignTransactionParams(params) {
        const prv = params.prv;
        const txHex = params.txPrebuild.txHex;
        if (!txHex) {
            throw new Error('missing txPrebuild parameter');
        }
        if (!_.isString(txHex)) {
            throw new Error(`txPrebuild must be an object, got type ${typeof txHex}`);
        }
        if (!prv) {
            throw new Error('missing prv parameter to sign transaction');
        }
        if (!_.isString(prv)) {
            throw new Error(`prv must be a string, got type ${typeof prv}`);
        }
        if (!_.has(params, 'pubs')) {
            throw new Error('missing public key parameter to sign transaction');
        }
        return { txHex, prv };
    }
    /**
     * Assemble keychain and half-sign prebuilt transaction
     *
     * @param params
     * @param params.txPrebuild {TransactionPrebuild} prebuild object returned by platform
     * @param params.prv {String} user prv
     * @returns {Promise<SignedTransaction>}
     */
    async signTransaction(params) {
        const { txHex, prv } = this.verifySignTransactionParams(params);
        const factory = this.getBuilder();
        const txBuilder = factory.from(txHex);
        const keyPair = new lib_1.KeyPair({ prv: prv });
        const { referenceBlock, blockNumber, transactionVersion, sender } = params.txPrebuild.transaction;
        txBuilder
            .validity({ firstValid: blockNumber, maxDuration: this.MAX_VALIDITY_DURATION })
            .referenceBlock(referenceBlock)
            .version(transactionVersion)
            .sender({ address: sender })
            .sign({ key: keyPair.getKeys().prv });
        const transaction = await txBuilder.build();
        if (!transaction) {
            throw new Error('Invalid transaction');
        }
        const signedTxHex = transaction.toBroadcastFormat();
        return { txHex: signedTxHex };
    }
    async getInitializedNodeAPI() {
        if (!Dot.nodeApiInitialized) {
            const wsProvider = new api_1.WsProvider(sdk_core_1.Environments[this.bitgo.getEnv()].dotNodeUrls);
            Dot.API = await api_1.ApiPromise.create({ provider: wsProvider });
            Dot.nodeApiInitialized = true;
        }
        return Dot.API;
    }
    async getAccountInfo(walletAddr) {
        const api = await this.getInitializedNodeAPI();
        const { nonce, data: balance } = await api.query.system.account(walletAddr);
        return { nonce: nonce.toNumber(), freeBalance: balance.free.toNumber() };
    }
    async getHeaderInfo() {
        const api = await this.getInitializedNodeAPI();
        const { number, hash } = await api.rpc.chain.getHeader();
        return { headerNumber: number.toNumber(), headerHash: hash.toString() };
    }
    /**
     *
     * Estimate the fee of the transaction
     *
     * @param {string} destAddr destination wallet address
     * @param {string} srcAddr source wallet address
     * @param {string} amount amount to transfer
     * @returns {number} the estimated fee the transaction will cost
     *
     * @see https://polkadot.js.org/docs/api/cookbook/tx#how-do-i-estimate-the-transaction-fees
     */
    async getFee(destAddr, srcAddr, amount) {
        const api = await this.getInitializedNodeAPI();
        const info = await api.tx.balances.transferAllowDeath(destAddr, amount).paymentInfo(srcAddr);
        return info.partialFee.toNumber();
    }
    async getMaterial() {
        const api = await this.getInitializedNodeAPI();
        return {
            genesisHash: api.genesisHash.toString(),
            chainName: api.runtimeChain.toString(),
            specName: api.runtimeVersion.specName.toString(),
            specVersion: api.runtimeVersion.specVersion.toNumber(),
            txVersion: api.runtimeVersion.transactionVersion.toNumber(),
            metadata: api.runtimeMetadata.toHex(),
        };
    }
    /**
     * Builds a funds recovery transaction without BitGo
     * @param {MPCRecoveryOptions} params parameters needed to construct and
     * (maybe) sign the transaction
     *
     * @returns {MPCTx} the serialized transaction hex string and index
     * of the address being swept
     */
    async recover(params) {
        if (!params.bitgoKey) {
            throw new Error('missing bitgoKey');
        }
        if (!params.recoveryDestination || !this.isValidAddress(params.recoveryDestination)) {
            throw new Error('invalid recoveryDestination');
        }
        const bitgoKey = params.bitgoKey.replace(/\s/g, '');
        const isUnsignedSweep = !params.userKey && !params.backupKey && !params.walletPassphrase;
        const MPC = await sdk_core_1.EDDSAMethods.getInitializedMpcInstance();
        const index = params.index || 0;
        const currPath = params.seed ? (0, sdk_lib_mpc_1.getDerivationPath)(params.seed) + `/${index}` : `m/${index}`;
        const accountId = MPC.deriveUnhardened(bitgoKey, currPath).slice(0, 64);
        const senderAddr = this.getAddressFromPublicKey(accountId);
        const { nonce, freeBalance } = await this.getAccountInfo(senderAddr);
        const destAddr = params.recoveryDestination;
        const amount = freeBalance;
        const partialFee = await this.getFee(destAddr, senderAddr, amount);
        const value = new bignumber_js_1.default(freeBalance).minus(new bignumber_js_1.default(partialFee));
        if (value.isLessThanOrEqualTo(0)) {
            throw new Error('Did not find address with funds to recover');
        }
        // first build the unsigned txn
        const { headerNumber, headerHash } = await this.getHeaderInfo();
        const material = await this.getMaterial();
        const validityWindow = { firstValid: headerNumber, maxDuration: this.MAX_VALIDITY_DURATION };
        const txnBuilder = this.getBuilder().getTransferBuilder().material(material);
        txnBuilder
            .sweep(false)
            .to({ address: params.recoveryDestination })
            .sender({ address: senderAddr })
            .validity(validityWindow)
            .referenceBlock(headerHash)
            .sequenceId({ name: 'Nonce', keyword: 'nonce', value: nonce })
            .fee({ amount: 0, type: 'tip' });
        const unsignedTransaction = (await txnBuilder.build());
        let serializedTx = unsignedTransaction.toBroadcastFormat();
        if (!isUnsignedSweep) {
            if (!params.userKey) {
                throw new Error('missing userKey');
            }
            if (!params.backupKey) {
                throw new Error('missing backupKey');
            }
            if (!params.walletPassphrase) {
                throw new Error('missing wallet passphrase');
            }
            // Clean up whitespace from entered values
            const userKey = params.userKey.replace(/\s/g, '');
            const backupKey = params.backupKey.replace(/\s/g, '');
            // Decrypt private keys from KeyCard values
            let userPrv;
            try {
                userPrv = this.bitgo.decrypt({
                    input: userKey,
                    password: params.walletPassphrase,
                });
            }
            catch (e) {
                throw new Error(`Error decrypting user keychain: ${e.message}`);
            }
            /** TODO BG-52419 Implement Codec for parsing */
            const userSigningMaterial = JSON.parse(userPrv);
            let backupPrv;
            try {
                backupPrv = this.bitgo.decrypt({
                    input: backupKey,
                    password: params.walletPassphrase,
                });
            }
            catch (e) {
                throw new Error(`Error decrypting backup keychain: ${e.message}`);
            }
            const backupSigningMaterial = JSON.parse(backupPrv);
            // add signature
            const signatureHex = await sdk_core_1.EDDSAMethods.getTSSSignature(userSigningMaterial, backupSigningMaterial, currPath, unsignedTransaction);
            const dotKeyPair = new lib_1.KeyPair({ pub: accountId });
            txnBuilder.addSignature({ pub: dotKeyPair.getKeys().pub }, signatureHex);
            const signedTransaction = await txnBuilder.build();
            serializedTx = signedTransaction.toBroadcastFormat();
        }
        else {
            const value = new bignumber_js_1.default(freeBalance);
            const walletCoin = this.getChain();
            const inputs = [
                {
                    address: unsignedTransaction.inputs[0].address,
                    valueString: value.toString(),
                    value: value.toNumber(),
                },
            ];
            const outputs = [
                {
                    address: unsignedTransaction.outputs[0].address,
                    valueString: value.toString(),
                    coinName: walletCoin,
                },
            ];
            const spendAmount = value.toString();
            const parsedTx = { inputs: inputs, outputs: outputs, spendAmount: spendAmount, type: '' };
            const feeInfo = { fee: 0, feeString: '0' };
            const transaction = {
                serializedTx: serializedTx,
                scanIndex: index,
                coin: walletCoin,
                signableHex: unsignedTransaction.signablePayload.toString('hex'),
                derivationPath: currPath,
                parsedTx: parsedTx,
                feeInfo: feeInfo,
                coinSpecific: { ...validityWindow, commonKeychain: bitgoKey },
            };
            const unsignedTx = { unsignedTx: transaction, signatureShares: [] };
            const transactions = [unsignedTx];
            const txRequest = {
                transactions: transactions,
                walletCoin: walletCoin,
            };
            const txRequests = { txRequests: [txRequest] };
            return txRequests;
        }
        const transaction = { serializedTx: serializedTx, scanIndex: index };
        return transaction;
    }
    /**
     * Builds native DOT recoveries of receive addresses in batch without BitGo.
     * Funds will be recovered to base address first. You need to initiate another sweep txn after that.
     *
     * @param {MPCConsolidationRecoveryOptions} params - options for consolidation recovery.
     * @param {string} [params.startingScanIndex] - receive address index to start scanning from. default to 1 (inclusive).
     * @param {string} [params.endingScanIndex] - receive address index to end scanning at. default to startingScanIndex + 20 (exclusive).
     */
    async recoverConsolidations(params) {
        const isUnsignedSweep = !params.userKey && !params.backupKey && !params.walletPassphrase;
        const startIdx = params.startingScanIndex || 1;
        const endIdx = params.endingScanIndex || startIdx + exports.DEFAULT_SCAN_FACTOR;
        if (startIdx < 1 || endIdx <= startIdx || endIdx - startIdx > 10 * exports.DEFAULT_SCAN_FACTOR) {
            throw new Error(`Invalid starting or ending index to scan for addresses. startingScanIndex: ${startIdx}, endingScanIndex: ${endIdx}.`);
        }
        const bitgoKey = params.bitgoKey.replace(/\s/g, '');
        const MPC = await sdk_core_1.EDDSAMethods.getInitializedMpcInstance();
        const baseIndex = 0;
        const basePath = params.seed ? (0, sdk_lib_mpc_1.getDerivationPath)(params.seed) + `/${baseIndex}` : `m/${baseIndex}`;
        const accountId = MPC.deriveUnhardened(bitgoKey, basePath).slice(0, 64);
        const baseAddress = this.getAddressFromPublicKey(accountId);
        const consolidationTransactions = [];
        let lastScanIndex = startIdx;
        for (let i = startIdx; i < endIdx; i++) {
            const recoverParams = {
                userKey: params.userKey,
                backupKey: params.backupKey,
                bitgoKey: params.bitgoKey,
                walletPassphrase: params.walletPassphrase,
                recoveryDestination: baseAddress,
                seed: params.seed,
                index: i,
            };
            let recoveryTransaction;
            try {
                recoveryTransaction = await this.recover(recoverParams);
            }
            catch (e) {
                if (e.message === 'Did not find address with funds to recover') {
                    lastScanIndex = i;
                    continue;
                }
                throw e;
            }
            if (isUnsignedSweep) {
                consolidationTransactions.push(recoveryTransaction.txRequests[0]);
            }
            else {
                consolidationTransactions.push(recoveryTransaction);
            }
            lastScanIndex = i;
        }
        if (consolidationTransactions.length == 0) {
            throw new Error('Did not find an address with funds to recover');
        }
        if (isUnsignedSweep) {
            // lastScanIndex will be used to inform user the last address index scanned for available funds (so they can
            // appropriately adjust the scan range on the next iteration of consolidation recoveries). In the case of unsigned
            // sweep consolidations, this lastScanIndex will be provided in the coinSpecific of the last txn made.
            const lastTransactionCoinSpecific = {
                firstValid: consolidationTransactions[consolidationTransactions.length - 1].transactions[0].unsignedTx.coinSpecific
                    .firstValid,
                maxDuration: consolidationTransactions[consolidationTransactions.length - 1].transactions[0].unsignedTx.coinSpecific
                    .maxDuration,
                commonKeychain: consolidationTransactions[consolidationTransactions.length - 1].transactions[0].unsignedTx.coinSpecific
                    .commonKeychain,
                lastScanIndex: lastScanIndex,
            };
            consolidationTransactions[consolidationTransactions.length - 1].transactions[0].unsignedTx.coinSpecific =
                lastTransactionCoinSpecific;
            const consolidationSweepTransactions = { txRequests: consolidationTransactions };
            return consolidationSweepTransactions;
        }
        return { transactions: consolidationTransactions, lastScanIndex };
    }
    /**
     * Creates funds sweep recovery transaction(s) without BitGo
     *
     * @param {MPCSweepRecoveryOptions} params parameters needed to combine the signatures
     * and transactions to create broadcastable transactions
     *
     * @returns {MPCTx[]} array of the serialized transaction hex strings and indices
     * of the addresses being swept
     */
    async createBroadcastableSweepTransaction(params) {
        var _a, _b, _c, _d, _e;
        const req = params.signatureShares;
        const broadcastableTransactions = [];
        let lastScanIndex = 0;
        for (let i = 0; i < req.length; i++) {
            const MPC = await sdk_core_1.EDDSAMethods.getInitializedMpcInstance();
            const transaction = req[i].txRequest.transactions[0].unsignedTx;
            if (!req[i].ovc || !req[i].ovc[0].eddsaSignature) {
                throw new Error('Missing signature(s)');
            }
            const signature = req[i].ovc[0].eddsaSignature;
            if (!transaction.signableHex) {
                throw new Error('Missing signable hex');
            }
            const messageBuffer = Buffer.from(transaction.signableHex, 'hex');
            const result = MPC.verify(messageBuffer, signature);
            if (!result) {
                throw new Error('Invalid signature');
            }
            const signatureHex = Buffer.concat([Buffer.from(signature.R, 'hex'), Buffer.from(signature.sigma, 'hex')]);
            if (!transaction.coinSpecific ||
                !((_a = transaction.coinSpecific) === null || _a === void 0 ? void 0 : _a.firstValid) ||
                !((_b = transaction.coinSpecific) === null || _b === void 0 ? void 0 : _b.maxDuration)) {
                throw new Error('missing validity window');
            }
            const validityWindow = {
                firstValid: (_c = transaction.coinSpecific) === null || _c === void 0 ? void 0 : _c.firstValid,
                maxDuration: (_d = transaction.coinSpecific) === null || _d === void 0 ? void 0 : _d.maxDuration,
            };
            const material = await this.getMaterial();
            if (!((_e = transaction.coinSpecific) === null || _e === void 0 ? void 0 : _e.commonKeychain)) {
                throw new Error('Missing common keychain');
            }
            const commonKeychain = transaction.coinSpecific.commonKeychain;
            if (!transaction.derivationPath) {
                throw new Error('Missing derivation path');
            }
            const derivationPath = transaction.derivationPath;
            const accountId = MPC.deriveUnhardened(commonKeychain, derivationPath).slice(0, 64);
            const senderAddr = this.getAddressFromPublicKey(accountId);
            const txnBuilder = this.getBuilder()
                .material(material)
                .from(transaction.serializedTx)
                .sender({ address: senderAddr })
                .validity(validityWindow);
            const dotKeyPair = new lib_1.KeyPair({ pub: accountId });
            txnBuilder.addSignature({ pub: dotKeyPair.getKeys().pub }, signatureHex);
            const signedTransaction = await txnBuilder.build();
            const serializedTx = signedTransaction.toBroadcastFormat();
            broadcastableTransactions.push({
                serializedTx: serializedTx,
                scanIndex: transaction.scanIndex,
            });
            if (i === req.length - 1 && transaction.coinSpecific.lastScanIndex) {
                lastScanIndex = transaction.coinSpecific.lastScanIndex;
            }
        }
        return { transactions: broadcastableTransactions, lastScanIndex };
    }
    async parseTransaction(params) {
        return {};
    }
    async isWalletAddress(params) {
        throw new sdk_core_1.MethodNotImplementedError();
    }
    async verifyTransaction(params) {
        return true;
    }
    getAddressFromPublicKey(Pubkey) {
        return new lib_1.KeyPair({ pub: Pubkey }).getAddress(lib_1.Utils.default.getAddressFormat(this.getChain()));
    }
    getBuilder() {
        return new lib_1.TransactionBuilderFactory(statics_1.coins.get(this.getChain()));
    }
}
exports.Dot = Dot;
Dot.initialized = false;
Dot.nodeApiInitialized = false;
//# sourceMappingURL=data:application/json;base64,