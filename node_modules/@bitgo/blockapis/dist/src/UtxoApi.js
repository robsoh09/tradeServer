"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchTransactionSpends = exports.fetchInputs = void 0;
const utxolib = require("@bitgo/utxo-lib");
const BaseHttpClient_1 = require("./BaseHttpClient");
/**
 * Helper to efficiently fetch output data.
 * Typical we can query output data for all outputs of a transaction, so we first fetch all
 * the output list via `f` and then pick the output data from the result.
 * @param outpoints
 * @param f - maps txid to a list of outputs with type TOut
 * @return list of TOut corresponding to outputs
 */
async function mapInputs(outpoints, f) {
    const txids = [...new Set(outpoints.map((i) => i.txid))];
    const txMap = new Map(await (0, BaseHttpClient_1.mapSeries)(txids, async (txid) => [txid, await f(txid)]));
    return outpoints.map((i) => {
        const arr = txMap.get(i.txid);
        if (arr) {
            if (i.vout in arr) {
                return arr[i.vout];
            }
            throw new Error(`could not find output ${i.vout}`);
        }
        throw new Error(`could not find tx ${i.txid}`);
    });
}
/**
 * Fetch transaction inputs from transaction input list
 * @param ins
 * @param api
 * @param network
 */
async function fetchInputs(ins, api, network) {
    return mapInputs(ins.map((i) => {
        if ('txid' in i) {
            return i;
        }
        return utxolib.bitgo.getOutputIdForInput(i);
    }), async (txid) => utxolib.bitgo.createTransactionFromHex(await api.getTransactionHex(txid), network).outs);
}
exports.fetchInputs = fetchInputs;
/**
 * Fetch transaction spend status outpoints.
 */
async function fetchTransactionSpends(outpoints, api) {
    return mapInputs(outpoints, async (txid) => await api.getTransactionSpends(txid));
}
exports.fetchTransactionSpends = fetchTransactionSpends;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXR4b0FwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9VdHhvQXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJDQUEyQztBQUMzQyxxREFBNkM7QUEyQzdDOzs7Ozs7O0dBT0c7QUFDSCxLQUFLLFVBQVUsU0FBUyxDQUN0QixTQUFxQyxFQUNyQyxDQUFvQztJQUVwQyxNQUFNLEtBQUssR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6RCxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLElBQUEsMEJBQVMsRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckYsT0FBTyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7UUFDekIsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsSUFBSSxHQUFHLEVBQUU7WUFDUCxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksR0FBRyxFQUFFO2dCQUNqQixPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDcEI7WUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUNwRDtRQUNELE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0ksS0FBSyxVQUFVLFdBQVcsQ0FDL0IsR0FBbUQsRUFDbkQsR0FBWSxFQUNaLE9BQXdCO0lBRXhCLE9BQU8sU0FBUyxDQUNkLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUE2QyxFQUFFLEVBQUU7UUFDeEQsSUFBSSxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQ2YsT0FBTyxDQUFDLENBQUM7U0FDVjtRQUNELE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QyxDQUFDLENBQUMsRUFDRixLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLHdCQUF3QixDQUFDLE1BQU0sR0FBRyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDeEcsQ0FBQztBQUNKLENBQUM7QUFkRCxrQ0FjQztBQUVEOztHQUVHO0FBQ0ksS0FBSyxVQUFVLHNCQUFzQixDQUMxQyxTQUFxQyxFQUNyQyxHQUFZO0lBRVosT0FBTyxTQUFTLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLE1BQU0sR0FBRyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDcEYsQ0FBQztBQUxELHdEQUtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdXR4b2xpYiBmcm9tICdAYml0Z28vdXR4by1saWInO1xuaW1wb3J0IHsgbWFwU2VyaWVzIH0gZnJvbSAnLi9CYXNlSHR0cENsaWVudCc7XG5pbXBvcnQgeyBUcmFuc2FjdGlvbkFwaSB9IGZyb20gJy4vVHJhbnNhY3Rpb25BcGknO1xuXG5leHBvcnQgdHlwZSBPdXRwdXRTcGVuZCA9XG4gIHwge1xuICAgICAgdHhpZDogc3RyaW5nO1xuICAgICAgdmluOiBudW1iZXI7XG4gICAgfVxuICB8IHsgdHhpZDogdW5kZWZpbmVkOyB2aW46IHVuZGVmaW5lZCB9O1xuXG5leHBvcnQgdHlwZSBUcmFuc2FjdGlvbklPID0ge1xuICBpbnB1dHM6IHsgYWRkcmVzczogc3RyaW5nIH1bXTtcbiAgb3V0cHV0czogeyBhZGRyZXNzOiBzdHJpbmcgfVtdO1xufTtcblxuLyoqXG4gKiBNZXRob2RzIHNwZWNpZmljIHRvIFVUWE8tYmFzZWQgYmxvY2tjaGFpbnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVdHhvQXBpIGV4dGVuZHMgVHJhbnNhY3Rpb25BcGkge1xuICAvKipcbiAgICogQHBhcmFtIHR4aWRcbiAgICogQHJldHVybiB0cmFuc2FjdGlvbiBpbnB1dHNcbiAgICovXG4gIGdldFRyYW5zYWN0aW9uSW5wdXRzKHR4aWQ6IHN0cmluZyk6IFByb21pc2U8dXR4b2xpYi5iaXRnby5VbnNwZW50W10+O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0gdHhpZFxuICAgKiBAcmV0dXJuIHRyYW5zYWN0aW9uIGlucHV0IGFuZCBvdXRwdXQgYWRkcmVzc2VzXG4gICAqL1xuICBnZXRUcmFuc2FjdGlvbklPKHR4aWQ6IHN0cmluZyk6IFByb21pc2U8VHJhbnNhY3Rpb25JTz47XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB0eGlkXG4gICAqL1xuICBnZXRUcmFuc2FjdGlvblNwZW5kcyh0eGlkOiBzdHJpbmcpOiBQcm9taXNlPE91dHB1dFNwZW5kW10+O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0gYWRkcmVzc1xuICAgKiBAcmV0dXJuIHVuc3BlbnQgb3V0cHV0cyBmb3IgYWRkcmVzc2VzXG4gICAqL1xuICBnZXRVbnNwZW50c0ZvckFkZHJlc3NlcyhhZGRyZXNzOiBzdHJpbmdbXSk6IFByb21pc2U8dXR4b2xpYi5iaXRnby5VbnNwZW50W10+O1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBlZmZpY2llbnRseSBmZXRjaCBvdXRwdXQgZGF0YS5cbiAqIFR5cGljYWwgd2UgY2FuIHF1ZXJ5IG91dHB1dCBkYXRhIGZvciBhbGwgb3V0cHV0cyBvZiBhIHRyYW5zYWN0aW9uLCBzbyB3ZSBmaXJzdCBmZXRjaCBhbGxcbiAqIHRoZSBvdXRwdXQgbGlzdCB2aWEgYGZgIGFuZCB0aGVuIHBpY2sgdGhlIG91dHB1dCBkYXRhIGZyb20gdGhlIHJlc3VsdC5cbiAqIEBwYXJhbSBvdXRwb2ludHNcbiAqIEBwYXJhbSBmIC0gbWFwcyB0eGlkIHRvIGEgbGlzdCBvZiBvdXRwdXRzIHdpdGggdHlwZSBUT3V0XG4gKiBAcmV0dXJuIGxpc3Qgb2YgVE91dCBjb3JyZXNwb25kaW5nIHRvIG91dHB1dHNcbiAqL1xuYXN5bmMgZnVuY3Rpb24gbWFwSW5wdXRzPFRPdXQ+KFxuICBvdXRwb2ludHM6IHV0eG9saWIuYml0Z28uVHhPdXRQb2ludFtdLFxuICBmOiAodHhpZDogc3RyaW5nKSA9PiBQcm9taXNlPFRPdXRbXT5cbik6IFByb21pc2U8VE91dFtdPiB7XG4gIGNvbnN0IHR4aWRzID0gWy4uLm5ldyBTZXQob3V0cG9pbnRzLm1hcCgoaSkgPT4gaS50eGlkKSldO1xuICBjb25zdCB0eE1hcCA9IG5ldyBNYXAoYXdhaXQgbWFwU2VyaWVzKHR4aWRzLCBhc3luYyAodHhpZCkgPT4gW3R4aWQsIGF3YWl0IGYodHhpZCldKSk7XG4gIHJldHVybiBvdXRwb2ludHMubWFwKChpKSA9PiB7XG4gICAgY29uc3QgYXJyID0gdHhNYXAuZ2V0KGkudHhpZCk7XG4gICAgaWYgKGFycikge1xuICAgICAgaWYgKGkudm91dCBpbiBhcnIpIHtcbiAgICAgICAgcmV0dXJuIGFycltpLnZvdXRdO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBjb3VsZCBub3QgZmluZCBvdXRwdXQgJHtpLnZvdXR9YCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgY291bGQgbm90IGZpbmQgdHggJHtpLnR4aWR9YCk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEZldGNoIHRyYW5zYWN0aW9uIGlucHV0cyBmcm9tIHRyYW5zYWN0aW9uIGlucHV0IGxpc3RcbiAqIEBwYXJhbSBpbnNcbiAqIEBwYXJhbSBhcGlcbiAqIEBwYXJhbSBuZXR3b3JrXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaElucHV0cyhcbiAgaW5zOiB1dHhvbGliLlR4SW5wdXRbXSB8IHV0eG9saWIuYml0Z28uVHhPdXRQb2ludFtdLFxuICBhcGk6IFV0eG9BcGksXG4gIG5ldHdvcms6IHV0eG9saWIuTmV0d29ya1xuKTogUHJvbWlzZTx1dHhvbGliLlR4T3V0cHV0W10+IHtcbiAgcmV0dXJuIG1hcElucHV0cyhcbiAgICBpbnMubWFwKChpOiB1dHhvbGliLlR4SW5wdXQgfCB1dHhvbGliLmJpdGdvLlR4T3V0UG9pbnQpID0+IHtcbiAgICAgIGlmICgndHhpZCcgaW4gaSkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1dHhvbGliLmJpdGdvLmdldE91dHB1dElkRm9ySW5wdXQoaSk7XG4gICAgfSksXG4gICAgYXN5bmMgKHR4aWQpID0+IHV0eG9saWIuYml0Z28uY3JlYXRlVHJhbnNhY3Rpb25Gcm9tSGV4KGF3YWl0IGFwaS5nZXRUcmFuc2FjdGlvbkhleCh0eGlkKSwgbmV0d29yaykub3V0c1xuICApO1xufVxuXG4vKipcbiAqIEZldGNoIHRyYW5zYWN0aW9uIHNwZW5kIHN0YXR1cyBvdXRwb2ludHMuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaFRyYW5zYWN0aW9uU3BlbmRzKFxuICBvdXRwb2ludHM6IHV0eG9saWIuYml0Z28uVHhPdXRQb2ludFtdLFxuICBhcGk6IFV0eG9BcGlcbik6IFByb21pc2U8T3V0cHV0U3BlbmRbXT4ge1xuICByZXR1cm4gbWFwSW5wdXRzKG91dHBvaW50cywgYXN5bmMgKHR4aWQpID0+IGF3YWl0IGFwaS5nZXRUcmFuc2FjdGlvblNwZW5kcyh0eGlkKSk7XG59XG4iXX0=