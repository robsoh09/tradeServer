/// <reference types="node" />
import { Coin } from '@cosmjs/stargate';
import { CosmosUtils } from '@bitgo/abstract-cosmos';
import { DecodedTxRaw } from '@cosmjs/proto-signing';
import { Pubkey } from '@cosmjs/amino';
import { Any } from 'cosmjs-types/google/protobuf/any';
import { Hash } from 'crypto';
export declare class IslmUtils extends CosmosUtils {
    /** @inheritdoc */
    isValidAddress(address: string): boolean;
    /** @inheritdoc */
    isValidValidatorAddress(address: string): boolean;
    /** @inheritdoc */
    validateAmount(amount: Coin): void;
    /** @inheritdoc */
    getPublicKeyFromDecodedTx(decodedTx: DecodedTxRaw): string | undefined;
    /**
     * Decodes a single pubkey from ptotobuf `Any` into `Pubkey`.
     * @param {Any} pubkey
     * @returns {Pubkey} the Amino JSON representation (type/value wrapper) of the pubkey
     */
    decodePubkey(pubkey?: Any | null): Pubkey | null;
    /** @inheritdoc */
    getEncodedPubkey(pubkey: string): Any;
    /**
     * Takes a pubkey in the Amino JSON object style (type/value wrapper)
     * and convertes it into a protobuf `Any`.
     * @param {Pubkey} pubkey Amino JSON object style pubkey
     * @returns {Any} pubkey encoded as protobuf `Any`
     */
    encodePubkey(pubkey: Pubkey): Any;
    /**
     * Takes a public key as raw bytes and returns the Amino JSON
     * representation of it (type/value wrapper).
     * @param {Uint8Array} pubkey public key as raw bytes
     * @returns {Any} Amino JSON style pubkey
     */
    encodeEthSecp256k1Pubkey(pubkey: Uint8Array): Pubkey;
    /** @inheritdoc */
    getHashFunction(): Hash;
}
declare const islmUtils: CosmosUtils;
export default islmUtils;
//# sourceMappingURL=utils.d.ts.map