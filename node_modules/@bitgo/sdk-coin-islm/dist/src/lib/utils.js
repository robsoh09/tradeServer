"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IslmUtils = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const abstract_cosmos_1 = require("@bitgo/abstract-cosmos");
const constants = __importStar(require("./constants"));
const encoding_1 = require("@cosmjs/encoding");
const any_1 = require("cosmjs-types/google/protobuf/any");
const ethSecp256k1_1 = require("../../resources/types/ethSecp256k1");
const keccak_1 = __importDefault(require("keccak"));
class IslmUtils extends abstract_cosmos_1.CosmosUtils {
    /** @inheritdoc */
    isValidAddress(address) {
        return this.isValidCosmosLikeAddressWithMemoId(address, constants.accountAddressRegex);
    }
    /** @inheritdoc */
    isValidValidatorAddress(address) {
        return constants.validatorAddressRegex.test(address);
    }
    /** @inheritdoc */
    validateAmount(amount) {
        const amountBig = (0, bignumber_js_1.default)(amount.amount);
        if (amountBig.isLessThanOrEqualTo(0)) {
            throw new sdk_core_1.InvalidTransactionError('transactionBuilder: validateAmount: Invalid amount: ' + amount.amount);
        }
        if (!constants.validDenoms.find((denom) => denom === amount.denom)) {
            throw new sdk_core_1.InvalidTransactionError('transactionBuilder: validateAmount: Invalid denom: ' + amount.denom);
        }
    }
    /** @inheritdoc */
    getPublicKeyFromDecodedTx(decodedTx) {
        var _a, _b, _c, _d;
        const publicKeyUInt8Array = (_b = (_a = decodedTx.authInfo.signerInfos) === null || _a === void 0 ? void 0 : _a[0].publicKey) === null || _b === void 0 ? void 0 : _b.value;
        if (publicKeyUInt8Array) {
            return (0, encoding_1.toHex)((0, encoding_1.fromBase64)((_d = this.decodePubkey((_c = decodedTx.authInfo.signerInfos) === null || _c === void 0 ? void 0 : _c[0].publicKey)) === null || _d === void 0 ? void 0 : _d.value));
        }
        return undefined;
    }
    /**
     * Decodes a single pubkey from ptotobuf `Any` into `Pubkey`.
     * @param {Any} pubkey
     * @returns {Pubkey} the Amino JSON representation (type/value wrapper) of the pubkey
     */
    decodePubkey(pubkey) {
        if (!pubkey || !pubkey.value) {
            return null;
        }
        const { key } = ethSecp256k1_1.PubKey.decode(pubkey.value);
        return this.encodeEthSecp256k1Pubkey(key);
    }
    /** @inheritdoc */
    getEncodedPubkey(pubkey) {
        return this.encodePubkey(this.encodeEthSecp256k1Pubkey((0, encoding_1.fromHex)(pubkey)));
    }
    /**
     * Takes a pubkey in the Amino JSON object style (type/value wrapper)
     * and convertes it into a protobuf `Any`.
     * @param {Pubkey} pubkey Amino JSON object style pubkey
     * @returns {Any} pubkey encoded as protobuf `Any`
     */
    encodePubkey(pubkey) {
        const pubkeyProto = ethSecp256k1_1.PubKey.fromPartial({
            key: (0, encoding_1.fromBase64)(pubkey.value),
        });
        return any_1.Any.fromPartial({
            typeUrl: abstract_cosmos_1.PubKeyTypeUrl.ethSecp256k1,
            value: Uint8Array.from(ethSecp256k1_1.PubKey.encode(pubkeyProto).finish()),
        });
    }
    /**
     * Takes a public key as raw bytes and returns the Amino JSON
     * representation of it (type/value wrapper).
     * @param {Uint8Array} pubkey public key as raw bytes
     * @returns {Any} Amino JSON style pubkey
     */
    encodeEthSecp256k1Pubkey(pubkey) {
        if (pubkey.length !== 33 || (pubkey[0] !== 0x02 && pubkey[0] !== 0x03)) {
            throw new Error('Public key must be compressed ethSecp256k1, i.e. 33 bytes starting with 0x02 or 0x03');
        }
        return {
            type: abstract_cosmos_1.PubKeyType.ethSecp256k1,
            value: (0, encoding_1.toBase64)(pubkey),
        };
    }
    /** @inheritdoc */
    getHashFunction() {
        return (0, keccak_1.default)('keccak256');
    }
}
exports.IslmUtils = IslmUtils;
const islmUtils = new IslmUtils();
exports.default = islmUtils;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsOENBQTBEO0FBRTFELGdFQUFxQztBQUVyQyw0REFBZ0Y7QUFDaEYsdURBQXlDO0FBRXpDLCtDQUF3RTtBQUV4RSwwREFBdUQ7QUFDdkQscUVBQTREO0FBRTVELG9EQUE0QjtBQUU1QixNQUFhLFNBQVUsU0FBUSw2QkFBVztJQUN4QyxrQkFBa0I7SUFDbEIsY0FBYyxDQUFDLE9BQWU7UUFDNUIsT0FBTyxJQUFJLENBQUMsa0NBQWtDLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3pGLENBQUM7SUFFRCxrQkFBa0I7SUFDbEIsdUJBQXVCLENBQUMsT0FBZTtRQUNyQyxPQUFPLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVELGtCQUFrQjtJQUNsQixjQUFjLENBQUMsTUFBWTtRQUN6QixNQUFNLFNBQVMsR0FBRyxJQUFBLHNCQUFTLEVBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzNDLElBQUksU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3BDLE1BQU0sSUFBSSxrQ0FBdUIsQ0FBQyxzREFBc0QsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDM0c7UUFDRCxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssS0FBSyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDbEUsTUFBTSxJQUFJLGtDQUF1QixDQUFDLHFEQUFxRCxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN6RztJQUNILENBQUM7SUFFRCxrQkFBa0I7SUFDbEIseUJBQXlCLENBQUMsU0FBdUI7O1FBQy9DLE1BQU0sbUJBQW1CLEdBQUcsTUFBQSxNQUFBLFNBQVMsQ0FBQyxRQUFRLENBQUMsV0FBVywwQ0FBRyxDQUFDLEVBQUUsU0FBUywwQ0FBRSxLQUFLLENBQUM7UUFDakYsSUFBSSxtQkFBbUIsRUFBRTtZQUN2QixPQUFPLElBQUEsZ0JBQUssRUFBQyxJQUFBLHFCQUFVLEVBQUMsTUFBQSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQUEsU0FBUyxDQUFDLFFBQVEsQ0FBQyxXQUFXLDBDQUFHLENBQUMsRUFBRSxTQUFTLENBQUMsMENBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUNuRztRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsWUFBWSxDQUFDLE1BQW1CO1FBQzlCLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQzVCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcscUJBQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVDLE9BQU8sSUFBSSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRCxrQkFBa0I7SUFDbEIsZ0JBQWdCLENBQUMsTUFBYztRQUM3QixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLElBQUEsa0JBQU8sRUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsWUFBWSxDQUFDLE1BQWM7UUFDekIsTUFBTSxXQUFXLEdBQUcscUJBQU0sQ0FBQyxXQUFXLENBQUM7WUFDckMsR0FBRyxFQUFFLElBQUEscUJBQVUsRUFBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQzlCLENBQUMsQ0FBQztRQUNILE9BQU8sU0FBRyxDQUFDLFdBQVcsQ0FBQztZQUNyQixPQUFPLEVBQUUsK0JBQWEsQ0FBQyxZQUFZO1lBQ25DLEtBQUssRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLHFCQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQzVELENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILHdCQUF3QixDQUFDLE1BQWtCO1FBQ3pDLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsRUFBRTtZQUN0RSxNQUFNLElBQUksS0FBSyxDQUFDLHNGQUFzRixDQUFDLENBQUM7U0FDekc7UUFDRCxPQUFPO1lBQ0wsSUFBSSxFQUFFLDRCQUFVLENBQUMsWUFBWTtZQUM3QixLQUFLLEVBQUUsSUFBQSxtQkFBUSxFQUFDLE1BQU0sQ0FBQztTQUN4QixDQUFDO0lBQ0osQ0FBQztJQUVELGtCQUFrQjtJQUNsQixlQUFlO1FBQ2IsT0FBTyxJQUFBLGdCQUFNLEVBQUMsV0FBVyxDQUFDLENBQUM7SUFDN0IsQ0FBQztDQUNGO0FBckZELDhCQXFGQztBQUVELE1BQU0sU0FBUyxHQUFnQixJQUFJLFNBQVMsRUFBRSxDQUFDO0FBRS9DLGtCQUFlLFNBQVMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEludmFsaWRUcmFuc2FjdGlvbkVycm9yIH0gZnJvbSAnQGJpdGdvL3Nkay1jb3JlJztcbmltcG9ydCB7IENvaW4gfSBmcm9tICdAY29zbWpzL3N0YXJnYXRlJztcbmltcG9ydCBCaWdOdW1iZXIgZnJvbSAnYmlnbnVtYmVyLmpzJztcblxuaW1wb3J0IHsgQ29zbW9zVXRpbHMsIFB1YktleVR5cGUsIFB1YktleVR5cGVVcmwgfSBmcm9tICdAYml0Z28vYWJzdHJhY3QtY29zbW9zJztcbmltcG9ydCAqIGFzIGNvbnN0YW50cyBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBEZWNvZGVkVHhSYXcgfSBmcm9tICdAY29zbWpzL3Byb3RvLXNpZ25pbmcnO1xuaW1wb3J0IHsgZnJvbUJhc2U2NCwgdG9CYXNlNjQsIHRvSGV4LCBmcm9tSGV4IH0gZnJvbSAnQGNvc21qcy9lbmNvZGluZyc7XG5pbXBvcnQgeyBQdWJrZXkgfSBmcm9tICdAY29zbWpzL2FtaW5vJztcbmltcG9ydCB7IEFueSB9IGZyb20gJ2Nvc21qcy10eXBlcy9nb29nbGUvcHJvdG9idWYvYW55JztcbmltcG9ydCB7IFB1YktleSB9IGZyb20gJy4uLy4uL3Jlc291cmNlcy90eXBlcy9ldGhTZWNwMjU2azEnO1xuaW1wb3J0IHsgSGFzaCB9IGZyb20gJ2NyeXB0byc7XG5pbXBvcnQgS2VjY2FrIGZyb20gJ2tlY2Nhayc7XG5cbmV4cG9ydCBjbGFzcyBJc2xtVXRpbHMgZXh0ZW5kcyBDb3Ntb3NVdGlscyB7XG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICBpc1ZhbGlkQWRkcmVzcyhhZGRyZXNzOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkQ29zbW9zTGlrZUFkZHJlc3NXaXRoTWVtb0lkKGFkZHJlc3MsIGNvbnN0YW50cy5hY2NvdW50QWRkcmVzc1JlZ2V4KTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICBpc1ZhbGlkVmFsaWRhdG9yQWRkcmVzcyhhZGRyZXNzOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gY29uc3RhbnRzLnZhbGlkYXRvckFkZHJlc3NSZWdleC50ZXN0KGFkZHJlc3MpO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIHZhbGlkYXRlQW1vdW50KGFtb3VudDogQ29pbik6IHZvaWQge1xuICAgIGNvbnN0IGFtb3VudEJpZyA9IEJpZ051bWJlcihhbW91bnQuYW1vdW50KTtcbiAgICBpZiAoYW1vdW50QmlnLmlzTGVzc1RoYW5PckVxdWFsVG8oMCkpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkVHJhbnNhY3Rpb25FcnJvcigndHJhbnNhY3Rpb25CdWlsZGVyOiB2YWxpZGF0ZUFtb3VudDogSW52YWxpZCBhbW91bnQ6ICcgKyBhbW91bnQuYW1vdW50KTtcbiAgICB9XG4gICAgaWYgKCFjb25zdGFudHMudmFsaWREZW5vbXMuZmluZCgoZGVub20pID0+IGRlbm9tID09PSBhbW91bnQuZGVub20pKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZFRyYW5zYWN0aW9uRXJyb3IoJ3RyYW5zYWN0aW9uQnVpbGRlcjogdmFsaWRhdGVBbW91bnQ6IEludmFsaWQgZGVub206ICcgKyBhbW91bnQuZGVub20pO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICBnZXRQdWJsaWNLZXlGcm9tRGVjb2RlZFR4KGRlY29kZWRUeDogRGVjb2RlZFR4UmF3KTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCBwdWJsaWNLZXlVSW50OEFycmF5ID0gZGVjb2RlZFR4LmF1dGhJbmZvLnNpZ25lckluZm9zPy5bMF0ucHVibGljS2V5Py52YWx1ZTtcbiAgICBpZiAocHVibGljS2V5VUludDhBcnJheSkge1xuICAgICAgcmV0dXJuIHRvSGV4KGZyb21CYXNlNjQodGhpcy5kZWNvZGVQdWJrZXkoZGVjb2RlZFR4LmF1dGhJbmZvLnNpZ25lckluZm9zPy5bMF0ucHVibGljS2V5KT8udmFsdWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNvZGVzIGEgc2luZ2xlIHB1YmtleSBmcm9tIHB0b3RvYnVmIGBBbnlgIGludG8gYFB1YmtleWAuXG4gICAqIEBwYXJhbSB7QW55fSBwdWJrZXlcbiAgICogQHJldHVybnMge1B1YmtleX0gdGhlIEFtaW5vIEpTT04gcmVwcmVzZW50YXRpb24gKHR5cGUvdmFsdWUgd3JhcHBlcikgb2YgdGhlIHB1YmtleVxuICAgKi9cbiAgZGVjb2RlUHVia2V5KHB1YmtleT86IEFueSB8IG51bGwpOiBQdWJrZXkgfCBudWxsIHtcbiAgICBpZiAoIXB1YmtleSB8fCAhcHVia2V5LnZhbHVlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgeyBrZXkgfSA9IFB1YktleS5kZWNvZGUocHVia2V5LnZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5lbmNvZGVFdGhTZWNwMjU2azFQdWJrZXkoa2V5KTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICBnZXRFbmNvZGVkUHVia2V5KHB1YmtleTogc3RyaW5nKTogQW55IHtcbiAgICByZXR1cm4gdGhpcy5lbmNvZGVQdWJrZXkodGhpcy5lbmNvZGVFdGhTZWNwMjU2azFQdWJrZXkoZnJvbUhleChwdWJrZXkpKSk7XG4gIH1cblxuICAvKipcbiAgICogVGFrZXMgYSBwdWJrZXkgaW4gdGhlIEFtaW5vIEpTT04gb2JqZWN0IHN0eWxlICh0eXBlL3ZhbHVlIHdyYXBwZXIpXG4gICAqIGFuZCBjb252ZXJ0ZXMgaXQgaW50byBhIHByb3RvYnVmIGBBbnlgLlxuICAgKiBAcGFyYW0ge1B1YmtleX0gcHVia2V5IEFtaW5vIEpTT04gb2JqZWN0IHN0eWxlIHB1YmtleVxuICAgKiBAcmV0dXJucyB7QW55fSBwdWJrZXkgZW5jb2RlZCBhcyBwcm90b2J1ZiBgQW55YFxuICAgKi9cbiAgZW5jb2RlUHVia2V5KHB1YmtleTogUHVia2V5KTogQW55IHtcbiAgICBjb25zdCBwdWJrZXlQcm90byA9IFB1YktleS5mcm9tUGFydGlhbCh7XG4gICAgICBrZXk6IGZyb21CYXNlNjQocHVia2V5LnZhbHVlKSxcbiAgICB9KTtcbiAgICByZXR1cm4gQW55LmZyb21QYXJ0aWFsKHtcbiAgICAgIHR5cGVVcmw6IFB1YktleVR5cGVVcmwuZXRoU2VjcDI1NmsxLFxuICAgICAgdmFsdWU6IFVpbnQ4QXJyYXkuZnJvbShQdWJLZXkuZW5jb2RlKHB1YmtleVByb3RvKS5maW5pc2goKSksXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGFrZXMgYSBwdWJsaWMga2V5IGFzIHJhdyBieXRlcyBhbmQgcmV0dXJucyB0aGUgQW1pbm8gSlNPTlxuICAgKiByZXByZXNlbnRhdGlvbiBvZiBpdCAodHlwZS92YWx1ZSB3cmFwcGVyKS5cbiAgICogQHBhcmFtIHtVaW50OEFycmF5fSBwdWJrZXkgcHVibGljIGtleSBhcyByYXcgYnl0ZXNcbiAgICogQHJldHVybnMge0FueX0gQW1pbm8gSlNPTiBzdHlsZSBwdWJrZXlcbiAgICovXG4gIGVuY29kZUV0aFNlY3AyNTZrMVB1YmtleShwdWJrZXk6IFVpbnQ4QXJyYXkpOiBQdWJrZXkge1xuICAgIGlmIChwdWJrZXkubGVuZ3RoICE9PSAzMyB8fCAocHVia2V5WzBdICE9PSAweDAyICYmIHB1YmtleVswXSAhPT0gMHgwMykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUHVibGljIGtleSBtdXN0IGJlIGNvbXByZXNzZWQgZXRoU2VjcDI1NmsxLCBpLmUuIDMzIGJ5dGVzIHN0YXJ0aW5nIHdpdGggMHgwMiBvciAweDAzJyk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBQdWJLZXlUeXBlLmV0aFNlY3AyNTZrMSxcbiAgICAgIHZhbHVlOiB0b0Jhc2U2NChwdWJrZXkpLFxuICAgIH07XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgZ2V0SGFzaEZ1bmN0aW9uKCk6IEhhc2gge1xuICAgIHJldHVybiBLZWNjYWsoJ2tlY2NhazI1NicpO1xuICB9XG59XG5cbmNvbnN0IGlzbG1VdGlsczogQ29zbW9zVXRpbHMgPSBuZXcgSXNsbVV0aWxzKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGlzbG1VdGlscztcbiJdfQ==