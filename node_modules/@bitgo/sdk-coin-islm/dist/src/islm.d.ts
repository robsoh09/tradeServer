/// <reference types="node" />
import { CosmosCoin, CosmosKeyPair, GasAmountDetails } from '@bitgo/abstract-cosmos';
import { BaseCoin, BitGoBase } from '@bitgo/sdk-core';
import { BaseCoin as StaticsBaseCoin } from '@bitgo/statics';
import { TransactionBuilderFactory } from './lib';
import { Hash } from 'crypto';
export declare class Islm extends CosmosCoin {
    protected readonly _staticsCoin: Readonly<StaticsBaseCoin>;
    protected constructor(bitgo: BitGoBase, staticsCoin?: Readonly<StaticsBaseCoin>);
    static createInstance(bitgo: BitGoBase, staticsCoin?: Readonly<StaticsBaseCoin>): BaseCoin;
    /** @inheritDoc **/
    getBuilder(): TransactionBuilderFactory;
    /** @inheritDoc **/
    getBaseFactor(): string | number;
    /** @inheritDoc **/
    isValidAddress(address: string): boolean;
    /** @inheritDoc **/
    protected getPublicNodeUrl(): string;
    /** @inheritDoc **/
    getDenomination(): string;
    /** @inheritDoc **/
    getGasAmountDetails(): GasAmountDetails;
    /** @inheritDoc **/
    getKeyPair(publicKey: string): CosmosKeyPair;
    /** @inheritDoc **/
    getAddressFromPublicKey(publicKey: string): string;
    /** @inheritDoc **/
    getHashFunction(): Hash;
    /** @inheritDoc **/
    protected getAccountDetails(senderAddress: string): Promise<string[]>;
}
//# sourceMappingURL=islm.d.ts.map