/**
 * @prettier
 */
import { Algo } from './algo';
import { BitGoBase, CoinConstructor, NamedCoinConstructor } from '@bitgo/sdk-core';
import { AlgoTokenConfig } from '@bitgo/statics';
export declare class AlgoToken extends Algo {
    static readonly tokenNamePattern: RegExp;
    static readonly tokenPattern: RegExp;
    readonly tokenConfig: AlgoTokenConfig;
    private readonly _code;
    constructor(bitgo: BitGoBase, tokenConfig: AlgoTokenConfig);
    static createTokenConstructor(config: AlgoTokenConfig): CoinConstructor;
    static createTokenConstructors(): NamedCoinConstructor[];
    get type(): string;
    get name(): string;
    get coin(): string;
    get network(): string;
    get code(): string;
    get issuer(): string | undefined;
    get decimalPlaces(): number;
    getChain(): string;
    getBaseChain(): string;
    getFullName(): string;
    getBaseFactor(): number;
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    valuelessTransferAllowed(): boolean;
}
//# sourceMappingURL=algoToken.d.ts.map