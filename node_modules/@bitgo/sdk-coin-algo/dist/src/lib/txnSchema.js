"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetToggleTxnSchema = exports.AssetTransferTxnSchema = exports.KeyRegTxnSchema = exports.TransferTransactionSchema = exports.BaseTransactionSchema = void 0;
const joi_1 = __importDefault(require("joi"));
const sdk_core_1 = require("@bitgo/sdk-core");
const utils_1 = __importDefault(require("./utils"));
const addressSchema = joi_1.default.string().custom((addr) => utils_1.default.isValidAddress(addr));
exports.BaseTransactionSchema = joi_1.default
    .object({
    fee: joi_1.default.number().required(),
    firstRound: joi_1.default.number().positive().required(),
    genesisHash: joi_1.default.string().base64().required(),
    lastRound: joi_1.default.number().positive().required(),
    sender: addressSchema.required(),
    genesisId: joi_1.default.string().optional(),
    lease: joi_1.default.optional(),
    note: joi_1.default.optional(),
    reKeyTo: joi_1.default
        .string()
        .custom((addr) => utils_1.default.isValidAddress(addr))
        .optional(),
})
    .custom((obj) => {
    const firstRound = obj.firstRound;
    const lastRound = obj.lastRound;
    if (firstRound < lastRound) {
        return obj;
    }
    throw new Error('lastRound cannot be greater than or equal to firstRound');
});
exports.TransferTransactionSchema = joi_1.default.object({
    amount: joi_1.default.custom((val) => typeof val === 'number' || typeof val === 'bigint').required(),
    to: joi_1.default
        .string()
        .custom((addr) => utils_1.default.isValidAddress(addr))
        .required(),
    closeRemainderTo: joi_1.default.string().optional(),
});
exports.KeyRegTxnSchema = joi_1.default
    .object({
    voteKey: addressSchema.required(),
    selectionKey: addressSchema.required(),
    voteFirst: joi_1.default.number().positive().required(),
    voteLast: joi_1.default.number().positive().required(),
    voteKeyDilution: joi_1.default.number().positive().required(),
    stateProofKey: addressSchema.optional(),
})
    .custom((obj) => {
    const voteFirst = obj.voteFirst;
    const voteLast = obj.voteLast;
    if (voteFirst > voteLast) {
        throw new sdk_core_1.InvalidTransactionError('VoteKey last round must be greater than first round');
    }
    return obj;
});
exports.AssetTransferTxnSchema = joi_1.default.object({
    tokenId: joi_1.default.number().required(),
    assetAmount: joi_1.default.custom((val) => typeof val === 'number' || typeof val === 'bigint').required(),
    receiver: addressSchema.required(),
});
exports.AssetToggleTxnSchema = joi_1.default.object({
    tokenId: joi_1.default.number().required(),
    receiver: addressSchema.required(),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHhuU2NoZW1hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi90eG5TY2hlbWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsOENBQXNCO0FBQ3RCLDhDQUEwRDtBQUMxRCxvREFBNEI7QUFFNUIsTUFBTSxhQUFhLEdBQUcsYUFBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsZUFBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBRW5FLFFBQUEscUJBQXFCLEdBQUcsYUFBRztLQUNyQyxNQUFNLENBQUM7SUFDTixHQUFHLEVBQUUsYUFBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUM1QixVQUFVLEVBQUUsYUFBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUM5QyxXQUFXLEVBQUUsYUFBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUM3QyxTQUFTLEVBQUUsYUFBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUM3QyxNQUFNLEVBQUUsYUFBYSxDQUFDLFFBQVEsRUFBRTtJQUNoQyxTQUFTLEVBQUUsYUFBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUNsQyxLQUFLLEVBQUUsYUFBRyxDQUFDLFFBQVEsRUFBRTtJQUNyQixJQUFJLEVBQUUsYUFBRyxDQUFDLFFBQVEsRUFBRTtJQUNwQixPQUFPLEVBQUUsYUFBRztTQUNULE1BQU0sRUFBRTtTQUNSLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsZUFBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM1QyxRQUFRLEVBQUU7Q0FDZCxDQUFDO0tBQ0QsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7SUFDZCxNQUFNLFVBQVUsR0FBVyxHQUFHLENBQUMsVUFBVSxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFXLEdBQUcsQ0FBQyxTQUFTLENBQUM7SUFFeEMsSUFBSSxVQUFVLEdBQUcsU0FBUyxFQUFFO1FBQzFCLE9BQU8sR0FBRyxDQUFDO0tBQ1o7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLHlEQUF5RCxDQUFDLENBQUM7QUFDN0UsQ0FBQyxDQUFDLENBQUM7QUFFUSxRQUFBLHlCQUF5QixHQUFHLGFBQUcsQ0FBQyxNQUFNLENBQUM7SUFDbEQsTUFBTSxFQUFFLGFBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLE9BQU8sR0FBRyxLQUFLLFFBQVEsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLENBQUMsQ0FBQyxRQUFRLEVBQUU7SUFDMUYsRUFBRSxFQUFFLGFBQUc7U0FDSixNQUFNLEVBQUU7U0FDUixNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLGVBQUssQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDNUMsUUFBUSxFQUFFO0lBQ2IsZ0JBQWdCLEVBQUUsYUFBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtDQUMxQyxDQUFDLENBQUM7QUFFVSxRQUFBLGVBQWUsR0FBRyxhQUFHO0tBQy9CLE1BQU0sQ0FBQztJQUNOLE9BQU8sRUFBRSxhQUFhLENBQUMsUUFBUSxFQUFFO0lBQ2pDLFlBQVksRUFBRSxhQUFhLENBQUMsUUFBUSxFQUFFO0lBQ3RDLFNBQVMsRUFBRSxhQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQzdDLFFBQVEsRUFBRSxhQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQzVDLGVBQWUsRUFBRSxhQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ25ELGFBQWEsRUFBRSxhQUFhLENBQUMsUUFBUSxFQUFFO0NBQ3hDLENBQUM7S0FDRCxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtJQUNkLE1BQU0sU0FBUyxHQUFXLEdBQUcsQ0FBQyxTQUFTLENBQUM7SUFDeEMsTUFBTSxRQUFRLEdBQVcsR0FBRyxDQUFDLFFBQVEsQ0FBQztJQUV0QyxJQUFJLFNBQVMsR0FBRyxRQUFRLEVBQUU7UUFDeEIsTUFBTSxJQUFJLGtDQUF1QixDQUFDLHFEQUFxRCxDQUFDLENBQUM7S0FDMUY7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMsQ0FBQyxDQUFDO0FBRVEsUUFBQSxzQkFBc0IsR0FBRyxhQUFHLENBQUMsTUFBTSxDQUFDO0lBQy9DLE9BQU8sRUFBRSxhQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ2hDLFdBQVcsRUFBRSxhQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxPQUFPLEdBQUcsS0FBSyxRQUFRLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxDQUFDLENBQUMsUUFBUSxFQUFFO0lBQy9GLFFBQVEsRUFBRSxhQUFhLENBQUMsUUFBUSxFQUFFO0NBQ25DLENBQUMsQ0FBQztBQUVVLFFBQUEsb0JBQW9CLEdBQUcsYUFBRyxDQUFDLE1BQU0sQ0FBQztJQUM3QyxPQUFPLEVBQUUsYUFBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUNoQyxRQUFRLEVBQUUsYUFBYSxDQUFDLFFBQVEsRUFBRTtDQUNuQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgam9pIGZyb20gJ2pvaSc7XG5pbXBvcnQgeyBJbnZhbGlkVHJhbnNhY3Rpb25FcnJvciB9IGZyb20gJ0BiaXRnby9zZGstY29yZSc7XG5pbXBvcnQgdXRpbHMgZnJvbSAnLi91dGlscyc7XG5cbmNvbnN0IGFkZHJlc3NTY2hlbWEgPSBqb2kuc3RyaW5nKCkuY3VzdG9tKChhZGRyKSA9PiB1dGlscy5pc1ZhbGlkQWRkcmVzcyhhZGRyKSk7XG5cbmV4cG9ydCBjb25zdCBCYXNlVHJhbnNhY3Rpb25TY2hlbWEgPSBqb2lcbiAgLm9iamVjdCh7XG4gICAgZmVlOiBqb2kubnVtYmVyKCkucmVxdWlyZWQoKSxcbiAgICBmaXJzdFJvdW5kOiBqb2kubnVtYmVyKCkucG9zaXRpdmUoKS5yZXF1aXJlZCgpLFxuICAgIGdlbmVzaXNIYXNoOiBqb2kuc3RyaW5nKCkuYmFzZTY0KCkucmVxdWlyZWQoKSxcbiAgICBsYXN0Um91bmQ6IGpvaS5udW1iZXIoKS5wb3NpdGl2ZSgpLnJlcXVpcmVkKCksXG4gICAgc2VuZGVyOiBhZGRyZXNzU2NoZW1hLnJlcXVpcmVkKCksXG4gICAgZ2VuZXNpc0lkOiBqb2kuc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICBsZWFzZTogam9pLm9wdGlvbmFsKCksXG4gICAgbm90ZTogam9pLm9wdGlvbmFsKCksXG4gICAgcmVLZXlUbzogam9pXG4gICAgICAuc3RyaW5nKClcbiAgICAgIC5jdXN0b20oKGFkZHIpID0+IHV0aWxzLmlzVmFsaWRBZGRyZXNzKGFkZHIpKVxuICAgICAgLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5jdXN0b20oKG9iaikgPT4ge1xuICAgIGNvbnN0IGZpcnN0Um91bmQ6IG51bWJlciA9IG9iai5maXJzdFJvdW5kO1xuICAgIGNvbnN0IGxhc3RSb3VuZDogbnVtYmVyID0gb2JqLmxhc3RSb3VuZDtcblxuICAgIGlmIChmaXJzdFJvdW5kIDwgbGFzdFJvdW5kKSB7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcignbGFzdFJvdW5kIGNhbm5vdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gZmlyc3RSb3VuZCcpO1xuICB9KTtcblxuZXhwb3J0IGNvbnN0IFRyYW5zZmVyVHJhbnNhY3Rpb25TY2hlbWEgPSBqb2kub2JqZWN0KHtcbiAgYW1vdW50OiBqb2kuY3VzdG9tKCh2YWwpID0+IHR5cGVvZiB2YWwgPT09ICdudW1iZXInIHx8IHR5cGVvZiB2YWwgPT09ICdiaWdpbnQnKS5yZXF1aXJlZCgpLFxuICB0bzogam9pXG4gICAgLnN0cmluZygpXG4gICAgLmN1c3RvbSgoYWRkcikgPT4gdXRpbHMuaXNWYWxpZEFkZHJlc3MoYWRkcikpXG4gICAgLnJlcXVpcmVkKCksXG4gIGNsb3NlUmVtYWluZGVyVG86IGpvaS5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBLZXlSZWdUeG5TY2hlbWEgPSBqb2lcbiAgLm9iamVjdCh7XG4gICAgdm90ZUtleTogYWRkcmVzc1NjaGVtYS5yZXF1aXJlZCgpLFxuICAgIHNlbGVjdGlvbktleTogYWRkcmVzc1NjaGVtYS5yZXF1aXJlZCgpLFxuICAgIHZvdGVGaXJzdDogam9pLm51bWJlcigpLnBvc2l0aXZlKCkucmVxdWlyZWQoKSxcbiAgICB2b3RlTGFzdDogam9pLm51bWJlcigpLnBvc2l0aXZlKCkucmVxdWlyZWQoKSxcbiAgICB2b3RlS2V5RGlsdXRpb246IGpvaS5udW1iZXIoKS5wb3NpdGl2ZSgpLnJlcXVpcmVkKCksXG4gICAgc3RhdGVQcm9vZktleTogYWRkcmVzc1NjaGVtYS5vcHRpb25hbCgpLFxuICB9KVxuICAuY3VzdG9tKChvYmopID0+IHtcbiAgICBjb25zdCB2b3RlRmlyc3Q6IG51bWJlciA9IG9iai52b3RlRmlyc3Q7XG4gICAgY29uc3Qgdm90ZUxhc3Q6IG51bWJlciA9IG9iai52b3RlTGFzdDtcblxuICAgIGlmICh2b3RlRmlyc3QgPiB2b3RlTGFzdCkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRUcmFuc2FjdGlvbkVycm9yKCdWb3RlS2V5IGxhc3Qgcm91bmQgbXVzdCBiZSBncmVhdGVyIHRoYW4gZmlyc3Qgcm91bmQnKTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfSk7XG5cbmV4cG9ydCBjb25zdCBBc3NldFRyYW5zZmVyVHhuU2NoZW1hID0gam9pLm9iamVjdCh7XG4gIHRva2VuSWQ6IGpvaS5udW1iZXIoKS5yZXF1aXJlZCgpLFxuICBhc3NldEFtb3VudDogam9pLmN1c3RvbSgodmFsKSA9PiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsID09PSAnYmlnaW50JykucmVxdWlyZWQoKSxcbiAgcmVjZWl2ZXI6IGFkZHJlc3NTY2hlbWEucmVxdWlyZWQoKSxcbn0pO1xuXG5leHBvcnQgY29uc3QgQXNzZXRUb2dnbGVUeG5TY2hlbWEgPSBqb2kub2JqZWN0KHtcbiAgdG9rZW5JZDogam9pLm51bWJlcigpLnJlcXVpcmVkKCksXG4gIHJlY2VpdmVyOiBhZGRyZXNzU2NoZW1hLnJlcXVpcmVkKCksXG59KTtcbiJdfQ==