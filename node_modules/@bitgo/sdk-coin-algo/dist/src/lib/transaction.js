"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
const algosdk_1 = __importDefault(require("algosdk"));
const sdk_core_1 = require("@bitgo/sdk-core");
const utils_1 = __importDefault(require("./utils"));
const keyPair_1 = require("./keyPair");
class Transaction extends sdk_core_1.BaseTransaction {
    constructor(coinConfig) {
        super(coinConfig);
        this._numberOfRequiredSigners = 0;
        this._signers = [];
    }
    /** @inheritdoc */
    canSign({ key }) {
        if (this._numberOfRequiredSigners === 0) {
            return false;
        }
        if (this._numberOfRequiredSigners === 1) {
            const kp = new keyPair_1.KeyPair({ prv: key });
            const addr = kp.getAddress();
            if (addr === this._sender) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return true;
        }
    }
    sender(address) {
        this._sender = address;
    }
    /**
     * Signs transaction.
     *
     * @param {KeyPair} keyPair Signer keys.
     */
    sign(keyPair) {
        if (!this._algoTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction');
        }
        if (this._numberOfRequiredSigners === 1) {
            this.signSingle(keyPair[0]);
        }
        else if (this._numberOfRequiredSigners > 1) {
            this.signMultiSig(keyPair);
        }
    }
    /**
     * Signs transaction.
     *
     * @param {KeyPair} keyPair Signer keys.
     */
    signSingle(keyPair) {
        if (!this._algoTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction');
        }
        const signKey = Buffer.from(keyPair.getSigningKey()).toString('hex');
        if (signKey) {
            this._signedTransaction = algosdk_1.default.signTransaction(this._algoTransaction, utils_1.default.toUint8Array(signKey)).blob;
        }
        else {
            throw new sdk_core_1.InvalidKey('Private key undefined');
        }
    }
    /**
     * Signs multisig transaction.
     *
     * @param {KeyPair} keyPair Signers keys.
     */
    signMultiSig(keyPair) {
        if (!this._algoTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction');
        }
        if (this._signers.length === 0) {
            throw new sdk_core_1.SigningError('Signers not specified for multisig');
        }
        if (keyPair.length === 0) {
            throw new sdk_core_1.SigningError('Keypair not specified for multisig');
        }
        const multiSigOptions = {
            version: 1,
            threshold: this._numberOfRequiredSigners,
            addrs: this._signers,
        };
        const msigAddress = algosdk_1.default.multisigAddress(multiSigOptions);
        this._algoTransaction.from = algosdk_1.default.decodeAddress(msigAddress);
        // Check if it is a signed or unsigned tx.
        // If unsigned, sign it using first keypair and then append next signatures.
        // If signed, appending next signatures.
        let signedTx = this._signedTransaction
            ? this._signedTransaction
            : algosdk_1.default.signMultisigTransaction(this._algoTransaction, multiSigOptions, keyPair.shift().getSigningKey()).blob;
        keyPair.forEach((kp) => {
            signedTx = algosdk_1.default.appendSignMultisigTransaction(signedTx, multiSigOptions, kp.getSigningKey()).blob;
        });
        this._signedTransaction = signedTx;
    }
    set signedTransaction(txn) {
        this._signedTransaction = txn;
    }
    get numberOfRequiredSigners() {
        return this._numberOfRequiredSigners;
    }
    /**
     * Sets the number of signers required for signing this transaction.
     *
     * @param {number} num Threshold number of signers.
     */
    setNumberOfRequiredSigners(num) {
        this._numberOfRequiredSigners = num;
    }
    set signers(addrs) {
        this._signers = addrs;
    }
    get signers() {
        return this._signers;
    }
    set signedBy(signer) {
        this._signedBy = signer;
    }
    get signedBy() {
        return this._signedBy;
    }
    /**
     * Sets algo transaction.
     *
     * @param {algosdk.Transaction} tx
     */
    setAlgoTransaction(tx) {
        this._algoTransaction = tx;
    }
    /**
     * Get underlaying algo transaction.
     *
     * @returns {algosdk.Transaction}
     */
    getAlgoTransaction() {
        return this._algoTransaction;
    }
    /**
     * Set the transaction type.
     *
     * @param {TransactionType} transactionType The transaction type to be set.
     */
    setTransactionType(transactionType) {
        this._type = transactionType;
    }
    estimateSize() {
        if (!this._algoTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction');
        }
        return this._algoTransaction.estimateSize();
    }
    /** @inheritdoc */
    toBroadcastFormat() {
        if (!this._algoTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction');
        }
        if (this._signedTransaction && this._signedTransaction.length > 0) {
            return this._signedTransaction;
        }
        else {
            return algosdk_1.default.encodeUnsignedTransaction(this._algoTransaction);
        }
    }
    /** @inheritdoc */
    toJson() {
        var _a, _b;
        if (!this._algoTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction');
        }
        const result = {
            id: this._algoTransaction.txID(),
            type: (_a = this._algoTransaction.type) === null || _a === void 0 ? void 0 : _a.toString(),
            from: algosdk_1.default.encodeAddress(this._algoTransaction.from.publicKey),
            fee: this._algoTransaction.fee,
            firstRound: this._algoTransaction.firstRound,
            lastRound: this._algoTransaction.lastRound,
            note: this._algoTransaction.note,
            tokenId: (_b = this._algoTransaction) === null || _b === void 0 ? void 0 : _b.assetIndex,
            genesisID: this._algoTransaction.genesisID,
            genesisHash: this._algoTransaction.genesisHash.toString('base64'),
        };
        if (this._algoTransaction.closeRemainderTo) {
            result.closeRemainderTo = algosdk_1.default.encodeAddress(this._algoTransaction.closeRemainderTo.publicKey);
        }
        if (this.type === sdk_core_1.TransactionType.Send) {
            result.to = algosdk_1.default.encodeAddress(this._algoTransaction.to.publicKey);
            result.amount = this._algoTransaction.amount.toString();
        }
        if (this.type === sdk_core_1.TransactionType.WalletInitialization) {
            if (!this._algoTransaction.nonParticipation) {
                if (this._algoTransaction.voteKey &&
                    this._algoTransaction.selectionKey &&
                    this._algoTransaction.voteFirst &&
                    this._algoTransaction.voteLast &&
                    this._algoTransaction.voteKeyDilution) {
                    result.voteKey = this._algoTransaction.voteKey.toString('base64');
                    result.selectionKey = this._algoTransaction.selectionKey.toString('base64');
                    result.voteFirst = this._algoTransaction.voteFirst;
                    result.voteLast = this._algoTransaction.voteLast;
                    result.voteKeyDilution = this._algoTransaction.voteKeyDilution;
                    if (this._algoTransaction.stateProofKey) {
                        result.stateProofKey = this._algoTransaction.stateProofKey.toString('base64');
                    }
                }
            }
            else {
                result.nonParticipation = this._algoTransaction.nonParticipation;
            }
        }
        if (result.type === 'axfer' && result.to && result.amount) {
            result.txType = utils_1.default.getTokenTxType(result.amount, result.from, result.to, result.closeRemainderTo);
            result.tokenName = this._coinConfig.suffix;
        }
        return result;
    }
    /**
     * Load the input and output data on this transaction.
     */
    loadInputsAndOutputs() {
        if (!this._algoTransaction) {
            return;
        }
        if (this.type === sdk_core_1.TransactionType.Send) {
            this._outputs = [
                {
                    address: algosdk_1.default.encodeAddress(this._algoTransaction.to.publicKey),
                    value: this._algoTransaction.amount.toString(),
                    coin: this._coinConfig.name,
                },
            ];
            this._inputs = [
                {
                    address: algosdk_1.default.encodeAddress(this._algoTransaction.from.publicKey),
                    value: this._algoTransaction.amount.toString(),
                    coin: this._coinConfig.name,
                },
            ];
        }
    }
}
exports.Transaction = Transaction;
//# sourceMappingURL=data:application/json;base64,