"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyRegistrationBuilder = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const algosdk_1 = __importDefault(require("algosdk"));
const sdk_core_1 = require("@bitgo/sdk-core");
const transactionBuilder_1 = require("./transactionBuilder");
const txnSchema_1 = require("./txnSchema");
const utils_1 = __importDefault(require("./utils"));
class KeyRegistrationBuilder extends transactionBuilder_1.TransactionBuilder {
    constructor(coinConfig) {
        super(coinConfig);
    }
    /**
     * Sets the vote key
     *
     * @returns {KeyRegistrationBuilder} This Key Registration builder.
     *
     * @param {string} key The root participation public key. See Generate a Participation Key to learn more.
     * https://developer.algorand.org/docs/reference/transactions/#key-registration-transaction
     */
    voteKey(key) {
        this._voteKey = key;
        return this;
    }
    /**
     * Sets the selection key
     *
     * @returns {KeyRegistrationBuilder} This Key Registration builder.
     *
     * @param {string} key The VRF public key for the account.
     * https://developer.algorand.org/docs/reference/transactions/#key-registration-transaction
     */
    selectionKey(key) {
        this._selectionKey = key;
        return this;
    }
    /**
     * Sets the stateProof key
     *
     * @returns {KeyRegistrationBuilder} This Key Registration builder.
     *
     * @param {string} key The stateproof key. See consensus for more information.
     * https://developer.algorand.org/docs/get-details/algorand_consensus/?from_query=state#state-proof-keys
     */
    stateProofKey(key) {
        utils_1.default.validateBase64(key);
        this._stateProofKey = key;
        return this;
    }
    /**
     *Sets the vote first round
     *
     * @returns {KeyRegistrationBuilder} This Key Registration builder.
     *
     * @param {number} round The first round that the participation key is valid. Not to be confused with the FirstValid round of the keyreg transaction.
     * https://developer.algorand.org/docs/reference/transactions/#key-registration-transaction
     */
    voteFirst(round) {
        this.validateValue(new bignumber_js_1.default(round));
        this._voteFirst = round;
        return this;
    }
    /**
     * Sets the vote last round
     *
     * @returns {KeyRegistrationBuilder} This Key Registration builder.
     *
     * A recommended range is 3,000,000 rounds.
     *
     * @param {number} round No theoretical limit.
     * https://developer.algorand.org/docs/run-a-node/participate/generate_keys/
     */
    voteLast(round) {
        this.validateValue(new bignumber_js_1.default(round));
        this._voteLast = round;
        return this;
    }
    /**
     * Sets the vote key dilution
     *
     * @returns {KeyRegistrationBuilder} This Key Registration builder.
     *
     * Defaults to 10,000
     *
     * @param {number} size [10000]. To reduce the size of the participation key, set the key dilution value to roughly the square root of the range that the partkey is valid for.
     * https://developer.algorand.org/docs/run-a-node/participate/generate_keys/#generate-the-participation-key-with-goal
     * @param size
     */
    voteKeyDilution(size = 10000) {
        this.validateValue(new bignumber_js_1.default(size));
        this._voteKeyDilution = size;
        return this;
    }
    /**
     * Sets the non participation flag
     *
     * @returns {KeyRegistrationBuilder} This Key Registration builder.
     *
     * @param {boolean} nonParticipation All new Algorand accounts are participating by default.
     * This means that they earn rewards. Mark an account nonparticipating by setting this value to true and this account
     * will no longer earn rewards NEVER.
     * https://developer.algorand.org/docs/reference/transactions/#key-registration-transaction
     */
    nonParticipation(nonParticipation) {
        this._nonParticipation = nonParticipation;
        return this;
    }
    buildAlgoTxn() {
        return this.isOfflineKeyRegAccountLibTransaction()
            ? this.buildOfflineKeyRegTransaction()
            : this.isNonParticipationKeyRegAccountLibTransaction()
                ? this.buildNonParticipationKeyRegTransaction()
                : this.buildOnlineKeyRegTransaction();
    }
    buildOfflineKeyRegTransaction() {
        return algosdk_1.default.makeKeyRegistrationTxnWithSuggestedParams(this._sender, this._note, undefined, // voteKey param
        undefined, // selectionKey param
        undefined, // voteFirst param
        undefined, // voteLast param
        undefined, // voteKeyDilution param
        this.suggestedParams);
    }
    buildOnlineKeyRegTransaction() {
        return algosdk_1.default.makeKeyRegistrationTxnWithSuggestedParams(this._sender, this._note, this._voteKey, this._selectionKey, this._voteFirst, this._voteLast, this._voteKeyDilution, this.suggestedParams, undefined, // reKeyTo param
        undefined, // nonParticipation param
        this._stateProofKey);
    }
    buildNonParticipationKeyRegTransaction() {
        return algosdk_1.default.makeKeyRegistrationTxnWithSuggestedParams(this._sender, this._note, undefined, // voteKey param
        undefined, // selectionKey param
        undefined, // voteFirst param
        undefined, // voteLast param
        undefined, // voteKeyDilution param
        this.suggestedParams, this._reKeyTo, true // nonParticipation param
        );
    }
    get transactionType() {
        return sdk_core_1.TransactionType.WalletInitialization;
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        const tx = super.fromImplementation(rawTransaction);
        const algoTxn = tx.getAlgoTransaction();
        if (algoTxn) {
            if (this.isNonParticipationKeyRegAlgoSDKTransaction(algoTxn)) {
                this.nonParticipation(!!algoTxn.nonParticipation);
            }
            else if (this.isOnlineKeyRegAlgoSDKTransaction(algoTxn)) {
                this.voteKey(algoTxn.voteKey.toString('base64'));
                this.selectionKey(algoTxn.selectionKey.toString('base64'));
                this.voteFirst(algoTxn.voteFirst);
                this.voteLast(algoTxn.voteLast);
                this.voteKeyDilution(algoTxn.voteKeyDilution);
                if (algoTxn.stateProofKey) {
                    this.stateProofKey(algoTxn.stateProofKey.toString('base64'));
                }
            }
        }
        return tx;
    }
    /** @inheritdoc */
    validateRawTransaction(rawTransaction) {
        const decodeTxn = utils_1.default.decodeAlgoTxn(rawTransaction);
        const algoTxn = decodeTxn.txn;
        if (algoTxn.type !== algosdk_1.default.TransactionType.keyreg) {
            throw new sdk_core_1.InvalidTransactionError(`Invalid Transaction Type: ${algoTxn.type}. Expected ${algosdk_1.default.TransactionType.keyreg}`);
        }
        if (this.isOnlineKeyRegAlgoSDKTransaction(algoTxn)) {
            this.validateFields(algoTxn.voteKey.toString('base64'), algoTxn.selectionKey.toString('base64'), algoTxn.voteFirst, algoTxn.voteLast, algoTxn.voteKeyDilution, algoTxn.stateProofKey && algoTxn.stateProofKey.toString('base64'));
        }
    }
    isNonParticipationKeyRegAlgoSDKTransaction(algoTxn) {
        return !!algoTxn.nonParticipation;
    }
    isNonParticipationKeyRegAccountLibTransaction() {
        return !!this._nonParticipation;
    }
    isOnlineKeyRegAlgoSDKTransaction(algoTxn) {
        return !(this.isOfflineKeyRegAlgoSDKTransaction(algoTxn) || this.isNonParticipationKeyRegAlgoSDKTransaction(algoTxn));
    }
    isOnlineKeyRegAccountLibTransaction() {
        return !(this.isOfflineKeyRegAccountLibTransaction() || this.isNonParticipationKeyRegAccountLibTransaction());
    }
    isOfflineKeyRegAlgoSDKTransaction(algoTxn) {
        return (!algoTxn.voteKey &&
            !algoTxn.selectionKey &&
            !algoTxn.voteFirst &&
            !algoTxn.voteLast &&
            !algoTxn.voteKeyDilution &&
            !algoTxn.stateProofKey &&
            !algoTxn.nonParticipation);
    }
    isOfflineKeyRegAccountLibTransaction() {
        return (!this._voteKey &&
            !this._selectionKey &&
            !this._voteFirst &&
            !this._voteLast &&
            !this._voteKeyDilution &&
            !this._stateProofKey &&
            !this._nonParticipation);
    }
    /** @inheritdoc */
    validateTransaction(transaction) {
        super.validateTransaction(transaction);
        if (this.isOnlineKeyRegAccountLibTransaction()) {
            // invalid offline will reach here
            this.validateFields(this._voteKey, this._selectionKey, this._voteFirst, this._voteLast, this._voteKeyDilution, this._stateProofKey);
        }
        else {
            // offline or nonparticipation transaction
            if (this._voteKey ||
                this._selectionKey ||
                this._voteFirst ||
                this._voteLast ||
                this._voteKeyDilution ||
                this._stateProofKey) {
                throw new sdk_core_1.InvalidTransactionError('VoteKey, SelectionKey, VoteFirst, VoteLast, VoteKeyDilution, StateProofKey fields cannot be set when offline or nonparticipation is set');
            }
        }
    }
    validateFields(voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution, stateProofKey) {
        const validationResult = txnSchema_1.KeyRegTxnSchema.validate({
            voteKey,
            selectionKey,
            voteFirst,
            voteLast,
            voteKeyDilution,
            stateProofKey,
        });
        if (validationResult.error) {
            throw new sdk_core_1.InvalidTransactionError(`Transaction validation failed: ${validationResult.error.message}`);
        }
    }
}
exports.KeyRegistrationBuilder = KeyRegistrationBuilder;
//# sourceMappingURL=data:application/json;base64,