"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetTransferBuilder = void 0;
const algosdk_1 = __importDefault(require("algosdk"));
const sdk_core_1 = require("@bitgo/sdk-core");
const transferBuilder_1 = require("./transferBuilder");
const txnSchema_1 = require("./txnSchema");
const utils_1 = __importDefault(require("./utils"));
class AssetTransferBuilder extends transferBuilder_1.TransferBuilder {
    constructor(coinConfig) {
        super(coinConfig);
    }
    /**
     * Sets the token id.
  
     * The token id uniquely identifies the asset.
     *
     * @param {number} id The token id.
     * @returns {AssetTransferBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/transactions/#asset-transfer-transaction
     */
    tokenId(id) {
        if (id <= 0) {
            throw new Error('Asset index must be a uint64 value');
        }
        this._tokenId = id;
        return this;
    }
    /**
     * Sets the parameters of the transaction builder to allowlist an asset.
     *
     * To allow list an asset, you send 0 units of the asset to yourself.
     *
     * This method sets the tokenId, sender, receiver, asset amount, and
     * fee parameters to their respective values to allowlist and asset.
     *
     * @param {number} tokenId The unique identifier of the asset.
     * @param {BaseAddress} userAddress The address of the user.
     * @returns {AssetTransferBuilder} This transaction builder.
     */
    allowListAsset(tokenId, userAddress) {
        this.tokenId(tokenId);
        this.sender(userAddress);
        this.to(userAddress);
        this.isFlatFee(true);
        this.fee({ fee: '1000' });
        this.amount(0);
        return this;
    }
    buildAlgoTxn() {
        return algosdk_1.default.makeAssetTransferTxnWithSuggestedParams(this._sender, this._to, this._closeRemainderTo, undefined, this._amount, this._note, this._tokenId, this.suggestedParams, this._reKeyTo);
    }
    get transactionType() {
        return sdk_core_1.TransactionType.Send;
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        const tx = super.fromImplementation(rawTransaction);
        const algoTx = tx.getAlgoTransaction();
        if (!algoTx) {
            throw new sdk_core_1.InvalidTransactionError('Transaction is empty');
        }
        this._tokenId = algoTx.assetIndex;
        this._amount = algoTx.amount || 0;
        this._to = algosdk_1.default.encodeAddress(algoTx.to.publicKey);
        return tx;
    }
    validateRawTransaction(rawTransaction) {
        const { txn: algoTxn } = utils_1.default.decodeAlgoTxn(rawTransaction);
        if (algoTxn.type !== algosdk_1.default.TransactionType.axfer) {
            throw new sdk_core_1.InvalidTransactionError(`Invalid Transaction Type: ${algoTxn.type}. Expected ${algosdk_1.default.TransactionType.axfer}`);
        }
        this.validateFields(algoTxn.assetIndex, algoTxn.amount, algosdk_1.default.encodeAddress(algoTxn.to.publicKey));
    }
    /** @inheritdoc */
    validateTransaction(txn) {
        super.validateTransaction(txn);
        this.validateFields(this._tokenId, this._amount, this._to);
    }
    validateFields(tokenId, assetAmount, receiver) {
        let validationResult;
        if (this._sender !== this._to) {
            validationResult = txnSchema_1.AssetTransferTxnSchema.validate({
                tokenId,
                assetAmount,
                receiver,
            });
        }
        else {
            validationResult = txnSchema_1.AssetToggleTxnSchema.validate({
                tokenId,
                receiver,
            });
        }
        if (validationResult.error) {
            throw new sdk_core_1.InvalidTransactionError(`Transaction validation failed: ${validationResult.error.message}`);
        }
    }
}
exports.AssetTransferBuilder = AssetTransferBuilder;
//# sourceMappingURL=data:application/json;base64,