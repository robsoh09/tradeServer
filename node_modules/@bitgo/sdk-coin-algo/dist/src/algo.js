"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Algo = void 0;
/**
 * @prettier
 */
const _ = __importStar(require("lodash"));
const seedValidator_1 = require("./seedValidator");
const statics_1 = require("@bitgo/statics");
const AlgoLib = __importStar(require("./lib"));
const sdk_core_1 = require("@bitgo/sdk-core");
const stellar_sdk_1 = __importDefault(require("stellar-sdk"));
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const utils_1 = __importDefault(require("./lib/utils"));
const algosdk = __importStar(require("algosdk"));
const transactionBuilder_1 = require("./lib/transactionBuilder");
const buffer_1 = require("buffer");
const SUPPORTED_ADDRESS_VERSION = 1;
const MSIG_THRESHOLD = 2; // m in m-of-n
class Algo extends sdk_core_1.BaseCoin {
    constructor(bitgo) {
        super(bitgo);
        this.ENABLE_TOKEN = 'enabletoken';
        this.DISABLE_TOKEN = 'disabletoken';
    }
    static createInstance(bitgo) {
        return new Algo(bitgo);
    }
    getChain() {
        return 'algo';
    }
    getBaseChain() {
        return 'algo';
    }
    getFamily() {
        return 'algo';
    }
    getFullName() {
        return 'Algorand';
    }
    getBaseFactor() {
        return 1e6;
    }
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    valuelessTransferAllowed() {
        return true;
    }
    /**
     * Algorand supports account consolidations. These are transfers from the receive addresses
     * to the main address.
     */
    allowsAccountConsolidations() {
        return true;
    }
    /** inheritdoc */
    deriveKeyWithSeed() {
        throw new sdk_core_1.NotSupported('method deriveKeyWithSeed not supported for eddsa curve');
    }
    /** inheritdoc */
    generateKeyPair(seed) {
        const keyPair = seed ? new AlgoLib.KeyPair({ seed }) : new AlgoLib.KeyPair();
        const keys = keyPair.getKeys();
        if (!keys.prv) {
            throw new Error('Missing prv in key generation.');
        }
        return {
            pub: keyPair.getAddress(),
            prv: AlgoLib.algoUtils.encodeSeed(buffer_1.Buffer.from(keyPair.getSigningKey())),
        };
    }
    /** inheritdoc */
    generateRootKeyPair(seed) {
        const keyPair = seed ? new AlgoLib.KeyPair({ seed }) : new AlgoLib.KeyPair();
        const keys = keyPair.getKeys();
        if (!keys.prv) {
            throw new Error('Missing prv in key generation.');
        }
        return { prv: keys.prv + keys.pub, pub: keys.pub };
    }
    /**
     * Return boolean indicating whether input is valid public key for the coin.
     *
     * @param {String} pub the pub to be checked
     * @returns {Boolean} is it valid?
     */
    isValidPub(pub) {
        return AlgoLib.algoUtils.isValidAddress(pub) || AlgoLib.algoUtils.isValidPublicKey(pub);
    }
    /**
     * Return boolean indicating whether input is valid seed for the coin
     * In Algorand, when the private key is encoded as base32 string only the first 32 bytes are taken,
     * so the encoded value is actually the seed
     *
     * @param {String} prv the prv to be checked
     * @returns {Boolean} is it valid?
     */
    isValidPrv(prv) {
        return AlgoLib.algoUtils.isValidSeed(prv) || AlgoLib.algoUtils.isValidPrivateKey(prv);
    }
    /**
     * Return boolean indicating whether input is valid public key for the coin
     *
     * @param {String} address the pub to be checked
     * @returns {Boolean} is it valid?
     */
    isValidAddress(address) {
        return AlgoLib.algoUtils.isValidAddress(address);
    }
    /**
     * Sign message with private key
     *
     * @param key
     * @param message
     */
    async signMessage(key, message) {
        const algoKeypair = new AlgoLib.KeyPair({ prv: key.prv });
        if (buffer_1.Buffer.isBuffer(message)) {
            message = message.toString('base64');
        }
        return buffer_1.Buffer.from(algoKeypair.signMessage(message));
    }
    /**
     * Specifies what key we will need for signing` - Algorand needs the backup, bitgo pubs.
     */
    keyIdsForSigning() {
        return [sdk_core_1.KeyIndices.USER, sdk_core_1.KeyIndices.BACKUP, sdk_core_1.KeyIndices.BITGO];
    }
    getTokenNameById(tokenId) {
        const tokenNames = statics_1.coins.filter((coin) => coin.family === 'algo' && coin.isToken).map(({ name }) => name);
        return tokenNames.find((tokenName) => tokenName.split('-')[1] === `${tokenId}`) || 'AlgoToken unknown';
    }
    /**
     * Explain/parse transaction
     * @param params
     */
    async explainTransaction(params) {
        const txHex = params.txHex || (params.halfSigned && params.halfSigned.txHex);
        if (!txHex || !params.feeInfo) {
            throw new Error('missing explain tx parameters');
        }
        const factory = this.getBuilder();
        const txBuilder = factory.from(txHex);
        const tx = await txBuilder.build();
        const txJson = tx.toJson();
        if (tx.type === sdk_core_1.TransactionType.Send) {
            const outputs = [
                {
                    address: txJson.to,
                    amount: txJson.amount,
                    memo: txJson.note,
                },
            ];
            const operations = [];
            const isTokenTx = this.isTokenTx(txJson.type);
            if (isTokenTx) {
                const type = AlgoLib.algoUtils.getTokenTxType(txJson.amount, txJson.from, txJson.to, txJson.closeRemainderTo);
                operations.push({
                    type: type,
                    coin: this.getTokenNameById(txJson.tokenId),
                });
            }
            const displayOrder = [
                'id',
                'outputAmount',
                'changeAmount',
                'outputs',
                'changeOutputs',
                'fee',
                'memo',
                'type',
                'operations',
            ];
            const explanationResult = {
                displayOrder,
                id: txJson.id,
                outputAmount: txJson.amount.toString(),
                changeAmount: '0',
                outputs,
                changeOutputs: [],
                fee: txJson.fee,
                memo: txJson.note,
                type: tx.type.toString(),
                operations,
            };
            if (txJson.tokenId) {
                explanationResult.tokenId = txJson.tokenId;
            }
            return explanationResult;
        }
        if (tx.type === sdk_core_1.TransactionType.WalletInitialization) {
            const displayOrder = [
                'id',
                'fee',
                'memo',
                'type',
                'voteKey',
                'selectionKey',
                'voteFirst',
                'voteLast',
                'voteKeyDilution',
            ];
            return {
                displayOrder,
                id: txJson.id,
                outputAmount: '0',
                changeAmount: '0',
                outputs: [],
                changeOutputs: [],
                fee: txJson.fee,
                memo: txJson.note,
                type: tx.type,
                voteKey: txJson.voteKey,
                selectionKey: txJson.selectionKey,
                voteFirst: txJson.voteFirst,
                voteLast: txJson.voteLast,
                voteKeyDilution: txJson.voteKeyDilution,
            };
        }
    }
    /**
     * returns if a tx is a token tx
     * @param type {string} - tx type
     * @returns true if it's a token tx
     */
    isTokenTx(type) {
        return type === 'axfer';
    }
    /**
     * Check if a seed is a valid stellar seed
     *
     * @param {String} seed the seed to check
     * @returns {Boolean} true if the input is a Stellar seed
     */
    isStellarSeed(seed) {
        return seedValidator_1.SeedValidator.isValidEd25519SeedForCoin(seed, statics_1.CoinFamily.XLM);
    }
    /**
     * Convert a stellar seed to an algo seed
     *
     * @param {String} seed the seed to convert
     * @returns {Boolean | null} seed in algo encoding
     */
    convertFromStellarSeed(seed) {
        // assume this is a trust custodial seed if its a valid ed25519 prv
        if (!this.isStellarSeed(seed) || seedValidator_1.SeedValidator.hasCompetingSeedFormats(seed)) {
            return null;
        }
        if (seedValidator_1.SeedValidator.isValidEd25519SeedForCoin(seed, statics_1.CoinFamily.XLM)) {
            return AlgoLib.algoUtils.convertFromStellarSeed(seed);
        }
        return null;
    }
    verifySignTransactionParams(params) {
        const prv = params.prv;
        const addressVersion = params.txPrebuild.addressVersion;
        let isHalfSigned = false;
        // it's possible this tx was already signed - take the halfSigned
        // txHex if it is
        let txHex = params.txPrebuild.txHex;
        if (params.txPrebuild.halfSigned) {
            isHalfSigned = true;
            txHex = params.txPrebuild.halfSigned.txHex;
        }
        if (_.isUndefined(txHex)) {
            throw new Error('missing txPrebuild parameter');
        }
        if (!_.isString(txHex)) {
            throw new Error(`txPrebuild must be an object, got type ${typeof txHex}`);
        }
        if (_.isUndefined(prv)) {
            throw new Error('missing prv parameter to sign transaction');
        }
        if (!_.isString(prv)) {
            throw new Error(`prv must be a string, got type ${typeof prv}`);
        }
        if (!_.has(params.txPrebuild, 'keys')) {
            throw new Error('missing public keys parameter to sign transaction');
        }
        if (!_.isNumber(addressVersion)) {
            throw new Error('missing addressVersion parameter to sign transaction');
        }
        const signers = params.txPrebuild.keys.map((key) => {
            // if we are receiving addresses do not try to convert them
            if (!AlgoLib.algoUtils.isValidAddress(key)) {
                return AlgoLib.algoUtils.publicKeyToAlgoAddress(AlgoLib.algoUtils.toUint8Array(key));
            }
            return key;
        });
        // TODO(https://bitgoinc.atlassian.net/browse/STLX-6067): fix the number of signers using
        // should be similar to other coins implementation
        // If we have a number with digits to eliminate them without taking any rounding criteria.
        const numberSigners = Math.trunc(signers.length / 2) + 1;
        return { txHex, addressVersion, signers, prv, isHalfSigned, numberSigners };
    }
    /**
     * Assemble keychain and half-sign prebuilt transaction
     *
     * @param params
     * @param params.txPrebuild {TransactionPrebuild} prebuild object returned by platform
     * @param params.prv {String} user prv
     * @returns {Promise<SignedTransaction>}
     */
    async signTransaction(params) {
        const { txHex, signers, prv, isHalfSigned, numberSigners } = this.verifySignTransactionParams(params);
        const factory = this.getBuilder();
        const txBuilder = factory.from(txHex);
        txBuilder.numberOfRequiredSigners(numberSigners);
        txBuilder.sign({ key: prv });
        txBuilder.setSigners(signers);
        const transaction = await txBuilder.build();
        if (!transaction) {
            throw new Error('Invalid transaction');
        }
        const signedTxHex = buffer_1.Buffer.from(transaction.toBroadcastFormat()).toString('base64');
        if (numberSigners === 1) {
            return { txHex: signedTxHex };
        }
        else if (isHalfSigned) {
            return { txHex: signedTxHex };
        }
        else {
            return { halfSigned: { txHex: signedTxHex } };
        }
    }
    async parseTransaction(params) {
        return {};
    }
    /**
     * Check if address can be used to send funds.
     *
     * @param params.address address to validate
     * @param params.keychains public keys to generate the wallet
     */
    async isWalletAddress(params) {
        const { address, keychains, coinSpecific: { bitgoPubKey }, } = params;
        if (!this.isValidAddress(address)) {
            throw new sdk_core_1.InvalidAddressError(`invalid address: ${address}`);
        }
        if (!keychains) {
            throw new Error('missing required param keychains');
        }
        const effectiveKeychain = bitgoPubKey ? keychains.slice(0, -1).concat([{ pub: bitgoPubKey }]) : keychains;
        const pubKeys = effectiveKeychain.map((key) => this.stellarAddressToAlgoAddress(key.pub));
        if (!pubKeys.every((pubKey) => this.isValidPub(pubKey))) {
            throw new sdk_core_1.InvalidKey('invalid public key');
        }
        const rootAddress = AlgoLib.algoUtils.multisigAddress(SUPPORTED_ADDRESS_VERSION, MSIG_THRESHOLD, pubKeys);
        return rootAddress === address;
    }
    async verifyTransaction(params) {
        return true;
    }
    decodeTx(txn) {
        return AlgoLib.algoUtils.decodeAlgoTxn(txn);
    }
    getAddressFromPublicKey(pubKey) {
        return AlgoLib.algoUtils.publicKeyToAlgoAddress(pubKey);
    }
    supportsDeriveKeyWithSeed() {
        return false;
    }
    /**
     * Gets config for how token enablements work for this coin
     * @returns
     *    requiresTokenEnablement: True if tokens need to be enabled for this coin
     *    supportsMultipleTokenEnablements: True if multiple tokens can be enabled in one transaction
     */
    getTokenEnablementConfig() {
        return {
            requiresTokenEnablement: true,
            supportsMultipleTokenEnablements: false,
        };
    }
    /**
     * Gets the balance of the root address in base units of algo
     * Eg. If balance is 1 Algo, this returns 1*10^6
     * @param rootAddress
     * @param client
     */
    async getAccountBalance(rootAddress, client) {
        const accountInformation = await client.accountInformation(rootAddress).do();
        // Extract the balance from the account information
        return accountInformation.amount;
    }
    /**
     * Returns the Algo client for the given token, baseServer and port
     * Used to interact with the Algo network
     */
    getClient(token, baseServer, port) {
        return new algosdk.Algodv2(token, baseServer, port);
    }
    async recover(params) {
        var _a;
        const isUnsignedSweep = this.isValidPub(params.userKey) && this.isValidPub(params.backupKey);
        if (!params.nodeParams) {
            throw new Error('Please provide the details of an ALGO node to use for recovery');
        }
        // Validate the root address
        if (!this.isValidAddress(params.rootAddress)) {
            throw new Error('invalid rootAddress, got: ' + params.rootAddress);
        }
        // Validate the destination address
        if (!this.isValidAddress(params.recoveryDestination)) {
            throw new Error('invalid recoveryDestination, got: ' + params.recoveryDestination);
        }
        if (params.firstRound && new bignumber_js_1.default(params.firstRound).isNegative()) {
            throw new Error('first round needs to be a positive value');
        }
        const genesisId = this.bitgo.getEnv() === 'prod' ? transactionBuilder_1.MAINNET_GENESIS_ID : transactionBuilder_1.TESTNET_GENESIS_ID;
        const genesisHash = this.bitgo.getEnv() === 'prod' ? transactionBuilder_1.MAINNET_GENESIS_HASH : transactionBuilder_1.TESTNET_GENESIS_HASH;
        utils_1.default.validateBase64(genesisHash);
        if (!isUnsignedSweep && !params.walletPassphrase) {
            throw new Error('walletPassphrase is required for non-bitgo recovery');
        }
        const factory = new AlgoLib.TransactionBuilderFactory(statics_1.coins.get('algo'));
        const txBuilder = factory.getTransferBuilder();
        let userPrv;
        let backupPrv;
        if (!isUnsignedSweep) {
            if (!params.bitgoKey) {
                throw new Error('bitgo public key from the keyCard is required for non-bitgo recovery');
            }
            try {
                userPrv = this.bitgo.decrypt({ input: params.userKey, password: params.walletPassphrase });
                backupPrv = this.bitgo.decrypt({ input: params.backupKey, password: params.walletPassphrase });
                const userKeyAddress = utils_1.default.privateKeyToAlgoAddress(userPrv);
                const backupKeyAddress = utils_1.default.privateKeyToAlgoAddress(backupPrv);
                txBuilder.numberOfRequiredSigners(2).setSigners([userKeyAddress, backupKeyAddress, params.bitgoKey]);
            }
            catch (e) {
                throw new Error('unable to decrypt userKey or backupKey with the walletPassphrase provided, got error: ' + e.message);
            }
        }
        const client = this.getClient(params.nodeParams.token, params.nodeParams.baseServer, params.nodeParams.port);
        const nativeBalance = await this.getAccountBalance(params.rootAddress, client);
        // Algorand accounts require a min. balance of 1 ALGO
        const MIN_MICROALGOS_BALANCE = 100000;
        const spendableAmount = new bignumber_js_1.default(nativeBalance).minus(params.fee).minus(MIN_MICROALGOS_BALANCE).toNumber();
        if (new bignumber_js_1.default(spendableAmount).isZero() || new bignumber_js_1.default(spendableAmount).isLessThanOrEqualTo(params.fee)) {
            throw new Error('Insufficient balance to recover, got balance: ' +
                nativeBalance +
                ' fee: ' +
                params.fee +
                ' min account balance: ' +
                MIN_MICROALGOS_BALANCE);
        }
        let latestRound;
        if (!params.firstRound) {
            latestRound = await client
                .status()
                .do()
                .then((status) => status['last-round']);
        }
        const firstRound = !params.firstRound ? latestRound : params.firstRound;
        if (!firstRound) {
            throw new Error('Unable to fetch the latest round from the node. Please provide the firstRound or try again.');
        }
        const LAST_ROUND_BUFFER = 1000;
        const lastRound = firstRound + LAST_ROUND_BUFFER;
        txBuilder
            .fee({ fee: params.fee.toString() })
            .isFlatFee(true)
            .sender({
            address: params.rootAddress,
        })
            .to({
            address: params.recoveryDestination,
        })
            .amount(spendableAmount)
            .genesisId(genesisId)
            .genesisHash(genesisHash)
            .firstRound(new bignumber_js_1.default(firstRound).toNumber())
            .lastRound(new bignumber_js_1.default(lastRound).toNumber());
        if (params.note) {
            const note = new Uint8Array(buffer_1.Buffer.from(params.note, 'utf-8'));
            txBuilder.note(note);
        }
        // Cold wallet, offline vault
        if (isUnsignedSweep) {
            const tx = await txBuilder.build();
            const txJson = tx.toJson();
            return {
                txHex: buffer_1.Buffer.from(tx.toBroadcastFormat()).toString('hex'),
                type: txJson.type,
                userKey: params.userKey,
                backupKey: params.backupKey,
                bitgoKey: params.bitgoKey,
                address: params.rootAddress,
                coin: this.getChain(),
                feeInfo: txJson.fee,
                amount: (_a = txJson.amount) !== null && _a !== void 0 ? _a : nativeBalance.toString(),
                firstRound: txJson.firstRound,
                lastRound: txJson.lastRound,
                genesisId: genesisId,
                genesisHash: genesisHash,
                note: txJson.note ? buffer_1.Buffer.from(txJson.note.buffer).toString('utf-8') : undefined,
                keys: [params.userKey, params.backupKey, params.bitgoKey],
                addressVersion: 1,
            };
        }
        // Non-bitgo Recovery (Hot wallets)
        txBuilder.sign({ key: userPrv });
        txBuilder.sign({ key: backupPrv });
        const tx = await txBuilder.build();
        const txJson = tx.toJson();
        return {
            tx: buffer_1.Buffer.from(tx.toBroadcastFormat()).toString('base64'),
            id: txJson.id,
            coin: this.getChain(),
            fee: txJson.fee,
            firstRound: txJson.firstRound,
            lastRound: txJson.lastRound,
            genesisId: genesisId,
            genesisHash: genesisHash,
            note: txJson.note ? buffer_1.Buffer.from(txJson.note.buffer).toString('utf-8') : undefined,
        };
    }
    /**
     * Accepts a fully signed serialized base64 transaction and broadcasts it on the network.
     * Uses the external node provided by the client
     * @param serializedSignedTransaction
     * @param nodeParams
     */
    async broadcastTransaction({ serializedSignedTransaction, nodeParams, }) {
        if (!nodeParams) {
            throw new Error('Please provide the details of the algorand node');
        }
        try {
            const txHex = buffer_1.Buffer.from(serializedSignedTransaction, 'base64').toString('hex');
            const algoTx = utils_1.default.toUint8Array(txHex);
            const client = this.getClient(nodeParams.token, nodeParams.baseServer, nodeParams.port);
            return await client.sendRawTransaction(algoTx).do();
        }
        catch (e) {
            throw new Error('Failed to broadcast transaction, error: ' + e.message);
        }
    }
    /**
     * Stellar and Algorand both use keys on the ed25519 curve, but use different encodings.
     * As the HSM doesn't have explicit support to create Algorand addresses, we use the Stellar
     * keys and re-encode them to the Algorand encoding.
     *
     * This method should only be used when creating Algorand custodial wallets reusing Stellar keys.
     *
     * @param {string} addressOrPubKey a Stellar pubkey or Algorand address
     * @return {*}
     */
    stellarAddressToAlgoAddress(addressOrPubKey) {
        // we have an Algorand address
        if (this.isValidAddress(addressOrPubKey)) {
            return addressOrPubKey;
        }
        // we have a stellar key
        if (stellar_sdk_1.default.StrKey.isValidEd25519PublicKey(addressOrPubKey)) {
            const stellarPub = stellar_sdk_1.default.StrKey.decodeEd25519PublicKey(addressOrPubKey);
            const algoAddress = AlgoLib.algoUtils.encodeAddress(stellarPub);
            if (this.isValidAddress(algoAddress)) {
                return algoAddress;
            }
            throw new sdk_core_1.UnexpectedAddressError('Cannot convert Stellar address to an Algorand address via stellar pubkey.');
            // we have a root pubkey
        }
        else if (AlgoLib.algoUtils.isValidPublicKey(addressOrPubKey)) {
            const kp = new AlgoLib.KeyPair({ pub: addressOrPubKey });
            const algoAddress = kp.getAddress();
            if (this.isValidAddress(algoAddress)) {
                return algoAddress;
            }
            throw new sdk_core_1.UnexpectedAddressError('Invalid root pubkey.');
        }
        throw new sdk_core_1.UnexpectedAddressError('Neither an Algorand address, a stellar pubkey or a root public key.');
    }
    getBuilder() {
        return new AlgoLib.TransactionBuilderFactory(statics_1.coins.get(this.getBaseChain()));
    }
}
exports.Algo = Algo;
//# sourceMappingURL=data:application/json;base64,