"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AtaInitializationBuilder = void 0;
const transactionBuilder_1 = require("./transactionBuilder");
const sdk_core_1 = require("@bitgo/sdk-core");
const transaction_1 = require("./transaction");
const constants_1 = require("./constants");
const utils_1 = require("./utils");
const assert_1 = __importDefault(require("assert"));
const _ = __importStar(require("lodash"));
class AtaInitializationBuilder extends transactionBuilder_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._transaction = new transaction_1.Transaction(_coinConfig);
        this._tokenAssociateRecipients = [];
    }
    get transactionType() {
        return sdk_core_1.TransactionType.AssociatedTokenAccountInitialization;
    }
    /** @inheritDoc */
    initBuilder(tx) {
        super.initBuilder(tx);
        this._tokenAssociateRecipients = [];
        for (const instruction of this._instructionsData) {
            if (instruction.type === constants_1.InstructionBuilderTypes.CreateAssociatedTokenAccount) {
                const ataInitInstruction = instruction;
                this._tokenAssociateRecipients.push({
                    ownerAddress: ataInitInstruction.params.ownerAddress,
                    tokenName: ataInitInstruction.params.tokenName,
                });
            }
        }
    }
    /**
     * @deprecated - Use the enableToken method instead
     * Sets the mint address of the associated token account
     *
     * @param tokenName name of the token
     */
    mint(tokenName) {
        if (this._tokenAssociateRecipients.length > 0) {
            throw new sdk_core_1.DuplicateMethodError('Invalid method: enableToken already used');
        }
        const token = (0, utils_1.getSolTokenFromTokenName)(tokenName);
        if (!token) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: invalid token name, got: ' + tokenName);
        }
        this._mint = token.tokenAddress;
        this._tokenName = token.name;
        (0, utils_1.validateMintAddress)(this._mint);
        return this;
    }
    /**
     * @deprecated - Use the enableToken method instead
     * Sets the owner address of the associated token account
     *
     * @param owner owner address of associated token account
     */
    owner(owner) {
        if (this._tokenAssociateRecipients.length > 0) {
            throw new sdk_core_1.DuplicateMethodError('Invalid method: enableToken already used');
        }
        this._owner = owner;
        (0, utils_1.validateOwnerAddress)(owner);
        return this;
    }
    /**
     * @deprecated - Use the associatedTokenAccountRent method instead
     * Used to set the minimum rent exempt amount
     *
     * @param rentExemptAmount minimum rent exempt amount in lamports
     */
    rentExemptAmount(rentExemptAmount) {
        return super.associatedTokenAccountRent(rentExemptAmount);
    }
    /**
     * Used for adding token association recipients consisting
     *  1. ownerAddress: owner of the token address
     *  2. tokenName: the name of token enabled that is supported by BitGo
     *
     *  @param TokenAssociateRecipient token associate recipient info
     */
    enableToken(recipient) {
        if (this._tokenAssociateRecipients.some((tokenAssociate) => _.isEqual(tokenAssociate, recipient))) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: invalid duplicate recipients, got: owner ' +
                recipient.ownerAddress +
                ' and tokenName ' +
                recipient.tokenName +
                ' twice');
        }
        if (this._tokenName || this._mint) {
            throw new sdk_core_1.DuplicateMethodError('Invalid method: single mint already used');
        }
        (0, utils_1.validateOwnerAddress)(recipient.ownerAddress);
        const token = (0, utils_1.getSolTokenFromTokenName)(recipient.tokenName);
        if (!token) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: invalid token name, got: ' + recipient.tokenName);
        }
        (0, utils_1.validateMintAddress)(token.tokenAddress);
        this._tokenAssociateRecipients.push(recipient);
        return this;
    }
    /** @inheritdoc */
    async buildImplementation() {
        (0, assert_1.default)(this._sender, 'Sender must be set before building the transaction');
        if (this._tokenAssociateRecipients.length === 0) {
            (0, assert_1.default)(this._mint && this._tokenName, 'Mint must be set before building the transaction');
            this._owner = this._owner || this._sender;
            this._tokenAssociateRecipients.push({
                ownerAddress: this._owner,
                tokenName: this._tokenName,
            });
        }
        this._instructionsData = [];
        await Promise.all(this._tokenAssociateRecipients.map(async (recipient) => {
            const token = (0, utils_1.getSolTokenFromTokenName)(recipient.tokenName);
            if (!token) {
                throw new sdk_core_1.BuildTransactionError('Invalid transaction: invalid token name, got: ' + recipient.tokenName);
            }
            const ataPk = await (0, utils_1.getAssociatedTokenAccountAddress)(token.tokenAddress, recipient.ownerAddress);
            this._instructionsData.push({
                type: constants_1.InstructionBuilderTypes.CreateAssociatedTokenAccount,
                params: {
                    mintAddress: token.tokenAddress,
                    ataAddress: ataPk,
                    ownerAddress: recipient.ownerAddress,
                    payerAddress: this._sender,
                    tokenName: recipient.tokenName,
                },
            });
        }));
        return await super.buildImplementation();
    }
}
exports.AtaInitializationBuilder = AtaInitializationBuilder;
//# sourceMappingURL=data:application/json;base64,