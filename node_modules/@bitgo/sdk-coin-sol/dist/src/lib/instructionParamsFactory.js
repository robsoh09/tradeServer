"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.instructionParamsFactory = void 0;
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const sdk_core_1 = require("@bitgo/sdk-core");
const statics_1 = require("@bitgo/statics");
const assert_1 = __importDefault(require("assert"));
const constants_1 = require("./constants");
const utils_1 = require("./utils");
/**
 * Construct instructions params from Solana instructions
 *
 * @param {TransactionType} type - the transaction type
 * @param {TransactionInstruction[]} instructions - solana instructions
 * @returns {InstructionParams[]} An array containing instruction params
 */
function instructionParamsFactory(type, instructions) {
    switch (type) {
        case sdk_core_1.TransactionType.WalletInitialization:
            return parseWalletInitInstructions(instructions);
        case sdk_core_1.TransactionType.Send:
            return parseSendInstructions(instructions);
        case sdk_core_1.TransactionType.StakingActivate:
            return parseStakingActivateInstructions(instructions);
        case sdk_core_1.TransactionType.StakingDeactivate:
            return parseStakingDeactivateInstructions(instructions);
        case sdk_core_1.TransactionType.StakingWithdraw:
            return parseStakingWithdrawInstructions(instructions);
        case sdk_core_1.TransactionType.AssociatedTokenAccountInitialization:
            return parseAtaInitInstructions(instructions);
        case sdk_core_1.TransactionType.CloseAssociatedTokenAccount:
            return parseAtaCloseInstructions(instructions);
        case sdk_core_1.TransactionType.StakingAuthorize:
            return parseStakingAuthorizeInstructions(instructions);
        case sdk_core_1.TransactionType.StakingAuthorizeRaw:
            return parseStakingAuthorizeRawInstructions(instructions);
        case sdk_core_1.TransactionType.StakingDelegate:
            return parseStakingDelegateInstructions(instructions);
        default:
            throw new sdk_core_1.NotSupported('Invalid transaction, transaction type not supported: ' + type);
    }
}
exports.instructionParamsFactory = instructionParamsFactory;
/**
 * Parses Solana instructions to Wallet initialization tx instructions params
 *
 * @param {TransactionInstruction[]} instructions - containing create and initialize nonce solana instructions
 * @returns {InstructionParams[]} An array containing instruction params for Wallet initialization tx
 */
function parseWalletInitInstructions(instructions) {
    const instructionData = [];
    const createInstruction = web3_js_1.SystemInstruction.decodeCreateAccount(instructions[constants_1.walletInitInstructionIndexes.Create]);
    const nonceInitInstruction = web3_js_1.SystemInstruction.decodeNonceInitialize(instructions[constants_1.walletInitInstructionIndexes.InitializeNonceAccount]);
    const walletInit = {
        type: constants_1.InstructionBuilderTypes.CreateNonceAccount,
        params: {
            fromAddress: createInstruction.fromPubkey.toString(),
            nonceAddress: nonceInitInstruction.noncePubkey.toString(),
            authAddress: nonceInitInstruction.authorizedPubkey.toString(),
            amount: createInstruction.lamports.toString(),
        },
    };
    instructionData.push(walletInit);
    const memo = getMemo(instructions, constants_1.walletInitInstructionIndexes);
    if (memo) {
        instructionData.push(memo);
    }
    return instructionData;
}
/**
 * Parses Solana instructions to Send tx instructions params
 * Only supports Memo, Transfer and Advance Nonce Solana instructions
 *
 * @param {TransactionInstruction[]} instructions - an array of supported Solana instructions
 * @returns {InstructionParams[]} An array containing instruction params for Send tx
 */
function parseSendInstructions(instructions) {
    const instructionData = [];
    for (const instruction of instructions) {
        const type = (0, utils_1.getInstructionType)(instruction);
        switch (type) {
            case constants_1.ValidInstructionTypesEnum.Memo:
                const memo = { type: constants_1.InstructionBuilderTypes.Memo, params: { memo: instruction.data.toString() } };
                instructionData.push(memo);
                break;
            case constants_1.ValidInstructionTypesEnum.AdvanceNonceAccount:
                const advanceNonceInstruction = web3_js_1.SystemInstruction.decodeNonceAdvance(instruction);
                const nonce = {
                    type: constants_1.InstructionBuilderTypes.NonceAdvance,
                    params: {
                        walletNonceAddress: advanceNonceInstruction.noncePubkey.toString(),
                        authWalletAddress: advanceNonceInstruction.authorizedPubkey.toString(),
                    },
                };
                instructionData.push(nonce);
                break;
            case constants_1.ValidInstructionTypesEnum.Transfer:
                const transferInstruction = web3_js_1.SystemInstruction.decodeTransfer(instruction);
                const transfer = {
                    type: constants_1.InstructionBuilderTypes.Transfer,
                    params: {
                        fromAddress: transferInstruction.fromPubkey.toString(),
                        toAddress: transferInstruction.toPubkey.toString(),
                        amount: transferInstruction.lamports.toString(),
                    },
                };
                instructionData.push(transfer);
                break;
            case constants_1.ValidInstructionTypesEnum.TokenTransfer:
                const tokenTransferInstruction = (0, spl_token_1.decodeTransferCheckedInstruction)(instruction);
                const tokenName = findTokenName(tokenTransferInstruction.keys.mint.pubkey.toString());
                const tokenTransfer = {
                    type: constants_1.InstructionBuilderTypes.TokenTransfer,
                    params: {
                        fromAddress: tokenTransferInstruction.keys.owner.pubkey.toString(),
                        toAddress: tokenTransferInstruction.keys.destination.pubkey.toString(),
                        amount: tokenTransferInstruction.data.amount.toString(),
                        tokenName,
                        sourceAddress: tokenTransferInstruction.keys.source.pubkey.toString(),
                    },
                };
                instructionData.push(tokenTransfer);
                break;
            case constants_1.ValidInstructionTypesEnum.InitializeAssociatedTokenAccount:
                const mintAddress = instruction.keys[ataInitInstructionKeysIndexes.MintAddress].pubkey.toString();
                const mintTokenName = findTokenName(mintAddress);
                const ataInit = {
                    type: constants_1.InstructionBuilderTypes.CreateAssociatedTokenAccount,
                    params: {
                        mintAddress,
                        ataAddress: instruction.keys[ataInitInstructionKeysIndexes.ATAAddress].pubkey.toString(),
                        ownerAddress: instruction.keys[ataInitInstructionKeysIndexes.OwnerAddress].pubkey.toString(),
                        payerAddress: instruction.keys[ataInitInstructionKeysIndexes.PayerAddress].pubkey.toString(),
                        tokenName: mintTokenName,
                    },
                };
                instructionData.push(ataInit);
                break;
            default:
                throw new sdk_core_1.NotSupported('Invalid transaction, instruction type not supported: ' + (0, utils_1.getInstructionType)(instruction));
        }
    }
    return instructionData;
}
/**
 * Parses Solana instructions to create staking tx and delegate tx instructions params
 * Only supports Nonce, StakingActivate and Memo Solana instructions
 *
 * @param {TransactionInstruction[]} instructions - an array of supported Solana instructions
 * @returns {InstructionParams[]} An array containing instruction params for staking activate tx
 */
function parseStakingActivateInstructions(instructions) {
    var _a, _b, _c, _d;
    const instructionData = [];
    const stakingInstructions = {};
    for (const instruction of instructions) {
        const type = (0, utils_1.getInstructionType)(instruction);
        switch (type) {
            case constants_1.ValidInstructionTypesEnum.AdvanceNonceAccount:
                const advanceNonceInstruction = web3_js_1.SystemInstruction.decodeNonceAdvance(instruction);
                const nonce = {
                    type: constants_1.InstructionBuilderTypes.NonceAdvance,
                    params: {
                        walletNonceAddress: advanceNonceInstruction.noncePubkey.toString(),
                        authWalletAddress: advanceNonceInstruction.authorizedPubkey.toString(),
                    },
                };
                instructionData.push(nonce);
                break;
            case constants_1.ValidInstructionTypesEnum.Memo:
                const memo = { type: constants_1.InstructionBuilderTypes.Memo, params: { memo: instruction.data.toString() } };
                instructionData.push(memo);
                break;
            case constants_1.ValidInstructionTypesEnum.Create:
                stakingInstructions.create = web3_js_1.SystemInstruction.decodeCreateAccount(instruction);
                break;
            case constants_1.ValidInstructionTypesEnum.StakingInitialize:
                stakingInstructions.initialize = web3_js_1.StakeInstruction.decodeInitialize(instruction);
                break;
            case constants_1.ValidInstructionTypesEnum.StakingDelegate:
                stakingInstructions.delegate = web3_js_1.StakeInstruction.decodeDelegate(instruction);
                break;
        }
    }
    validateStakingInstructions(stakingInstructions);
    const stakingActivate = {
        type: constants_1.InstructionBuilderTypes.StakingActivate,
        params: {
            fromAddress: ((_a = stakingInstructions.create) === null || _a === void 0 ? void 0 : _a.fromPubkey.toString()) || '',
            stakingAddress: ((_b = stakingInstructions.initialize) === null || _b === void 0 ? void 0 : _b.stakePubkey.toString()) || '',
            amount: ((_c = stakingInstructions.create) === null || _c === void 0 ? void 0 : _c.lamports.toString()) || '',
            validator: ((_d = stakingInstructions.delegate) === null || _d === void 0 ? void 0 : _d.votePubkey.toString()) || '',
        },
    };
    instructionData.push(stakingActivate);
    return instructionData;
}
/**
 * Parses Solana instructions to create delegate tx
 * Only supports Nonce, StakingDelegate
 *
 * @param {TransactionInstruction[]} instructions - an array of supported Solana instructions
 * @returns {InstructionParams[]} An array containing instruction params for staking delegate tx
 */
function parseStakingDelegateInstructions(instructions) {
    const instructionData = [];
    for (const instruction of instructions) {
        const type = (0, utils_1.getInstructionType)(instruction);
        switch (type) {
            case constants_1.ValidInstructionTypesEnum.AdvanceNonceAccount:
                const advanceNonceInstruction = web3_js_1.SystemInstruction.decodeNonceAdvance(instruction);
                const nonce = {
                    type: constants_1.InstructionBuilderTypes.NonceAdvance,
                    params: {
                        walletNonceAddress: advanceNonceInstruction.noncePubkey.toString(),
                        authWalletAddress: advanceNonceInstruction.authorizedPubkey.toString(),
                    },
                };
                instructionData.push(nonce);
                break;
            case constants_1.ValidInstructionTypesEnum.StakingDelegate:
                const stakingDelegateParams = web3_js_1.StakeInstruction.decodeDelegate(instruction);
                const stakingDelegate = {
                    type: constants_1.InstructionBuilderTypes.StakingDelegate,
                    params: {
                        fromAddress: stakingDelegateParams.authorizedPubkey.toString() || '',
                        stakingAddress: stakingDelegateParams.stakePubkey.toString() || '',
                        validator: stakingDelegateParams.votePubkey.toString() || '',
                    },
                };
                instructionData.push(stakingDelegate);
                break;
        }
    }
    return instructionData;
}
function validateStakingInstructions(stakingInstructions) {
    if (!stakingInstructions.create) {
        throw new sdk_core_1.NotSupported('Invalid staking activate transaction, missing create stake account instruction');
    }
    else if (!stakingInstructions.initialize) {
        throw new sdk_core_1.NotSupported('Invalid staking activate transaction, missing initialize stake account instruction');
    }
    else if (!stakingInstructions.delegate) {
        throw new sdk_core_1.NotSupported('Invalid staking activate transaction, missing delegate instruction');
    }
}
/**
 * Parses Solana instructions to create deactivate stake tx instructions params. Supports full stake
 * account deactivation and partial stake account deactivation.
 *
 * When partially deactivating a stake account this method expects the following instructions: Allocate,
 * to allocate a new staking account, Assign, to assign the newly created staking account to the
 * Stake Program, Split, to split the current stake account, and StakingDeactivate to deactivate the
 * newly created stake account.
 *
 * Supports Nonce, StakingDeactivate, Memo, Allocate, Assign, and Split Solana instructions.
 *
 * @param {TransactionInstruction[]} instructions - an array of supported Solana instructions
 * @returns {InstructionParams[]} An array containing instruction params for staking deactivate tx
 */
function parseStakingDeactivateInstructions(instructions) {
    var _a, _b, _c, _d, _e;
    const instructionData = [];
    const unstakingInstructions = [];
    for (const instruction of instructions) {
        const type = (0, utils_1.getInstructionType)(instruction);
        switch (type) {
            case constants_1.ValidInstructionTypesEnum.AdvanceNonceAccount:
                const advanceNonceInstruction = web3_js_1.SystemInstruction.decodeNonceAdvance(instruction);
                const nonce = {
                    type: constants_1.InstructionBuilderTypes.NonceAdvance,
                    params: {
                        walletNonceAddress: advanceNonceInstruction.noncePubkey.toString(),
                        authWalletAddress: advanceNonceInstruction.authorizedPubkey.toString(),
                    },
                };
                instructionData.push(nonce);
                break;
            case constants_1.ValidInstructionTypesEnum.Memo:
                const memo = {
                    type: constants_1.InstructionBuilderTypes.Memo,
                    params: { memo: instruction.data.toString() },
                };
                instructionData.push(memo);
                break;
            case constants_1.ValidInstructionTypesEnum.Allocate:
                if (unstakingInstructions.length > 0 &&
                    unstakingInstructions[unstakingInstructions.length - 1].allocate === undefined) {
                    unstakingInstructions[unstakingInstructions.length - 1].allocate =
                        web3_js_1.SystemInstruction.decodeAllocate(instruction);
                }
                else {
                    unstakingInstructions.push({
                        allocate: web3_js_1.SystemInstruction.decodeAllocate(instruction),
                    });
                }
                break;
            case constants_1.ValidInstructionTypesEnum.Assign:
                if (unstakingInstructions.length > 0 &&
                    unstakingInstructions[unstakingInstructions.length - 1].assign === undefined) {
                    unstakingInstructions[unstakingInstructions.length - 1].assign = web3_js_1.SystemInstruction.decodeAssign(instruction);
                }
                else {
                    unstakingInstructions.push({
                        assign: web3_js_1.SystemInstruction.decodeAssign(instruction),
                    });
                }
                break;
            case constants_1.ValidInstructionTypesEnum.Split:
                if (unstakingInstructions.length > 0 &&
                    unstakingInstructions[unstakingInstructions.length - 1].split === undefined) {
                    unstakingInstructions[unstakingInstructions.length - 1].split = web3_js_1.StakeInstruction.decodeSplit(instruction);
                }
                else {
                    unstakingInstructions.push({
                        split: web3_js_1.StakeInstruction.decodeSplit(instruction),
                    });
                }
                break;
            case constants_1.ValidInstructionTypesEnum.StakingDeactivate:
                if (unstakingInstructions.length > 0 &&
                    unstakingInstructions[unstakingInstructions.length - 1].deactivate === undefined) {
                    unstakingInstructions[unstakingInstructions.length - 1].deactivate =
                        web3_js_1.StakeInstruction.decodeDeactivate(instruction);
                }
                else {
                    unstakingInstructions.push({
                        deactivate: web3_js_1.StakeInstruction.decodeDeactivate(instruction),
                    });
                }
                break;
            case constants_1.ValidInstructionTypesEnum.Transfer:
                if (unstakingInstructions.length > 0 &&
                    unstakingInstructions[unstakingInstructions.length - 1].transfer === undefined) {
                    unstakingInstructions[unstakingInstructions.length - 1].transfer =
                        web3_js_1.SystemInstruction.decodeTransfer(instruction);
                }
                else {
                    unstakingInstructions.push({
                        transfer: web3_js_1.SystemInstruction.decodeTransfer(instruction),
                    });
                }
                break;
        }
    }
    for (const unstakingInstruction of unstakingInstructions) {
        validateUnstakingInstructions(unstakingInstruction);
        const stakingDeactivate = {
            type: constants_1.InstructionBuilderTypes.StakingDeactivate,
            params: {
                fromAddress: ((_a = unstakingInstruction.deactivate) === null || _a === void 0 ? void 0 : _a.authorizedPubkey.toString()) || '',
                stakingAddress: ((_b = unstakingInstruction.split) === null || _b === void 0 ? void 0 : _b.stakePubkey.toString()) ||
                    ((_c = unstakingInstruction.deactivate) === null || _c === void 0 ? void 0 : _c.stakePubkey.toString()) ||
                    '',
                amount: (_d = unstakingInstruction.split) === null || _d === void 0 ? void 0 : _d.lamports.toString(),
                unstakingAddress: (_e = unstakingInstruction.split) === null || _e === void 0 ? void 0 : _e.splitStakePubkey.toString(),
            },
        };
        instructionData.push(stakingDeactivate);
    }
    return instructionData;
}
function validateUnstakingInstructions(unstakingInstructions) {
    if (!unstakingInstructions.deactivate) {
        throw new sdk_core_1.NotSupported('Invalid deactivate stake transaction, missing deactivate stake account instruction');
    }
    else if (unstakingInstructions.allocate ||
        unstakingInstructions.assign ||
        unstakingInstructions.split ||
        unstakingInstructions.transfer) {
        if (!unstakingInstructions.allocate) {
            throw new sdk_core_1.NotSupported('Invalid partial deactivate stake transaction, missing allocate unstake account instruction');
        }
        else if (!unstakingInstructions.assign) {
            throw new sdk_core_1.NotSupported('Invalid partial deactivate stake transaction, missing assign unstake account instruction');
        }
        else if (!unstakingInstructions.split) {
            throw new sdk_core_1.NotSupported('Invalid partial deactivate stake transaction, missing split stake account instruction');
        }
        else if (unstakingInstructions.allocate.accountPubkey.toString() !== unstakingInstructions.assign.accountPubkey.toString()) {
            throw new sdk_core_1.NotSupported('Invalid partial deactivate stake transaction, must allocate and assign the same public key');
        }
        else if (unstakingInstructions.allocate.space !== web3_js_1.StakeProgram.space) {
            throw new sdk_core_1.NotSupported(`Invalid partial deactivate stake transaction, unstaking account must allocate ${web3_js_1.StakeProgram.space} bytes`);
        }
        else if (unstakingInstructions.assign.programId.toString() !== web3_js_1.StakeProgram.programId.toString()) {
            throw new sdk_core_1.NotSupported('Invalid partial deactivate stake transaction, the unstake account must be assigned to the Stake Program');
        }
        else if (unstakingInstructions.allocate.accountPubkey.toString() !==
            unstakingInstructions.split.splitStakePubkey.toString()) {
            throw new sdk_core_1.NotSupported('Invalid partial deactivate stake transaction, must allocate the unstaking account');
        }
        else if (unstakingInstructions.split.stakePubkey.toString() === unstakingInstructions.split.splitStakePubkey.toString()) {
            throw new sdk_core_1.NotSupported('Invalid partial deactivate stake transaction, the unstaking account must be different from the Stake Account');
        }
        else if (!unstakingInstructions.transfer) {
            throw new sdk_core_1.NotSupported('Invalid partial deactivate stake transaction, missing funding of unstake address instruction');
        }
    }
}
/**
 * Parses Solana instructions to create staking  withdraw tx instructions params
 * Only supports Nonce, StakingWithdraw, and Memo Solana instructions
 *
 * @param {TransactionInstruction[]} instructions - an array of supported Solana instructions
 * @returns {InstructionParams[]} An array containing instruction params for staking withdraw tx
 */
function parseStakingWithdrawInstructions(instructions) {
    const instructionData = [];
    for (const instruction of instructions) {
        const type = (0, utils_1.getInstructionType)(instruction);
        switch (type) {
            case constants_1.ValidInstructionTypesEnum.AdvanceNonceAccount:
                const advanceNonceInstruction = web3_js_1.SystemInstruction.decodeNonceAdvance(instruction);
                const nonce = {
                    type: constants_1.InstructionBuilderTypes.NonceAdvance,
                    params: {
                        walletNonceAddress: advanceNonceInstruction.noncePubkey.toString(),
                        authWalletAddress: advanceNonceInstruction.authorizedPubkey.toString(),
                    },
                };
                instructionData.push(nonce);
                break;
            case constants_1.ValidInstructionTypesEnum.Memo:
                const memo = {
                    type: constants_1.InstructionBuilderTypes.Memo,
                    params: { memo: instruction.data.toString() },
                };
                instructionData.push(memo);
                break;
            case constants_1.ValidInstructionTypesEnum.StakingWithdraw:
                const withdrawInstruction = web3_js_1.StakeInstruction.decodeWithdraw(instruction);
                const stakingWithdraw = {
                    type: constants_1.InstructionBuilderTypes.StakingWithdraw,
                    params: {
                        fromAddress: withdrawInstruction.authorizedPubkey.toString(),
                        stakingAddress: withdrawInstruction.stakePubkey.toString(),
                        amount: withdrawInstruction.lamports.toString(),
                    },
                };
                instructionData.push(stakingWithdraw);
                break;
        }
    }
    return instructionData;
}
/**
 * Get the memo object from instructions if it exists
 *
 * @param {TransactionInstruction[]} instructions - the array of supported Solana instructions to be parsed
 * @param {Record<string, number>} instructionIndexes - the instructions indexes of the current transaction
 * @returns {Memo | undefined} - memo object or undefined
 */
function getMemo(instructions, instructionIndexes) {
    const instructionsLength = Object.keys(instructionIndexes).length;
    if (instructions.length === instructionsLength && instructions[instructionIndexes.Memo]) {
        return {
            type: constants_1.InstructionBuilderTypes.Memo,
            params: { memo: instructions[instructionIndexes.Memo].data.toString() },
        };
    }
}
const ataInitInstructionKeysIndexes = {
    PayerAddress: 0,
    ATAAddress: 1,
    OwnerAddress: 2,
    MintAddress: 3,
};
/**
 * Parses Solana instructions to initialize associated token account tx instructions params
 *
 * @param {TransactionInstruction[]} instructions - an array of supported Solana instructions
 * @returns {InstructionParams[]} An array containing instruction params for Send tx
 */
function parseAtaInitInstructions(instructions) {
    const instructionData = [];
    let memo;
    for (const instruction of instructions) {
        const type = (0, utils_1.getInstructionType)(instruction);
        switch (type) {
            case constants_1.ValidInstructionTypesEnum.Memo:
                memo = { type: constants_1.InstructionBuilderTypes.Memo, params: { memo: instruction.data.toString() } };
                break;
            case constants_1.ValidInstructionTypesEnum.AdvanceNonceAccount:
                const advanceNonceInstruction = web3_js_1.SystemInstruction.decodeNonceAdvance(instruction);
                const nonce = {
                    type: constants_1.InstructionBuilderTypes.NonceAdvance,
                    params: {
                        walletNonceAddress: advanceNonceInstruction.noncePubkey.toString(),
                        authWalletAddress: advanceNonceInstruction.authorizedPubkey.toString(),
                    },
                };
                instructionData.push(nonce);
                break;
            case constants_1.ValidInstructionTypesEnum.InitializeAssociatedTokenAccount:
                const mintAddress = instruction.keys[ataInitInstructionKeysIndexes.MintAddress].pubkey.toString();
                const tokenName = findTokenName(mintAddress);
                const ataInit = {
                    type: constants_1.InstructionBuilderTypes.CreateAssociatedTokenAccount,
                    params: {
                        mintAddress,
                        ataAddress: instruction.keys[ataInitInstructionKeysIndexes.ATAAddress].pubkey.toString(),
                        ownerAddress: instruction.keys[ataInitInstructionKeysIndexes.OwnerAddress].pubkey.toString(),
                        payerAddress: instruction.keys[ataInitInstructionKeysIndexes.PayerAddress].pubkey.toString(),
                        tokenName,
                    },
                };
                instructionData.push(ataInit);
                break;
            default:
                throw new sdk_core_1.NotSupported('Invalid transaction, instruction type not supported: ' + (0, utils_1.getInstructionType)(instruction));
        }
    }
    if (memo) {
        instructionData.push(memo);
    }
    return instructionData;
}
const ataCloseInstructionKeysIndexes = {
    AccountAddress: 0,
    DestinationAddress: 1,
    AuthorityAddress: 2,
};
/**
 * Parses Solana instructions to close associated token account tx instructions params
 *
 * @param {TransactionInstruction[]} instructions - an array of supported Solana instructions
 * @returns {InstructionParams[]} An array containing instruction params for Send tx
 */
function parseAtaCloseInstructions(instructions) {
    const instructionData = [];
    for (const instruction of instructions) {
        const ataClose = {
            type: constants_1.InstructionBuilderTypes.CloseAssociatedTokenAccount,
            params: {
                accountAddress: instruction.keys[ataCloseInstructionKeysIndexes.AccountAddress].pubkey.toString(),
                destinationAddress: instruction.keys[ataCloseInstructionKeysIndexes.DestinationAddress].pubkey.toString(),
                authorityAddress: instruction.keys[ataCloseInstructionKeysIndexes.AuthorityAddress].pubkey.toString(),
            },
        };
        instructionData.push(ataClose);
    }
    return instructionData;
}
/**
 * Parses Solana instructions to authorized staking account params
 * Only supports Nonce, Authorize instructions
 *
 * @param {TransactionInstruction[]} instructions - an array of supported Solana instructions
 * @returns {InstructionParams[]} An array containing instruction params for staking authorize tx
 */
function parseStakingAuthorizeInstructions(instructions) {
    var _a;
    const instructionData = [];
    for (const instruction of instructions) {
        const type = (0, utils_1.getInstructionType)(instruction);
        switch (type) {
            case constants_1.ValidInstructionTypesEnum.AdvanceNonceAccount:
                const advanceNonceInstruction = web3_js_1.SystemInstruction.decodeNonceAdvance(instruction);
                const nonce = {
                    type: constants_1.InstructionBuilderTypes.NonceAdvance,
                    params: {
                        walletNonceAddress: advanceNonceInstruction.noncePubkey.toString(),
                        authWalletAddress: advanceNonceInstruction.authorizedPubkey.toString(),
                    },
                };
                instructionData.push(nonce);
                break;
            case constants_1.ValidInstructionTypesEnum.Memo:
                const memo = { type: constants_1.InstructionBuilderTypes.Memo, params: { memo: instruction.data.toString() } };
                instructionData.push(memo);
                break;
            case constants_1.ValidInstructionTypesEnum.Authorize:
                const authorize = web3_js_1.StakeInstruction.decodeAuthorize(instruction);
                instructionData.push({
                    type: constants_1.InstructionBuilderTypes.StakingAuthorize,
                    params: {
                        stakingAddress: authorize.stakePubkey.toString(),
                        oldAuthorizeAddress: authorize.authorizedPubkey.toString(),
                        newAuthorizeAddress: authorize.newAuthorizedPubkey.toString(),
                        newWithdrawAddress: ((_a = authorize.custodianPubkey) === null || _a === void 0 ? void 0 : _a.toString()) || '',
                    },
                });
                break;
        }
    }
    return instructionData;
}
/**
 * Parses Solana instructions to authorized staking account params
 * Only supports Nonce, Authorize instructions
 *
 * @param {TransactionInstruction[]} instructions - an array of supported Solana instructions
 * @returns {InstructionParams[]} An array containing instruction params for staking authorize tx
 */
function parseStakingAuthorizeRawInstructions(instructions) {
    const instructionData = [];
    (0, assert_1.default)(instructions.length === 2, 'Invalid number of instructions');
    const advanceNonceInstruction = web3_js_1.SystemInstruction.decodeNonceAdvance(instructions[0]);
    const nonce = {
        type: constants_1.InstructionBuilderTypes.NonceAdvance,
        params: {
            walletNonceAddress: advanceNonceInstruction.noncePubkey.toString(),
            authWalletAddress: advanceNonceInstruction.authorizedPubkey.toString(),
        },
    };
    instructionData.push(nonce);
    const authorize = instructions[1];
    (0, assert_1.default)(authorize.keys.length === 5, 'Invalid number of keys in authorize instruction');
    instructionData.push({
        type: constants_1.InstructionBuilderTypes.StakingAuthorize,
        params: {
            stakingAddress: authorize.keys[0].pubkey.toString(),
            oldAuthorizeAddress: authorize.keys[2].pubkey.toString(),
            newAuthorizeAddress: authorize.keys[3].pubkey.toString(),
            custodianAddress: authorize.keys[4].pubkey.toString(),
        },
    });
    return instructionData;
}
function findTokenName(mintAddress) {
    let token;
    statics_1.coins.forEach((value, key) => {
        if (value instanceof statics_1.SolCoin && value.tokenAddress === mintAddress) {
            token = value.name;
        }
    });
    (0, assert_1.default)(token);
    return token;
}
//# sourceMappingURL=data:application/json;base64,