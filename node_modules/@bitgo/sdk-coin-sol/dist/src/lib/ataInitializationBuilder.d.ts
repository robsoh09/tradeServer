import { TransactionBuilder } from './transactionBuilder';
import { TransactionType } from '@bitgo/sdk-core';
import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { Transaction } from './transaction';
import { TokenAssociateRecipient } from './iface';
export declare class AtaInitializationBuilder extends TransactionBuilder {
    private _tokenName;
    private _mint;
    private _owner;
    private _tokenAssociateRecipients;
    constructor(_coinConfig: Readonly<CoinConfig>);
    protected get transactionType(): TransactionType;
    /** @inheritDoc */
    initBuilder(tx: Transaction): void;
    /**
     * @deprecated - Use the enableToken method instead
     * Sets the mint address of the associated token account
     *
     * @param tokenName name of the token
     */
    mint(tokenName: string): this;
    /**
     * @deprecated - Use the enableToken method instead
     * Sets the owner address of the associated token account
     *
     * @param owner owner address of associated token account
     */
    owner(owner: string): this;
    /**
     * @deprecated - Use the associatedTokenAccountRent method instead
     * Used to set the minimum rent exempt amount
     *
     * @param rentExemptAmount minimum rent exempt amount in lamports
     */
    rentExemptAmount(rentExemptAmount: string): this;
    /**
     * Used for adding token association recipients consisting
     *  1. ownerAddress: owner of the token address
     *  2. tokenName: the name of token enabled that is supported by BitGo
     *
     *  @param TokenAssociateRecipient token associate recipient info
     */
    enableToken(recipient: TokenAssociateRecipient): this;
    /** @inheritdoc */
    protected buildImplementation(): Promise<Transaction>;
}
//# sourceMappingURL=ataInitializationBuilder.d.ts.map