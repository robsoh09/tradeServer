"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.solInstructionFactory = void 0;
const statics_1 = require("@bitgo/statics");
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const assert_1 = __importDefault(require("assert"));
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const constants_1 = require("./constants");
/**
 * Construct Solana instructions from instructions params
 *
 * @param {InstructionParams} instructionToBuild - the data containing the instruction params
 * @returns {TransactionInstruction[]} An array containing supported Solana instructions
 */
function solInstructionFactory(instructionToBuild) {
    switch (instructionToBuild.type) {
        case constants_1.InstructionBuilderTypes.NonceAdvance:
            return advanceNonceInstruction(instructionToBuild);
        case constants_1.InstructionBuilderTypes.Memo:
            return memoInstruction(instructionToBuild);
        case constants_1.InstructionBuilderTypes.Transfer:
            return transferInstruction(instructionToBuild);
        case constants_1.InstructionBuilderTypes.TokenTransfer:
            return tokenTransferInstruction(instructionToBuild);
        case constants_1.InstructionBuilderTypes.CreateNonceAccount:
            return createNonceAccountInstruction(instructionToBuild);
        case constants_1.InstructionBuilderTypes.StakingActivate:
            return stakingInitializeInstruction(instructionToBuild);
        case constants_1.InstructionBuilderTypes.StakingDeactivate:
            return stakingDeactivateInstruction(instructionToBuild);
        case constants_1.InstructionBuilderTypes.StakingWithdraw:
            return stakingWithdrawInstruction(instructionToBuild);
        case constants_1.InstructionBuilderTypes.CreateAssociatedTokenAccount:
            return createATAInstruction(instructionToBuild);
        case constants_1.InstructionBuilderTypes.CloseAssociatedTokenAccount:
            return closeATAInstruction(instructionToBuild);
        case constants_1.InstructionBuilderTypes.StakingAuthorize:
            return stakingAuthorizeInstruction(instructionToBuild);
        case constants_1.InstructionBuilderTypes.StakingDelegate:
            return stakingDelegateInstruction(instructionToBuild);
        default:
            throw new Error(`Invalid instruction type or not supported`);
    }
}
exports.solInstructionFactory = solInstructionFactory;
/**
 * Construct Advance Nonce Solana instructions
 *
 * @param {Nonce} data - the data to build the instruction
 * @returns {TransactionInstruction[]} An array containing Advance Nonce Solana instruction
 */
function advanceNonceInstruction(data) {
    const { params: { authWalletAddress, walletNonceAddress }, } = data;
    (0, assert_1.default)(authWalletAddress, 'Missing authWalletAddress param');
    (0, assert_1.default)(walletNonceAddress, 'Missing walletNonceAddress param');
    const nonceInstruction = web3_js_1.SystemProgram.nonceAdvance({
        noncePubkey: new web3_js_1.PublicKey(walletNonceAddress),
        authorizedPubkey: new web3_js_1.PublicKey(authWalletAddress),
    });
    return [nonceInstruction];
}
/**
 * Construct Memo Solana instructions
 *
 * @param {Memo} data - the data to build the instruction
 * @returns {TransactionInstruction[]} An array containing Memo Solana instruction
 */
function memoInstruction(data) {
    const { params: { memo }, } = data;
    (0, assert_1.default)(memo, 'Missing memo param');
    const memoInstruction = new web3_js_1.TransactionInstruction({
        keys: [],
        programId: new web3_js_1.PublicKey(constants_1.MEMO_PROGRAM_PK),
        data: Buffer.from(memo),
    });
    return [memoInstruction];
}
/**
 * Construct Transfer Solana instructions
 *
 * @param {Transfer} data - the data to build the instruction
 * @returns {TransactionInstruction[]} An array containing Transfer Solana instruction
 */
function transferInstruction(data) {
    const { params: { fromAddress, toAddress, amount }, } = data;
    (0, assert_1.default)(fromAddress, 'Missing fromAddress param');
    (0, assert_1.default)(toAddress, 'Missing toAddress param');
    (0, assert_1.default)(amount, 'Missing toAddress param');
    const transferInstruction = web3_js_1.SystemProgram.transfer({
        fromPubkey: new web3_js_1.PublicKey(fromAddress),
        toPubkey: new web3_js_1.PublicKey(toAddress),
        lamports: parseInt(amount, 10),
    });
    return [transferInstruction];
}
/**
 * Construct Transfer Solana instructions
 *
 * @param {Transfer} data - the data to build the instruction
 * @returns {TransactionInstruction[]} An array containing Transfer Solana instruction
 */
function tokenTransferInstruction(data) {
    const { params: { fromAddress, toAddress, amount, tokenName, sourceAddress }, } = data;
    (0, assert_1.default)(fromAddress, 'Missing fromAddress (owner) param');
    (0, assert_1.default)(toAddress, 'Missing toAddress param');
    (0, assert_1.default)(amount, 'Missing amount param');
    (0, assert_1.default)(tokenName, 'Missing token name');
    (0, assert_1.default)(sourceAddress, 'Missing ata address');
    const token = statics_1.coins.get(data.params.tokenName);
    (0, assert_1.default)(token instanceof statics_1.SolCoin);
    const transferInstruction = (0, spl_token_1.createTransferCheckedInstruction)(new web3_js_1.PublicKey(sourceAddress), new web3_js_1.PublicKey(token.tokenAddress), new web3_js_1.PublicKey(toAddress), new web3_js_1.PublicKey(fromAddress), BigInt(amount), token.decimalPlaces);
    return [transferInstruction];
}
/**
 * Construct Create and Initialize Nonce Solana instructions
 *
 * @param {WalletInit} data - the data to build the instruction
 * @returns {TransactionInstruction[]} An array containing Create and Initialize Nonce Solana instruction
 */
function createNonceAccountInstruction(data) {
    const { params: { fromAddress, nonceAddress, authAddress, amount }, } = data;
    (0, assert_1.default)(fromAddress, 'Missing fromAddress param');
    (0, assert_1.default)(nonceAddress, 'Missing nonceAddress param');
    (0, assert_1.default)(authAddress, 'Missing authAddress param');
    (0, assert_1.default)(amount, 'Missing amount param');
    const nonceAccountInstruction = web3_js_1.SystemProgram.createNonceAccount({
        fromPubkey: new web3_js_1.PublicKey(fromAddress),
        noncePubkey: new web3_js_1.PublicKey(nonceAddress),
        authorizedPubkey: new web3_js_1.PublicKey(authAddress),
        lamports: new bignumber_js_1.default(amount).toNumber(),
    });
    return nonceAccountInstruction.instructions;
}
/**
 * Construct Create Staking Account and Delegate Solana instructions
 *
 * @param {StakingActivate} data - the data to build the instruction
 * @returns {TransactionInstruction[]} An array containing Create Staking Account and Delegate Solana instructions
 */
function stakingInitializeInstruction(data) {
    const { params: { fromAddress, stakingAddress, amount, validator }, } = data;
    (0, assert_1.default)(fromAddress, 'Missing fromAddress param');
    (0, assert_1.default)(stakingAddress, 'Missing stakingAddress param');
    (0, assert_1.default)(amount, 'Missing amount param');
    (0, assert_1.default)(validator, 'Missing validator param');
    const fromPubkey = new web3_js_1.PublicKey(fromAddress);
    const stakePubkey = new web3_js_1.PublicKey(stakingAddress);
    const tx = new web3_js_1.Transaction();
    const walletInitStaking = web3_js_1.StakeProgram.createAccount({
        fromPubkey,
        stakePubkey,
        authorized: new web3_js_1.Authorized(fromPubkey, fromPubkey),
        lockup: new web3_js_1.Lockup(0, 0, fromPubkey),
        lamports: new bignumber_js_1.default(amount).toNumber(),
    });
    tx.add(walletInitStaking);
    const delegateStaking = web3_js_1.StakeProgram.delegate({
        stakePubkey: new web3_js_1.PublicKey(stakingAddress),
        authorizedPubkey: new web3_js_1.PublicKey(fromAddress),
        votePubkey: new web3_js_1.PublicKey(validator),
    });
    tx.add(delegateStaking);
    return tx.instructions;
}
/**
 * Construct staking deactivate Solana instructions
 *
 * @param {StakingDeactivate} data - the data to build the instruction
 * @returns {TransactionInstruction[]} An array containing staking deactivate instruction
 */
function stakingDeactivateInstruction(data) {
    const { params: { fromAddress, stakingAddress }, } = data;
    (0, assert_1.default)(fromAddress, 'Missing fromAddress param');
    (0, assert_1.default)(stakingAddress, 'Missing stakingAddress param');
    if (data.params.amount && data.params.unstakingAddress) {
        const tx = new web3_js_1.Transaction();
        const unstakingAddress = new web3_js_1.PublicKey(data.params.unstakingAddress);
        const allocateAccount = web3_js_1.SystemProgram.allocate({
            accountPubkey: unstakingAddress,
            space: web3_js_1.StakeProgram.space,
        });
        tx.add(allocateAccount);
        const assignAccount = web3_js_1.SystemProgram.assign({
            accountPubkey: unstakingAddress,
            programId: web3_js_1.StakeProgram.programId,
        });
        tx.add(assignAccount);
        const splitStake = web3_js_1.StakeProgram.split({
            stakePubkey: new web3_js_1.PublicKey(stakingAddress),
            authorizedPubkey: new web3_js_1.PublicKey(fromAddress),
            splitStakePubkey: unstakingAddress,
            lamports: new bignumber_js_1.default(data.params.amount).toNumber(),
        }, 0);
        tx.add(splitStake.instructions[1]);
        const deactivateStaking = web3_js_1.StakeProgram.deactivate({
            stakePubkey: unstakingAddress,
            authorizedPubkey: new web3_js_1.PublicKey(fromAddress),
        });
        tx.add(deactivateStaking);
        return tx.instructions;
    }
    else {
        const deactivateStaking = web3_js_1.StakeProgram.deactivate({
            stakePubkey: new web3_js_1.PublicKey(stakingAddress),
            authorizedPubkey: new web3_js_1.PublicKey(fromAddress),
        });
        return deactivateStaking.instructions;
    }
}
/**
 * Construct Staking Withdraw Solana instructions
 *
 * @param {StakingWithdraw} data - the data to build the instruction
 * @returns {TransactionInstruction[]} An array containing Staking Withdraw  Solana instructions
 */
function stakingWithdrawInstruction(data) {
    const { params: { fromAddress, stakingAddress, amount }, } = data;
    (0, assert_1.default)(fromAddress, 'Missing fromAddress param');
    (0, assert_1.default)(stakingAddress, 'Missing stakingAddress param');
    (0, assert_1.default)(amount, 'Missing amount param');
    const withdrawStaking = web3_js_1.StakeProgram.withdraw({
        stakePubkey: new web3_js_1.PublicKey(stakingAddress),
        authorizedPubkey: new web3_js_1.PublicKey(fromAddress),
        toPubkey: new web3_js_1.PublicKey(fromAddress),
        lamports: new bignumber_js_1.default(amount).toNumber(),
    });
    return withdrawStaking.instructions;
}
/**
 * Construct Create and Initialize Nonce Solana instructions
 *
 * @param {WalletInit} data - the data to build the instruction
 * @returns {TransactionInstruction[]} An array containing Create and Initialize Nonce Solana instruction
 */
function createATAInstruction(data) {
    const { params: { mintAddress, ataAddress, ownerAddress, payerAddress }, } = data;
    (0, assert_1.default)(mintAddress, 'Missing mintAddress param');
    (0, assert_1.default)(ataAddress, 'Missing ataAddress param');
    (0, assert_1.default)(ownerAddress, 'Missing ownerAddress param');
    (0, assert_1.default)(payerAddress, 'Missing payerAddress param');
    const associatedTokenAccountInstruction = (0, spl_token_1.createAssociatedTokenAccountInstruction)(new web3_js_1.PublicKey(payerAddress), new web3_js_1.PublicKey(ataAddress), new web3_js_1.PublicKey(ownerAddress), new web3_js_1.PublicKey(mintAddress));
    return [associatedTokenAccountInstruction];
}
/**
 * Construct Close ATA Solana instructions
 *
 * @param {WalletInit} data - the data to build the instruction
 * @returns {TransactionInstruction[]} An array containing Close ATA Solana instruction
 */
function closeATAInstruction(data) {
    const { params: { accountAddress, destinationAddress, authorityAddress }, } = data;
    (0, assert_1.default)(accountAddress, 'Missing accountAddress param');
    (0, assert_1.default)(destinationAddress, 'Missing destinationAddress param');
    (0, assert_1.default)(authorityAddress, 'Missing authorityAddress param');
    const closeAssociatedTokenAccountInstruction = (0, spl_token_1.createCloseAccountInstruction)(new web3_js_1.PublicKey(accountAddress), new web3_js_1.PublicKey(destinationAddress), new web3_js_1.PublicKey(authorityAddress));
    return [closeAssociatedTokenAccountInstruction];
}
/**
 * Construct Staking Account Authorize Solana instructions
 *
 * @param {StakingAuthorize} data - the data to build the instruction
 * @returns {TransactionInstruction[]} An array containing Staking Account Authorize instructions
 */
function stakingAuthorizeInstruction(data) {
    const { params: { stakingAddress, oldAuthorizeAddress, newAuthorizeAddress, newWithdrawAddress }, } = data;
    (0, assert_1.default)(stakingAddress, 'Missing stakingAddress param');
    (0, assert_1.default)(oldAuthorizeAddress, 'Missing oldAuthorizeAddress param');
    (0, assert_1.default)(newAuthorizeAddress, 'Missing newAuthorizeAddress param');
    (0, assert_1.default)(newWithdrawAddress, 'Missing newWithdrawAddress param');
    const tx = new web3_js_1.Transaction();
    const authorizeStaking = web3_js_1.StakeProgram.authorize({
        stakePubkey: new web3_js_1.PublicKey(stakingAddress),
        authorizedPubkey: new web3_js_1.PublicKey(oldAuthorizeAddress),
        newAuthorizedPubkey: new web3_js_1.PublicKey(newAuthorizeAddress),
        stakeAuthorizationType: web3_js_1.StakeAuthorizationLayout.Staker,
    });
    const authorizeWithdraw = web3_js_1.StakeProgram.authorize({
        stakePubkey: new web3_js_1.PublicKey(stakingAddress),
        authorizedPubkey: new web3_js_1.PublicKey(oldAuthorizeAddress),
        newAuthorizedPubkey: new web3_js_1.PublicKey(newAuthorizeAddress),
        stakeAuthorizationType: web3_js_1.StakeAuthorizationLayout.Withdrawer,
        custodianPubkey: new web3_js_1.PublicKey(newWithdrawAddress),
    });
    tx.add(authorizeStaking);
    tx.add(authorizeWithdraw);
    return tx.instructions;
}
/**
 * Construct Delegate Solana instructions
 *
 * @param {StakingActivate} data - the data to build the instruction
 * @returns {TransactionInstruction[]} An array containing Delegate Solana instructions
 */
function stakingDelegateInstruction(data) {
    const { params: { fromAddress, stakingAddress, validator }, } = data;
    (0, assert_1.default)(fromAddress, 'Missing fromAddress param');
    (0, assert_1.default)(stakingAddress, 'Missing stakingAddress param');
    (0, assert_1.default)(validator, 'Missing validator param');
    const tx = new web3_js_1.Transaction();
    const delegateStaking = web3_js_1.StakeProgram.delegate({
        stakePubkey: new web3_js_1.PublicKey(stakingAddress),
        authorizedPubkey: new web3_js_1.PublicKey(fromAddress),
        votePubkey: new web3_js_1.PublicKey(validator),
    });
    tx.add(delegateStaking);
    return tx.instructions;
}
//# sourceMappingURL=data:application/json;base64,