"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilderFactory = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const ataInitializationBuilder_1 = require("./ataInitializationBuilder");
const closeAtaBuilder_1 = require("./closeAtaBuilder");
const stakingActivateBuilder_1 = require("./stakingActivateBuilder");
const stakingAuthorizeBuilder_1 = require("./stakingAuthorizeBuilder");
const stakingDeactivateBuilder_1 = require("./stakingDeactivateBuilder");
const stakingDelegateBuilder_1 = require("./stakingDelegateBuilder");
const stakingRawMsgAuthorizeBuilder_1 = require("./stakingRawMsgAuthorizeBuilder");
const stakingWithdrawBuilder_1 = require("./stakingWithdrawBuilder");
const tokenTransferBuilder_1 = require("./tokenTransferBuilder");
const transaction_1 = require("./transaction");
const transferBuilder_1 = require("./transferBuilder");
const transferBuilderV2_1 = require("./transferBuilderV2");
const utils_1 = require("./utils");
const walletInitializationBuilder_1 = require("./walletInitializationBuilder");
class TransactionBuilderFactory extends sdk_core_1.BaseTransactionBuilderFactory {
    constructor(_coinConfig) {
        super(_coinConfig);
    }
    /**
     * Returns a proper builder for the given encoded transaction
     *
     * @param { string} raw - Encoded transaction in base64 string format
     */
    from(raw) {
        (0, utils_1.validateRawTransaction)(raw);
        const tx = this.parseTransaction(raw);
        try {
            switch (tx.type) {
                case sdk_core_1.TransactionType.Send:
                    const uniqueInputCoins = tx.inputs
                        .map((input) => input.coin)
                        .filter((coin, index, arr) => arr.indexOf(coin) === index);
                    if (uniqueInputCoins.includes('sol') || uniqueInputCoins.includes('tsol')) {
                        return this.getTransferBuilderV2(tx);
                    }
                    else {
                        return this.getTokenTransferBuilder(tx);
                    }
                case sdk_core_1.TransactionType.WalletInitialization:
                    return this.getWalletInitializationBuilder(tx);
                case sdk_core_1.TransactionType.StakingActivate:
                    return this.getStakingActivateBuilder(tx);
                case sdk_core_1.TransactionType.StakingDeactivate:
                    return this.getStakingDeactivateBuilder(tx);
                case sdk_core_1.TransactionType.StakingWithdraw:
                    return this.getStakingWithdrawBuilder(tx);
                case sdk_core_1.TransactionType.AssociatedTokenAccountInitialization:
                    return this.getAtaInitializationBuilder(tx);
                case sdk_core_1.TransactionType.StakingAuthorize:
                    return this.getStakingAuthorizeBuilder(tx);
                case sdk_core_1.TransactionType.StakingAuthorizeRaw:
                    return this.getStakingRawMsgAuthorizeBuilder(tx);
                case sdk_core_1.TransactionType.StakingDelegate:
                    return this.getStakingDelegateBuilder(tx);
                default:
                    throw new sdk_core_1.InvalidTransactionError('Invalid transaction');
            }
        }
        catch (e) {
            throw e;
        }
    }
    /** @inheritdoc */
    getWalletInitializationBuilder(tx) {
        return this.initializeBuilder(tx, new walletInitializationBuilder_1.WalletInitializationBuilder(this._coinConfig));
    }
    /** @inheritdoc */
    getTransferBuilder(tx) {
        return this.initializeBuilder(tx, new transferBuilder_1.TransferBuilder(this._coinConfig));
    }
    /** @inheritdoc */
    getTokenTransferBuilder(tx) {
        return this.initializeBuilder(tx, new tokenTransferBuilder_1.TokenTransferBuilder(this._coinConfig));
    }
    /**
     * Returns the transfer builder V2 to create a funds transfer transaction
     */
    getTransferBuilderV2(tx) {
        return this.initializeBuilder(tx, new transferBuilderV2_1.TransferBuilderV2(this._coinConfig));
    }
    /**
     * Returns the staking builder to create a staking account and also a delegate in one transaction.
     * once the tx reach the network it will automatically by activated on next epoch
     *
     * @see https://docs.solana.com/cluster/stake-delegation-and-rewards#stake-warmup-cooldown-withdrawal
     *
     * @param {Transaction} tx - the transaction to be used to initialize the builder
     * @returns {StakingDeactivateBuilder} - the initialized staking activate builder
     */
    getStakingActivateBuilder(tx) {
        return this.initializeBuilder(tx, new stakingActivateBuilder_1.StakingActivateBuilder(this._coinConfig));
    }
    /**
     * Returns the builder to create a staking deactivate transaction.
     * Deactivated is set in the current epoch + cooldown
     * The account's stake will ramp down to zero by that epoch, and the lamports will be available for withdrawal.
     *
     * @see https://docs.solana.com/cluster/stake-delegation-and-rewards#stake-warmup-cooldown-withdrawal
     *
     * @param {Transaction} tx - the transaction to be used to initialize the builder
     * @returns {StakingDeactivateBuilder} - the initialized staking deactivate builder
     */
    getStakingDeactivateBuilder(tx) {
        return this.initializeBuilder(tx, new stakingDeactivateBuilder_1.StakingDeactivateBuilder(this._coinConfig));
    }
    /**
     * Returns the builder to create a staking withdraw transaction.
     * once the staking account reach 0 SOL it will not be traceable anymore by the network
     *
     * @see https://docs.solana.com/staking/stake-accounts#destroying-a-stake-account
     *
     * @param {Transaction} tx - the transaction to be used to intialize the builder
     * @returns {StakingWithdrawBuilder} - the initialized staking withdraw builder
     */
    getStakingWithdrawBuilder(tx) {
        return this.initializeBuilder(tx, new stakingWithdrawBuilder_1.StakingWithdrawBuilder(this._coinConfig));
    }
    /**
     * Returns the builder to authorized staking account.
     *
     * @param {Transaction} tx - the transaction to be used to intialize the builder
     * @returns {StakingAuthorizeBuilder} - the initialized staking authorize builder
     */
    getStakingAuthorizeBuilder(tx) {
        return this.initializeBuilder(tx, new stakingAuthorizeBuilder_1.StakingAuthorizeBuilder(this._coinConfig));
    }
    /**
     * Returns the builder to delegate staking account.
     *
     * @param {Transaction} tx - the transaction to be used to delegate staking account
     * @returns {StakingDelegateBuilder} - the staking delegate builder
     */
    getStakingDelegateBuilder(tx) {
        return this.initializeBuilder(tx, new stakingDelegateBuilder_1.StakingDelegateBuilder(this._coinConfig));
    }
    /**
     * Returns the raw message builder to authorized staking account.
     *
     * @param {Transaction} tx - the transaction to be used to intialize the builder
     * @returns {StakingWithdrawBuilder} - the initialized staking authorize builder
     */
    getStakingRawMsgAuthorizeBuilder(tx) {
        const builder = new stakingRawMsgAuthorizeBuilder_1.StakingRawMsgAuthorizeBuilder(this._coinConfig);
        if (tx) {
            builder.initBuilder(tx);
        }
        return builder;
    }
    /**
     * Returns the builder to create a create associated token account transaction.
     */
    getAtaInitializationBuilder(tx) {
        return this.initializeBuilder(tx, new ataInitializationBuilder_1.AtaInitializationBuilder(this._coinConfig));
    }
    /**
     * Returns the builder to create a close associated token account transaction.
     */
    getCloseAtaInitializationBuilder(tx) {
        return this.initializeBuilder(tx, new closeAtaBuilder_1.CloseAtaBuilder(this._coinConfig));
    }
    /**
     * Initialize the builder with the given transaction
     *
     * @param {Transaction | undefined} tx - the transaction used to initialize the builder
     * @param {TransactionBuilder} builder - the builder to be initialized
     * @returns {TransactionBuilder} the builder initialized
     */
    initializeBuilder(tx, builder) {
        if (tx) {
            builder.initBuilder(tx);
        }
        return builder;
    }
    /** Parse the transaction from a raw transaction
     *
     * @param {string} rawTransaction - the raw tx
     * @returns {Transaction} parsed transaction
     */
    parseTransaction(rawTransaction) {
        const tx = new transaction_1.Transaction(this._coinConfig);
        tx.fromRawTransaction(rawTransaction);
        return tx;
    }
}
exports.TransactionBuilderFactory = TransactionBuilderFactory;
//# sourceMappingURL=data:application/json;base64,