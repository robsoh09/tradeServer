"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validInstructionData2 = exports.validInstructionData = exports.nonceAdvanceInstruction = exports.ataCloseInstructionIndexes = exports.ataInitInstructionIndexes = exports.stakingWithdrawInstructionsIndexes = exports.stakingPartialDeactivateInstructionsIndexes = exports.stakingDeactivateInstructionsIndexes = exports.stakingDelegateInstructionsIndexes = exports.stakingAuthorizeInstructionsIndexes = exports.stakingActivateInstructionsIndexes = exports.walletInitInstructionIndexes = exports.VALID_SYSTEM_INSTRUCTION_TYPES = exports.InstructionBuilderTypes = exports.ValidInstructionTypesEnum = exports.UNAVAILABLE_TEXT = exports.STAKE_ACCOUNT_RENT_EXEMPT_AMOUNT = exports.MAX_MEMO_LENGTH = exports.SEED_LENGTH = exports.MEMO_PROGRAM_PK = void 0;
exports.MEMO_PROGRAM_PK = 'MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr';
exports.SEED_LENGTH = 32;
exports.MAX_MEMO_LENGTH = 100;
exports.STAKE_ACCOUNT_RENT_EXEMPT_AMOUNT = 2282880;
exports.UNAVAILABLE_TEXT = 'UNAVAILABLE';
// Sdk instructions, mainly to check decoded types.
var ValidInstructionTypesEnum;
(function (ValidInstructionTypesEnum) {
    ValidInstructionTypesEnum["AdvanceNonceAccount"] = "AdvanceNonceAccount";
    ValidInstructionTypesEnum["Create"] = "Create";
    ValidInstructionTypesEnum["InitializeNonceAccount"] = "InitializeNonceAccount";
    ValidInstructionTypesEnum["StakingInitialize"] = "Initialize";
    ValidInstructionTypesEnum["StakingDelegate"] = "Delegate";
    ValidInstructionTypesEnum["StakingDeactivate"] = "Deactivate";
    ValidInstructionTypesEnum["StakingWithdraw"] = "Withdraw";
    ValidInstructionTypesEnum["Transfer"] = "Transfer";
    ValidInstructionTypesEnum["TokenTransfer"] = "TokenTransfer";
    ValidInstructionTypesEnum["Memo"] = "Memo";
    ValidInstructionTypesEnum["InitializeAssociatedTokenAccount"] = "InitializeAssociatedTokenAccount";
    ValidInstructionTypesEnum["CloseAssociatedTokenAccount"] = "CloseAssociatedTokenAccount";
    ValidInstructionTypesEnum["Allocate"] = "Allocate";
    ValidInstructionTypesEnum["Assign"] = "Assign";
    ValidInstructionTypesEnum["Split"] = "Split";
    ValidInstructionTypesEnum["Authorize"] = "Authorize";
})(ValidInstructionTypesEnum = exports.ValidInstructionTypesEnum || (exports.ValidInstructionTypesEnum = {}));
// Internal instructions types
var InstructionBuilderTypes;
(function (InstructionBuilderTypes) {
    InstructionBuilderTypes["CreateNonceAccount"] = "CreateNonceAccount";
    InstructionBuilderTypes["StakingActivate"] = "Activate";
    InstructionBuilderTypes["StakingDeactivate"] = "Deactivate";
    InstructionBuilderTypes["StakingWithdraw"] = "Withdraw";
    InstructionBuilderTypes["Transfer"] = "Transfer";
    InstructionBuilderTypes["Memo"] = "Memo";
    InstructionBuilderTypes["NonceAdvance"] = "NonceAdvance";
    InstructionBuilderTypes["CreateAssociatedTokenAccount"] = "CreateAssociatedTokenAccount";
    InstructionBuilderTypes["CloseAssociatedTokenAccount"] = "CloseAssociatedTokenAccount";
    InstructionBuilderTypes["TokenTransfer"] = "TokenTransfer";
    InstructionBuilderTypes["StakingAuthorize"] = "Authorize";
    InstructionBuilderTypes["StakingDelegate"] = "Delegate";
})(InstructionBuilderTypes = exports.InstructionBuilderTypes || (exports.InstructionBuilderTypes = {}));
exports.VALID_SYSTEM_INSTRUCTION_TYPES = [
    ValidInstructionTypesEnum.AdvanceNonceAccount,
    ValidInstructionTypesEnum.Create,
    ValidInstructionTypesEnum.StakingInitialize,
    ValidInstructionTypesEnum.StakingDelegate,
    ValidInstructionTypesEnum.StakingDeactivate,
    ValidInstructionTypesEnum.StakingWithdraw,
    ValidInstructionTypesEnum.Transfer,
    ValidInstructionTypesEnum.InitializeNonceAccount,
    ValidInstructionTypesEnum.Memo,
    ValidInstructionTypesEnum.InitializeAssociatedTokenAccount,
    ValidInstructionTypesEnum.CloseAssociatedTokenAccount,
    ValidInstructionTypesEnum.TokenTransfer,
    ValidInstructionTypesEnum.Allocate,
    ValidInstructionTypesEnum.Assign,
    ValidInstructionTypesEnum.Split,
    ValidInstructionTypesEnum.Authorize,
];
/** Const to check the order of the Wallet Init instructions when decode */
exports.walletInitInstructionIndexes = {
    Create: 0,
    InitializeNonceAccount: 1,
    Memo: 2,
};
/** Const to check the order of the Staking Activate instructions when decode */
exports.stakingActivateInstructionsIndexes = {
    Create: 0,
    Initialize: 1,
    Delegate: 2,
    Memo: 3,
};
/** Const to check the order of the Staking Authorize instructions when decode */
exports.stakingAuthorizeInstructionsIndexes = {
    Authorize: 0,
};
/** Const to check the order of the Staking Delegate instructions when decode */
exports.stakingDelegateInstructionsIndexes = {
    Delegate: 0,
};
/** Const to check the order of the Staking Deactivate instructions when decode */
exports.stakingDeactivateInstructionsIndexes = {
    Deactivate: 0,
    Memo: 1,
};
/** Const to check the order of the Partial Staking Deactivate instructions when decoded */
exports.stakingPartialDeactivateInstructionsIndexes = {
    Transfer: 0,
    Allocate: 1,
    Assign: 2,
    Split: 3,
    Deactivate: 4,
    Memo: 5,
};
/** Const to check the order of the Staking Withdraw instructions when decode */
exports.stakingWithdrawInstructionsIndexes = {
    Withdraw: 0,
    Memo: 1,
};
/** Const to check the order of the ATA init instructions when decode */
exports.ataInitInstructionIndexes = {
    InitializeAssociatedTokenAccount: 0,
    Memo: 1,
};
/** Const to check the order of the ATA init instructions when decode */
exports.ataCloseInstructionIndexes = {
    CloseAssociatedTokenAccount: 0,
};
exports.nonceAdvanceInstruction = 'AdvanceNonceAccount';
exports.validInstructionData = '0a00000001000000';
exports.validInstructionData2 = '0a00000000000000';
//# sourceMappingURL=data:application/json;base64,