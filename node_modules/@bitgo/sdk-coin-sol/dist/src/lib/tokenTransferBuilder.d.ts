import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { TransactionType } from '@bitgo/sdk-core';
import { Transaction } from './transaction';
import { TokenAssociateRecipient } from './iface';
import { TransactionBuilder } from './transactionBuilder';
export interface SendParams {
    address: string;
    amount: string;
    tokenName: string;
}
export declare class TokenTransferBuilder extends TransactionBuilder {
    private _sendParams;
    private _createAtaParams;
    constructor(_coinConfig: Readonly<CoinConfig>);
    protected get transactionType(): TransactionType;
    initBuilder(tx: Transaction): void;
    /**
     *  Set a transfer
     *
     * @param {SendParams} params - params for the transfer
     * @param {string} params.address - the receiver token address
     * @param {string} params.amount - the amount sent
     * @param {string} params.tokenName - name of token that is intended to send
     * @returns {TransactionBuilder} This transaction builder
     */
    send({ address, amount, tokenName }: SendParams): this;
    /**
     *
     * @param {TokenAssociateRecipient} recipient - recipient of the associated token account creation
     * @param {string} recipient.ownerAddress - owner of the associated token account
     * @param {string} recipient.tokenName - name of the token that is intended to associate
     * @returns {TransactionBuilder} This transaction builder
     */
    createAssociatedTokenAccount(recipient: TokenAssociateRecipient): this;
    /** @inheritdoc */
    protected buildImplementation(): Promise<Transaction>;
}
//# sourceMappingURL=tokenTransferBuilder.d.ts.map