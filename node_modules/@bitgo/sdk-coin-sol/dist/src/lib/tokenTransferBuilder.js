"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenTransferBuilder = void 0;
const statics_1 = require("@bitgo/statics");
const sdk_core_1 = require("@bitgo/sdk-core");
const utils_1 = require("./utils");
const constants_1 = require("./constants");
const assert_1 = __importDefault(require("assert"));
const transactionBuilder_1 = require("./transactionBuilder");
const lodash_1 = __importDefault(require("lodash"));
const UNSIGNED_BIGINT_MAX = BigInt('18446744073709551615');
class TokenTransferBuilder extends transactionBuilder_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._sendParams = [];
        this._createAtaParams = [];
    }
    get transactionType() {
        return sdk_core_1.TransactionType.Send;
    }
    initBuilder(tx) {
        super.initBuilder(tx);
        for (const instruction of this._instructionsData) {
            if (instruction.type === constants_1.InstructionBuilderTypes.TokenTransfer) {
                const transferInstruction = instruction;
                this.sender(transferInstruction.params.fromAddress);
                this.send({
                    address: transferInstruction.params.toAddress,
                    amount: transferInstruction.params.amount,
                    tokenName: transferInstruction.params.tokenName,
                });
            }
            if (instruction.type === constants_1.InstructionBuilderTypes.CreateAssociatedTokenAccount) {
                const ataInitInstruction = instruction;
                this._createAtaParams.push({
                    ownerAddress: ataInitInstruction.params.ownerAddress,
                    tokenName: ataInitInstruction.params.tokenName,
                });
            }
        }
    }
    /**
     *  Set a transfer
     *
     * @param {SendParams} params - params for the transfer
     * @param {string} params.address - the receiver token address
     * @param {string} params.amount - the amount sent
     * @param {string} params.tokenName - name of token that is intended to send
     * @returns {TransactionBuilder} This transaction builder
     */
    send({ address, amount, tokenName }) {
        (0, utils_1.validateAddress)(address, 'address');
        if (!amount || !(0, utils_1.isValidAmount)(amount)) {
            throw new sdk_core_1.BuildTransactionError('Invalid or missing amount, got: ' + amount);
        }
        if (BigInt(amount) > UNSIGNED_BIGINT_MAX) {
            throw new sdk_core_1.BuildTransactionError(`input amount ${amount} exceeds big int limit ${UNSIGNED_BIGINT_MAX}`);
        }
        this._sendParams.push({ address, amount, tokenName: tokenName });
        return this;
    }
    /**
     *
     * @param {TokenAssociateRecipient} recipient - recipient of the associated token account creation
     * @param {string} recipient.ownerAddress - owner of the associated token account
     * @param {string} recipient.tokenName - name of the token that is intended to associate
     * @returns {TransactionBuilder} This transaction builder
     */
    createAssociatedTokenAccount(recipient) {
        (0, utils_1.validateOwnerAddress)(recipient.ownerAddress);
        const token = (0, utils_1.getSolTokenFromTokenName)(recipient.tokenName);
        if (!token) {
            throw new sdk_core_1.BuildTransactionError('Invalid token name, got: ' + recipient.tokenName);
        }
        (0, utils_1.validateMintAddress)(token.tokenAddress);
        this._createAtaParams.push(recipient);
        return this;
    }
    /** @inheritdoc */
    async buildImplementation() {
        (0, assert_1.default)(this._sender, 'Sender must be set before building the transaction');
        const sendInstructions = await Promise.all(this._sendParams.map(async (sendParams) => {
            const coin = (0, utils_1.getSolTokenFromTokenName)(sendParams.tokenName);
            (0, assert_1.default)(coin instanceof statics_1.SolCoin);
            const sourceAddress = await (0, utils_1.getAssociatedTokenAccountAddress)(coin.tokenAddress, this._sender);
            return {
                type: constants_1.InstructionBuilderTypes.TokenTransfer,
                params: {
                    fromAddress: this._sender,
                    toAddress: sendParams.address,
                    amount: sendParams.amount,
                    tokenName: coin.name,
                    sourceAddress: sourceAddress,
                },
            };
        }));
        const uniqueCreateAtaParams = lodash_1.default.uniqBy(this._createAtaParams, (recipient) => {
            return recipient.ownerAddress + recipient.tokenName;
        });
        const createAtaInstructions = await Promise.all(uniqueCreateAtaParams.map(async (recipient) => {
            const coin = (0, utils_1.getSolTokenFromTokenName)(recipient.tokenName);
            (0, assert_1.default)(coin instanceof statics_1.SolCoin);
            const recipientTokenAddress = await (0, utils_1.getAssociatedTokenAccountAddress)(coin.tokenAddress, recipient.ownerAddress);
            return {
                type: constants_1.InstructionBuilderTypes.CreateAssociatedTokenAccount,
                params: {
                    ownerAddress: recipient.ownerAddress,
                    tokenName: coin.name,
                    mintAddress: coin.tokenAddress,
                    ataAddress: recipientTokenAddress,
                    payerAddress: this._sender,
                },
            };
        }));
        // order is important, createAtaInstructions must be before sendInstructions
        this._instructionsData = [...createAtaInstructions, ...sendInstructions];
        return await super.buildImplementation();
    }
}
exports.TokenTransferBuilder = TokenTransferBuilder;
//# sourceMappingURL=data:application/json;base64,