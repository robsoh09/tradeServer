"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StakingDelegateBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const transactionBuilder_1 = require("./transactionBuilder");
const constants_1 = require("./constants");
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("./utils");
class StakingDelegateBuilder extends transactionBuilder_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
    }
    get transactionType() {
        return sdk_core_1.TransactionType.StakingDelegate;
    }
    /** @inheritdoc */
    initBuilder(tx) {
        super.initBuilder(tx);
        const stakingAddresses = [];
        for (const instruction of this._instructionsData) {
            if (instruction.type === constants_1.InstructionBuilderTypes.StakingDelegate) {
                const activateInstruction = instruction;
                this.sender(activateInstruction.params.fromAddress);
                stakingAddresses.push(activateInstruction.params.stakingAddress);
                this.validator(activateInstruction.params.validator);
            }
        }
        if (stakingAddresses.length > 1) {
            this.stakingAddresses(stakingAddresses);
        }
        else {
            this.stakingAddress(stakingAddresses[0]);
        }
    }
    /**
     * The address of the staking account.
     *
     * @param {string} stakingAddress public address of the staking account.
     * @returns {StakingDelegateBuilder} This staking delegate builder.
     *
     * @see https://docs.solana.com/staking/stake-accounts#account-address
     */
    stakingAddress(stakingAddress) {
        (0, utils_1.validateAddress)(stakingAddress, 'stakingAddress');
        this._stakingAddress = stakingAddress;
        return this;
    }
    /**
     * The staking addresses of the staking account.
     *
     * @param {string[]} stakingAddresses public address of the staking accounts
     * @returns {StakingDelegateBuilder} This staking delegate builder.
     *
     * @see https://docs.solana.com/staking/stake-accounts#account-address
     */
    stakingAddresses(stakingAddresses) {
        (0, assert_1.default)(stakingAddresses.length > 0, 'stakingAddresses must not be empty');
        for (const stakingAddress of stakingAddresses) {
            (0, utils_1.validateAddress)(stakingAddress, 'stakingAddress');
        }
        this._stakingAddresses = stakingAddresses;
        return this;
    }
    /**
     * Set validator address to delegate funds to.
     *
     * @param {string} validator Validator address to delegate funds to.
     * @returns {StakingDelegateBuilder} This staking builder.
     *
     */
    validator(validator) {
        (0, utils_1.validateAddress)(validator, 'validator');
        this._validator = validator;
        return this;
    }
    /** @inheritdoc */
    async buildImplementation() {
        (0, assert_1.default)(this._sender, 'Sender must be set before building the transaction');
        (0, assert_1.default)(this._validator, 'Validator must be set before building the transaction');
        if (this._stakingAddresses && this._stakingAddresses.length > 0) {
            this._instructionsData = [];
            for (const stakingAddress of this._stakingAddresses) {
                (0, assert_1.default)(stakingAddress, 'Staking Address must be set before building the transaction');
                if (this._sender === stakingAddress) {
                    throw new sdk_core_1.BuildTransactionError('Sender address cannot be the same as the Staking address');
                }
                const stakingAccountData = {
                    type: constants_1.InstructionBuilderTypes.StakingDelegate,
                    params: {
                        fromAddress: this._sender,
                        stakingAddress: stakingAddress,
                        validator: this._validator,
                    },
                };
                this._instructionsData.push(stakingAccountData);
            }
        }
        else {
            (0, assert_1.default)(this._stakingAddress, 'Staking Address must be set before building the transaction');
            if (this._sender === this._stakingAddress) {
                throw new sdk_core_1.BuildTransactionError('Sender address cannot be the same as the Staking address');
            }
            const stakingAccountData = {
                type: constants_1.InstructionBuilderTypes.StakingDelegate,
                params: {
                    fromAddress: this._sender,
                    stakingAddress: this._stakingAddress,
                    validator: this._validator,
                },
            };
            this._instructionsData = [stakingAccountData];
        }
        return await super.buildImplementation();
    }
}
exports.StakingDelegateBuilder = StakingDelegateBuilder;
//# sourceMappingURL=data:application/json;base64,