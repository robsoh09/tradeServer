import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { TransactionType } from '@bitgo/sdk-core';
import { Transaction } from './transaction';
import { TransactionBuilder } from './transactionBuilder';
export declare class StakingAuthorizeBuilder extends TransactionBuilder {
    protected _stakingAddress: string;
    protected _newAuthorizedAddress: string;
    protected _oldAuthorizedAddress: string;
    constructor(_coinConfig: Readonly<CoinConfig>);
    protected get transactionType(): TransactionType;
    /** @inheritdoc */
    initBuilder(tx: Transaction): void;
    /**
     * The address of the staking account.
     *
     * @param {string} stakingAddress public address of the staking account.
     * @returns {StakeBuilder} This staking builder.
     *
     * @see https://docs.solana.com/staking/stake-accounts#account-address
     */
    stakingAddress(stakingAddress: string): this;
    /**
     * The address of the new staking account authorization.
     *
     * @param {string} stakingAddress public address of the staking account.
     * @returns {StakeBuilder} This staking builder.
     *
     * @see https://docs.solana.com/staking/stake-accounts#account-address
     */
    newAuthorizedAddress(newAuthorizedAddress: string): this;
    /**
     * The address of the new staking account authorization.
     *
     * @param {string} stakingAddress public address of the staking account.
     * @returns {StakeBuilder} This staking builder.
     *
     * @see https://docs.solana.com/staking/stake-accounts#account-address
     */
    oldAuthorizedAddress(oldAuthorizedAddress: string): this;
    /** @inheritdoc */
    protected buildImplementation(): Promise<Transaction>;
}
//# sourceMappingURL=stakingAuthorizeBuilder.d.ts.map