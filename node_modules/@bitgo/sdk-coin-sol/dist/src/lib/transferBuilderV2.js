"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferBuilderV2 = void 0;
const transactionBuilder_1 = require("./transactionBuilder");
const sdk_core_1 = require("@bitgo/sdk-core");
const utils_1 = require("./utils");
const statics_1 = require("@bitgo/statics");
const assert_1 = __importDefault(require("assert"));
const constants_1 = require("./constants");
const UNSIGNED_BIGINT_MAX = BigInt('18446744073709551615');
class TransferBuilderV2 extends transactionBuilder_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._sendParams = [];
    }
    get transactionType() {
        return sdk_core_1.TransactionType.Send;
    }
    initBuilder(tx) {
        super.initBuilder(tx);
        for (const instruction of this._instructionsData) {
            if (instruction.type === constants_1.InstructionBuilderTypes.Transfer) {
                const transferInstruction = instruction;
                this.sender(transferInstruction.params.fromAddress);
                this.send({
                    address: transferInstruction.params.toAddress,
                    amount: transferInstruction.params.amount,
                });
            }
            else if (instruction.type === constants_1.InstructionBuilderTypes.TokenTransfer) {
                const transferInstruction = instruction;
                this.sender(transferInstruction.params.fromAddress);
                this.send({
                    address: transferInstruction.params.toAddress,
                    amount: transferInstruction.params.amount,
                    tokenName: transferInstruction.params.tokenName,
                });
            }
        }
    }
    /**
     * Set a feePayer
     * @param payerAddress
     */
    feePayer(payerAddress) {
        (0, utils_1.validateAddress)(payerAddress, 'address');
        this._feePayer = payerAddress;
        return this;
    }
    /**
     *  Set a transfer
     *
     * @param {SendParams} sendParams - sendParams
     * @returns {TransactionBuilder} This transaction builder
     */
    send(sendParams) {
        (0, utils_1.validateAddress)(sendParams.address, 'address');
        if (!sendParams.amount || !(0, utils_1.isValidAmount)(sendParams.amount)) {
            throw new sdk_core_1.BuildTransactionError('Invalid or missing amount, got: ' + sendParams.amount);
        }
        if (sendParams.tokenName && BigInt(sendParams.amount) > UNSIGNED_BIGINT_MAX) {
            throw new sdk_core_1.BuildTransactionError(`input amount ${sendParams.amount} exceeds big int limit ${UNSIGNED_BIGINT_MAX}`);
        }
        else if (!sendParams.tokenName && BigInt(sendParams.amount) > BigInt(Number.MAX_SAFE_INTEGER)) {
            throw new sdk_core_1.BuildTransactionError(`input amount ${sendParams.amount} exceeds max safe int ${Number.MAX_SAFE_INTEGER}`);
        }
        this._sendParams.push(sendParams);
        return this;
    }
    /** @inheritdoc */
    async buildImplementation() {
        (0, assert_1.default)(this._sender, 'Sender must be set before building the transaction');
        this._instructionsData = await Promise.all(this._sendParams.map(async (sendParams) => {
            if (sendParams.tokenName) {
                const coin = (0, utils_1.getSolTokenFromTokenName)(sendParams.tokenName);
                (0, assert_1.default)(coin instanceof statics_1.SolCoin);
                const sourceAddress = await (0, utils_1.getAssociatedTokenAccountAddress)(coin.tokenAddress, this._sender);
                return {
                    type: constants_1.InstructionBuilderTypes.TokenTransfer,
                    params: {
                        fromAddress: this._sender,
                        toAddress: sendParams.address,
                        amount: sendParams.amount,
                        tokenName: sendParams.tokenName,
                        sourceAddress: sourceAddress,
                    },
                };
            }
            else {
                return {
                    type: constants_1.InstructionBuilderTypes.Transfer,
                    params: {
                        fromAddress: this._sender,
                        toAddress: sendParams.address,
                        amount: sendParams.amount,
                    },
                };
            }
        }));
        return await super.buildImplementation();
    }
}
exports.TransferBuilderV2 = TransferBuilderV2;
//# sourceMappingURL=data:application/json;base64,