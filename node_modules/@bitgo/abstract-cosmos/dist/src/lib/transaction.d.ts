/// <reference types="node" />
import { BaseKey, BaseTransaction, TransactionType } from '@bitgo/sdk-core';
import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { CosmosLikeTransaction, TransactionExplanation, TxData } from './iface';
import { CosmosUtils } from './utils';
export declare class CosmosTransaction extends BaseTransaction {
    protected _cosmosLikeTransaction: CosmosLikeTransaction;
    protected _accountNumber: number;
    protected _chainId: string;
    protected _utils: CosmosUtils;
    constructor(_coinConfig: Readonly<CoinConfig>, utils: CosmosUtils);
    get cosmosLikeTransaction(): CosmosLikeTransaction;
    set cosmosLikeTransaction(cosmosLikeTransaction: Readonly<CosmosLikeTransaction>);
    get chainId(): string;
    set chainId(chainId: string);
    get accountNumber(): number;
    set accountNumber(accountNumber: number);
    /** @inheritDoc **/
    get id(): string;
    /** @inheritdoc */
    canSign(key: BaseKey): boolean;
    /** @inheritdoc */
    toBroadcastFormat(): string;
    /** @inheritdoc */
    toJson(): TxData;
    /**
     * Add a signature to the transaction
     * @param {string} signature in hex format
     */
    addSignature(signature: string): void;
    /** @inheritDoc */
    explainTransaction(): TransactionExplanation;
    /**
     * Set the transaction type.
     * @param {TransactionType} transactionType The transaction type to be set.
     */
    set transactionType(transactionType: TransactionType);
    /**
     * Serialize the transaction to a JSON string
     * @returns {string} serialized base64 encoded transaction
     */
    serialize(): string;
    /** @inheritdoc **/
    get signablePayload(): Buffer;
    /**
     * Returns a complete explanation for a transfer transaction
     * Currently only supports one message per transfer.
     * @param {TxData} json The transaction data in json format
     * @param {TransactionExplanation} explanationResult The transaction explanation to be completed
     * @returns {TransactionExplanation}
     */
    explainTransactionInternal(json: TxData, explanationResult: TransactionExplanation): TransactionExplanation;
    /**
     * Load the input and output data on this transaction using the transaction json
     * if there are outputs. For transactions without outputs (e.g. wallet initializations),
     * this function will not do anything
     */
    loadInputsAndOutputs(): void;
    /**
     * Sets this transaction payload
     * @param rawTransaction raw transaction in base64 encoded string
     */
    enrichTransactionDetailsFromRawTransaction(rawTransaction: string): void;
}
//# sourceMappingURL=transaction.d.ts.map