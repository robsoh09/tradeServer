"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CosmosUtils = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const amino_1 = require("@cosmjs/amino");
const encoding_1 = require("@cosmjs/encoding");
const proto_signing_1 = require("@cosmjs/proto-signing");
const stargate_1 = require("@cosmjs/stargate");
const bignumber_js_1 = require("bignumber.js");
const tx_1 = require("cosmjs-types/cosmos/tx/v1beta1/tx");
const tx_2 = require("cosmjs-types/cosmwasm/wasm/v1/tx");
const crypto_1 = require("crypto");
const constants = require("./constants");
const keyPair_1 = require("./keyPair");
class CosmosUtils {
    constructor() {
        this.registry = new proto_signing_1.Registry([...stargate_1.defaultRegistryTypes]);
        this.registry.register(constants.executeContractMsgTypeUrl, tx_2.MsgExecuteContract);
    }
    /** @inheritdoc */
    isValidBlockId(hash) {
        return this.validateBlake2b(hash);
    }
    /** @inheritdoc */
    isValidPrivateKey(key) {
        try {
            new keyPair_1.CosmosKeyPair({ prv: key });
            return true;
        }
        catch {
            return false;
        }
    }
    /** @inheritdoc */
    isValidPublicKey(key) {
        try {
            new keyPair_1.CosmosKeyPair({ pub: key });
            return true;
        }
        catch {
            return false;
        }
    }
    /** @inheritdoc */
    isValidSignature(signature) {
        throw new sdk_core_1.NotImplementedError('isValidSignature not implemented');
    }
    /** @inheritdoc */
    isValidTransactionId(txId) {
        return this.validateBlake2b(txId);
    }
    /**
     * Checks if transaction hash is in valid black2b format
     */
    validateBlake2b(hash) {
        if ((hash === null || hash === void 0 ? void 0 : hash.length) !== 64) {
            return false;
        }
        return hash.match(/^[a-zA-Z0-9]+$/) !== null;
    }
    /**
     * Validates whether amounts are in range
     *
     * @param {number[]} amounts - the amounts to validate
     * @returns {boolean} - the validation result
     */
    isValidAmounts(amounts) {
        for (const amount of amounts) {
            if (!this.isValidAmount(amount)) {
                return false;
            }
        }
        return true;
    }
    /**
     * Validates whether amount is in range
     * @param {number} amount
     * @returns {boolean} the validation result
     */
    isValidAmount(amount) {
        const bigNumberAmount = new bignumber_js_1.default(amount);
        if (!bigNumberAmount.isInteger() || bigNumberAmount.isLessThanOrEqualTo(0)) {
            return false;
        }
        return true;
    }
    /**
     * Decodes raw tx data into messages, signing info, and fee data
     * @param {string} txHex - raw base64 tx
     * @returns {DecodedTxRaw} Decoded transaction
     */
    getDecodedTxFromRawBase64(txRaw) {
        try {
            return (0, proto_signing_1.decodeTxRaw)((0, encoding_1.fromBase64)(txRaw));
        }
        catch (e) {
            throw new sdk_core_1.ParseTransactionError('Error decoding TxRaw base64 encoded string: ' + e.message);
        }
    }
    /**
     * Returns the array of messages in the body of the decoded transaction
     * @param {DecodedTxRaw} decodedTx
     * @returns {EncodeObject[]} messages along with type url
     */
    getEncodedMessagesFromDecodedTx(decodedTx) {
        return decodedTx.body.messages;
    }
    /**
     * Checks the txn sequence is valid or not
     * @param {number} sequence
     */
    validateSequence(sequence) {
        if (sequence < 0) {
            throw new sdk_core_1.InvalidTransactionError('Invalid sequence: less than zero');
        }
    }
    /**
     * Pulls the sequence number from a DecodedTxRaw AuthInfo property
     * @param {DecodedTxRaw} decodedTx
     * @returns {number} sequence
     */
    getSequenceFromDecodedTx(decodedTx) {
        return Number(decodedTx.authInfo.signerInfos[0].sequence);
    }
    /**
     * Pulls the typeUrl from the encoded message of a DecodedTxRaw
     * @param {DecodedTxRaw} decodedTx
     * @returns {string} cosmos proto type url
     */
    getTypeUrlFromDecodedTx(decodedTx) {
        const encodedMessage = this.getEncodedMessagesFromDecodedTx(decodedTx)[0];
        return encodedMessage.typeUrl;
    }
    /**
     * Returns the fee data from the decoded transaction
     * @param {DecodedTxRaw} decodedTx
     * @returns {FeeData} fee data
     */
    getGasBudgetFromDecodedTx(decodedTx) {
        var _a, _b;
        return {
            amount: (_a = decodedTx.authInfo.fee) === null || _a === void 0 ? void 0 : _a.amount,
            gasLimit: Number((_b = decodedTx.authInfo.fee) === null || _b === void 0 ? void 0 : _b.gasLimit),
        };
    }
    /**
     * Returns the publicKey from the decoded transaction
     * @param {DecodedTxRaw} decodedTx
     * @returns {string | undefined} publicKey in hex format if it exists, undefined otherwise
     */
    getPublicKeyFromDecodedTx(decodedTx) {
        var _a, _b, _c, _d;
        const publicKeyUInt8Array = (_b = (_a = decodedTx.authInfo.signerInfos) === null || _a === void 0 ? void 0 : _a[0].publicKey) === null || _b === void 0 ? void 0 : _b.value;
        if (publicKeyUInt8Array) {
            return (0, encoding_1.toHex)((0, encoding_1.fromBase64)((_d = (0, proto_signing_1.decodePubkey)((_c = decodedTx.authInfo.signerInfos) === null || _c === void 0 ? void 0 : _c[0].publicKey)) === null || _d === void 0 ? void 0 : _d.value));
        }
        return undefined;
    }
    /**
     * Returns the array of MessageData[] from the decoded transaction
     * @param {DecodedTxRaw} decodedTx
     * @returns {MessageData[]} Send transaction message data
     */
    getSendMessageDataFromDecodedTx(decodedTx) {
        return decodedTx.body.messages.map((message) => {
            const value = this.registry.decode(message);
            return {
                value: {
                    fromAddress: value.fromAddress,
                    toAddress: value.toAddress,
                    amount: value.amount,
                },
                typeUrl: message.typeUrl,
            };
        });
    }
    /**
     * Returns the array of MessageData[] from the decoded transaction
     * @param {DecodedTxRaw} decodedTx
     * @returns {MessageData[]} Delegate of undelegate transaction message data
     */
    getDelegateOrUndelegateMessageDataFromDecodedTx(decodedTx) {
        return decodedTx.body.messages.map((message) => {
            const value = this.registry.decode(message);
            return {
                value: {
                    delegatorAddress: value.delegatorAddress,
                    validatorAddress: value.validatorAddress,
                    amount: value.amount,
                },
                typeUrl: message.typeUrl,
            };
        });
    }
    /**
     * Returns the array of MessageData[] from the decoded transaction
     * @param {DecodedTxRaw} decodedTx
     * @returns {MessageData[]} Redelegate transaction message data
     */
    getRedelegateMessageDataFromDecodedTx(decodedTx) {
        return decodedTx.body.messages.map((message) => {
            const value = this.registry.decode(message);
            return {
                value: {
                    delegatorAddress: value.delegatorAddress,
                    validatorSrcAddress: value.validatorSrcAddress,
                    validatorDstAddress: value.validatorDstAddress,
                    amount: value.amount,
                },
                typeUrl: message.typeUrl,
            };
        });
    }
    /**
     * Returns the array of MessageData[] from the decoded transaction
     * @param {DecodedTxRaw} decodedTx
     * @returns {MessageData[]} WithdrawDelegatorRewards transaction message data
     */
    getWithdrawRewardsMessageDataFromDecodedTx(decodedTx) {
        return decodedTx.body.messages.map((message) => {
            const value = this.registry.decode(message);
            return {
                value: {
                    delegatorAddress: value.delegatorAddress,
                    validatorAddress: value.validatorAddress,
                },
                typeUrl: message.typeUrl,
            };
        });
    }
    /**
     * Returns the array of MessageData[] from the decoded transaction
     * @param {DecodedTxRaw} decodedTx
     * @returns {MessageData[]} Delegate of undelegate transaction message data
     */
    getWithdrawDelegatorRewardsMessageDataFromDecodedTx(decodedTx) {
        return decodedTx.body.messages.map((message) => {
            const value = this.registry.decode(message);
            return {
                value: {
                    delegatorAddress: value.delegatorAddress,
                    validatorAddress: value.validatorAddress,
                },
                typeUrl: message.typeUrl,
            };
        });
    }
    /**
     * Get a cosmos chain address from its equivalent hex
     * @param {string} prefix
     * @param {string} addressHex
     * @returns {string}
     */
    getCosmosLikeAddressFromHex(prefix, addressHex) {
        if (addressHex.indexOf('0x') === 0) {
            addressHex = addressHex.slice(2);
        }
        return (0, encoding_1.toBech32)(prefix, (0, encoding_1.fromHex)(addressHex));
    }
    /**
     * Get a EVM chain address from its equivalent hex
     * @param {string} prefix
     * @param {string} addressHex
     * @returns {string}
     */
    getEvmLikeAddressFromCosmos(cosmosLikeAddress) {
        return '0x' + (0, encoding_1.toHex)((0, encoding_1.fromBech32)(cosmosLikeAddress).data);
    }
    /**
     * Returns the array of MessageData[] from the decoded transaction
     * @param {DecodedTxRaw} decodedTx
     * @returns {MessageData[]} Execute contract transaction message data
     */
    getExecuteContractMessageDataFromDecodedTx(decodedTx) {
        return decodedTx.body.messages.map((message) => {
            const value = this.registry.decode(message);
            return {
                value: {
                    sender: value.sender,
                    contract: value.contract,
                    msg: value.msg,
                    funds: value.funds,
                },
                typeUrl: message.typeUrl,
            };
        });
    }
    /**
     * Determines bitgo transaction type based on cosmos proto type url
     * @param {string} typeUrl
     * @returns {TransactionType | undefined} TransactionType if url is supported else undefined
     */
    getTransactionTypeFromTypeUrl(typeUrl) {
        switch (typeUrl) {
            case constants.sendMsgTypeUrl:
                return sdk_core_1.TransactionType.Send;
            case constants.delegateMsgTypeUrl:
                return sdk_core_1.TransactionType.StakingActivate;
            case constants.undelegateMsgTypeUrl:
                return sdk_core_1.TransactionType.StakingDeactivate;
            case constants.withdrawDelegatorRewardMsgTypeUrl:
                return sdk_core_1.TransactionType.StakingWithdraw;
            case constants.executeContractMsgTypeUrl:
                return sdk_core_1.TransactionType.ContractCall;
            case constants.redelegateTypeUrl:
                return sdk_core_1.TransactionType.StakingRedelegate;
            default:
                return undefined;
        }
    }
    /**
     * Takes a hex encoded pubkey, converts it to the Amino JSON representation (type/value wrapper)
     * and returns it as protobuf `Any`
     * @param {string} pubkey hex encoded compressed secp256k1 public key
     * @returns {Any} pubkey encoded as protobuf `Any`
     */
    getEncodedPubkey(pubkey) {
        return (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)((0, encoding_1.fromHex)(pubkey)));
    }
    /**
     * Creates a txRaw from an cosmos like transaction @see CosmosLikeTransaction
     * @Precondition cosmosLikeTransaction.publicKey must be defined
     * @param {CosmosLikeTransaction} cosmosLikeTransaction
     * @returns {TxRaw} Unsigned raw transaction
     */
    createTxRawFromCosmosLikeTransaction(cosmosLikeTransaction) {
        if (!cosmosLikeTransaction.publicKey) {
            throw new Error('publicKey is required to create a txRaw');
        }
        const encodedPublicKey = this.getEncodedPubkey(cosmosLikeTransaction.publicKey);
        const messages = cosmosLikeTransaction.sendMessages;
        let txBodyValue;
        if (cosmosLikeTransaction.memo) {
            txBodyValue = {
                memo: cosmosLikeTransaction.memo,
                messages: messages,
            };
        }
        else {
            txBodyValue = {
                messages: messages,
            };
        }
        const txBodyBytes = this.registry.encodeTxBody(txBodyValue);
        const sequence = cosmosLikeTransaction.sequence;
        const authInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{ pubkey: encodedPublicKey, sequence }], cosmosLikeTransaction.gasBudget.amount, cosmosLikeTransaction.gasBudget.gasLimit, undefined, undefined, undefined);
        return tx_1.TxRaw.fromPartial({
            bodyBytes: txBodyBytes,
            authInfoBytes: authInfoBytes,
        });
    }
    /**
     * Encodes a signature into a txRaw
     * @param {string} publicKeyHex publicKey in hex encoded string format
     * @param {string} signatureHex signature in hex encoded string format
     * @param {TxRaw} unsignedTx raw transaction
     * @returns {TxRaw} Signed raw transaction
     */
    createSignedTxRaw(publicKeyHex, signatureHex, unsignedTx) {
        const stdSignature = (0, amino_1.encodeSecp256k1Signature)((0, encoding_1.fromHex)(publicKeyHex), (0, encoding_1.fromHex)(signatureHex));
        return tx_1.TxRaw.fromPartial({
            bodyBytes: unsignedTx.bodyBytes,
            authInfoBytes: unsignedTx.authInfoBytes,
            signatures: [(0, encoding_1.fromBase64)(stdSignature.signature)],
        });
    }
    /**
     * Decodes a raw transaction into a DecodedTxRaw and checks if it has non empty signatures
     * @param {string} rawTransaction
     * @returns {boolean} true if transaction is signed else false
     */
    isSignedRawTx(rawTransaction) {
        const decodedTx = this.getDecodedTxFromRawBase64(rawTransaction);
        if (decodedTx.signatures.length > 0) {
            return true;
        }
        return false;
    }
    /**
     * Returns whether or not the string is a valid protocol public key
     * @param {string | undefined} publicKey - the  public key to be validated
     */
    validatePublicKey(publicKey) {
        if (publicKey !== undefined) {
            try {
                new keyPair_1.CosmosKeyPair({ pub: publicKey });
            }
            catch {
                throw new sdk_core_1.InvalidTransactionError(`Invalid Public Key`);
            }
        }
    }
    /**
     * Creates a sign doc from an cosmos like transaction @see CosmosLikeTransaction
     * @Precondition cosmosLikeTransaction.accountNumber and cosmosLikeTransaction.chainId must be defined
     * @param {CosmosLikeTransaction} cosmosLikeTransaction
     * @returns {SignDoc} sign doc
     */
    createSignDoc(cosmosLikeTransaction, accountNumber, chainId) {
        if (!accountNumber) {
            throw new Error('accountNumber is required to create a sign doc');
        }
        if (!chainId) {
            throw new Error('chainId is required to create a sign doc');
        }
        if (!cosmosLikeTransaction) {
            throw new Error('cosmosLikeTransaction is required to create a sign doc');
        }
        const txRaw = this.createTxRawFromCosmosLikeTransaction(cosmosLikeTransaction);
        return (0, proto_signing_1.makeSignDoc)(txRaw.bodyBytes, txRaw.authInfoBytes, chainId, accountNumber);
    }
    /**
     * Returns whether or not the string is a valid hex
     * @param hexString - hex string format
     * @returns {boolean} true if string is hex else false
     */
    isValidHexString(hexString) {
        return /^[0-9A-Fa-f]*$/.test(hexString);
    }
    /**
     * Validates the WithdrawDelegatorRewardsMessage
     * @param {WithdrawDelegatorRewardsMessage} withdrawRewardsMessage - The WithdrawDelegatorRewardsMessage to validate.
     * @throws {InvalidTransactionError} Throws an error if the validatorAddress or delegatorAddress is invalid or missing.
     */
    validateWithdrawRewardsMessage(withdrawRewardsMessage) {
        if (!withdrawRewardsMessage.validatorAddress ||
            !this.isValidValidatorAddress(withdrawRewardsMessage.validatorAddress)) {
            throw new sdk_core_1.InvalidTransactionError(`Invalid WithdrawDelegatorRewardsMessage validatorAddress: ` + withdrawRewardsMessage.validatorAddress);
        }
        if (!withdrawRewardsMessage.delegatorAddress || !this.isValidAddress(withdrawRewardsMessage.delegatorAddress)) {
            throw new sdk_core_1.InvalidTransactionError(`Invalid WithdrawDelegatorRewardsMessage delegatorAddress: ` + withdrawRewardsMessage.delegatorAddress);
        }
    }
    /**
     * Helper method to check if the specified properties in an object are missing or null.
     * @param {Object} obj - The object to check.
     * @param {string[]} keys - An array of property keys to check.
     * @throws {Error} Throws an error if any of the specified properties are missing or null.
     */
    isObjPropertyNull(obj, keys) {
        for (const key of keys) {
            if (obj[key] == null) {
                throw new Error(`Missing or null value for property ${key}`);
            }
        }
    }
    /**
     * Validates the DelegateOrUndelegeteMessage
     * @param {DelegateOrUndelegeteMessage} delegateMessage - The DelegateOrUndelegeteMessage to validate.
     * @throws {InvalidTransactionError} Throws an error if the validatorAddress, delegatorAddress, or amount is invalid or missing.
     */
    validateDelegateOrUndelegateMessage(delegateMessage) {
        this.isObjPropertyNull(delegateMessage, ['validatorAddress', 'delegatorAddress']);
        if (!this.isValidValidatorAddress(delegateMessage.validatorAddress)) {
            throw new sdk_core_1.InvalidTransactionError(`Invalid DelegateOrUndelegeteMessage validatorAddress: ` + delegateMessage.validatorAddress);
        }
        if (!this.isValidAddress(delegateMessage.delegatorAddress)) {
            throw new sdk_core_1.InvalidTransactionError(`Invalid DelegateOrUndelegeteMessage delegatorAddress: ` + delegateMessage.delegatorAddress);
        }
        this.validateAmount(delegateMessage.amount);
    }
    /**
     * Validates the RedelegateMessage
     * @param {DelegateOrUndelegeteMessage} redelegateMessage - The RedelegateMessage to validate.
     * @throws {InvalidTransactionError} Throws an error if the validatorSrcAddress, validatorDstAddress, delegatorAddress, or amount is invalid or missing.
     */
    validateRedelegateMessage(redelegateMessage) {
        this.isObjPropertyNull(redelegateMessage, ['validatorSrcAddress', 'validatorDstAddress', 'delegatorAddress']);
        if (!this.isValidValidatorAddress(redelegateMessage.validatorSrcAddress)) {
            throw new sdk_core_1.InvalidTransactionError(`Invalid RedelegateMessage validatorSrcAddress: ` + redelegateMessage.validatorSrcAddress);
        }
        if (!this.isValidValidatorAddress(redelegateMessage.validatorDstAddress)) {
            throw new sdk_core_1.InvalidTransactionError(`Invalid RedelegateMessage validatorDstAddress: ` + redelegateMessage.validatorDstAddress);
        }
        if (!this.isValidAddress(redelegateMessage.delegatorAddress)) {
            throw new sdk_core_1.InvalidTransactionError(`Invalid DelegateOrUndelegeteMessage delegatorAddress: ` + redelegateMessage.delegatorAddress);
        }
        this.validateAmount(redelegateMessage.amount);
    }
    /**
     * Validates the MessageData
     * @param {MessageData} messageData - The MessageData to validate.
     * @throws {InvalidTransactionError} Throws an error if the messageData is invalid or missing required fields.
     */
    validateMessageData(messageData) {
        if (messageData == null) {
            throw new sdk_core_1.InvalidTransactionError(`Invalid MessageData: undefined`);
        }
        if (messageData.typeUrl == null || this.getTransactionTypeFromTypeUrl(messageData.typeUrl) == null) {
            throw new sdk_core_1.InvalidTransactionError(`Invalid MessageData typeurl: ` + messageData.typeUrl);
        }
        const type = this.getTransactionTypeFromTypeUrl(messageData.typeUrl);
        switch (type) {
            case sdk_core_1.TransactionType.Send: {
                const value = messageData.value;
                this.validateSendMessage(value);
                break;
            }
            case sdk_core_1.TransactionType.StakingActivate:
            case sdk_core_1.TransactionType.StakingDeactivate: {
                const value = messageData.value;
                this.validateDelegateOrUndelegateMessage(value);
                break;
            }
            case sdk_core_1.TransactionType.StakingWithdraw: {
                const value = messageData.value;
                this.validateWithdrawRewardsMessage(value);
                break;
            }
            case sdk_core_1.TransactionType.ContractCall: {
                const value = messageData.value;
                this.validateExecuteContractMessage(value, sdk_core_1.TransactionType.ContractCall);
                break;
            }
            case sdk_core_1.TransactionType.StakingRedelegate: {
                const value = messageData.value;
                this.validateRedelegateMessage(value);
                break;
            }
            default:
                throw new sdk_core_1.InvalidTransactionError(`Invalid MessageData TypeUrl is not supported: ` + messageData.typeUrl);
        }
    }
    /**
     * Validates the Cosmos-like transaction.
     * @param {CosmosLikeTransaction} tx - The transaction to validate.
     * @throws {InvalidTransactionError} Throws an error if the transaction is invalid or missing required fields.
     */
    validateTransaction(tx) {
        this.validateSequence(tx.sequence);
        this.validateGasBudget(tx.gasBudget);
        this.validatePublicKey(tx.publicKey);
        if (tx.sendMessages === undefined || tx.sendMessages.length === 0) {
            throw new sdk_core_1.InvalidTransactionError('Invalid transaction: messages is required');
        }
        else {
            tx.sendMessages.forEach((message) => this.validateMessageData(message));
        }
    }
    /**
     * Creates a Cosmos-like transaction.
     * @param {number} sequence - The sender address sequence number for the transaction.
     * @param {MessageData[]} messages - The array of message data for the transaction.
     * @param {FeeData} gasBudget - The fee data for the transaction.
     * @param {string} [publicKey] - The public key associated with the sender.
     * @param {string} [memo] - The memo for the transaction.
     * @returns {CosmosLikeTransaction} Returns the created Cosmos-like transaction.
     * @throws {InvalidTransactionError} Throws an error if the created transaction is invalid.
     */
    createTransaction(sequence, messages, gasBudget, publicKey, memo) {
        const cosmosLikeTxn = {
            sequence: sequence,
            sendMessages: messages,
            gasBudget: gasBudget,
            publicKey: publicKey,
            memo: memo,
        };
        this.validateTransaction(cosmosLikeTxn);
        return cosmosLikeTxn;
    }
    /**
     * Creates a Cosmos-like transaction with a hash.
     * @param {number} sequence - The sender address sequence number for the transaction.
     * @param {MessageData[]} messages - The array of message data for the transaction.
     * @param {FeeData} gasBudget - The fee data for the transaction.
     * @param {string} [publicKey] - The public key associated with the transaction.
     * @param {Buffer} [signature] - The signature for the transaction.
     * @param {string} [memo] - The memo for the transaction.
     * @returns {CosmosLikeTransaction} Returns the created Cosmos-like transaction with the hash and signature if provided.
     */
    createTransactionWithHash(sequence, messages, gasBudget, publicKey, signature, memo) {
        const cosmosLikeTxn = this.createTransaction(sequence, messages, gasBudget, publicKey, memo);
        let hash = constants.UNAVAILABLE_TEXT;
        if (signature !== undefined) {
            const unsignedTx = this.createTxRawFromCosmosLikeTransaction(cosmosLikeTxn);
            const signedTx = tx_1.TxRaw.fromPartial({
                bodyBytes: unsignedTx.bodyBytes,
                authInfoBytes: unsignedTx.authInfoBytes,
                signatures: [signature],
            });
            hash = (0, crypto_1.createHash)('sha256')
                .update(tx_1.TxRaw.encode(signedTx).finish())
                .digest()
                .toString('hex')
                .toLocaleUpperCase('en-US');
            return { ...cosmosLikeTxn, hash: hash, signature: signature };
        }
        return { ...cosmosLikeTxn, hash: hash };
    }
    /**
     * Deserializes base64 enocded raw transaction string into @see CosmosLikeTransaction
     * @param {string} rawTx base64 enocded raw transaction string
     * @returns {CosmosLikeTransaction} Deserialized cosmosLikeTransaction
     */
    deserializeTransaction(rawTx) {
        var _a, _b;
        const decodedTx = this.getDecodedTxFromRawBase64(rawTx);
        const typeUrl = this.getTypeUrlFromDecodedTx(decodedTx);
        const type = this.getTransactionTypeFromTypeUrl(typeUrl);
        let sendMessageData;
        if (type === sdk_core_1.TransactionType.Send) {
            sendMessageData = this.getSendMessageDataFromDecodedTx(decodedTx);
        }
        else if (type === sdk_core_1.TransactionType.StakingActivate || type === sdk_core_1.TransactionType.StakingDeactivate) {
            sendMessageData = this.getDelegateOrUndelegateMessageDataFromDecodedTx(decodedTx);
        }
        else if (type === sdk_core_1.TransactionType.StakingWithdraw) {
            sendMessageData = this.getWithdrawRewardsMessageDataFromDecodedTx(decodedTx);
        }
        else if (type === sdk_core_1.TransactionType.ContractCall) {
            sendMessageData = this.getExecuteContractMessageDataFromDecodedTx(decodedTx);
        }
        else if (type === sdk_core_1.TransactionType.StakingRedelegate) {
            sendMessageData = this.getRedelegateMessageDataFromDecodedTx(decodedTx);
        }
        else {
            throw new Error('Transaction type not supported: ' + typeUrl);
        }
        const sequence = this.getSequenceFromDecodedTx(decodedTx);
        const gasBudget = this.getGasBudgetFromDecodedTx(decodedTx);
        const publicKey = this.getPublicKeyFromDecodedTx(decodedTx);
        const signature = ((_a = decodedTx.signatures) === null || _a === void 0 ? void 0 : _a[0]) !== undefined ? Buffer.from(decodedTx.signatures[0]) : undefined;
        return this.createTransactionWithHash(sequence, sendMessageData, gasBudget, publicKey, signature, (_b = decodedTx.body) === null || _b === void 0 ? void 0 : _b.memo);
    }
    /**
     * Validates an array of coin amounts.
     * @param {Coin[]} amountArray - The array of coin amounts to validate.
     * @param {TransactionType} transactionType - optional field for transaction type
     */
    validateAmountData(amountArray, transactionType) {
        amountArray.forEach((coinAmount) => {
            this.validateAmount(coinAmount, transactionType);
        });
    }
    /**
     * Validates the gas limit and gas amount for a transaction.
     * @param {FeeData} gasBudget - The gas budget to validate.
     * @throws {InvalidTransactionError} Throws an error if the gas budget is invalid.
     */
    validateGasBudget(gasBudget) {
        if (gasBudget.gasLimit <= 0) {
            throw new sdk_core_1.InvalidTransactionError('Invalid gas limit ' + gasBudget.gasLimit);
        }
        this.validateAmountData(gasBudget.amount);
    }
    /**
     * Validates a send message for a transaction.
     * @param {SendMessage} sendMessage - The send message to validate.
     * @throws {InvalidTransactionError} Throws an error if the send message is invalid.
     */
    validateSendMessage(sendMessage) {
        if (!sendMessage.toAddress || !this.isValidAddress(sendMessage.toAddress)) {
            throw new sdk_core_1.InvalidTransactionError(`Invalid SendMessage toAddress: ` + sendMessage.toAddress);
        }
        if (!sendMessage.fromAddress || !this.isValidAddress(sendMessage.fromAddress)) {
            throw new sdk_core_1.InvalidTransactionError(`Invalid SendMessage fromAddress: ` + sendMessage.fromAddress);
        }
        this.validateAmountData(sendMessage.amount);
    }
    /**
     * Validates a coin amount.
     * @param {Coin} amount - The coin amount to validate.
     * @param {TransactionType} transactionType - optional field for transaction type
     * @throws {InvalidTransactionError} Throws an error if the coin amount is invalid.
     */
    validateAmount(amount, transactionType) {
        throw new sdk_core_1.NotImplementedError('validateAmount not implemented');
    }
    /**
     * Checks if a cosmos like Bech32 address matches given regular expression and
     * validates memoId if present
     * @param {string} address
     * @param {RegExp} regExp Regular expression to validate the root address against after trimming the memoId
     * @returns {boolean} true if address is valid
     */
    isValidCosmosLikeAddressWithMemoId(address, regExp) {
        if (typeof address !== 'string')
            return false;
        const addressArray = address.split('?memoId=');
        if (![1, 2].includes(addressArray.length) || // should have at most one occurrence of 'memoId='
            !this.isValidBech32AddressMatchingRegex(addressArray[0], regExp) ||
            (addressArray[1] && !this.isValidMemoId(addressArray[1]))) {
            return false;
        }
        return true;
    }
    /**
     * Checks if address is valid Bech32 and matches given regular expression
     * @param {string} address
     * @param {RegExp} regExp Regular expression to validate the address against
     * @returns {boolean} true if address is valid
     */
    isValidBech32AddressMatchingRegex(address, regExp) {
        try {
            (0, encoding_1.fromBech32)(address);
        }
        catch (e) {
            return false;
        }
        return regExp.test(address);
    }
    /**
     * Return boolean indicating whether a memo id is valid
     *
     * @param memoId memo id
     * @returns true if memo id is valid
     */
    isValidMemoId(memoId) {
        let memoIdNumber;
        try {
            memoIdNumber = new bignumber_js_1.default(memoId);
        }
        catch (e) {
            return false;
        }
        return memoIdNumber.gte(0) && memoIdNumber.isInteger();
    }
    /**
     * Validates if the address matches with regex @see accountAddressRegex
     * @param {string} address
     * @returns {boolean} - the validation result
     */
    isValidValidatorAddress(address) {
        throw new sdk_core_1.NotImplementedError('isValidValidatorAddress not implemented');
    }
    /**
     * Validates if the address matches with regex @see accountAddressRegex
     * @param {string} address
     * @returns {boolean} - the validation result
     */
    isValidAddress(address) {
        throw new sdk_core_1.NotImplementedError('isValidAddress not implemented');
    }
    /**
     * Validates if the address matches with regex @see contractAddressRegex
     * @param {string} address
     * @returns {boolean} - the validation result
     */
    isValidContractAddress(address) {
        throw new sdk_core_1.NotImplementedError('isValidContractAddress not implemented');
    }
    /**
     * Validates a execute contract message
     * @param {ExecuteContractMessage} message - The execute contract message to validate
     * @param {TransactionType} transactionType - optional field for transaction type
     * @throws {InvalidTransactionError} Throws an error if the message is invalid
     */
    validateExecuteContractMessage(message, transactionType) {
        if (!message.contract || !this.isValidContractAddress(message.contract)) {
            throw new sdk_core_1.InvalidTransactionError(`Invalid ExecuteContractMessage contract address: ` + message.contract);
        }
        if (!message.sender || !this.isValidAddress(message.sender)) {
            throw new sdk_core_1.InvalidTransactionError(`Invalid ExecuteContractMessage sender address: ` + message.sender);
        }
        if (!message.msg) {
            throw new sdk_core_1.InvalidTransactionError(`Invalid ExecuteContractMessage msg: ` + message.msg);
        }
        if (message.funds) {
            this.validateAmountData(message.funds, transactionType);
        }
    }
    /**
     * Get coin specific hash function
     * @returns {Hash} The hash function
     */
    getHashFunction() {
        return (0, crypto_1.createHash)('sha256');
    }
}
exports.CosmosUtils = CosmosUtils;
const utils = new CosmosUtils();
exports.default = utils;
//# sourceMappingURL=data:application/json;base64,