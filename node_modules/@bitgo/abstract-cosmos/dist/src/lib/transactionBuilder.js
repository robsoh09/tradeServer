"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CosmosTransactionBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const crypto_1 = require("@cosmjs/crypto");
const proto_signing_1 = require("@cosmjs/proto-signing");
const keyPair_1 = require("./keyPair");
const transaction_1 = require("./transaction");
class CosmosTransactionBuilder extends sdk_core_1.BaseTransactionBuilder {
    constructor(_coinConfig, _utils) {
        super(_coinConfig);
        this._transaction = new transaction_1.CosmosTransaction(_coinConfig, _utils);
    }
    /** @inheritdoc */
    get transaction() {
        return this._transaction;
    }
    /** @inheritdoc */
    set transaction(transaction) {
        this._transaction = transaction;
    }
    /** @inheritDoc */
    addSignature(publicKey, signature) {
        this._signature = signature;
        this._publicKey = publicKey.pub;
    }
    /**
     * Sets sequence of this transaction.
     * @param {number} sequence - sequence data for tx signer
     * @returns {TransactionBuilder} This transaction builder
     */
    sequence(sequence) {
        this._utils.validateSequence(sequence);
        this._sequence = sequence;
        return this;
    }
    publicKey(publicKey) {
        this._publicKey = publicKey;
        return this;
    }
    accountNumber(accountNumber) {
        this._accountNumber = accountNumber;
        return this;
    }
    chainId(chainId) {
        this._chainId = chainId;
        return this;
    }
    memo(memo) {
        this._memo = memo;
        return this;
    }
    /** @inheritdoc */
    signImplementation(key) {
        this.validateKey(key);
        if (this._accountNumber === undefined) {
            throw new sdk_core_1.SigningError('accountNumber is required before signing');
        }
        if (this._chainId === undefined) {
            throw new sdk_core_1.SigningError('chainId is required before signing');
        }
        this._signer = new keyPair_1.CosmosKeyPair({ prv: key.key });
        this._publicKey = this._signer.getKeys().pub;
        return this.transaction;
    }
    /** @inheritdoc */
    validateValue(value) {
        if (value.isLessThan(0)) {
            throw new sdk_core_1.BuildTransactionError('Value cannot be less than zero');
        }
    }
    /** @inheritdoc */
    validateKey(key) {
        try {
            new keyPair_1.CosmosKeyPair({ prv: key.key });
        }
        catch {
            throw new sdk_core_1.BuildTransactionError(`Key validation failed`);
        }
    }
    /**
     * Sets gas budget of this transaction
     * Gas budget consist of fee amount and gas limit. Division feeAmount/gasLimit represents
     * the gas-fee and it should be more than minimum required gas-fee to process the transaction
     * @param {FeeData} gasBudget
     * @returns {TransactionBuilder} this transaction builder
     */
    gasBudget(gasBudget) {
        this._utils.validateGasBudget(gasBudget);
        this._gasBudget = gasBudget;
        return this;
    }
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     * @param {CosmosTransaction} tx the transaction data
     */
    initBuilder(tx) {
        this._transaction = tx;
        const txData = tx.toJson();
        this.gasBudget(txData.gasBudget);
        this.messages(txData.sendMessages.map((message) => {
            return message.value;
        }));
        this.sequence(txData.sequence);
        this.publicKey(txData.publicKey);
        this.accountNumber(txData.accountNumber);
        this.chainId(txData.chainId);
        this.memo(txData.memo);
        if (tx.signature && tx.signature.length > 0) {
            this.addSignature({ pub: txData.publicKey }, Buffer.from(tx.signature[0], 'hex'));
        }
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        const tx = new transaction_1.CosmosTransaction(this._coinConfig, this._utils);
        tx.enrichTransactionDetailsFromRawTransaction(rawTransaction);
        this.initBuilder(tx);
        return this.transaction;
    }
    /** @inheritdoc */
    async buildImplementation() {
        var _a;
        this.transaction.transactionType = this.transactionType;
        if (this._accountNumber) {
            this.transaction.accountNumber = this._accountNumber;
        }
        if (this._chainId) {
            this.transaction.chainId = this._chainId;
        }
        this.transaction.cosmosLikeTransaction = this._utils.createTransaction(this._sequence, this._messages, this._gasBudget, this._publicKey, this._memo);
        const privateKey = (_a = this._signer) === null || _a === void 0 ? void 0 : _a.getPrivateKey();
        if (privateKey !== undefined && this.transaction.cosmosLikeTransaction.publicKey !== undefined) {
            const signDoc = this._utils.createSignDoc(this.transaction.cosmosLikeTransaction, this._accountNumber, this._chainId);
            const txnHash = Uint8Array.from(this._utils.getHashFunction().update((0, proto_signing_1.makeSignBytes)(signDoc)).digest());
            const signature = await crypto_1.Secp256k1.createSignature(txnHash, privateKey);
            const compressedSig = Buffer.concat([signature.r(), signature.s()]);
            this.addSignature({ pub: this.transaction.cosmosLikeTransaction.publicKey }, compressedSig);
        }
        if (this._signature !== undefined) {
            this.transaction.addSignature(this._signature.toString('hex'));
            this.transaction.cosmosLikeTransaction = this._utils.createTransactionWithHash(this._sequence, this._messages, this._gasBudget, this._publicKey, this._signature, this._memo);
        }
        this.transaction.loadInputsAndOutputs();
        return this.transaction;
    }
    /** @inheritdoc */
    validateAddress(address, addressFormat) {
        if (!(this._utils.isValidAddress(address.address) || this._utils.isValidValidatorAddress(address.address))) {
            throw new sdk_core_1.BuildTransactionError('transactionBuilder: address isValidAddress check failed: ' + address.address);
        }
    }
    /** @inheritdoc */
    validateRawTransaction(rawTransaction) {
        if (!rawTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Invalid raw transaction: Undefined rawTransaction');
        }
        try {
        }
        catch (e) {
            throw new sdk_core_1.InvalidTransactionError('Invalid raw transaction: ' + e.message);
        }
        const cosmosTransaction = this._utils.deserializeTransaction(rawTransaction);
        this._utils.validateTransaction(cosmosTransaction);
    }
    /** @inheritdoc */
    validateTransaction(transaction) {
        this._utils.validateTransaction({
            sequence: this._sequence,
            sendMessages: this._messages,
            gasBudget: this._gasBudget,
            publicKey: this._publicKey,
        });
    }
}
exports.CosmosTransactionBuilder = CosmosTransactionBuilder;
//# sourceMappingURL=data:application/json;base64,