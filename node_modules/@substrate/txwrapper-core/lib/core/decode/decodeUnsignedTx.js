"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeUnsignedTx = void 0;
/**
 * @ignore
 */ /** */
const util_1 = require("@polkadot/util");
const __1 = require("..");
/**
 * Parse the transaction information from an unsigned transaction offline.
 *
 * @param unsigned - The JSON representing the unsigned transaction.
 * @param options - Runtime-specific data used for decoding the transaction.
 */
function decodeUnsignedTx(unsigned, options) {
    const { metadataRpc, registry, asCallsOnlyArg, isImmortalEra, asSpecifiedCallsOnlyV14, } = options;
    registry.setMetadata((0, __1.createMetadata)(registry, metadataRpc, asCallsOnlyArg, asSpecifiedCallsOnlyV14));
    const methodCall = registry.createType('Call', unsigned.method);
    const method = (0, __1.toTxMethod)(registry, methodCall);
    const eraPeriod = isImmortalEra
        ? (0, util_1.hexToNumber)(registry.createType('ImmortalEra', unsigned.era).toHex())
        : registry.createType('MortalEra', unsigned.era).period.toNumber();
    const assetId = unsigned.assetId;
    let tip;
    try {
        tip = registry.createType('Compact<Balance>', unsigned.tip).toNumber();
    }
    catch (_error) {
        tip = registry.createType('Compact<Balance>', unsigned.tip).toString();
    }
    return {
        address: unsigned.address,
        assetId: typeof assetId === 'object'
            ? registry.createType('MultiLocation', assetId)
            : registry.createType('Compact<AssetId>', assetId).toNumber(),
        blockHash: unsigned.blockHash,
        blockNumber: registry
            .createType('BlockNumber', unsigned.blockNumber)
            .toNumber(),
        eraPeriod,
        genesisHash: unsigned.genesisHash,
        metadataHash: unsigned.metadataHash,
        metadataRpc,
        method,
        nonce: registry.createType('Compact<Index>', unsigned.nonce).toNumber(),
        specVersion: registry.createType('u32', unsigned.specVersion).toNumber(),
        tip,
        transactionVersion: registry
            .createType('u32', unsigned.transactionVersion)
            .toNumber(),
    };
}
exports.decodeUnsignedTx = decodeUnsignedTx;
//# sourceMappingURL=decodeUnsignedTx.js.map