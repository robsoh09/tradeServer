import { ExtrinsicEra } from '@polkadot/types/interfaces/extrinsics';
import { OptionsWithMeta, TxInfo, TypeRegistry, UnsignedTransaction } from '../../types/';
type EraOptions = {
    kind: 'immortal';
} | {
    kind: 'mortal';
    blockNumber: number;
    period?: number;
};
/**
 * Error messages for defineMethod
 */
export declare enum MethodErrorMessages {
    InvalidEraPeriodTooLow = "lowest possible era period for a mortal tx is 4",
    InvalidEraPeriodTooHigh = "largest possible era period for a mortal tx is 65536",
    InvalidPalletOrMethod = "pallet or method not found in metadata"
}
/**
 * Check the information relevant to an era period, and return the correct
 * `ExtrinsicEra` as an Immortal or Mortal era.
 *
 * @param registry
 * @param options
 * @returns
 */
export declare function createEra(registry: TypeRegistry, options: EraOptions): ExtrinsicEra;
/**
 * Helper function to construct an offline method.
 *
 * @param info - All info necessary to construct a method. That includes base
 * tx info, as well as method name & arguments.
 */
export declare function defineMethod(info: TxInfo, options: OptionsWithMeta): UnsignedTransaction;
export {};
