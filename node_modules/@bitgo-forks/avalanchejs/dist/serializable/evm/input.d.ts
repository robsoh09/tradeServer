import type { Codec } from '../codec';
import { Address, Id } from '../fxs/common';
import { BigIntPr } from '../primitives';
import { TypeSymbols } from '../constants';
export declare class Input {
    readonly address: Address;
    readonly amount: BigIntPr;
    readonly assetId: Id;
    readonly nonce: BigIntPr;
    _type: TypeSymbols;
    constructor(address: Address, amount: BigIntPr, assetId: Id, nonce: BigIntPr);
    static fromBytes(bytes: Uint8Array, codec: Codec): [Input, Uint8Array];
    static compare: (a: Input, b: Input) => number;
    toBytes(codec: Codec): Uint8Array;
}
//# sourceMappingURL=input.d.ts.map