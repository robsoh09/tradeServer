import { ProofOfPossession } from './proofOfPossession';
import type { Codec } from '../codec';
import { TypeSymbols } from '../constants';
export declare class Signer {
    readonly proof: ProofOfPossession;
    _type: TypeSymbols;
    constructor(proof: ProofOfPossession);
    static fromBytes(bytes: Uint8Array, codec: Codec): [Signer, Uint8Array];
    toBytes(codec: Codec): Uint8Array;
}
export declare class SignerEmpty {
    _type: TypeSymbols;
    static fromBytes(bytes: Uint8Array, codec: Codec): [SignerEmpty, Uint8Array];
    toBytes(codec: Codec): Uint8Array;
}
export declare function createSignerOrSignerEmptyFromStrings(publicKey?: Uint8Array, signature?: Uint8Array): Signer | SignerEmpty;
//# sourceMappingURL=signer.d.ts.map