import { BaseTx } from '../avax/baseTx';
import { Codec } from '../codec/codec';
import type { Serializable } from '../common/types';
import { TypeSymbols } from '../constants';
import { Id } from '../fxs/common';
import { AbstractSubnetTx } from './abstractSubnetTx';
import type { OutputOwners } from '../../serializable/fxs/secp256k1';
export declare class TransferSubnetOwnershipTx extends AbstractSubnetTx {
    readonly baseTx: BaseTx;
    readonly subnetID: Id;
    readonly subnetAuth: Serializable;
    readonly subnetOwners: Serializable;
    _type: TypeSymbols;
    constructor(baseTx: BaseTx, subnetID: Id, subnetAuth: Serializable, subnetOwners: Serializable);
    getSubnetID(): Id;
    getSubnetOwners(): OutputOwners;
    static fromBytes(bytes: Uint8Array, codec: Codec): [TransferSubnetOwnershipTx, Uint8Array];
    toBytes(codec: Codec): Uint8Array;
}
//# sourceMappingURL=transferSubnetOwnershipTx.d.ts.map