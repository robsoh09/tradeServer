import type { Codec } from '../codec/codec';
import { Id } from '../fxs/common/id';
import { Bytes, Int } from '../primitives';
import { TransferableInput } from './transferableInput';
import { TransferableOutput } from './transferableOutput';
import { TypeSymbols } from '../constants';
export declare class BaseTx {
    readonly NetworkId: Int;
    readonly BlockchainId: Id;
    readonly outputs: TransferableOutput[];
    readonly inputs: TransferableInput[];
    readonly memo: Bytes;
    _type: TypeSymbols;
    constructor(NetworkId: Int, BlockchainId: Id, outputs: TransferableOutput[], inputs: TransferableInput[], memo: Bytes);
    static fromBytes(bytes: Uint8Array, codec: Codec): [BaseTx, Uint8Array];
    static fromNative(networkId: number, blockchainId: string, outputs: TransferableOutput[], inputs: TransferableInput[], memo: Uint8Array): BaseTx;
    toBytes(codec: any): Uint8Array;
}
//# sourceMappingURL=baseTx.d.ts.map