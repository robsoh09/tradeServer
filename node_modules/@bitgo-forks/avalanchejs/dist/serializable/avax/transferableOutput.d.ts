import type { Codec } from '../codec/codec';
import type { Amounter } from '../common/types';
import { Id } from '../fxs/common/id';
import { TypeSymbols } from '../constants';
export declare class TransferableOutput {
    readonly assetId: Id;
    readonly output: Amounter;
    _type: TypeSymbols;
    constructor(assetId: Id, output: Amounter);
    static fromNative(assetId: string, amt: bigint, addresses: Uint8Array[], locktime?: bigint, threshold?: number): TransferableOutput;
    static fromBytes(bytes: Uint8Array, codec: Codec): [TransferableOutput, Uint8Array];
    getAssetId(): string;
    amount(): bigint;
    toBytes(codec: Codec): Uint8Array;
}
//# sourceMappingURL=transferableOutput.d.ts.map