import type { Codec } from '../codec/codec';
import type { Amounter } from '../common/types';
import { Id } from '../fxs/common/id';
import type { Utxo } from './utxo';
import { UTXOID } from './utxoId';
import { TypeSymbols } from '../constants';
export declare class TransferableInput {
    readonly utxoID: UTXOID;
    readonly assetId: Id;
    readonly input: Amounter;
    _type: TypeSymbols;
    constructor(utxoID: UTXOID, assetId: Id, input: Amounter);
    static fromBytes(bytes: Uint8Array, codec: Codec): [TransferableInput, Uint8Array];
    static fromNative(utxoId: string, outputIdx: number, assetId: string, amount: bigint, sigIndices: number[]): TransferableInput;
    static fromUtxoAndSigindicies(utxo: Utxo, sigIndicies: number[]): TransferableInput;
    sigIndicies(): number[];
    static compare(input1: TransferableInput, input2: TransferableInput): number;
    amount(): bigint;
    getAssetId(): string;
    toBytes(codec: Codec): Uint8Array;
}
//# sourceMappingURL=transferableInput.d.ts.map