import { TransferableInput } from '../avax/transferableInput';
import type { Codec } from '../codec';
import { Id } from '../fxs/common';
import { Int } from '../primitives';
import { EVMTx } from './abstractTx';
import { Output } from './output';
import { TypeSymbols } from '../constants';
export declare class ImportTx extends EVMTx {
    readonly networkId: Int;
    readonly blockchainId: Id;
    readonly sourceChain: Id;
    readonly importedInputs: TransferableInput[];
    readonly Outs: Output[];
    _type: TypeSymbols;
    constructor(networkId: Int, blockchainId: Id, sourceChain: Id, importedInputs: TransferableInput[], Outs: Output[]);
    getSigIndices(): number[][];
    static fromBytes(bytes: Uint8Array, codec: Codec): [ImportTx, Uint8Array];
    toBytes(codec: Codec): Uint8Array;
}
//# sourceMappingURL=importTx.d.ts.map