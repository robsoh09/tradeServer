import { TransferableOutput } from '../avax/transferableOutput';
import type { Codec } from '../codec';
import { Id } from '../fxs/common';
import { Int } from '../primitives';
import { EVMTx } from './abstractTx';
import { Input } from './input';
import { TypeSymbols } from '../constants';
export declare class ExportTx extends EVMTx {
    readonly networkId: Int;
    readonly blockchainId: Id;
    readonly destinationChain: Id;
    readonly ins: Input[];
    readonly exportedOutputs: TransferableOutput[];
    _type: TypeSymbols;
    constructor(networkId: Int, blockchainId: Id, destinationChain: Id, ins: Input[], exportedOutputs: TransferableOutput[]);
    getSigIndices(): number[][];
    static fromBytes(bytes: Uint8Array, codec: Codec): [ExportTx, Uint8Array];
    toBytes(codec: Codec): Uint8Array;
}
//# sourceMappingURL=exportTx.d.ts.map