import { BaseTx } from '../avax/baseTx';
import { TransferableOutput } from '../avax/transferableOutput';
import { Codec } from '../codec/codec';
import type { Serializable } from '../common/types';
import { PVMTx } from './abstractTx';
import { Validator } from './validator';
import type { OutputOwners } from '../fxs/secp256k1';
import { TypeSymbols } from '../constants';
export declare class AddDelegatorTx extends PVMTx {
    readonly baseTx: BaseTx;
    readonly validator: Validator;
    readonly stake: TransferableOutput[];
    readonly rewardsOwner: Serializable;
    _type: TypeSymbols;
    constructor(baseTx: BaseTx, validator: Validator, stake: TransferableOutput[], rewardsOwner: Serializable);
    getRewardsOwner(): OutputOwners;
    static fromBytes(bytes: Uint8Array, codec: Codec): [AddDelegatorTx, Uint8Array];
    toBytes(codec: Codec): Uint8Array;
}
//# sourceMappingURL=addDelegatorTx.d.ts.map