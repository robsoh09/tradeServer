import { BaseTx } from '../avax/baseTx';
import { Codec } from '../codec/codec';
import type { Serializable } from '../common/types';
import { Id } from '../fxs/common';
import { Bytes, Stringpr } from '../primitives';
import { AbstractSubnetTx } from './abstractSubnetTx';
import { TypeSymbols } from '../constants';
export declare class CreateChainTx extends AbstractSubnetTx {
    readonly baseTx: BaseTx;
    readonly subnetID: Id;
    readonly chainName: Stringpr;
    readonly vmID: Id;
    readonly fxIds: Id[];
    readonly genesisData: Bytes;
    readonly subnetAuth: Serializable;
    _type: TypeSymbols;
    constructor(baseTx: BaseTx, subnetID: Id, chainName: Stringpr, vmID: Id, fxIds: Id[], genesisData: Bytes, subnetAuth: Serializable);
    getSubnetID(): Id;
    static fromBytes(bytes: Uint8Array, codec: Codec): [CreateChainTx, Uint8Array];
    toBytes(codec: Codec): Uint8Array;
}
//# sourceMappingURL=createChainTx.d.ts.map