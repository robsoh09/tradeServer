import { BaseTx } from '../avax/baseTx';
import { Codec } from '../codec/codec';
import type { Serializable } from '../common/types';
import { Int } from '../primitives';
import { Byte } from '../primitives';
import { BigIntPr } from '../primitives';
import { TypeSymbols } from '../constants';
import { Id } from '../fxs/common';
import { AbstractSubnetTx } from './abstractSubnetTx';
export declare class TransformSubnetTx extends AbstractSubnetTx {
    readonly baseTx: BaseTx;
    readonly subnetID: Id;
    readonly assetId: Id;
    readonly initialSupply: BigIntPr;
    readonly maximumSupply: BigIntPr;
    readonly minConsumptionRate: BigIntPr;
    readonly maxConsumptionRate: BigIntPr;
    readonly minValidatorStake: BigIntPr;
    readonly maxValidatorStake: BigIntPr;
    readonly minStakeDuration: Int;
    readonly maxStakeDuration: Int;
    readonly minDelegationFee: Int;
    readonly minDelegatorStake: Int;
    readonly maxValidatorWeightFactor: Byte;
    readonly uptimeRequirement: Int;
    readonly subnetAuth: Serializable;
    _type: TypeSymbols;
    constructor(baseTx: BaseTx, subnetID: Id, assetId: Id, initialSupply: BigIntPr, maximumSupply: BigIntPr, minConsumptionRate: BigIntPr, maxConsumptionRate: BigIntPr, minValidatorStake: BigIntPr, maxValidatorStake: BigIntPr, minStakeDuration: Int, maxStakeDuration: Int, minDelegationFee: Int, minDelegatorStake: Int, maxValidatorWeightFactor: Byte, uptimeRequirement: Int, subnetAuth: Serializable);
    getSubnetID(): Id;
    static fromBytes(bytes: Uint8Array, codec: Codec): [TransformSubnetTx, Uint8Array];
    toBytes(codec: Codec): Uint8Array;
}
//# sourceMappingURL=transformSubnetTx.d.ts.map