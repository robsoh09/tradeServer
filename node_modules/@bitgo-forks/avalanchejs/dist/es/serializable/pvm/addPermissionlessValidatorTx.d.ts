import { PVMTx } from './abstractTx';
import { BaseTx } from '../avax/baseTx';
import { TransferableOutput } from '../avax/transferableOutput';
import type { Serializable } from '../common/types';
import { SubnetValidator } from './subnetValidator';
import { Codec } from '../codec';
import { Int } from '../primitives';
import type { Signer, SignerEmpty } from './signer';
import type { OutputOwners } from '../fxs/secp256k1';
import { TypeSymbols } from '../constants';
export declare class AddPermissionlessValidatorTx extends PVMTx {
    readonly baseTx: BaseTx;
    readonly subnetValidator: SubnetValidator;
    readonly signer: Signer | SignerEmpty;
    readonly stake: TransferableOutput[];
    readonly validatorRewardsOwner: Serializable;
    readonly delegatorRewardsOwner: Serializable;
    readonly shares: Int;
    _type: TypeSymbols;
    constructor(baseTx: BaseTx, subnetValidator: SubnetValidator, signer: Signer | SignerEmpty, stake: TransferableOutput[], validatorRewardsOwner: Serializable, delegatorRewardsOwner: Serializable, shares: Int);
    getValidatorRewardsOwner(): OutputOwners;
    getDelegatorRewardsOwner(): OutputOwners;
    static fromBytes(bytes: Uint8Array, codec: Codec): [AddPermissionlessValidatorTx, Uint8Array];
    toBytes(codec: Codec): Uint8Array;
}
//# sourceMappingURL=addPermissionlessValidatorTx.d.ts.map