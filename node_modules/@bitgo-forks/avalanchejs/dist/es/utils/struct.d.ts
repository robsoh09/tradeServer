import type { Codec } from '../serializable/codec';
import type { Serializable } from '../serializable/common/types';
export type FromBytesReturn<T> = T extends {
    fromBytes: (buff: Uint8Array, codec?: Codec) => [infer rType, Uint8Array];
} ? rType : T extends {
    fromBytes: (buff: Uint8Array, codec: Codec) => [infer rType, Uint8Array];
} ? rType : never;
export type ReturnTypes<T extends readonly any[]> = {
    [i in keyof T]: FromBytesReturn<T[i]>;
};
export declare function unpack<O extends readonly any[]>(buffer: Uint8Array, sers: O, codec?: Codec): [...ReturnTypes<O>, Uint8Array];
export declare function pack(serializables: (Serializable | Serializable[])[], codec: Codec): Uint8Array;
export declare function packSwitched(codec: Codec, ...serializables: (Serializable | Serializable[])[]): Uint8Array;
//# sourceMappingURL=struct.d.ts.map