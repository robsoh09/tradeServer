import { TransferableOutput } from '../../serializable/avax';
import type { Utxo } from '../../serializable/avax/utxo';
import type { SpendOptions } from '../common/models';
import { UnsignedTx } from '../common/unsignedTx';
import type { Context } from '../context';
export declare function newBaseTx(context: Context, fromAddressesBytes: Uint8Array[], utxoSet: Utxo[], outputs: TransferableOutput[], options?: SpendOptions): UnsignedTx;
export declare function newImportTx(context: Context, sourceChainId: string, utxos: Utxo[], toAddresses: Uint8Array[], fromAddressesBytes: Uint8Array[], options?: SpendOptions, threshold?: number, locktime?: bigint): UnsignedTx;
export declare function newAddValidatorTx(context: Context, utxos: Utxo[], fromAddressesBytes: Uint8Array[], nodeID: string, start: bigint, end: bigint, weight: bigint, rewardAddresses: Uint8Array[], shares: number, options?: SpendOptions, threshold?: number, locktime?: bigint): UnsignedTx;
export declare function newExportTx(context: Context, destinationChainID: string, fromAddressesBytes: Uint8Array[], utxos: Utxo[], outputs: TransferableOutput[], options?: SpendOptions): UnsignedTx;
export declare function newAddDelegatorTx(context: Context, utxos: Utxo[], fromAddressesBytes: Uint8Array[], nodeID: string, start: bigint, end: bigint, weight: bigint, rewardAddresses: Uint8Array[], options?: SpendOptions, threshold?: number, locktime?: bigint): UnsignedTx;
export declare function newCreateSubnetTx(context: Context, utxos: Utxo[], fromAddressesBytes: Uint8Array[], subnetOwners: Uint8Array[], options?: SpendOptions, threshold?: number, locktime?: bigint): UnsignedTx;
export declare function newCreateBlockchainTx(context: Context, utxos: Utxo[], fromAddressesBytes: Uint8Array[], subnetID: string, chainName: string, vmID: string, fxIds: string[], genesisData: Record<string, unknown>, subnetAuth: number[], options?: SpendOptions): UnsignedTx;
export declare function newAddSubnetValidatorTx(context: Context, utxos: Utxo[], fromAddressesBytes: Uint8Array[], nodeId: string, start: bigint, end: bigint, weight: bigint, subnetID: string, subnetAuth: number[], options?: SpendOptions): UnsignedTx;
export declare function newRemoveSubnetValidatorTx(context: Context, utxos: Utxo[], fromAddressesBytes: Uint8Array[], nodeId: string, subnetID: string, subnetAuth: number[], options?: SpendOptions): UnsignedTx;
export declare function newAddPermissionlessValidatorTx(context: Context, utxos: Utxo[], fromAddressesBytes: Uint8Array[], nodeID: string, subnetID: string, start: bigint, end: bigint, weight: bigint, rewardAddresses: Uint8Array[], delegatorRewardsOwner: Uint8Array[], shares: number, options?: SpendOptions, threshold?: number, locktime?: bigint, publicKey?: Uint8Array, signature?: Uint8Array, stakingAssetId?: string): UnsignedTx;
export declare function newAddPermissionlessDelegatorTx(context: Context, utxos: Utxo[], fromAddressesBytes: Uint8Array[], nodeID: string, subnetID: string, start: bigint, end: bigint, weight: bigint, rewardAddresses: Uint8Array[], options?: SpendOptions, threshold?: number, locktime?: bigint, stakingAssetId?: string): UnsignedTx;
export declare function newTransformSubnetTx(context: Context, utxos: Utxo[], fromAddressesBytes: Uint8Array[], subnetID: string, assetID: string, initialSupply: bigint, maximumSupply: bigint, minConsumptionRate: bigint, maxConsumptionRate: bigint, minValidatorStake: bigint, maxValidatorStake: bigint, minStakeDuration: number, maxStakeDuration: number, minDelegationFee: number, minDelegatorStake: number, maxValidatorWeightFactor: number, uptimeRequirement: number, subnetAuth: number[], options?: SpendOptions): UnsignedTx;
export declare function newTransferSubnetOwnershipTx(context: Context, utxos: Utxo[], fromAddressesBytes: Uint8Array[], subnetID: string, subnetAuth: number[], subnetOwners: Uint8Array[], options?: SpendOptions, threshold?: number, locktime?: bigint): UnsignedTx;
//# sourceMappingURL=builder.d.ts.map