import type { GetAssetDescriptionResponse } from '../common/apiModels';
import { AvaxApi } from '../common/avaxApi';
import type { GetBalanceParams, GetBalanceResponse, GetBlockchainsResponse, GetBlockchainStatusResponse, GetCurrentSupplyResponse, GetCurrentValidatorsParams, GetCurrentValidatorsResponse, GetHeightResponse, GetMaxStakeAmountParams, GetMinStakeResponse, GetPendingValidatorsParams, GetPendingValidatorsResponse, GetRewardUTXOsParams, GetRewardUTXOsResponse, GetStakeParams, GetStakeResponse, GetStakingAssetIDParams, GetStakingAssetIDResponse, GetSubnetsParams, GetSubnetsResponse, GetTimestampResponse, GetTotalStakeResponse, GetTxStatusParams, GetTxStatusResponse, GetValidatorsAtParams, GetValidatorsAtResponse, SampleValidatorsParams, SampleValidatorsResponse, ValidatedByParams, ValidatedByResponse, ValidatesParams, ValidatesResponse } from './models';
export declare class PVMApi extends AvaxApi {
    constructor(baseURL?: string);
    getAssetDescription(assetID: string): Promise<GetAssetDescriptionResponse>;
    getCurrentValidators(getCurrentValidatorsParams?: GetCurrentValidatorsParams): Promise<GetCurrentValidatorsResponse>;
    getPendingValidators(getPendingValidatorsParams?: GetPendingValidatorsParams): Promise<GetPendingValidatorsResponse>;
    getRewardUTXOs(getRewardUTXOsParams: GetRewardUTXOsParams): Promise<GetRewardUTXOsResponse>;
    getStake(getStakeParams: GetStakeParams): Promise<GetStakeResponse>;
    getValidatorsAt(getValidatorsAtParams: GetValidatorsAtParams): Promise<GetValidatorsAtResponse>;
    getCurrentSupply(): Promise<GetCurrentSupplyResponse>;
    getMaxStakeAmount(getMaxStakeAmountParams: GetMaxStakeAmountParams): Promise<GetMaxStakeAmountParams>;
    getBalance(GetBalanceParams: GetBalanceParams): Promise<GetBalanceResponse>;
    getBlockchains(): Promise<GetBlockchainsResponse>;
    getBlockchainStatus(blockchainID: string): Promise<GetBlockchainStatusResponse>;
    getHeight(): Promise<GetHeightResponse>;
    getMinStake(): Promise<GetMinStakeResponse>;
    getStakingAssetID(getStakingAssetIDParams: GetStakingAssetIDParams): Promise<GetStakingAssetIDResponse>;
    getSubnets(getSubnetsParams: GetSubnetsParams): Promise<GetSubnetsResponse>;
    getTimestamp(): Promise<GetTimestampResponse>;
    getTotalStake(subnetID: string): Promise<GetTotalStakeResponse>;
    getTxStatus(getTxStatusParams: GetTxStatusParams): Promise<GetTxStatusResponse>;
    sampleValidators(sampleValidatorsParams: SampleValidatorsParams): Promise<SampleValidatorsResponse>;
    validatedBy(validatedByParams: ValidatedByParams): Promise<ValidatedByResponse>;
    validates(validatesParams: ValidatesParams): Promise<ValidatesResponse>;
}
//# sourceMappingURL=api.d.ts.map