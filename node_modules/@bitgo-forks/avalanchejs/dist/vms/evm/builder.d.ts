import type { Utxo } from '../../serializable/avax/utxo';
import { EVMUnsignedTx } from '../common/evmUnsignedTx';
import type { UnsignedTx } from '../common/unsignedTx';
import type { Context } from '../context';
export type EVMExportOptions = {
    locktime: bigint;
    threshold: number;
};
export declare function newExportTxFromBaseFee(context: Context, baseFee: bigint, amount: bigint, destinationChain: string, fromAddress: Uint8Array, toAddresses: Uint8Array[], nonce: bigint, assetId?: string, options?: Partial<EVMExportOptions>): EVMUnsignedTx;
export declare function estimateExportCost(context: Context, baseFee: bigint, amount: bigint, destinationChain: string, fromAddress: Uint8Array, toAddresses: Uint8Array[], nonce: bigint, assetId?: string, options?: Partial<EVMExportOptions>): bigint;
export declare function newExportTx(context: Context, amount: bigint, destinationChain: string, fromAddress: Uint8Array, toAddresses: Uint8Array[], fee: bigint, nonce: bigint, assetId?: string, options?: Partial<EVMExportOptions>): EVMUnsignedTx;
export declare function newImportTxFromBaseFee(context: Context, toAddress: Uint8Array, fromAddressesBytes: Uint8Array[], atomics: Utxo[], sourceChain: string, baseFee?: bigint, feeAssetId?: string): UnsignedTx;
export declare function newImportTx(context: Context, toAddress: Uint8Array, fromAddressesBytes: Uint8Array[], atomics: Utxo[], sourceChain: string, fee?: bigint, feeAssetId?: string): UnsignedTx;
//# sourceMappingURL=builder.d.ts.map