import type { Codec } from '../serializable/codec';
import type { Serializable, SerializableStatic } from '../serializable/common/types';
type unpackFunc = (buf: Uint8Array, codec: Codec) => [any, Uint8Array];
export declare const unpackList: <T extends SerializableStatic>(buf: Uint8Array, serializable: T, codec: Codec) => [ReturnType<T["fromBytes"]>[0][], Uint8Array];
export declare const unpackListForEach: <T extends unpackFunc>(buf: Uint8Array, callback: T, codec: Codec) => [ReturnType<T>[0][], Uint8Array];
export declare const toListStruct: <T extends SerializableStatic>(serializable: T) => {
    fromBytes: (buff: Uint8Array, codec: Codec) => [ReturnType<T["fromBytes"]>[0][], Uint8Array];
};
export declare const unpackCodecList: {
    fromBytes: (buff: Uint8Array, codec?: Codec) => [Serializable[], Uint8Array];
};
export declare const packList: (serializables: Serializable[], codec: Codec) => Uint8Array;
export {};
//# sourceMappingURL=serializeList.d.ts.map