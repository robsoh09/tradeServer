import { Output } from '../serializable/evm';
import { BaseTx, TransferableInput, TransferableOutput } from '../serializable/avax';
import { Utxo } from '../serializable/avax/utxo';
import { Address, Id } from '../serializable/fxs/common';
import { BigIntPr, Bytes } from '../serializable/primitives';
export declare const cAddressForTest = "0xfd4DFC8f567caD8a275989982c5f8f1fC82B7563";
export declare const privateKeyForTest = "4ec512bf0130a604b68b80446238f20ccd94eec8588f56c5e5c499f1d0d7e7cd";
export declare const xAddressForTest = "X-fuji1w5jg0xyw2zq22nhpjar834gyeksc6wuleftqzg";
export declare const pAddressForTest = "P-fuji1w5jg0xyw2zq22nhpjar834gyeksc6wuleftqzg";
export declare const cAddressBech32ForTest = "C-fuji1w5jg0xyw2zq22nhpjar834gyeksc6wuleftqzg";
export declare const testAvaxAssetID: Id;
export declare const testOwnerXAddress: Address;
export declare const testOwnerCBech32Address: Address;
export declare const testUTXOID1: Id;
export declare const testUTXOID2: Id;
export declare const testUTXOID3: Id;
export declare const testUTXOID4: Id;
export declare const testSubnetId = "0x8c86d07cd60218661863e0116552dccd5bd84c564bd29d7181dbddd5ec616104";
export declare const testVMId = "0x61766d0000000000000000000000000000000000000000000000000000000000";
export declare const testGenesisData: {
    test: string;
};
export declare const testSubnetAuthData: Bytes;
export declare const getLockedUTXO: (amt?: BigIntPr, lockTime?: bigint) => Utxo;
export declare const getNotTransferOutput: (amt?: bigint) => Utxo;
export declare const getStakeableLockoutOutput: (id: Id, amt: bigint, lockTime?: bigint, assetId?: Id) => Utxo;
export declare const getTransferableInputForTest: (amt?: bigint) => TransferableInput;
export declare const getStakeableLockedTransferableInputForTest: (amtount: bigint, lockTime: bigint) => TransferableInput;
export declare const getValidUtxo: (amt?: BigIntPr, assetId?: Id) => Utxo;
export declare const fromAddressBytes: Uint8Array[];
export declare const getTransferableOutForTest: (amount: bigint, locktime?: bigint, threshold?: number) => TransferableOutput;
export declare const getStakeableLockedTransferableOutForTest: (amount: bigint, lockTime: bigint) => TransferableOutput;
export declare const testUtxos: () => Utxo[];
export declare const getBaseTxForTest: (changeAmount: bigint, blockchainId: string) => BaseTx;
export declare const getOutputForTest: () => Output;
//# sourceMappingURL=transactions.d.ts.map