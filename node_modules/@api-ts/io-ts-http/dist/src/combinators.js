"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.flattened = exports.optionalized = exports.optional = void 0;
const function_1 = require("fp-ts/function");
const E = __importStar(require("fp-ts/Either"));
const R = __importStar(require("fp-ts/Record"));
const t = __importStar(require("io-ts"));
const optional = (subCodec) => t.union([subCodec, t.undefined]);
exports.optional = optional;
const optionalized = (props) => {
    const requiredProps = {};
    const optionalProps = {};
    for (const key in props) {
        if (!props.hasOwnProperty(key)) {
            continue;
        }
        const codec = props[key];
        const isOptional = codec.is(undefined);
        if (isOptional) {
            optionalProps[key] = codec;
        }
        else {
            requiredProps[key] = codec;
        }
    }
    return t.intersection([
        t.type(requiredProps),
        t.partial(optionalProps),
    ]);
};
exports.optionalized = optionalized;
const flattened = (name, props) => {
    let flatProps = {};
    for (const key in props) {
        if (!props.hasOwnProperty(key)) {
            continue;
        }
        const innerProps = props[key];
        flatProps = { ...flatProps, ...innerProps };
    }
    const flatCodec = t.exact((0, exports.optionalized)(flatProps));
    const nestedProps = R.map((innerProps) => t.exact((0, exports.optionalized)(innerProps)))(props);
    const nestedCodec = t.strict(nestedProps);
    return new t.Type(name, flatCodec.is, (input, context) => (0, function_1.pipe)(nestedCodec.validate(input, context), E.map((nested) => {
        let flattened = {};
        for (const key in nested) {
            if (!nested.hasOwnProperty(key)) {
                continue;
            }
            flattened = { ...flattened, ...nested[key] };
        }
        return flattened;
    })), (input) => {
        const nested = {};
        for (const o in props) {
            if (!props.hasOwnProperty(o)) {
                continue;
            }
            nested[o] = {};
            for (const i in props[o]) {
                if (input.hasOwnProperty(i)) {
                    const codec = props[o][i];
                    nested[o][i] = codec.encode(input[i]);
                }
            }
        }
        return nested;
    });
};
exports.flattened = flattened;
//# sourceMappingURL=combinators.js.map