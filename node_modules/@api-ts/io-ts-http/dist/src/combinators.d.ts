import * as t from 'io-ts';
import { Flattened, NestedType, NestedOutputType, NestedProps, OptionalizedC, Simplify } from './utils';
export declare const optional: <C extends t.Mixed>(subCodec: C) => t.UnionC<[C, t.UndefinedC]>;
export declare const optionalized: <P extends t.Props>(props: P) => OptionalizedC<P>;
export declare const flattened: <Props extends NestedProps>(name: string, props: Props) => t.Type<Simplify<(NestedType<Props>[keyof Props] extends infer T ? T extends NestedType<Props>[keyof Props] ? T extends any ? (x: T) => any : never : never : never) extends (x: infer R) => any ? R : never>, Simplify<NestedOutputType<Props>>, unknown>;
//# sourceMappingURL=combinators.d.ts.map