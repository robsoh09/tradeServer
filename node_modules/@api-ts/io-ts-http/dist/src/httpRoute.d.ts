import * as t from 'io-ts';
import { HttpResponse } from './httpResponse';
import { HttpRequestCodec } from './httpRequest';
export declare const Method: t.KeyofC<{
    get: number;
    post: number;
    put: number;
    delete: number;
}>;
export declare type Method = t.TypeOf<typeof Method>;
export declare type HttpRoute<M extends Method = Method> = {
    readonly path: string;
    readonly method: Uppercase<M>;
    readonly request: HttpRequestCodec<any>;
    readonly response: HttpResponse;
};
export declare type RequestType<T extends HttpRoute> = t.TypeOf<T['request']>;
export declare type ResponseType<T extends HttpRoute> = {
    [K in keyof T['response']]: T['response'][K] extends t.Mixed ? {
        type: K;
        payload: t.TypeOf<T['response'][K]>;
    } : never;
}[keyof T['response']];
export declare type ApiSpec = {
    [ApiAction: string]: {
        [M in Method]?: HttpRoute<M>;
    };
};
declare type UnknownKeysToError<Spec extends ApiSpec> = {
    [ApiAction in keyof Spec]: {
        [M in keyof Spec[ApiAction]]: M extends Method ? Spec[ApiAction][M] : `Unsupported HTTP Method. Use "get" | "post" | "put" | "delete"`;
    };
};
export declare const apiSpec: <Spec extends ApiSpec>(spec: UnknownKeysToError<Spec>) => Spec;
export declare const httpRoute: <Props extends HttpRoute<"get" | "post" | "put" | "delete">>(spec: Props) => Props;
export {};
//# sourceMappingURL=httpRoute.d.ts.map