import * as t from 'io-ts';
import { Json } from 'io-ts-types';
export declare const GenericHttpRequest: import("./utils").OptionalizedC<{
    params: t.RecordC<t.StringC, t.StringC>;
    query: t.RecordC<t.StringC, t.UnionC<[t.StringC, t.ArrayC<t.StringC>]>>;
    headers: t.UnionC<[t.RecordC<t.StringC, t.StringC>, t.UndefinedC]>;
    body: t.UnionC<[t.Type<Json, Json, unknown>, t.UndefinedC]>;
}>;
export declare type HttpRequestCodec<T> = t.Type<T, t.TypeOf<typeof GenericHttpRequest>, unknown>;
export declare type HttpRequestCombinatorProps = {
    params?: NonNullable<t.Props>;
    query?: NonNullable<t.Props>;
    headers?: NonNullable<t.Props>;
    body?: NonNullable<t.Props>;
};
declare type EmitOutputTypeErrors<P extends t.Props | undefined, O, OName extends string> = P extends undefined ? P : {
    [K in keyof P & string]: P[K] extends t.Type<any, O, any> ? P[K] : `Codec's output type is not assignable to \`${OName}\`. Try using one like \`NumberFromString\``;
};
declare type QueryValue = string | string[] | undefined;
declare type ParamValue = string | undefined;
declare type HeaderValue = string | undefined;
declare type EmitPropsErrors<P extends HttpRequestCombinatorProps> = {
    params?: EmitOutputTypeErrors<P['params'], ParamValue, 'string | undefined'>;
    query?: EmitOutputTypeErrors<P['query'], QueryValue, 'string | string[] | undefined'>;
    headers?: EmitOutputTypeErrors<P['headers'], HeaderValue, 'string | undefined'>;
};
export declare function httpRequest<Props extends HttpRequestCombinatorProps & EmitPropsErrors<Props>>(props: Props): t.Type<import("./utils").Simplify<(import("./utils").NestedType<{
    query: {};
    params: {};
} & Props>["params" | "query" | keyof Props] extends infer T ? T extends import("./utils").NestedType<{
    query: {};
    params: {};
} & Props>["params" | "query" | keyof Props] ? T extends any ? (x: T) => any : never : never : never) extends (x: infer R) => any ? R : never>, import("./utils").Simplify<import("./utils").NestedOutputType<{
    query: {};
    params: {};
} & Props>>, unknown>;
export {};
//# sourceMappingURL=httpRequest.d.ts.map