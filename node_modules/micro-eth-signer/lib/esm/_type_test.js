import * as web3 from './web3.js';
// Should not be included in npm package, just for test of typescript compilation
const assertType = (_value) => { };
const BytesVal = new Uint8Array();
const BigIntVal = 0n;
const StringVal = 'string';
StringVal;
const _a = Uint8Array.from([]);
_a;
// Tests
assertType(web3.mapComponent({ type: 'string' }));
assertType(web3.mapComponent({ type: 'string[]' }));
assertType(web3.mapComponent({ type: 'bytes' }));
assertType(web3.mapComponent({ type: 'bytes[]' }));
assertType(web3.mapComponent({ type: 'address' }));
assertType(web3.mapComponent({ type: 'address[]' }));
assertType(web3.mapComponent({ type: 'bool' }));
assertType(web3.mapComponent({ type: 'bool[]' }));
assertType(web3.mapComponent({ type: 'uint16' }));
assertType(web3.mapComponent({ type: 'uint16[]' }));
assertType(web3.mapComponent({ type: 'int' }));
assertType(web3.mapComponent({ type: 'int[]' }));
assertType(web3.mapComponent({ type: 'int24' }));
assertType(web3.mapComponent({ type: 'int24[]' }));
assertType(web3.mapComponent({ type: 'bytes1' }));
assertType(web3.mapComponent({ type: 'bytes1[]' }));
assertType(web3.mapComponent({ type: 'bytes15' }));
assertType(web3.mapComponent({ type: 'bytes15[]' }));
// Tuples
assertType(web3.mapComponent({
    type: 'tuple',
    components: [
        { type: 'uint16', name: 'lol' },
        { type: 'string', name: 'wut' },
    ],
}));
assertType(web3.mapComponent({
    type: 'tuple',
    components: [{ type: 'uint16', name: 'lol' }, { type: 'string' }],
}));
//
assertType(web3.mapComponent({ type: 'tuple' }));
assertType(web3.mapComponent({ type: 'int25' }));
assertType(web3.mapComponent({ type: 'bytes0' }));
// Args
// If single arg -- use as is
assertType(BytesVal);
// no names -> tuple
assertType([BytesVal, BigIntVal]);
// has names -> struct
assertType({
    lol: BytesVal,
    wut: BigIntVal,
});
// WHY?!
assertType(web3.mapArgs([{ type: 'string' }]));
assertType(web3.mapArgs([{ type: 'bytes1' }]));
assertType(web3.mapArgs([{ type: 'string' }, { type: 'uint' }]));
assertType(web3.mapArgs([
    { type: 'string', name: 'lol' },
    { type: 'uint', name: 'wut' },
]));
// Without const
assertType(web3.mapArgs([
    { type: 'string', name: 'lol' },
    { type: 'uint', name: 'wut' },
]));
assertType(web3.mapArgs([{ type: 'string' }, { type: 'uint' }]));
// unfortunately, typescript cannot detect single value arr on non-const data
assertType(web3.mapArgs([{ type: 'bytes1' }]));
assertType(web3.contract([
    {
        name: 'lol',
        type: 'function',
        inputs: [{ type: 'uint' }, { type: 'string' }],
        outputs: [{ type: 'bytes' }, { type: 'address' }],
    },
]));
assertType(web3.contract([
    {
        name: 'lol',
        type: 'function',
        inputs: [{ type: 'uint' }, { type: 'string' }],
        outputs: [{ type: 'bytes' }, { type: 'address' }],
    },
], 1));
// Without const there is not much can be derived from abi
assertType(web3.contract([
    {
        name: 'lol',
        type: 'function',
        inputs: [{ type: 'uint' }, { type: 'string' }],
        outputs: [{ type: 'bytes' }, { type: 'address' }],
    },
]));
const PAIR_CONTRACT = [
    {
        type: 'function',
        name: 'getReserves',
        outputs: [
            { name: 'reserve0', type: 'uint112' },
            { name: 'reserve1', type: 'uint112' },
            { name: 'blockTimestampLast', type: 'uint32' },
        ],
    },
];
assertType(web3.contract(PAIR_CONTRACT));
const TRANSFER_EVENT = [
    {
        anonymous: false,
        inputs: [
            { indexed: true, name: 'from', type: 'address' },
            { indexed: true, name: 'to', type: 'address' },
            { indexed: false, name: 'value', type: 'uint256' },
        ],
        name: 'Transfer',
        type: 'event',
    },
];
assertType(web3.events(TRANSFER_EVENT));
