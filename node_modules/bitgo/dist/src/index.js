"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNetworkObj = exports.getNetwork = exports.setNetwork = exports.GlobalCoinFactory = exports.Environments = exports.Buffer = exports.sjcl = exports.bitcoin = void 0;
/**
 * @prettier
 */
//
// index.js - Module definition for BitGoJS
//
// Copyright 2022, BitGo, Inc.  All Rights Reserved.
//
const _ = require("lodash");
const sdk_core_1 = require("@bitgo/sdk-core");
__exportStar(require("@bitgo/sdk-api"), exports);
const utxolib = require("@bitgo/utxo-lib");
const coinFactory_1 = require("./v2/coinFactory");
exports.GlobalCoinFactory = coinFactory_1.default;
__exportStar(require("./bitgo"), exports);
// Expose legacy "bitcoin" API (mostly HDNode)
/** @deprecated */
var sdk_core_2 = require("@bitgo/sdk-core");
Object.defineProperty(exports, "bitcoin", { enumerable: true, get: function () { return sdk_core_2.bitcoin; } });
/** @deprecated */
exports.sjcl = require('@bitgo/sjcl');
var buffer_1 = require("buffer");
Object.defineProperty(exports, "Buffer", { enumerable: true, get: function () { return buffer_1.Buffer; } });
exports.Environments = _.cloneDeep(sdk_core_1.common.Environments);
__exportStar(require("@bitgo/sdk-core"), exports);
__exportStar(require("./v2"), exports);
/**
 * Set the network, i.e. either "bitcoin" for production with real bitcoin, or
 * "testnet" for development with testnet bitcoin.
 *
 * @deprecated
 */
function setNetwork(network) {
    sdk_core_1.common.setNetwork(network);
}
exports.setNetwork = setNetwork;
/**
 * Get the network. Returns either "bitcoin" or "testnet".
 *
 * @deprecated
 */
function getNetwork() {
    return sdk_core_1.common.getNetwork();
}
exports.getNetwork = getNetwork;
/**
 * @deprecated
 */
function getNetworkObj() {
    return utxolib.networks[sdk_core_1.common.getNetwork()];
}
exports.getNetworkObj = getNetworkObj;
setNetwork('testnet');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7R0FFRztBQUNILEVBQUU7QUFDRiwyQ0FBMkM7QUFDM0MsRUFBRTtBQUNGLG9EQUFvRDtBQUNwRCxFQUFFO0FBQ0YsNEJBQTRCO0FBQzVCLDhDQUF5QztBQUN6QyxpREFBK0I7QUFDL0IsMkNBQTJDO0FBQzNDLGtEQUFpRDtBQWV4Qyw0QkFmRixxQkFBaUIsQ0FlRTtBQWIxQiwwQ0FBd0I7QUFFeEIsOENBQThDO0FBQzlDLGtCQUFrQjtBQUNsQiw0Q0FBMEM7QUFBakMsbUdBQUEsT0FBTyxPQUFBO0FBRWhCLGtCQUFrQjtBQUNMLFFBQUEsSUFBSSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUUzQyxpQ0FBZ0M7QUFBdkIsZ0dBQUEsTUFBTSxPQUFBO0FBRUYsUUFBQSxZQUFZLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxpQkFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzdELGtEQUFnQztBQUVoQyx1Q0FBcUI7QUFFckI7Ozs7O0dBS0c7QUFDSCxTQUFnQixVQUFVLENBQUMsT0FBTztJQUNoQyxpQkFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM3QixDQUFDO0FBRkQsZ0NBRUM7QUFFRDs7OztHQUlHO0FBQ0gsU0FBZ0IsVUFBVTtJQUN4QixPQUFPLGlCQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDN0IsQ0FBQztBQUZELGdDQUVDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixhQUFhO0lBQzNCLE9BQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxpQkFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDL0MsQ0FBQztBQUZELHNDQUVDO0FBRUQsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJldHRpZXJcbiAqL1xuLy9cbi8vIGluZGV4LmpzIC0gTW9kdWxlIGRlZmluaXRpb24gZm9yIEJpdEdvSlNcbi8vXG4vLyBDb3B5cmlnaHQgMjAyMiwgQml0R28sIEluYy4gIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgY29tbW9uIH0gZnJvbSAnQGJpdGdvL3Nkay1jb3JlJztcbmV4cG9ydCAqIGZyb20gJ0BiaXRnby9zZGstYXBpJztcbmltcG9ydCAqIGFzIHV0eG9saWIgZnJvbSAnQGJpdGdvL3V0eG8tbGliJztcbmltcG9ydCBHbG9iYWxDb2luRmFjdG9yeSBmcm9tICcuL3YyL2NvaW5GYWN0b3J5JztcblxuZXhwb3J0ICogZnJvbSAnLi9iaXRnbyc7XG5cbi8vIEV4cG9zZSBsZWdhY3kgXCJiaXRjb2luXCIgQVBJIChtb3N0bHkgSEROb2RlKVxuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgeyBiaXRjb2luIH0gZnJvbSAnQGJpdGdvL3Nkay1jb3JlJztcblxuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgY29uc3Qgc2pjbCA9IHJlcXVpcmUoJ0BiaXRnby9zamNsJyk7XG5cbmV4cG9ydCB7IEJ1ZmZlciB9IGZyb20gJ2J1ZmZlcic7XG5cbmV4cG9ydCBjb25zdCBFbnZpcm9ubWVudHMgPSBfLmNsb25lRGVlcChjb21tb24uRW52aXJvbm1lbnRzKTtcbmV4cG9ydCAqIGZyb20gJ0BiaXRnby9zZGstY29yZSc7XG5leHBvcnQgeyBHbG9iYWxDb2luRmFjdG9yeSB9O1xuZXhwb3J0ICogZnJvbSAnLi92Mic7XG5cbi8qKlxuICogU2V0IHRoZSBuZXR3b3JrLCBpLmUuIGVpdGhlciBcImJpdGNvaW5cIiBmb3IgcHJvZHVjdGlvbiB3aXRoIHJlYWwgYml0Y29pbiwgb3JcbiAqIFwidGVzdG5ldFwiIGZvciBkZXZlbG9wbWVudCB3aXRoIHRlc3RuZXQgYml0Y29pbi5cbiAqXG4gKiBAZGVwcmVjYXRlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0TmV0d29yayhuZXR3b3JrKSB7XG4gIGNvbW1vbi5zZXROZXR3b3JrKG5ldHdvcmspO1xufVxuXG4vKipcbiAqIEdldCB0aGUgbmV0d29yay4gUmV0dXJucyBlaXRoZXIgXCJiaXRjb2luXCIgb3IgXCJ0ZXN0bmV0XCIuXG4gKlxuICogQGRlcHJlY2F0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE5ldHdvcmsoKSB7XG4gIHJldHVybiBjb21tb24uZ2V0TmV0d29yaygpO1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXR3b3JrT2JqKCkge1xuICByZXR1cm4gdXR4b2xpYi5uZXR3b3Jrc1tjb21tb24uZ2V0TmV0d29yaygpXTtcbn1cblxuc2V0TmV0d29yaygndGVzdG5ldCcpO1xuIl19